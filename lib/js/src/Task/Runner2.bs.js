// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");

function make(param) {
  var match = $$Promise.pending(undefined);
  return {
          queue: [],
          status: /* Idle */1,
          execute: undefined,
          terminationPromise: match[0],
          terminate: match[1],
          shouldTerminate: false
        };
}

function setup(self, execute) {
  self.execute = execute;
  
}

function run(self) {
  var match = self.status;
  if (!match) {
    return $$Promise.resolved(undefined);
  }
  var nextTasks = self.queue.shift();
  var tmp;
  if (nextTasks !== undefined) {
    self.status = /* Busy */0;
    var execute = self.execute;
    if (execute !== undefined) {
      tmp = $$Promise.flatMap($$Promise.tap(Curry._1(execute, nextTasks), (function (param) {
                  self.status = /* Idle */1;
                  
                })), (function (param) {
              return run(self);
            }));
    } else {
      self.status = /* Idle */1;
      tmp = run(self);
    }
  } else {
    tmp = $$Promise.resolved(undefined);
  }
  return $$Promise.tap(tmp, (function (param) {
                if (self.shouldTerminate) {
                  return Curry._1(self.terminate, undefined);
                }
                
              }));
}

function push(self, x) {
  self.queue.push(x);
  return run(self);
}

function pushMany(self, xs) {
  self.queue = xs.concat(self.queue);
  return run(self);
}

function pushManyToFront(self, xs) {
  self.queue = self.queue.concat(xs);
  return run(self);
}

function interrupt(self, task) {
  var execute = self.execute;
  if (execute !== undefined) {
    return Curry._1(execute, task);
  } else {
    return $$Promise.resolved(undefined);
  }
}

function terminate(self) {
  var match = self.status;
  if (match) {
    return Curry._1(self.terminate, undefined);
  } else {
    self.shouldTerminate = true;
    return ;
  }
}

exports.make = make;
exports.setup = setup;
exports.run = run;
exports.push = push;
exports.pushMany = pushMany;
exports.pushManyToFront = pushManyToFront;
exports.interrupt = interrupt;
exports.terminate = terminate;
/* Promise Not a pure module */
