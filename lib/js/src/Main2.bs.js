// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Vscode = require("vscode");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var IM$AgdaModeVscode = require("./InputMethod/IM.bs.js");
var Chan$AgdaModeVscode = require("./Util/Chan.bs.js");
var State$AgdaModeVscode = require("./State.bs.js");
var Config$AgdaModeVscode = require("./Config.bs.js");
var Editor$AgdaModeVscode = require("./Editor.bs.js");
var Parser$AgdaModeVscode = require("./Parser.bs.js");
var Command$AgdaModeVscode = require("./Command.bs.js");
var Registry2$AgdaModeVscode = require("./Registry2.bs.js");
var Decoration$AgdaModeVscode = require("./Decoration.bs.js");
var Highlighting$AgdaModeVscode = require("./Highlighting.bs.js");
var State__Command$AgdaModeVscode = require("./State/State__Command.bs.js");
var ViewController$AgdaModeVscode = require("./ViewController.bs.js");
var State__InputMethod$AgdaModeVscode = require("./State/State__InputMethod.bs.js");

function isAgda(filepath) {
  var filepath$1 = Parser$AgdaModeVscode.filepath(filepath);
  return /\.agda$|\.lagda/i.test(filepath$1);
}

function onActivateExtension(callback) {
  var visibleCount = Belt_Array.keep(Vscode.window.visibleTextEditors, (function (editor) {
          return isAgda(editor.document.fileName);
        })).length;
  var shouldAcitvateView = visibleCount > 0 && !ViewController$AgdaModeVscode.isActivated(undefined);
  if (shouldAcitvateView) {
    return Curry._1(callback, undefined);
  }
  
}

function onDeactivateExtension(callback) {
  var openedCount = Registry2$AgdaModeVscode.size(undefined);
  var shouldDeacitvateView = openedCount === 0 && ViewController$AgdaModeVscode.isActivated(undefined);
  if (shouldDeacitvateView) {
    return Curry._1(callback, undefined);
  }
  
}

function onOpenEditor(extensionPath, editor) {
  var filePath = editor.document.fileName;
  if (isAgda(filePath)) {
    onActivateExtension(function (param) {
          console.log("CREATE");
          return ViewController$AgdaModeVscode.activate(extensionPath);
        });
    return Belt_Option.forEach(Registry2$AgdaModeVscode.get(filePath), (function (state) {
                  state.editor = editor;
                  state.document = editor.document;
                  State__Command$AgdaModeVscode.dispatchCommand(state, /* Refresh */3);
                  
                }));
  }
  
}

function onCloseEditor(doc) {
  var filePath = doc.fileName;
  if (isAgda(filePath)) {
    Registry2$AgdaModeVscode.destroy(filePath);
    return onDeactivateExtension(function (param) {
                return ViewController$AgdaModeVscode.deactivate(undefined);
              });
  }
  
}

var EventHandler = {
  onActivateExtension: onActivateExtension,
  onDeactivateExtension: onDeactivateExtension,
  onOpenEditor: onOpenEditor,
  onCloseEditor: onCloseEditor
};

function makeAndAddToRegistry(debugChan, editor, fileName) {
  var state = State$AgdaModeVscode.make(debugChan, editor);
  var subscribe = function (disposable) {
    state.subscriptions.push(disposable);
    
  };
  subscribe(ViewController$AgdaModeVscode.onEvent(function ($$event) {
            State__Command$AgdaModeVscode.dispatchCommand(state, {
                  TAG: 8,
                  _0: $$event,
                  [Symbol.for("name")]: "EventFromView"
                });
            
          }));
  subscribe(Vscode.window.onDidChangeTextEditorSelection(function ($$event) {
            var $$document = editor.document;
            var intervals = Belt_Array.map($$event.selections, (function (selection) {
                    return [
                            Editor$AgdaModeVscode.Position.toOffset($$document, selection.start),
                            Editor$AgdaModeVscode.Position.toOffset($$document, selection.end)
                          ];
                  }));
            State__InputMethod$AgdaModeVscode.select(state, intervals);
            
          }));
  subscribe(Vscode.workspace.onDidChangeTextDocument(function ($$event) {
            var changes = IM$AgdaModeVscode.Input.fromTextDocumentChangeEvent(editor, $$event);
            State__InputMethod$AgdaModeVscode.keyUpdateEditorIM(state, changes);
            
          }));
  $$Promise.get(Chan$AgdaModeVscode.once(state.onRemoveFromRegistry), (function (param) {
          return Registry2$AgdaModeVscode.destroy(fileName);
        }));
  subscribe(Editor$AgdaModeVscode.Provider.registerDefinitionProvider(function (fileName, position) {
            var currentFileName = Parser$AgdaModeVscode.filepath(state.document.fileName);
            if (fileName === currentFileName) {
              return Decoration$AgdaModeVscode.lookupSrcLoc(state.decoration, position);
            }
            
          }));
  subscribe(Editor$AgdaModeVscode.Provider.registerHoverProvider(function (fileName, point) {
            var currentFileName = Parser$AgdaModeVscode.filepath(state.document.fileName);
            if (fileName !== currentFileName) {
              return ;
            }
            var range = new Vscode.Range(point, point);
            return Caml_option.some($$Promise.resolved([
                            [""],
                            range
                          ]));
          }));
  var tokenTypes = Highlighting$AgdaModeVscode.Aspect.TokenType.enumurate;
  var tokenModifiers = Highlighting$AgdaModeVscode.Aspect.TokenModifier.enumurate;
  subscribe(Editor$AgdaModeVscode.Provider.registerSemnaticTokenProvider((function (fileName, pushToken) {
              var useSemanticHighlighting = Config$AgdaModeVscode.getSemanticHighlighting(undefined);
              var $$document = editor.document;
              var currentFileName = Parser$AgdaModeVscode.filepath($$document.fileName);
              if (useSemanticHighlighting && fileName === currentFileName) {
                return Caml_option.some(Decoration$AgdaModeVscode.generateSemanticTokens(state.decoration, state.editor, pushToken));
              }
              
            }), [
            tokenTypes,
            tokenModifiers
          ]));
  return Registry2$AgdaModeVscode.add(fileName, state);
}

function activateWithoutContext(subscriptions, extensionPath) {
  Belt_Option.forEach(Vscode.window.activeTextEditor, (function (param) {
          return onOpenEditor(extensionPath, param);
        }));
  var x = Vscode.window.onDidChangeActiveTextEditor(function (next) {
        return Belt_Option.forEach(next, (function (param) {
                      return onOpenEditor(extensionPath, param);
                    }));
      });
  subscriptions.push(x);
  var x$1 = Vscode.workspace.onDidCloseTextDocument(onCloseEditor);
  subscriptions.push(x$1);
  var registerCommand = function (name, callback) {
    return Vscode.commands.registerCommand("agda-mode." + name, (function (param) {
                  return Belt_Option.map(Vscode.window.activeTextEditor, (function (editor) {
                                var fileName = Parser$AgdaModeVscode.filepath(editor.document.fileName);
                                return Curry._2(callback, editor, fileName);
                              }));
                }));
  };
  var debugChan = Chan$AgdaModeVscode.make(undefined);
  Belt_Array.forEach(Command$AgdaModeVscode.names, (function (param) {
          var name = param[1];
          var command = param[0];
          var x = registerCommand(name, (function (editor, fileName) {
                  if (!isAgda(fileName)) {
                    return $$Promise.resolved(undefined);
                  }
                  console.log("[ command ] " + name);
                  var tmp;
                  var exit = 0;
                  if (typeof command === "number") {
                    switch (command) {
                      case /* Load */0 :
                          exit = 1;
                          break;
                      case /* Quit */1 :
                          tmp = $$Promise.resolved(Registry2$AgdaModeVscode.destroy(fileName));
                          break;
                      case /* Restart */2 :
                          Registry2$AgdaModeVscode.destroy(fileName);
                          tmp = $$Promise.resolved(makeAndAddToRegistry(debugChan, editor, fileName));
                          break;
                      default:
                        tmp = $$Promise.resolved(undefined);
                    }
                  } else if (command.TAG === /* InputMethod */13) {
                    var match = command._0;
                    if (typeof match === "number" && match === 0) {
                      exit = 1;
                    } else {
                      tmp = $$Promise.resolved(undefined);
                    }
                  } else {
                    tmp = $$Promise.resolved(undefined);
                  }
                  if (exit === 1) {
                    var match$1 = Registry2$AgdaModeVscode.get(fileName);
                    if (match$1 !== undefined) {
                      
                    } else {
                      makeAndAddToRegistry(debugChan, editor, fileName);
                    }
                    tmp = $$Promise.resolved(undefined);
                  }
                  return $$Promise.flatMap(tmp, (function (param) {
                                var state = Registry2$AgdaModeVscode.get(fileName);
                                if (state !== undefined) {
                                  return State__Command$AgdaModeVscode.dispatchCommand(state, command);
                                } else {
                                  return $$Promise.resolved(undefined);
                                }
                              }));
                }));
          subscriptions.push(x);
          
        }));
  return debugChan;
}

function activate(context) {
  var subscriptions = context.subscriptions;
  var extensionPath = context.extensionPath;
  return activateWithoutContext(subscriptions, extensionPath);
}

function deactivate(param) {
  
}

exports.isAgda = isAgda;
exports.EventHandler = EventHandler;
exports.makeAndAddToRegistry = makeAndAddToRegistry;
exports.activateWithoutContext = activateWithoutContext;
exports.activate = activate;
exports.deactivate = deactivate;
/* vscode Not a pure module */
