// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Vscode = require("vscode");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Mocha$BsMocha = require("bs-mocha/lib/js/src/Mocha.bs.js");
var Assert$BsMocha = require("bs-mocha/lib/js/src/Assert.bs.js");
var Chan$AgdaModeVscode = require("../../src/Util/Chan.bs.js");
var Goal$AgdaModeVscode = require("../../src/Goal.bs.js");
var Config$AgdaModeVscode = require("../../src/Config.bs.js");
var Editor$AgdaModeVscode = require("../../src/Editor.bs.js");
var Test__Util$AgdaModeVscode = require("./Test__Util.bs.js");
var State__Goal$AgdaModeVscode = require("../../src/State/State__Goal.bs.js");
var Connection__Error$AgdaModeVscode = require("../../src/Connection/Connection__Error.bs.js");

Mocha$BsMocha.describe("Dry run State__Goal.caseSplitAux")(undefined, undefined, undefined, (function (param) {
        return Test__Util$AgdaModeVscode.Q.it("should calculate the infomation needed for case splitting correctly", (function (param) {
                      return $$Promise.flatMap(Vscode.window.showTextDocument(Vscode.Uri.file(Test__Util$AgdaModeVscode.Path.asset("CaseSplit.agda")), undefined), (function (editor) {
                                    var $$document = editor.document;
                                    return $$Promise.map($$Promise.map(Goal$AgdaModeVscode.makeMany(editor, [
                                                        0,
                                                        1,
                                                        2,
                                                        3,
                                                        4,
                                                        5,
                                                        6,
                                                        7,
                                                        8
                                                      ]), (function (goals) {
                                                      return Belt_Array.map(goals, (function (goal) {
                                                                    var match = State__Goal$AgdaModeVscode.caseSplitAux($$document, goal);
                                                                    var rewriteRange = match[2];
                                                                    var rewriteRange$1 = new Vscode.Range($$document.positionAt(rewriteRange[0]), $$document.positionAt(rewriteRange[1]));
                                                                    return [
                                                                            match[0],
                                                                            match[1],
                                                                            Editor$AgdaModeVscode.$$Text.get($$document, rewriteRange$1)
                                                                          ];
                                                                  }));
                                                    })), (function (results) {
                                                  return {
                                                          TAG: 0,
                                                          _0: Assert$BsMocha.deep_equal(undefined, results, [
                                                                [
                                                                  false,
                                                                  9,
                                                                  "x → {!   !}"
                                                                ],
                                                                [
                                                                  false,
                                                                  23,
                                                                  "y → {!   !}"
                                                                ],
                                                                [
                                                                  false,
                                                                  4,
                                                                  "x → {!   !}"
                                                                ],
                                                                [
                                                                  false,
                                                                  4,
                                                                  "y → {!   !}"
                                                                ],
                                                                [
                                                                  true,
                                                                  13,
                                                                  "x → {!   !}"
                                                                ],
                                                                [
                                                                  true,
                                                                  13,
                                                                  "y → {!   !}"
                                                                ],
                                                                [
                                                                  true,
                                                                  2,
                                                                  "x → {!   !}"
                                                                ],
                                                                [
                                                                  true,
                                                                  2,
                                                                  "y → {!   !}"
                                                                ],
                                                                [
                                                                  false,
                                                                  13,
                                                                  "x → {!   !}"
                                                                ]
                                                              ]),
                                                          [Symbol.for("name")]: "Ok"
                                                        };
                                                }));
                                  }));
                    }));
      }));

Mocha$BsMocha.describe("Integration test")(undefined, undefined, undefined, (function (param) {
        var channels = {
          contents: undefined
        };
        var acquire = function (filepath) {
          var channels$1 = channels.contents;
          if (channels$1 === undefined) {
            return Test__Util$AgdaModeVscode.A.fail("Cannot activate the extension");
          }
          var match = $$Promise.pending(undefined);
          var resolve = match[1];
          var promise = match[0];
          var disposable = Chan$AgdaModeVscode.on(channels$1.responseHandled, (function (response) {
                  if (typeof response === "number" && response >= 4) {
                    return Curry._1(resolve, undefined);
                  }
                  
                }));
          var filepath$1 = Test__Util$AgdaModeVscode.Path.asset(filepath);
          return $$Promise.flatMap($$Promise.flatMap($$Promise.flatMap($$Promise.flatMap(Test__Util$AgdaModeVscode.openFile(filepath$1), (function (param) {
                                    return Vscode.commands.executeCommand("agda-mode.load");
                                  })), (function (result) {
                                if (result === undefined) {
                                  return Test__Util$AgdaModeVscode.A.fail("Cannot load " + filepath$1);
                                }
                                if (result.TAG === /* Ok */0) {
                                  var state = result._0;
                                  return $$Promise.map(promise, (function (param) {
                                                Curry._1(disposable, undefined);
                                                return {
                                                        TAG: 0,
                                                        _0: state,
                                                        [Symbol.for("name")]: "Ok"
                                                      };
                                              }));
                                }
                                var match = Connection__Error$AgdaModeVscode.toString(result._0);
                                return Test__Util$AgdaModeVscode.A.fail(match[0] + "\n" + match[1]);
                              })), (function (param) {
                            return Vscode.commands.executeCommand("agda-mode.case");
                          })), (function (result) {
                        if (result === undefined) {
                          return Test__Util$AgdaModeVscode.A.fail("Cannot case split " + filepath$1);
                        }
                        if (result.TAG === /* Ok */0) {
                          var state = result._0;
                          return $$Promise.map(promise, (function (param) {
                                        Curry._1(disposable, undefined);
                                        return {
                                                TAG: 0,
                                                _0: state,
                                                [Symbol.for("name")]: "Ok"
                                              };
                                      }));
                        }
                        var match = Connection__Error$AgdaModeVscode.toString(result._0);
                        return Test__Util$AgdaModeVscode.A.fail(match[0] + "\n" + match[1]);
                      }));
        };
        Test__Util$AgdaModeVscode.Q.before(function (param) {
              Config$AgdaModeVscode.inTestingMode.contents = true;
              return $$Promise.tap($$Promise.flatMap($$Promise.flatMap(Config$AgdaModeVscode.Connection.setAgdaVersion("agda"), (function (param) {
                                    return Config$AgdaModeVscode.Connection.setUseAgdaLanguageServer(false);
                                  })), (function (param) {
                                return Test__Util$AgdaModeVscode.Agda.exists("agda");
                              })), (function (param) {
                            channels.contents = Test__Util$AgdaModeVscode.activateExtension(undefined);
                            
                          }));
            });
        return Test__Util$AgdaModeVscode.Q.it("should calculate the infomation needed for case splitting correctly", (function (param) {
                      return $$Promise.mapOk(acquire("CaseSplit.agda"), (function (state) {
                                    var results = Belt_Array.map(state.goals, (function (goal) {
                                            var match = State__Goal$AgdaModeVscode.caseSplitAux(state.document, goal);
                                            var rewriteRange = match[2];
                                            var rewriteRange$1 = new Vscode.Range(state.document.positionAt(rewriteRange[0]), state.document.positionAt(rewriteRange[1]));
                                            return [
                                                    match[0],
                                                    match[1],
                                                    Editor$AgdaModeVscode.$$Text.get(state.document, rewriteRange$1)
                                                  ];
                                          }));
                                    return Assert$BsMocha.deep_equal(undefined, results, [
                                                [
                                                  false,
                                                  9,
                                                  "x → {!   !}"
                                                ],
                                                [
                                                  false,
                                                  23,
                                                  "y → {!   !}"
                                                ],
                                                [
                                                  false,
                                                  4,
                                                  "x → {!   !}"
                                                ],
                                                [
                                                  false,
                                                  4,
                                                  "y → {!   !}"
                                                ],
                                                [
                                                  true,
                                                  13,
                                                  "x → {!   !}"
                                                ],
                                                [
                                                  true,
                                                  13,
                                                  "y → {!   !}"
                                                ],
                                                [
                                                  true,
                                                  2,
                                                  "x → {!   !}"
                                                ],
                                                [
                                                  true,
                                                  2,
                                                  "y → {!   !}"
                                                ],
                                                [
                                                  false,
                                                  13,
                                                  "x → {!   !}"
                                                ]
                                              ]);
                                  }));
                    }));
      }));

/*  Not a pure module */
