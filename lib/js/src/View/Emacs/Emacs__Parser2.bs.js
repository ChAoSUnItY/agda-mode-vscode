// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var View$AgdaModeVscode = require("../../View.bs.js");
var Component$AgdaModeVscode = require("../Component/Component.bs.js");
var Emacs__Parser$AgdaModeVscode = require("./Emacs__Parser.bs.js");

function partiteMetas(xs) {
  return Emacs__Parser$AgdaModeVscode.Dict.split(xs, "metas", (function (rawMetas) {
                var metas = Emacs__Parser$AgdaModeVscode.unindent(rawMetas);
                var indexOfHiddenMetas = Belt_Array.getIndexBy(metas, (function (s) {
                        return Belt_Option.isSome(Curry._1(Component$AgdaModeVscode.Output.parseOutputWithRange, s));
                      }));
                return Emacs__Parser$AgdaModeVscode.Dict.partite(metas, (function (param) {
                              var i = param[1];
                              if (indexOfHiddenMetas !== undefined) {
                                if (i === indexOfHiddenMetas) {
                                  return "hiddenMetas";
                                } else if (i === 0) {
                                  return "interactionMetas";
                                } else {
                                  return ;
                                }
                              } else if (i === 0) {
                                return "interactionMetas";
                              } else {
                                return ;
                              }
                            }));
              }));
}

function partiteWarningsOrErrors(xs, key) {
  return Emacs__Parser$AgdaModeVscode.Dict.update(xs, key, (function (raw) {
                var partial_arg = /^\u2014{4}/;
                var hasDelimeter = Belt_Option.isSome(Belt_Option.flatMap(Belt_Array.get(raw, 0), (function (param) {
                            return Caml_option.null_to_opt(param.match(partial_arg));
                          })));
                var lines = hasDelimeter ? raw.slice(1) : raw;
                var markWarningStart = function (line) {
                  return Belt_Option.isSome(Curry._1(View$AgdaModeVscode.$$Range.parse, line));
                };
                var glueBack = function (xs) {
                  var partial_arg = /at$/;
                  return Belt_Option.isSome(Belt_Option.flatMap(Belt_Array.get(xs, xs.length - 1 | 0), (function (param) {
                                    return Caml_option.null_to_opt(param.match(partial_arg));
                                  })));
                };
                return Belt_Array.map(Emacs__Parser$AgdaModeVscode.Array_.mergeWithNext(Emacs__Parser$AgdaModeVscode.Array_.partite(lines, markWarningStart), glueBack), (function (param) {
                              return param.join("\n");
                            }));
              }));
}

exports.partiteMetas = partiteMetas;
exports.partiteWarningsOrErrors = partiteWarningsOrErrors;
/* View-AgdaModeVscode Not a pure module */
