// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var IM$AgdaModeVscode = require("./InputMethod/IM.bs.js");
var Chan$AgdaModeVscode = require("./Util/Chan.bs.js");
var Goal$AgdaModeVscode = require("./Goal.bs.js");
var Config$AgdaModeVscode = require("./Config.bs.js");
var Tokens$AgdaModeVscode = require("./Tokens.bs.js");
var Connection$AgdaModeVscode = require("./Connection/Connection.bs.js");
var State__Type$AgdaModeVscode = require("./State/State__Type.bs.js");
var State__View$AgdaModeVscode = require("./State/State__View.bs.js");
var Highlighting$AgdaModeVscode = require("./Highlighting.bs.js");

function onDownload(state, $$event) {
  if (typeof $$event === "number") {
    if ($$event !== 0) {
      State__View$AgdaModeVscode.Panel.displayStatus(state, "Downloaded");
    } else {
      State__View$AgdaModeVscode.Panel.displayStatus(state, "Start downloading");
    }
    return ;
  }
  var total = $$event._1;
  var accum = $$event._0;
  var message = total > 10485760 ? "Downloading ( " + String(accum / 1048576 | 0) + " MB / " + String(total / 1048576 | 0) + " MB )" : "Downloading ( " + String(accum / 1024 | 0) + " KB / " + String(total / 1024 | 0) + " MB )";
  State__View$AgdaModeVscode.Panel.displayStatus(state, message);
}

function sendRequest(state, handleResponse, request) {
  return State__Type$AgdaModeVscode.RequestQueue.push(state.agdaRequestQueue, (function (request) {
                var onResponse = function (result) {
                  if (result.TAG === /* Ok */0) {
                    return $$Promise.flatMap(Curry._1(handleResponse, result._0), (function (result) {
                                  if (result.TAG === /* Ok */0) {
                                    return $$Promise.resolved(undefined);
                                  } else {
                                    return State__View$AgdaModeVscode.Panel.displayConnectionError(state, result._0);
                                  }
                                }));
                  } else {
                    return State__View$AgdaModeVscode.Panel.displayConnectionError(state, result._0);
                  }
                };
                return $$Promise.flatMap(Connection$AgdaModeVscode.sendRequest(state.globalStoragePath, (function (param) {
                                  return onDownload(state, param);
                                }), Config$AgdaModeVscode.Connection.getUseAgdaLanguageServer(undefined), state.document, request, onResponse), (function (result) {
                              if (result.TAG === /* Ok */0) {
                                return $$Promise.map(State__View$AgdaModeVscode.Panel.displayConnectionStatus(state, result._0), (function (param) {
                                              return {
                                                      TAG: 0,
                                                      _0: undefined,
                                                      [Symbol.for("name")]: "Ok"
                                                    };
                                            }));
                              }
                              var error = result._0;
                              return $$Promise.map(State__View$AgdaModeVscode.Panel.displayConnectionError(state, error), (function (param) {
                                            return {
                                                    TAG: 1,
                                                    _0: error,
                                                    [Symbol.for("name")]: "Error"
                                                  };
                                          }));
                            }));
              }), request);
}

function destroy(state, alsoRemoveFromRegistry) {
  if (alsoRemoveFromRegistry) {
    Chan$AgdaModeVscode.emit(state.onRemoveFromRegistry, undefined);
  }
  Chan$AgdaModeVscode.destroy(state.onRemoveFromRegistry);
  Belt_Array.forEach(state.goals, Goal$AgdaModeVscode.destroy);
  Highlighting$AgdaModeVscode.destroy(state.highlighting);
  Belt_Array.forEach(state.subscriptions, (function (prim) {
          return prim.dispose();
        }));
  return Connection$AgdaModeVscode.stop(undefined);
}

function make(channels, globalStoragePath, extensionPath, editor) {
  return {
          editor: editor,
          document: editor.document,
          panelCache: State__Type$AgdaModeVscode.ViewCache.make(undefined),
          runningInfoLog: [],
          goals: [],
          tokens: Tokens$AgdaModeVscode.make(undefined),
          highlighting: Highlighting$AgdaModeVscode.make(undefined),
          cursor: undefined,
          editorIM: IM$AgdaModeVscode.make(channels.inputMethod),
          promptIM: IM$AgdaModeVscode.make(channels.inputMethod),
          subscriptions: [],
          onRemoveFromRegistry: Chan$AgdaModeVscode.make(undefined),
          agdaRequestQueue: State__Type$AgdaModeVscode.RequestQueue.make(undefined),
          globalStoragePath: globalStoragePath,
          extensionPath: extensionPath,
          channels: channels
        };
}

var View;

var Context;

exports.View = View;
exports.Context = Context;
exports.onDownload = onDownload;
exports.sendRequest = sendRequest;
exports.destroy = destroy;
exports.make = make;
/* Promise Not a pure module */
