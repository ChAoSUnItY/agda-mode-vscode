// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Vscode = require("vscode");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Parser$AgdaModeVscode = require("./Parser.bs.js");

function setAgdaVersion(path) {
  return Vscode.workspace.getConfiguration("agdaMode", undefined).update("agdaVersion", path, 1, undefined);
}

function getAgdaVersion(param) {
  return Belt_Option.getWithDefault(Belt_Option.flatMap(Belt_Option.map(Vscode.workspace.getConfiguration("agdaMode", undefined).get("agdaVersion"), (function (prim) {
                        return prim.trim();
                      })), (function (s) {
                    if (s === "") {
                      return ;
                    } else {
                      return s;
                    }
                  })), "agda");
}

function setAgdaPath(path) {
  return Vscode.workspace.getConfiguration("agdaMode", undefined).update("agdaPath", path, 1, undefined);
}

function getAgdaPath(param) {
  return Belt_Option.mapWithDefault(Vscode.workspace.getConfiguration("agdaMode", undefined).get("agdaPath"), "", (function (prim) {
                return prim.trim();
              }));
}

function useAgdaLanguageServer(param) {
  var raw = Vscode.workspace.getConfiguration("agdaMode", undefined).get("agdaLanguageServer");
  if (raw !== undefined && raw) {
    return true;
  } else {
    return false;
  }
}

function setPanelMountingPosition(mountAt) {
  return Vscode.workspace.getConfiguration("agdaMode", undefined).update("panelMountPosition", mountAt ? "right" : "bottom", 1, undefined);
}

function getPanelMountingPosition(param) {
  var result = Vscode.workspace.getConfiguration("agdaMode", undefined).get("panelMountPosition");
  if (result === "right") {
    return /* Right */1;
  } else {
    return /* Bottom */0;
  }
}

function getLibraryPath(param) {
  var raw = Belt_Option.getWithDefault(Vscode.workspace.getConfiguration("agdaMode", undefined).get("libraryPath"), "");
  return Belt_Array.map(Belt_Array.keep(raw.split(","), (function (x) {
                    return x !== "";
                  })), Parser$AgdaModeVscode.filepath);
}

function getHighlightingMethod(param) {
  var raw = Vscode.workspace.getConfiguration("agdaMode", undefined).get("highlighting.IPC");
  if (raw === "Standard input/output") {
    return true;
  } else {
    return false;
  }
}

function getSemanticHighlighting(param) {
  var raw = Vscode.workspace.getConfiguration("agdaMode", undefined).get("highlighting.semanticToken");
  if (raw !== undefined && raw) {
    return true;
  } else {
    return false;
  }
}

function getBackend(param) {
  var raw = Vscode.workspace.getConfiguration("agdaMode", undefined).get("backend");
  if (raw === undefined) {
    return "GHCNoMain";
  }
  switch (raw) {
    case "GHC" :
        return "GHCNoMain";
    case "LaTeX" :
        return "LaTeX";
    case "QuickLaTeX" :
        return "QuickLaTeX";
    default:
      return "GHCNoMain";
  }
}

var VSRange;

exports.VSRange = VSRange;
exports.setAgdaVersion = setAgdaVersion;
exports.getAgdaVersion = getAgdaVersion;
exports.setAgdaPath = setAgdaPath;
exports.getAgdaPath = getAgdaPath;
exports.useAgdaLanguageServer = useAgdaLanguageServer;
exports.setPanelMountingPosition = setPanelMountingPosition;
exports.getPanelMountingPosition = getPanelMountingPosition;
exports.getLibraryPath = getLibraryPath;
exports.getHighlightingMethod = getHighlightingMethod;
exports.getSemanticHighlighting = getSemanticHighlighting;
exports.getBackend = getBackend;
/* vscode Not a pure module */
