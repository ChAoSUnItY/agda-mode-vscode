// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Vscode = require("vscode");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Chan$AgdaModeVscode = require("./Util/Chan.bs.js");
var Goal$AgdaModeVscode = require("./Goal.bs.js");
var Config$AgdaModeVscode = require("./Config.bs.js");
var EditorIM$AgdaModeVscode = require("./InputMethod/EditorIM.bs.js");
var Connection$AgdaModeVscode = require("./Connection.bs.js");
var Decoration$AgdaModeVscode = require("./Decoration.bs.js");
var View__Controller$AgdaModeVscode = require("./View__Controller.bs.js");

function getEditor(state) {
  return state.editor;
}

function onRemoveFromRegistry(state) {
  return Chan$AgdaModeVscode.once(state.onRemoveFromRegistry);
}

function emitRemoveFromRegistry(state) {
  return Chan$AgdaModeVscode.emit(state.onRemoveFromRegistry, undefined);
}

function connect(state) {
  var connection = state.connection;
  if (connection !== undefined) {
    return $$Promise.resolved({
                TAG: 0,
                _0: connection,
                [Symbol.for("name")]: "Ok"
              });
  } else {
    return $$Promise.tapOk($$Promise.mapError(Connection$AgdaModeVscode.make(Config$AgdaModeVscode.getAgdaPath, Config$AgdaModeVscode.setAgdaPath), (function (e) {
                      return {
                              TAG: 0,
                              _0: e,
                              [Symbol.for("name")]: "Connection"
                            };
                    })), (function (conn) {
                  state.connection = conn;
                  
                }));
  }
}

function disconnect(state) {
  var connection = state.connection;
  if (connection !== undefined) {
    Connection$AgdaModeVscode.destroy(connection);
    return $$Promise.resolved(undefined);
  } else {
    return $$Promise.resolved(undefined);
  }
}

function setLoaded(value) {
  Vscode.commands.executeCommand("setContext", "agdaMode", value);
  
}

function destroy(state) {
  View__Controller$AgdaModeVscode.destroy(state.view);
  Chan$AgdaModeVscode.destroy(state.onRemoveFromRegistry);
  Belt_Array.forEach(state.goals, Goal$AgdaModeVscode.destroy);
  Decoration$AgdaModeVscode.destroy(state.decorations);
  Vscode.commands.executeCommand("setContext", "agdaMode", false);
  Belt_Array.forEach(state.subscriptions, (function (prim) {
          return prim.dispose();
        }));
  return disconnect(state);
}

function make(extentionPath, chan, editor) {
  Vscode.commands.executeCommand("setContext", "agdaMode", true);
  var view = View__Controller$AgdaModeVscode.make(extentionPath, editor);
  return {
          editor: editor,
          view: view,
          connection: undefined,
          goals: [],
          decorations: Decoration$AgdaModeVscode.make(undefined),
          cursor: undefined,
          editorIM: EditorIM$AgdaModeVscode.make(chan),
          promptIM: EditorIM$AgdaModeVscode.make(chan),
          subscriptions: [],
          onRemoveFromRegistry: Chan$AgdaModeVscode.make(undefined)
        };
}

function show(state) {
  View__Controller$AgdaModeVscode.show(state.view);
  Vscode.commands.executeCommand("setContext", "agdaMode", true);
  
}

function hide(state) {
  View__Controller$AgdaModeVscode.hide(state.view);
  Vscode.commands.executeCommand("setContext", "agdaMode", false);
  
}

function sendRequestToView(state, request) {
  return View__Controller$AgdaModeVscode.send(state.view, {
              TAG: 0,
              _0: request,
              [Symbol.for("name")]: "Request"
            });
}

function sendEventToView(state, $$event) {
  return View__Controller$AgdaModeVscode.send(state.view, {
              TAG: 1,
              _0: $$event,
              [Symbol.for("name")]: "Event"
            });
}

exports.getEditor = getEditor;
exports.onRemoveFromRegistry = onRemoveFromRegistry;
exports.emitRemoveFromRegistry = emitRemoveFromRegistry;
exports.connect = connect;
exports.disconnect = disconnect;
exports.setLoaded = setLoaded;
exports.destroy = destroy;
exports.make = make;
exports.show = show;
exports.hide = hide;
exports.sendRequestToView = sendRequestToView;
exports.sendEventToView = sendEventToView;
/* vscode Not a pure module */
