// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Goal$AgdaModeVscode = require("./Goal.bs.js");
var Util$AgdaModeVscode = require("./Util/Util.bs.js");
var Parser$AgdaModeVscode = require("./Parser.bs.js");
var Command$AgdaModeVscode = require("./Command.bs.js");

function toString(x) {
  if (typeof x === "number") {
    switch (x) {
      case /* Load */0 :
          return "Load";
      case /* Compile */1 :
          return "Compile";
      case /* ToggleDisplayOfImplicitArguments */2 :
          return "ToggleDisplayOfImplicitArguments";
      case /* ShowConstraints */3 :
          return "ShowConstraints";
      case /* ShowGoals */4 :
          return "ShowGoals";
      
    }
  } else {
    switch (x.TAG | 0) {
      case /* SolveConstraints */0 :
          return "SolveConstraints";
      case /* SolveConstraintsGlobal */1 :
          return "SolveConstraintsGlobal";
      case /* SearchAbout */2 :
          return "SearchAbout";
      case /* Give */3 :
          return "Give";
      case /* Refine */4 :
          return "Refine";
      case /* ElaborateAndGive */5 :
          return "ElaborateAndGive";
      case /* Auto */6 :
          return "Auto";
      case /* Case */7 :
          return "Case";
      case /* HelperFunctionType */8 :
          return "HelperFunctionType";
      case /* InferType */9 :
          return "InferType";
      case /* InferTypeGlobal */10 :
          return "InferTypeGlobal";
      case /* Context */11 :
          return "Context";
      case /* GoalType */12 :
          return "GoalType";
      case /* GoalTypeAndContext */13 :
          return "GoalTypeAndContext";
      case /* GoalTypeContextAndInferredType */14 :
          return "GoalTypeContextAndInferredType";
      case /* GoalTypeContextAndCheckedType */15 :
          return "GoalTypeContextAndCheckedType";
      case /* ModuleContents */16 :
          return "ModuleContents";
      case /* ModuleContentsGlobal */17 :
          return "ModuleContentsGlobal";
      case /* ComputeNormalForm */18 :
          return "ComputeNormalForm";
      case /* ComputeNormalFormGlobal */19 :
          return "ComputeNormalFormGlobal";
      case /* WhyInScope */20 :
          return "WhyInScope";
      case /* WhyInScopeGlobal */21 :
          return "WhyInScopeGlobal";
      
    }
  }
}

function encode($$document, version, filepath, backend, libraryPath, highlightingMethod, request) {
  libraryPath.unshift(".");
  var libraryPath$1 = Belt_Array.map(libraryPath, (function (x) {
            return "\"" + (Parser$AgdaModeVscode.filepath(x) + "\"");
          })).join(", ");
  var highlightingMethod$1 = highlightingMethod ? "Direct" : "Indirect";
  var commonPart = function (level) {
    var level$1;
    switch (level) {
      case /* None */0 :
          level$1 = "None";
          break;
      case /* NonInteractive */1 :
          level$1 = "NonInteractive";
          break;
      case /* Interactive */2 :
          level$1 = "Interactive";
          break;
      
    }
    return "IOTCM \"" + (filepath + ("\" " + (level$1 + (" " + highlightingMethod$1))));
  };
  var buildRange = function (goal) {
    return Goal$AgdaModeVscode.buildHaskellRange(goal, $$document, version, filepath);
  };
  if (typeof request === "number") {
    switch (request) {
      case /* Load */0 :
          if (Util$AgdaModeVscode.Version.gte(version, "2.5.0")) {
            return commonPart(/* NonInteractive */1) + ("( Cmd_load \"" + filepath + "\" [] )");
          } else {
            return commonPart(/* NonInteractive */1) + ("( Cmd_load \"" + filepath + "\" [" + libraryPath$1 + "] )");
          }
      case /* Compile */1 :
          if (Util$AgdaModeVscode.Version.gte(version, "2.5.0")) {
            return commonPart(/* NonInteractive */1) + ("( Cmd_compile " + backend + " \"" + filepath + "\" [] )");
          } else {
            return commonPart(/* NonInteractive */1) + ("( Cmd_compile " + backend + " \"" + filepath + "\" [" + libraryPath$1 + "] )");
          }
      case /* ToggleDisplayOfImplicitArguments */2 :
          return commonPart(/* NonInteractive */1) + "( ToggleImplicitArgs )";
      case /* ShowConstraints */3 :
          return commonPart(/* NonInteractive */1) + "( Cmd_constraints )";
      case /* ShowGoals */4 :
          return commonPart(/* NonInteractive */1) + "( Cmd_metas )";
      
    }
  } else {
    switch (request.TAG | 0) {
      case /* SolveConstraints */0 :
          var normalization = Command$AgdaModeVscode.Normalization.encode(request._0);
          var index = String(request._1.index);
          return commonPart(/* NonInteractive */1) + ("( Cmd_solveOne " + normalization + " " + index + " noRange \"\" )");
      case /* SolveConstraintsGlobal */1 :
          var normalization$1 = Command$AgdaModeVscode.Normalization.encode(request._0);
          return commonPart(/* NonInteractive */1) + ("( Cmd_solveAll " + normalization$1 + " )");
      case /* SearchAbout */2 :
          var normalization$2 = Command$AgdaModeVscode.Normalization.encode(request._0);
          var content = Parser$AgdaModeVscode.userInput(request._1);
          return commonPart(/* NonInteractive */1) + ("( Cmd_search_about_toplevel " + normalization$2 + " \"" + content + "\" )");
      case /* Give */3 :
          var goal = request._0;
          var index$1 = String(goal.index);
          var content$1 = Goal$AgdaModeVscode.getContent(goal, $$document);
          var range = buildRange(goal);
          if (Util$AgdaModeVscode.Version.gte(version, "2.5.3")) {
            return commonPart(/* NonInteractive */1) + ("( Cmd_give WithoutForce " + index$1 + " " + range + " \"" + content$1 + "\" )");
          } else {
            return commonPart(/* NonInteractive */1) + ("( Cmd_give " + index$1 + " " + range + " \"" + content$1 + "\" )");
          }
      case /* Refine */4 :
          var goal$1 = request._0;
          var index$2 = String(goal$1.index);
          var content$2 = Goal$AgdaModeVscode.getContent(goal$1, $$document);
          var range$1 = buildRange(goal$1);
          return commonPart(/* NonInteractive */1) + ("( Cmd_refine_or_intro False " + index$2 + " " + range$1 + " \"" + content$2 + "\" )");
      case /* ElaborateAndGive */5 :
          var index$3 = String(request._2.index);
          var normalization$3 = Command$AgdaModeVscode.Normalization.encode(request._0);
          var content$3 = Parser$AgdaModeVscode.userInput(request._1);
          return commonPart(/* NonInteractive */1) + ("( Cmd_elaborate_give " + normalization$3 + " " + index$3 + " noRange \"" + content$3 + "\" )");
      case /* Auto */6 :
          var goal$2 = request._0;
          var index$4 = String(goal$2.index);
          var content$4 = Goal$AgdaModeVscode.getContent(goal$2, $$document);
          var range$2 = buildRange(goal$2);
          if (Util$AgdaModeVscode.Version.gte(version, "2.6.0.1")) {
            return commonPart(/* NonInteractive */1) + ("( Cmd_autoOne " + index$4 + " " + range$2 + " \"" + content$4 + "\" )");
          } else {
            return commonPart(/* NonInteractive */1) + ("( Cmd_auto " + index$4 + " " + range$2 + " \"" + content$4 + "\" )");
          }
      case /* Case */7 :
          var goal$3 = request._0;
          var index$5 = String(goal$3.index);
          var content$5 = Goal$AgdaModeVscode.getContent(goal$3, $$document);
          var range$3 = buildRange(goal$3);
          return commonPart(/* NonInteractive */1) + ("( Cmd_make_case " + index$5 + " " + range$3 + " \"" + content$5 + "\" )");
      case /* HelperFunctionType */8 :
          var index$6 = String(request._2.index);
          var normalization$4 = Command$AgdaModeVscode.Normalization.encode(request._0);
          var content$6 = Parser$AgdaModeVscode.userInput(request._1);
          return commonPart(/* NonInteractive */1) + ("( Cmd_helper_function " + normalization$4 + " " + index$6 + " noRange \"" + content$6 + "\" )");
      case /* InferType */9 :
          var index$7 = String(request._2.index);
          var normalization$5 = Command$AgdaModeVscode.Normalization.encode(request._0);
          var content$7 = Parser$AgdaModeVscode.userInput(request._1);
          return commonPart(/* NonInteractive */1) + ("( Cmd_infer " + normalization$5 + " " + index$7 + " noRange \"" + content$7 + "\" )");
      case /* InferTypeGlobal */10 :
          var normalization$6 = Command$AgdaModeVscode.Normalization.encode(request._0);
          var content$8 = Parser$AgdaModeVscode.userInput(request._1);
          return commonPart(/* None */0) + ("( Cmd_infer_toplevel " + normalization$6 + " \"" + content$8 + "\" )");
      case /* Context */11 :
          var index$8 = String(request._1.index);
          var normalization$7 = Command$AgdaModeVscode.Normalization.encode(request._0);
          return commonPart(/* NonInteractive */1) + ("( Cmd_context " + normalization$7 + " " + index$8 + " noRange \"\" )");
      case /* GoalType */12 :
          var index$9 = String(request._1.index);
          var normalization$8 = Command$AgdaModeVscode.Normalization.encode(request._0);
          return commonPart(/* NonInteractive */1) + ("( Cmd_goal_type " + normalization$8 + " " + index$9 + " noRange \"\" )");
      case /* GoalTypeAndContext */13 :
          var index$10 = String(request._1.index);
          var normalization$9 = Command$AgdaModeVscode.Normalization.encode(request._0);
          return commonPart(/* NonInteractive */1) + ("( Cmd_goal_type_context " + normalization$9 + " " + index$10 + " noRange \"\" )");
      case /* GoalTypeContextAndInferredType */14 :
          var index$11 = String(request._2.index);
          var normalization$10 = Command$AgdaModeVscode.Normalization.encode(request._0);
          var content$9 = Parser$AgdaModeVscode.userInput(request._1);
          return commonPart(/* NonInteractive */1) + ("( Cmd_goal_type_context_infer " + normalization$10 + " " + index$11 + " noRange \"" + content$9 + "\" )");
      case /* GoalTypeContextAndCheckedType */15 :
          var index$12 = String(request._2.index);
          var normalization$11 = Command$AgdaModeVscode.Normalization.encode(request._0);
          var content$10 = Parser$AgdaModeVscode.userInput(request._1);
          return commonPart(/* NonInteractive */1) + ("( Cmd_goal_type_context_check " + normalization$11 + " " + index$12 + " noRange \"" + content$10 + "\" )");
      case /* ModuleContents */16 :
          var index$13 = String(request._2.index);
          var normalization$12 = Command$AgdaModeVscode.Normalization.encode(request._0);
          var content$11 = Parser$AgdaModeVscode.userInput(request._1);
          return commonPart(/* NonInteractive */1) + ("( Cmd_show_module_contents " + normalization$12 + " " + index$13 + " noRange \"" + content$11 + "\" )");
      case /* ModuleContentsGlobal */17 :
          var normalization$13 = Command$AgdaModeVscode.Normalization.encode(request._0);
          var content$12 = Parser$AgdaModeVscode.userInput(request._1);
          return commonPart(/* None */0) + ("( Cmd_show_module_contents_toplevel " + normalization$13 + " \"" + content$12 + "\" )");
      case /* ComputeNormalForm */18 :
          var computeMode = request._0;
          var index$14 = String(request._2.index);
          var ignoreAbstract = Pervasives.string_of_bool(Command$AgdaModeVscode.ComputeMode.ignoreAbstract(computeMode));
          var computeMode$1 = Command$AgdaModeVscode.ComputeMode.encode(computeMode);
          var content$13 = Parser$AgdaModeVscode.userInput(request._1);
          if (Util$AgdaModeVscode.Version.gte(version, "2.5.2")) {
            return commonPart(/* NonInteractive */1) + ("( Cmd_compute " + computeMode$1 + " " + index$14 + " noRange \"" + content$13 + "\" )");
          } else {
            return commonPart(/* NonInteractive */1) + ("( Cmd_compute " + ignoreAbstract + " " + index$14 + " noRange \"" + content$13 + "\" )");
          }
      case /* ComputeNormalFormGlobal */19 :
          var computeMode$2 = request._0;
          var ignoreAbstract$1 = Pervasives.string_of_bool(Command$AgdaModeVscode.ComputeMode.ignoreAbstract(computeMode$2));
          var computeMode$3 = Command$AgdaModeVscode.ComputeMode.encode(computeMode$2);
          var content$14 = Parser$AgdaModeVscode.userInput(request._1);
          if (Util$AgdaModeVscode.Version.gte(version, "2.5.2")) {
            return commonPart(/* NonInteractive */1) + ("( Cmd_compute_toplevel " + computeMode$3 + " \"" + content$14 + "\" )");
          } else {
            return commonPart(/* NonInteractive */1) + ("( Cmd_compute_toplevel " + ignoreAbstract$1 + " \"" + content$14 + "\" )");
          }
      case /* WhyInScope */20 :
          var index$15 = String(request._1.index);
          var content$15 = Parser$AgdaModeVscode.userInput(request._0);
          return commonPart(/* NonInteractive */1) + ("( Cmd_why_in_scope " + index$15 + " noRange \"" + content$15 + "\" )");
      case /* WhyInScopeGlobal */21 :
          var content$16 = Parser$AgdaModeVscode.userInput(request._0);
          return commonPart(/* None */0) + ("( Cmd_why_in_scope_toplevel \"" + content$16 + "\" )");
      
    }
  }
}

exports.toString = toString;
exports.encode = encode;
/* Goal-AgdaModeVscode Not a pure module */
