// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Event$AgdaModeVscode = require("./Util/Event.bs.js");
var State$AgdaModeVscode = require("./State.bs.js");
var Editor$AgdaModeVscode = require("./Editor.bs.js");
var Parser$AgdaModeVscode = require("./Parser.bs.js");
var Command$AgdaModeVscode = require("./Command.bs.js");
var Registry$AgdaModeVscode = require("./Registry.bs.js");
var Dispatcher$AgdaModeVscode = require("./Task/Dispatcher.bs.js");

function Impl(Editor) {
  var Registry = Registry$AgdaModeVscode.Impl(Editor);
  var State = State$AgdaModeVscode.Impl(Editor);
  var Dispatcher = Dispatcher$AgdaModeVscode.Impl(Editor);
  var isAgda = function (filepath) {
    var filepath$1 = Parser$AgdaModeVscode.filepath(filepath);
    return /\.agda$|\.lagda/i.test(filepath$1);
  };
  var activateWithoutContext = function (disposables, extensionPath) {
    console.log("[ extention ] activate");
    var eventEmitter = Event$AgdaModeVscode.make(undefined);
    disposables.push(Curry._1(Editor.onDidCloseEditor, (function (fileName) {
                Curry._1(Registry.forceDestroy, fileName);
                
              })));
    disposables.push(Curry._1(Editor.onDidChangeFileName, (function (oldName, newName) {
                return Belt_Option.forEach(oldName, (function (oldName) {
                              return Belt_Option.forEach(newName, (function (newName) {
                                            if (Curry._1(Registry.contains, oldName)) {
                                              if (isAgda(newName)) {
                                                return Curry._2(Registry.rename, oldName, newName);
                                              } else {
                                                Curry._1(Registry.forceDestroy, oldName);
                                                return ;
                                              }
                                            }
                                            
                                          }));
                            }));
              })));
    disposables.push(Curry._1(Editor.onDidChangeActivation, (function (prev, next) {
                Belt_Option.forEach(Belt_Option.flatMap(prev, Registry.getByEditor), (function (dispatcher) {
                        return Curry._1(State.hide, dispatcher.state);
                      }));
                return Belt_Option.forEach(Belt_Option.flatMap(next, Registry.getByEditor), (function (dispatcher) {
                              Belt_Option.forEach(next, (function (editor) {
                                      dispatcher.state.editor = editor;
                                      Curry._1(State.show, dispatcher.state);
                                      Curry._2(Dispatcher.dispatchCommand, dispatcher, /* Refresh */3);
                                      
                                    }));
                              
                            }));
              })));
    var makeAndAddToRegistry = function (editor, fileName) {
      var dispatcher = Curry._4(Dispatcher.make, extensionPath, editor, (function (param) {
              Curry._1(Registry.forceDestroy, fileName);
              
            }), eventEmitter);
      return Curry._2(Registry.add, fileName, dispatcher);
    };
    Belt_Array.forEach(Command$AgdaModeVscode.names, (function (param) {
            var name = param[1];
            var command = param[0];
            disposables.push(Curry._2(Editor.registerCommand, name, (function (editor, fileName) {
                        if (!isAgda(fileName)) {
                          return $$Promise.resolved(undefined);
                        }
                        console.log("[ command ] " + name);
                        var tmp;
                        var exit = 0;
                        if (typeof command === "number") {
                          switch (command) {
                            case /* Load */0 :
                                exit = 1;
                                break;
                            case /* Quit */1 :
                                tmp = Curry._1(Registry.forceDestroy, fileName);
                                break;
                            case /* Restart */2 :
                                tmp = $$Promise.map(Curry._1(Registry.destroy, fileName), (function (param) {
                                        return makeAndAddToRegistry(editor, fileName);
                                      }));
                                break;
                            default:
                              tmp = $$Promise.resolved(undefined);
                          }
                        } else if (command.tag === /* InputMethod */13) {
                          var match = command[0];
                          if (typeof match === "number" && match === 0) {
                            exit = 1;
                          } else {
                            tmp = $$Promise.resolved(undefined);
                          }
                        } else {
                          tmp = $$Promise.resolved(undefined);
                        }
                        if (exit === 1) {
                          var match$1 = Curry._1(Registry.get, fileName);
                          if (match$1 !== undefined) {
                            
                          } else {
                            makeAndAddToRegistry(editor, fileName);
                          }
                          tmp = $$Promise.resolved(undefined);
                        }
                        return $$Promise.flatMap(tmp, (function (param) {
                                      var dispatcher = Curry._1(Registry.get, fileName);
                                      if (dispatcher !== undefined) {
                                        return Curry._2(Dispatcher.dispatchCommand, dispatcher, command);
                                      } else {
                                        return $$Promise.resolved(undefined);
                                      }
                                    }));
                      })));
            
          }));
    return eventEmitter;
  };
  var activate = function (context) {
    var disposables = Curry._1(Editor.getDisposables, context);
    var extensionPath = Curry._1(Editor.getExtensionPath, context);
    return activateWithoutContext(disposables, extensionPath);
  };
  var deactivate = function (param) {
    console.log("[ extention ] deactivate");
    return Curry._1(Registry.destroyAll, undefined);
  };
  return {
          Registry: Registry,
          State: State,
          Dispatcher: Dispatcher,
          isAgda: isAgda,
          activateWithoutContext: activateWithoutContext,
          activate: activate,
          deactivate: deactivate
        };
}

var Editor_Point = {
  line: Editor$AgdaModeVscode.Point.line,
  column: Editor$AgdaModeVscode.Point.column,
  make: Editor$AgdaModeVscode.Point.make,
  translate: Editor$AgdaModeVscode.Point.translate,
  compare: Editor$AgdaModeVscode.Point.compare
};

var Editor_Config = {
  getAgdaPath: Editor$AgdaModeVscode.Config.getAgdaPath,
  setAgdaPath: Editor$AgdaModeVscode.Config.setAgdaPath,
  getLibraryPath: Editor$AgdaModeVscode.Config.getLibraryPath,
  getHighlightingMethod: Editor$AgdaModeVscode.Config.getHighlightingMethod,
  getBackend: Editor$AgdaModeVscode.Config.getBackend
};

var Editor_View = {
  make: Editor$AgdaModeVscode.View.make,
  destroy: Editor$AgdaModeVscode.View.destroy,
  show: Editor$AgdaModeVscode.View.show,
  hide: Editor$AgdaModeVscode.View.hide,
  focus: Editor$AgdaModeVscode.View.focus,
  send: Editor$AgdaModeVscode.View.send,
  onEvent: Editor$AgdaModeVscode.View.onEvent,
  fromPosition: Editor$AgdaModeVscode.View.fromPosition,
  fromInternal: Editor$AgdaModeVscode.View.fromInternal
};

var Editor_Decoration = {
  decorate: Editor$AgdaModeVscode.Decoration.decorate,
  highlightBackground: Editor$AgdaModeVscode.Decoration.highlightBackground,
  highlightBackgroundWithColor: Editor$AgdaModeVscode.Decoration.highlightBackgroundWithColor,
  decorateText: Editor$AgdaModeVscode.Decoration.decorateText,
  decorateTextWithColor: Editor$AgdaModeVscode.Decoration.decorateTextWithColor,
  overlayText: Editor$AgdaModeVscode.Decoration.overlayText,
  overlayTextWithColor: Editor$AgdaModeVscode.Decoration.overlayTextWithColor,
  underlineText: Editor$AgdaModeVscode.Decoration.underlineText,
  destroy: Editor$AgdaModeVscode.Decoration.destroy
};

var Editor = {
  Disposable: Editor$AgdaModeVscode.Disposable,
  Point: Editor_Point,
  pointAtOffset: Editor$AgdaModeVscode.pointAtOffset,
  offsetAtPoint: Editor$AgdaModeVscode.offsetAtPoint,
  $$Range: Editor$AgdaModeVscode.$$Range,
  editorType: Editor$AgdaModeVscode.editorType,
  getExtensionPath: Editor$AgdaModeVscode.getExtensionPath,
  getFileName: Editor$AgdaModeVscode.getFileName,
  save: Editor$AgdaModeVscode.save,
  onDidChangeFileName: Editor$AgdaModeVscode.onDidChangeFileName,
  onDidChangeActivation: Editor$AgdaModeVscode.onDidChangeActivation,
  onDidCloseEditor: Editor$AgdaModeVscode.onDidCloseEditor,
  registerCommand: Editor$AgdaModeVscode.registerCommand,
  setContext: Editor$AgdaModeVscode.setContext,
  getDisposables: Editor$AgdaModeVscode.getDisposables,
  Config: Editor_Config,
  View: Editor_View,
  Decoration: Editor_Decoration,
  focus: Editor$AgdaModeVscode.focus,
  getSelection: Editor$AgdaModeVscode.getSelection,
  getSelections: Editor$AgdaModeVscode.getSelections,
  setSelection: Editor$AgdaModeVscode.setSelection,
  setSelections: Editor$AgdaModeVscode.setSelections,
  getCursorPosition: Editor$AgdaModeVscode.getCursorPosition,
  getCursorPositions: Editor$AgdaModeVscode.getCursorPositions,
  setCursorPosition: Editor$AgdaModeVscode.setCursorPosition,
  setCursorPositions: Editor$AgdaModeVscode.setCursorPositions,
  onChangeCursorPosition: Editor$AgdaModeVscode.onChangeCursorPosition,
  rangeForLine: Editor$AgdaModeVscode.rangeForLine,
  fromAgdaOffset: Editor$AgdaModeVscode.fromAgdaOffset,
  toAgdaOffset: Editor$AgdaModeVscode.toAgdaOffset,
  getText: Editor$AgdaModeVscode.getText,
  getTextInRange: Editor$AgdaModeVscode.getTextInRange,
  selectText: Editor$AgdaModeVscode.selectText,
  replaceText: Editor$AgdaModeVscode.replaceText,
  insertText: Editor$AgdaModeVscode.insertText,
  insertTexts: Editor$AgdaModeVscode.insertTexts,
  deleteText: Editor$AgdaModeVscode.deleteText,
  onChange: Editor$AgdaModeVscode.onChange,
  copyToClipboard: Editor$AgdaModeVscode.copyToClipboard,
  colorThemeIsDark: Editor$AgdaModeVscode.colorThemeIsDark,
  lineEndingIsCRLF: Editor$AgdaModeVscode.lineEndingIsCRLF
};

var Registry = Registry$AgdaModeVscode.Impl(Editor);

var State = State$AgdaModeVscode.Impl(Editor);

var Dispatcher = Dispatcher$AgdaModeVscode.Impl(Editor);

function isAgda(filepath) {
  var filepath$1 = Parser$AgdaModeVscode.filepath(filepath);
  return /\.agda$|\.lagda/i.test(filepath$1);
}

function activateWithoutContext(disposables, extensionPath) {
  console.log("[ extention ] activate");
  var eventEmitter = Event$AgdaModeVscode.make(undefined);
  disposables.push(Editor$AgdaModeVscode.onDidCloseEditor((function (fileName) {
              Curry._1(Registry.forceDestroy, fileName);
              
            })));
  disposables.push(Editor$AgdaModeVscode.onDidChangeFileName((function (oldName, newName) {
              return Belt_Option.forEach(oldName, (function (oldName) {
                            return Belt_Option.forEach(newName, (function (newName) {
                                          if (Curry._1(Registry.contains, oldName)) {
                                            if (isAgda(newName)) {
                                              return Curry._2(Registry.rename, oldName, newName);
                                            } else {
                                              Curry._1(Registry.forceDestroy, oldName);
                                              return ;
                                            }
                                          }
                                          
                                        }));
                          }));
            })));
  disposables.push(Editor$AgdaModeVscode.onDidChangeActivation((function (prev, next) {
              Belt_Option.forEach(Belt_Option.flatMap(prev, Registry.getByEditor), (function (dispatcher) {
                      return Curry._1(State.hide, dispatcher.state);
                    }));
              return Belt_Option.forEach(Belt_Option.flatMap(next, Registry.getByEditor), (function (dispatcher) {
                            Belt_Option.forEach(next, (function (editor) {
                                    dispatcher.state.editor = editor;
                                    Curry._1(State.show, dispatcher.state);
                                    Curry._2(Dispatcher.dispatchCommand, dispatcher, /* Refresh */3);
                                    
                                  }));
                            
                          }));
            })));
  var makeAndAddToRegistry = function (editor, fileName) {
    var dispatcher = Curry._4(Dispatcher.make, extensionPath, editor, (function (param) {
            Curry._1(Registry.forceDestroy, fileName);
            
          }), eventEmitter);
    return Curry._2(Registry.add, fileName, dispatcher);
  };
  Belt_Array.forEach(Command$AgdaModeVscode.names, (function (param) {
          var name = param[1];
          var command = param[0];
          disposables.push(Editor$AgdaModeVscode.registerCommand(name, (function (editor, fileName) {
                      if (!isAgda(fileName)) {
                        return $$Promise.resolved(undefined);
                      }
                      console.log("[ command ] " + name);
                      var tmp;
                      var exit = 0;
                      if (typeof command === "number") {
                        switch (command) {
                          case /* Load */0 :
                              exit = 1;
                              break;
                          case /* Quit */1 :
                              tmp = Curry._1(Registry.forceDestroy, fileName);
                              break;
                          case /* Restart */2 :
                              tmp = $$Promise.map(Curry._1(Registry.destroy, fileName), (function (param) {
                                      return makeAndAddToRegistry(editor, fileName);
                                    }));
                              break;
                          default:
                            tmp = $$Promise.resolved(undefined);
                        }
                      } else if (command.tag === /* InputMethod */13) {
                        var match = command[0];
                        if (typeof match === "number" && match === 0) {
                          exit = 1;
                        } else {
                          tmp = $$Promise.resolved(undefined);
                        }
                      } else {
                        tmp = $$Promise.resolved(undefined);
                      }
                      if (exit === 1) {
                        var match$1 = Curry._1(Registry.get, fileName);
                        if (match$1 !== undefined) {
                          
                        } else {
                          makeAndAddToRegistry(editor, fileName);
                        }
                        tmp = $$Promise.resolved(undefined);
                      }
                      return $$Promise.flatMap(tmp, (function (param) {
                                    var dispatcher = Curry._1(Registry.get, fileName);
                                    if (dispatcher !== undefined) {
                                      return Curry._2(Dispatcher.dispatchCommand, dispatcher, command);
                                    } else {
                                      return $$Promise.resolved(undefined);
                                    }
                                  }));
                    })));
          
        }));
  return eventEmitter;
}

function activate(context) {
  var disposables = Editor$AgdaModeVscode.getDisposables(context);
  var extensionPath = Editor$AgdaModeVscode.getExtensionPath(context);
  return activateWithoutContext(disposables, extensionPath);
}

function deactivate(param) {
  console.log("[ extention ] deactivate");
  return Curry._1(Registry.destroyAll, undefined);
}

exports.Impl = Impl;
exports.Registry = Registry;
exports.State = State;
exports.Dispatcher = Dispatcher;
exports.isAgda = isAgda;
exports.activateWithoutContext = activateWithoutContext;
exports.activate = activate;
exports.deactivate = deactivate;
/* Registry Not a pure module */
