// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_splice_call = require("bs-platform/lib/js/caml_splice_call.js");
var Goal$AgdaModeVscode = require("./Goal.bs.js");
var Util$AgdaModeVscode = require("./Util/Util.bs.js");
var Parser$AgdaModeVscode = require("./Parser.bs.js");
var Command$AgdaModeVscode = require("./Command.bs.js");

function Impl(Editor) {
  var Goal = Goal$AgdaModeVscode.Impl(Editor);
  var encode = function (editor, version, filepath, libraryPath, highlightingMethod, request) {
    libraryPath.unshift(".");
    var libraryPath$1 = Caml_splice_call.spliceObjApply(", ", "concat", [Belt_Array.map(libraryPath, (function (x) {
                  return "\"" + (Parser$AgdaModeVscode.filepath(x) + "\"");
                }))]);
    var highlightingMethod$1 = highlightingMethod ? "Direct" : "Indirect";
    var commonPart = function (level) {
      var level$1;
      switch (level) {
        case /* None */0 :
            level$1 = "None";
            break;
        case /* NonInteractive */1 :
            level$1 = "NonInteractive";
            break;
        case /* Interactive */2 :
            level$1 = "Interactive";
            break;
        
      }
      return "IOTCM \"" + (filepath + ("\" " + (level$1 + (" " + highlightingMethod$1))));
    };
    var buildRange = function (goal) {
      if (Util$AgdaModeVscode.Version.gte(version, "2.5.1")) {
        return Curry._4(Goal.buildHaskellRange, editor, goal, false, filepath);
      } else {
        return Curry._4(Goal.buildHaskellRange, editor, goal, true, filepath);
      }
    };
    if (typeof request === "number") {
      if (Util$AgdaModeVscode.Version.gte(version, "2.5.0")) {
        return commonPart(/* NonInteractive */1) + ("( Cmd_load \"" + (String(filepath) + "\" [] )"));
      } else {
        return commonPart(/* NonInteractive */1) + ("( Cmd_load \"" + (String(filepath) + ("\" [" + (String(libraryPath$1) + "] )"))));
      }
    }
    if (request.tag) {
      var index = request[1].index;
      var normalization$prime = Command$AgdaModeVscode.Normalization.toString(request[0]);
      return commonPart(/* NonInteractive */1) + ("( Cmd_goal_type " + (String(normalization$prime) + (" " + (String(index) + " noRange \"\" )"))));
    }
    var goal = request[0];
    var index$1 = String(goal.index);
    var content = Curry._2(Goal.getContent, goal, editor);
    var range = buildRange(goal);
    if (Util$AgdaModeVscode.Version.gte(version, "2.6.0.1")) {
      return commonPart(/* NonInteractive */1) + ("( Cmd_autoOne " + (String(index$1) + (" " + (String(range) + (" \"" + (String(content) + "\" )"))))));
    } else {
      return commonPart(/* NonInteractive */1) + ("( Cmd_auto " + (String(index$1) + (" " + (String(range) + (" \"" + (String(content) + "\" )"))))));
    }
  };
  return {
          Goal: Goal,
          encode: encode
        };
}

exports.Impl = Impl;
/* Goal-AgdaModeVscode Not a pure module */
