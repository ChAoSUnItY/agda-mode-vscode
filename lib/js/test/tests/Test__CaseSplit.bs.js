// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Vscode = require("vscode");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Mocha$BsMocha = require("bs-mocha/lib/js/src/Mocha.bs.js");
var Assert$BsMocha = require("bs-mocha/lib/js/src/Assert.bs.js");
var Goal$AgdaModeVscode = require("../../src/Goal.bs.js");
var Editor$AgdaModeVscode = require("../../src/Editor.bs.js");
var Test__Util$AgdaModeVscode = require("./Test__Util.bs.js");
var State__Goal$AgdaModeVscode = require("../../src/State/State__Goal.bs.js");

Mocha$BsMocha.describe("State__Goal.caseSplitAux")(undefined, undefined, undefined, (function (param) {
        return Test__Util$AgdaModeVscode.Q.it("should calculate the infomation needed for case splitting correctly", (function (param) {
                      return $$Promise.flatMap(Vscode.window.showTextDocument(Vscode.Uri.file(Test__Util$AgdaModeVscode.Path.asset("CaseSplit.agda")), undefined), (function (editor) {
                                    var $$document = editor.document;
                                    return $$Promise.map($$Promise.map(Goal$AgdaModeVscode.makeMany(editor, [
                                                        0,
                                                        1,
                                                        2,
                                                        3,
                                                        4,
                                                        5,
                                                        6,
                                                        7,
                                                        8
                                                      ]), (function (goals) {
                                                      return Belt_Array.map(goals, (function (goal) {
                                                                    var match = State__Goal$AgdaModeVscode.caseSplitAux($$document, goal);
                                                                    var rewriteRange = match[2];
                                                                    var rewriteRange$1 = new Vscode.Range($$document.positionAt(rewriteRange[0]), $$document.positionAt(rewriteRange[1]));
                                                                    return [
                                                                            match[0],
                                                                            match[1],
                                                                            Editor$AgdaModeVscode.$$Text.get($$document, rewriteRange$1)
                                                                          ];
                                                                  }));
                                                    })), (function (results) {
                                                  return {
                                                          TAG: 0,
                                                          _0: Assert$BsMocha.deep_equal(undefined, results, [
                                                                [
                                                                  false,
                                                                  9,
                                                                  "x → {!   !}"
                                                                ],
                                                                [
                                                                  false,
                                                                  23,
                                                                  "y → {!   !}"
                                                                ],
                                                                [
                                                                  false,
                                                                  4,
                                                                  "x → {!   !}"
                                                                ],
                                                                [
                                                                  false,
                                                                  4,
                                                                  "y → {!   !}"
                                                                ],
                                                                [
                                                                  true,
                                                                  13,
                                                                  "x → {!   !}"
                                                                ],
                                                                [
                                                                  true,
                                                                  13,
                                                                  "y → {!   !}"
                                                                ],
                                                                [
                                                                  true,
                                                                  2,
                                                                  "x → {!   !}"
                                                                ],
                                                                [
                                                                  true,
                                                                  2,
                                                                  "y → {!   !}"
                                                                ],
                                                                [
                                                                  false,
                                                                  13,
                                                                  "x → {!   !}"
                                                                ]
                                                              ]),
                                                          [Symbol.for("name")]: "Ok"
                                                        };
                                                }));
                                  }));
                    }));
      }));

var Js$prime;

var Js;

var Assert;

exports.Js$prime = Js$prime;
exports.Js = Js;
exports.Assert = Assert;
/*  Not a pure module */
