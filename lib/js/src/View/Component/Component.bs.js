// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/lib/js/src/Json_encode.bs.js");
var Util$AgdaModeVscode = require("../../Util/Util.bs.js");
var Common$AgdaModeVscode = require("../../Common.bs.js");
var Component__Link$AgdaModeVscode = require("./Component__Link.bs.js");

var decode = Util$AgdaModeVscode.Decode.sum(function (x) {
      switch (x) {
        case "Icon" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (kind) {
                                      return {
                                              TAG: 1,
                                              _0: kind,
                                              [Symbol.for("name")]: "Icon"
                                            };
                                    }), Json_decode.string, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "Link" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (param) {
                                      return {
                                              TAG: 2,
                                              _0: param[0],
                                              _1: param[1],
                                              _2: param[2],
                                              _3: param[3],
                                              _4: param[4],
                                              [Symbol.for("name")]: "Link"
                                            };
                                    }), (function (param) {
                                      return Util$AgdaModeVscode.Decode.tuple5(Json_decode.string, (function (param) {
                                                    return Json_decode.optional((function (param) {
                                                                  return Json_decode.array(Json_decode.string, param);
                                                                }), param);
                                                  }), Json_decode.bool, Json_decode.bool, Common$AgdaModeVscode.Link.decode, param);
                                    }), param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "Location" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (param) {
                                      return {
                                              TAG: 3,
                                              _0: param[0],
                                              _1: param[1],
                                              [Symbol.for("name")]: "Location"
                                            };
                                    }), (function (param) {
                                      return Json_decode.pair(Common$AgdaModeVscode.AgdaRange.decode, Json_decode.bool, param);
                                    }), param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "PlainText" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (param) {
                                      return {
                                              TAG: 0,
                                              _0: param[0],
                                              _1: param[1],
                                              [Symbol.for("name")]: "PlainText"
                                            };
                                    }), (function (param) {
                                      return Json_decode.pair(Json_decode.string, (function (param) {
                                                    return Json_decode.optional((function (param) {
                                                                  return Json_decode.array(Json_decode.string, param);
                                                                }), param);
                                                  }), param);
                                    }), param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        default:
          throw {
                RE_EXN_ID: Json_decode.DecodeError,
                _1: "[Component.Text] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

function encode(x) {
  switch (x.TAG | 0) {
    case /* PlainText */0 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "PlainText"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        Json_encode.pair((function (prim) {
                                return prim;
                              }), (function (param) {
                                return Json_encode.nullable((function (param) {
                                              return Json_encode.array((function (prim) {
                                                            return prim;
                                                          }), param);
                                            }), param);
                              }), [
                              x._0,
                              x._1
                            ])
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* Icon */1 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "Icon"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        x._0
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* Link */2 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "Link"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        Util$AgdaModeVscode.Encode.tuple5((function (prim) {
                                return prim;
                              }), (function (param) {
                                return Json_encode.nullable((function (param) {
                                              return Json_encode.array((function (prim) {
                                                            return prim;
                                                          }), param);
                                            }), param);
                              }), (function (prim) {
                                return prim;
                              }), (function (prim) {
                                return prim;
                              }), Common$AgdaModeVscode.Link.encode, [
                              x._0,
                              x._1,
                              x._2,
                              x._3,
                              x._4
                            ])
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* Location */3 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "Location"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        Json_encode.pair(Common$AgdaModeVscode.AgdaRange.encode, (function (prim) {
                                return prim;
                              }), [
                              x._0,
                              x._1
                            ])
                      ],
                      tl: /* [] */0
                    }
                  });
    
  }
}

var Segment = {
  decode: decode,
  encode: encode
};

function toSegments(x) {
  return x._0;
}

function concatMany(xs) {
  return {
          _0: Belt_Array.concatMany(Belt_Array.map(xs, toSegments)),
          [Symbol.for("name")]: "Text"
        };
}

var empty = {
  _0: [],
  [Symbol.for("name")]: "Text"
};

function plainText(className, s) {
  return {
          _0: [{
              TAG: 0,
              _0: s,
              _1: className,
              [Symbol.for("name")]: "PlainText"
            }],
          [Symbol.for("name")]: "Text"
        };
}

function link(text, jumpOpt, hoverOpt, className, loc) {
  var jump = jumpOpt !== undefined ? jumpOpt : true;
  var hover = hoverOpt !== undefined ? hoverOpt : false;
  return {
          _0: [{
              TAG: 2,
              _0: text,
              _1: className,
              _2: jump,
              _3: hover,
              _4: {
                TAG: 0,
                _0: loc,
                [Symbol.for("name")]: "ToRange"
              },
              [Symbol.for("name")]: "Link"
            }],
          [Symbol.for("name")]: "Text"
        };
}

function hole(text, jumpOpt, hoverOpt, className, holeIndex) {
  var jump = jumpOpt !== undefined ? jumpOpt : true;
  var hover = hoverOpt !== undefined ? hoverOpt : false;
  return {
          _0: [{
              TAG: 2,
              _0: text,
              _1: className,
              _2: jump,
              _3: hover,
              _4: {
                TAG: 1,
                _0: holeIndex,
                [Symbol.for("name")]: "ToHole"
              },
              [Symbol.for("name")]: "Link"
            }],
          [Symbol.for("name")]: "Text"
        };
}

function $$location($$location$1, abbr) {
  return {
          _0: [{
              TAG: 3,
              _0: $$location$1,
              _1: abbr,
              [Symbol.for("name")]: "Location"
            }],
          [Symbol.for("name")]: "Text"
        };
}

function parse(raw) {
  return {
          _0: Belt_Array.mapWithIndex(Belt_Array.keepMap(raw.split(/([^\(\)\s]+\:(?:\d+\,\d+\-\d+\,\d+|\d+\,\d+\-\d+))/), (function (x) {
                      return x;
                    })), (function (i, token) {
                  var match = i % 2;
                  if (match !== 1) {
                    return {
                            TAG: 0,
                            _0: token,
                            _1: undefined,
                            [Symbol.for("name")]: "PlainText"
                          };
                  } else {
                    return Belt_Option.mapWithDefault(Curry._1(Common$AgdaModeVscode.AgdaRange.parse, token), {
                                TAG: 0,
                                _0: token,
                                _1: undefined,
                                [Symbol.for("name")]: "PlainText"
                              }, (function (x) {
                                  return {
                                          TAG: 3,
                                          _0: x,
                                          _1: false,
                                          [Symbol.for("name")]: "Location"
                                        };
                                }));
                  }
                })),
          [Symbol.for("name")]: "Text"
        };
}

function Component$Text(Props) {
  var text = Props.text;
  return React.createElement("span", undefined, Belt_Array.mapWithIndex(text._0, (function (i, x) {
                    switch (x.TAG | 0) {
                      case /* PlainText */0 :
                          var className = x._1;
                          var plainText = x._0;
                          if (className !== undefined) {
                            return React.createElement("span", {
                                        key: String(i),
                                        className: Belt_Array.joinWith(className, " ", (function (x) {
                                                return x;
                                              }))
                                      }, plainText);
                          } else {
                            return plainText;
                          }
                      case /* Icon */1 :
                          return React.createElement("div", {
                                      className: "codicon codicon-" + x._0
                                    });
                      case /* Link */2 :
                          var className$1 = x._1;
                          var text = x._0;
                          if (className$1 === undefined) {
                            return React.createElement(Component__Link$AgdaModeVscode.make, {
                                        target: x._4,
                                        jump: x._2,
                                        hover: x._3,
                                        children: text,
                                        key: String(i)
                                      });
                          }
                          var className$2 = Belt_List.fromArray(className$1);
                          return React.createElement(Component__Link$AgdaModeVscode.make, {
                                      target: x._4,
                                      jump: x._2,
                                      hover: x._3,
                                      className: className$2,
                                      children: text,
                                      key: String(i)
                                    });
                      case /* Location */3 :
                          var $$location = x._0;
                          if (x._1) {
                            return React.createElement(Component__Link$AgdaModeVscode.make, {
                                        target: {
                                          TAG: 0,
                                          _0: $$location,
                                          [Symbol.for("name")]: "ToRange"
                                        },
                                        jump: true,
                                        children: React.createElement("div", {
                                              className: "codicon codicon-link"
                                            }),
                                        key: String(i)
                                      });
                          } else {
                            return React.createElement(Component__Link$AgdaModeVscode.make, {
                                        target: {
                                          TAG: 0,
                                          _0: $$location,
                                          [Symbol.for("name")]: "ToRange"
                                        },
                                        jump: true,
                                        children: null,
                                        key: String(i)
                                      }, React.createElement("div", {
                                            className: "codicon codicon-link"
                                          }), Common$AgdaModeVscode.AgdaRange.toString($$location));
                          }
                      
                    }
                  })));
}

function decode$1(param) {
  return Json_decode.map((function (segments) {
                return {
                        _0: segments,
                        [Symbol.for("name")]: "Text"
                      };
              }), (function (param) {
                return Json_decode.array(decode, param);
              }), param);
}

function encode$1(x) {
  return Json_encode.array(encode, x._0);
}

var $$Text = {
  Segment: Segment,
  toSegments: toSegments,
  concatMany: concatMany,
  empty: empty,
  plainText: plainText,
  link: link,
  hole: hole,
  $$location: $$location,
  parse: parse,
  make: Component$Text,
  decode: decode$1,
  encode: encode$1
};

function plainText$1(s) {
  return {
          TAG: 1,
          _0: plainText(undefined, s),
          _1: undefined,
          [Symbol.for("name")]: "Unlabeled"
        };
}

function Component$Item(Props) {
  var item = Props.item;
  var match = React.useState(function () {
        return false;
      });
  var setRevealRaw = match[1];
  var revealRaw = match[0];
  var onClickRevealRaw = function (param) {
    return Curry._1(setRevealRaw, (function (state) {
                  return !state;
                }));
  };
  console.log(revealRaw);
  if (item.TAG === /* Labeled */0) {
    return React.createElement("li", {
                className: "labeled-item " + item._1
              }, React.createElement("div", {
                    className: "item-label"
                  }, item._0), React.createElement("div", {
                    className: "item-content"
                  }, React.createElement(Component$Text, {
                        text: item._2
                      })));
  }
  var raw = item._1;
  var text = item._0;
  var content = raw !== undefined ? (
      revealRaw ? React.createElement(Component$Text, {
              text: plainText(undefined, raw)
            }) : React.createElement(Component$Text, {
              text: text
            })
    ) : React.createElement(Component$Text, {
          text: text
        });
  var revealRawButton = raw !== undefined ? (
      revealRaw ? React.createElement("div", {
              className: "item-raw-button active",
              onClick: onClickRevealRaw
            }, React.createElement("div", {
                  className: "codicon codicon-code"
                })) : React.createElement("div", {
              className: "item-raw-button",
              onClick: onClickRevealRaw
            }, React.createElement("div", {
                  className: "codicon codicon-code"
                }))
    ) : React.createElement(React.Fragment, undefined);
  return React.createElement("li", {
              className: "unlabeled-item"
            }, React.createElement("div", {
                  className: "item-content"
                }, content), revealRawButton);
}

var decode$2 = Util$AgdaModeVscode.Decode.sum(function (x) {
      switch (x) {
        case "Labeled" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (param) {
                                      return {
                                              TAG: 0,
                                              _0: param[0],
                                              _1: param[1],
                                              _2: param[2],
                                              _3: param[3],
                                              [Symbol.for("name")]: "Labeled"
                                            };
                                    }), (function (param) {
                                      return Json_decode.tuple4(Json_decode.string, Json_decode.string, decode$1, (function (param) {
                                                    return Json_decode.optional(Json_decode.string, param);
                                                  }), param);
                                    }), param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "Unlabeled" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (param) {
                                      return {
                                              TAG: 1,
                                              _0: param[0],
                                              _1: param[1],
                                              [Symbol.for("name")]: "Unlabeled"
                                            };
                                    }), (function (param) {
                                      return Json_decode.pair(decode$1, (function (param) {
                                                    return Json_decode.optional(Json_decode.string, param);
                                                  }), param);
                                    }), param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        default:
          throw {
                RE_EXN_ID: Json_decode.DecodeError,
                _1: "[Component.Item] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

function encode$2(x) {
  if (x.TAG === /* Labeled */0) {
    return Json_encode.object_({
                hd: [
                  "tag",
                  "Labeled"
                ],
                tl: {
                  hd: [
                    "contents",
                    Json_encode.tuple4((function (prim) {
                            return prim;
                          }), (function (prim) {
                            return prim;
                          }), encode$1, (function (param) {
                            return Json_encode.nullable((function (prim) {
                                          return prim;
                                        }), param);
                          }), [
                          x._0,
                          x._1,
                          x._2,
                          x._3
                        ])
                  ],
                  tl: /* [] */0
                }
              });
  } else {
    return Json_encode.object_({
                hd: [
                  "tag",
                  "Unlabeled"
                ],
                tl: {
                  hd: [
                    "contents",
                    Json_encode.pair(encode$1, (function (param) {
                            return Json_encode.nullable((function (prim) {
                                          return prim;
                                        }), param);
                          }), [
                          x._0,
                          x._1
                        ])
                  ],
                  tl: /* [] */0
                }
              });
  }
}

var Item = {
  plainText: plainText$1,
  make: Component$Item,
  decode: decode$2,
  encode: encode$2
};

exports.$$Text = $$Text;
exports.Item = Item;
/* decode Not a pure module */
