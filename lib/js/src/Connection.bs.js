// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Util$AgdaModeVscode = require("./Util/Util.bs.js");
var Config$AgdaModeVscode = require("./Config.bs.js");
var Parser$AgdaModeVscode = require("./Parser.bs.js");
var Request$AgdaModeVscode = require("./Request.bs.js");
var Connection__LSP$AgdaModeVscode = require("./Connection/LSP/Connection__LSP.bs.js");
var Connection__Emacs$AgdaModeVscode = require("./Connection/Connection__Emacs.bs.js");

var singleton = {
  contents: undefined
};

function toStatus(conn) {
  if (conn.TAG === /* Emacs */0) {
    var match = Connection__Emacs$AgdaModeVscode.getStatus(conn._0);
    return {
            TAG: 0,
            _0: match[0],
            _1: match[1],
            [Symbol.for("name")]: "Emacs"
          };
  }
  var match$1 = Connection__LSP$AgdaModeVscode.getStatus(conn._0);
  return {
          TAG: 1,
          _0: match$1[0],
          _1: match$1[1],
          [Symbol.for("name")]: "LSP"
        };
}

function start(useLSP, viaTCP) {
  var conn = singleton.contents;
  if (conn !== undefined) {
    return $$Promise.resolved({
                TAG: 0,
                _0: toStatus(conn),
                [Symbol.for("name")]: "Ok"
              });
  } else if (useLSP) {
    return $$Promise.mapError($$Promise.mapOk(Connection__LSP$AgdaModeVscode.make(viaTCP), (function (conn) {
                      var match = Connection__LSP$AgdaModeVscode.getStatus(conn);
                      singleton.contents = {
                        TAG: 1,
                        _0: conn,
                        [Symbol.for("name")]: "LSP"
                      };
                      return {
                              TAG: 1,
                              _0: match[0],
                              _1: match[1],
                              [Symbol.for("name")]: "LSP"
                            };
                    })), (function (error) {
                  return {
                          TAG: 4,
                          _0: error,
                          [Symbol.for("name")]: "LSP"
                        };
                }));
  } else {
    return $$Promise.mapOk(Connection__Emacs$AgdaModeVscode.make(undefined), (function (conn) {
                  singleton.contents = {
                    TAG: 0,
                    _0: conn,
                    [Symbol.for("name")]: "Emacs"
                  };
                  var match = Connection__Emacs$AgdaModeVscode.getStatus(conn);
                  return {
                          TAG: 0,
                          _0: match[0],
                          _1: match[1],
                          [Symbol.for("name")]: "Emacs"
                        };
                }));
  }
}

function stop(param) {
  var match = singleton.contents;
  if (match === undefined) {
    return $$Promise.resolved(undefined);
  }
  if (match.TAG === /* Emacs */0) {
    singleton.contents = undefined;
    return Connection__Emacs$AgdaModeVscode.destroy(match._0);
  }
  singleton.contents = undefined;
  return Connection__LSP$AgdaModeVscode.destroy(match._0);
}

function sendRequest(useLSP, viaTCP, $$document, request, handler) {
  var encodeRequest = function ($$document, version) {
    var filepath = Parser$AgdaModeVscode.filepath($$document.fileName);
    var libraryPath = Config$AgdaModeVscode.getLibraryPath(undefined);
    var highlightingMethod = Config$AgdaModeVscode.Highlighting.getHighlightingMethod(undefined);
    var backend = Config$AgdaModeVscode.getBackend(undefined);
    return Request$AgdaModeVscode.encode($$document, version, filepath, backend, libraryPath, highlightingMethod, request);
  };
  var match = singleton.contents;
  if (match === undefined) {
    return $$Promise.flatMapOk(start(useLSP, viaTCP), (function (param) {
                  return sendRequest(useLSP, viaTCP, $$document, request, handler);
                }));
  }
  if (match.TAG === /* Emacs */0) {
    var conn = match._0;
    var match$1 = Connection__Emacs$AgdaModeVscode.getStatus(conn);
    return $$Promise.mapOk(Connection__Emacs$AgdaModeVscode.sendRequest(conn, encodeRequest($$document, match$1[0]), handler), (function (param) {
                  return toStatus({
                              TAG: 0,
                              _0: conn,
                              [Symbol.for("name")]: "Emacs"
                            });
                }));
  }
  var conn$1 = match._0;
  var match$2 = Connection__LSP$AgdaModeVscode.getStatus(conn$1);
  var handler$1 = function (x) {
    return Curry._1(handler, Util$AgdaModeVscode.Result.mapError(x, (function (err) {
                      return {
                              TAG: 4,
                              _0: err,
                              [Symbol.for("name")]: "LSP"
                            };
                    })));
  };
  return $$Promise.mapError($$Promise.mapOk(Connection__LSP$AgdaModeVscode.sendRequest(conn$1, encodeRequest($$document, match$2[0]), handler$1), (function (param) {
                    return toStatus({
                                TAG: 1,
                                _0: conn$1,
                                [Symbol.for("name")]: "LSP"
                              });
                  })), (function (error) {
                return {
                        TAG: 4,
                        _0: error,
                        [Symbol.for("name")]: "LSP"
                      };
              }));
}

var Module = {
  start: start,
  stop: stop,
  sendRequest: sendRequest
};

var $$Error;

var Scheduler;

var Emacs;

var LSP;

exports.$$Error = $$Error;
exports.Scheduler = Scheduler;
exports.Emacs = Emacs;
exports.LSP = LSP;
exports.Module = Module;
exports.start = start;
exports.stop = stop;
exports.sendRequest = sendRequest;
/* Promise Not a pure module */
