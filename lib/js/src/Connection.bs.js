// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Net = require("net");
var Json = require("@glennsl/bs-json/lib/js/src/Json.bs.js");
var Curry = require("bs-platform/lib/js/curry.js");
var VSCode = require("bs-vscode/lib/js/src/VSCode.bs.js");
var Vscode = require("vscode");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Untildify = require("untildify");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/lib/js/src/Json_encode.bs.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var LSP$AgdaModeVscode = require("./LSP.bs.js");
var Chan$AgdaModeVscode = require("./Util/Chan.bs.js");
var Util$AgdaModeVscode = require("./Util/Util.bs.js");
var Config$AgdaModeVscode = require("./Config.bs.js");
var Parser$AgdaModeVscode = require("./Parser.bs.js");
var VscodeLanguageclient = require("vscode-languageclient");
var Process$AgdaModeVscode = require("./Process.bs.js");
var Response$AgdaModeVscode = require("./Response.bs.js");

function toString(x) {
  if (typeof x === "number") {
    switch (x) {
      case /* InitializationFailed */0 :
          return [
                  "LSP: InitializationFailed",
                  ""
                ];
      case /* LSPCannotConnectDevServer */1 :
          return [
                  "LSP: Cannot Connect to the Dev Server",
                  ""
                ];
      case /* NotConnectedYet */2 :
          return [
                  "Connection not established yet",
                  ""
                ];
      
    }
  } else {
    switch (x.TAG | 0) {
      case /* CannotConnectViaStdIO */0 :
          var match = Curry._1(Process$AgdaModeVscode.PathSearch.$$Error.toString, x._0);
          return [
                  "Cannot locate \"als\"",
                  match[1] + "\nPlease make sure that the executable is in the path"
                ];
      case /* CannotConnectViaTCP */1 :
          return [
                  "Cannot connect with the server",
                  "Please enter \":main -d\" in ghci"
                ];
      case /* PathSearch */2 :
          return Curry._1(Process$AgdaModeVscode.PathSearch.$$Error.toString, x._0);
      case /* Validation */3 :
          return Curry._1(Process$AgdaModeVscode.Validation.$$Error.toString, x._0);
      case /* Process */4 :
          return Process$AgdaModeVscode.$$Error.toString(x._0);
      case /* ConnectionError */5 :
          var exn = x._0;
          var isECONNREFUSED = Belt_Option.mapWithDefault(exn.message, false, (function (param) {
                  return param.startsWith("connect ECONNREFUSED");
                }));
          if (isECONNREFUSED) {
            return [
                    "LSP Connection Error",
                    "Please enter \":main -d\" in ghci"
                  ];
          } else {
            return [
                    "LSP Client Error",
                    Belt_Option.getWithDefault(exn.message, "")
                  ];
          }
      case /* CannotSendRequest */6 :
          return [
                  "PANIC: Cannot send request",
                  "Please file an issue\n" + Belt_Option.getWithDefault(x._0.message, "")
                ];
      case /* CannotDecodeResponse */7 :
          return [
                  "PANIC: Cannot decode response",
                  "Please file an issue\n\n" + x._0 + "\n" + Json.stringify(x._1)
                ];
      case /* CannotDecodeNotification */8 :
          return [
                  "PANIC: Cannot decode Notification",
                  "Please file an issue\n\n" + x._0 + "\n" + Json.stringify(x._1)
                ];
      case /* LSPInternalError */9 :
          return [
                  "LSP: Internal Error",
                  x._0
                ];
      case /* LSPConnection */10 :
          return [
                  "LSP: Connection Failed",
                  Util$AgdaModeVscode.JsError.toString(x._0)
                ];
      case /* LSPSendRequest */11 :
          return [
                  "LSP: Cannot Send Request",
                  Util$AgdaModeVscode.JsError.toString(x._0)
                ];
      case /* LSPClientCannotDecodeResponse */12 :
          return [
                  "LSP: Client Cannot Decode Response",
                  x._0 + "\n" + JSON.stringify(x._1)
                ];
      case /* CannotDecodeRequest */13 :
          return [
                  "LSP: Server Cannot Decode Request",
                  x._0
                ];
      case /* ResponseParseError */14 :
          return [
                  "Internal Parse Error",
                  Parser$AgdaModeVscode.$$Error.toString(x._0)
                ];
      
    }
  }
}

var $$Error = {
  toString: toString
};

function make(param) {
  return {
          tally: 0,
          allDone: Chan$AgdaModeVscode.make(undefined),
          deferredLastResponses: []
        };
}

function runNonLast(self, handler, response) {
  self.tally = self.tally + 1 | 0;
  return $$Promise.get(Curry._1(handler, {
                  TAG: 0,
                  _0: response,
                  [Symbol.for("name")]: "Ok"
                }), (function (param) {
                self.tally = self.tally - 1 | 0;
                if (self.tally === 0) {
                  return Chan$AgdaModeVscode.emit(self.allDone, undefined);
                }
                
              }));
}

function addLast(self, priority, response) {
  self.deferredLastResponses.push([
        priority,
        response
      ]);
  
}

function onceDone(self) {
  if (self.tally === 0) {
    return $$Promise.resolved(undefined);
  } else {
    return Chan$AgdaModeVscode.once(self.allDone);
  }
}

function runLast(self, handler) {
  return $$Promise.get(onceDone(self), (function (param) {
                var deferredLastResponses = Belt_Array.map(self.deferredLastResponses.sort(function (x, y) {
                          return Caml_primitive.caml_int_compare(x[0], y[0]);
                        }), (function (prim) {
                        return prim[1];
                      }));
                deferredLastResponses.unshift(/* CompleteHighlightingAndMakePromptReappear */4);
                Util$AgdaModeVscode.oneByOne(Belt_Array.map(deferredLastResponses, (function (res) {
                            return Curry._1(handler, {
                                        TAG: 0,
                                        _0: res,
                                        [Symbol.for("name")]: "Ok"
                                      });
                          })));
                
              }));
}

var Scheduler = {
  make: make,
  runNonLast: runNonLast,
  addLast: addLast,
  runLast: runLast
};

function destroy(self) {
  Chan$AgdaModeVscode.destroy(self.chan);
  self.encountedFirstPrompt = false;
  return Process$AgdaModeVscode.destroy(self.process);
}

function wire(self) {
  var toResponse = Curry._1(Parser$AgdaModeVscode.Incr.Gen.flatMap, (function (x) {
          if (x.TAG !== /* Ok */0) {
            return {
                    _0: {
                      TAG: 1,
                      _0: x._0,
                      [Symbol.for("name")]: "Error"
                    },
                    [Symbol.for("name")]: "Yield"
                  };
          }
          var tokens = x._0;
          if (tokens.TAG === /* A */0 && tokens._0 === "Agda2>") {
            return /* Stop */0;
          } else {
            return {
                    _0: Response$AgdaModeVscode.Prioritized.parse(tokens),
                    [Symbol.for("name")]: "Yield"
                  };
          }
        }));
  var mapError = function (x) {
    return Curry._2(Parser$AgdaModeVscode.Incr.Gen.map, (function (x) {
                  if (x.TAG === /* Ok */0) {
                    return {
                            TAG: 0,
                            _0: x._0,
                            [Symbol.for("name")]: "Ok"
                          };
                  }
                  var match = x._0;
                  return {
                          TAG: 1,
                          _0: {
                            TAG: 0,
                            _0: match[0],
                            _1: match[1],
                            [Symbol.for("name")]: "SExpression"
                          },
                          [Symbol.for("name")]: "Error"
                        };
                }), x);
  };
  var pipeline = Parser$AgdaModeVscode.SExpression.makeIncr(function (x) {
        var res = Curry._1(toResponse, mapError(x));
        if (res) {
          return Chan$AgdaModeVscode.emit(self.chan, {
                      TAG: 0,
                      _0: {
                        _0: res._0,
                        [Symbol.for("name")]: "Yield"
                      },
                      [Symbol.for("name")]: "Ok"
                    });
        } else if (self.encountedFirstPrompt) {
          return Chan$AgdaModeVscode.emit(self.chan, {
                      TAG: 0,
                      _0: /* Stop */0,
                      [Symbol.for("name")]: "Ok"
                    });
        } else {
          self.encountedFirstPrompt = true;
          return ;
        }
      });
  Process$AgdaModeVscode.onOutput(self.process, (function (x) {
          switch (x.TAG | 0) {
            case /* Stdout */0 :
                return Belt_Array.forEach(Parser$AgdaModeVscode.split(x._0), (function (param) {
                              return Parser$AgdaModeVscode.Incr.feed(pipeline, param);
                            }));
            case /* Stderr */1 :
                return ;
            case /* Error */2 :
                return Chan$AgdaModeVscode.emit(self.chan, {
                            TAG: 1,
                            _0: {
                              TAG: 4,
                              _0: x._0,
                              [Symbol.for("name")]: "Process"
                            },
                            [Symbol.for("name")]: "Error"
                          });
            
          }
        }));
  
}

function make$1(param) {
  var getPath = function (param) {
    var storedPath = Config$AgdaModeVscode.getAgdaPath(undefined);
    if (!(storedPath === "" || storedPath === ".")) {
      return $$Promise.resolved({
                  TAG: 0,
                  _0: storedPath,
                  [Symbol.for("name")]: "Ok"
                });
    }
    var agdaVersion = Config$AgdaModeVscode.getAgdaVersion(undefined);
    return $$Promise.mapError($$Promise.mapOk(Process$AgdaModeVscode.PathSearch.run(agdaVersion), (function (prim) {
                      return prim.trim();
                    })), (function (e) {
                  return {
                          TAG: 2,
                          _0: e,
                          [Symbol.for("name")]: "PathSearch"
                        };
                }));
  };
  var setPath = function (metadata) {
    return $$Promise.map(Config$AgdaModeVscode.setAgdaPath(metadata.path), (function (param) {
                  return {
                          TAG: 0,
                          _0: metadata,
                          [Symbol.for("name")]: "Ok"
                        };
                }));
  };
  var args = ["--interaction"];
  return $$Promise.tapOk($$Promise.mapOk($$Promise.flatMapOk($$Promise.flatMapOk(getPath(undefined), (function (path) {
                            var validator = function (output) {
                              var match_ = output.match(/Agda version (.*)/);
                              if (match_ === null) {
                                return {
                                        TAG: 1,
                                        _0: "Cannot read Agda version",
                                        [Symbol.for("name")]: "Error"
                                      };
                              }
                              var version = Belt_Array.get(match_, 1);
                              if (version !== undefined) {
                                return {
                                        TAG: 0,
                                        _0: version,
                                        [Symbol.for("name")]: "Ok"
                                      };
                              } else {
                                return {
                                        TAG: 1,
                                        _0: "Cannot read Agda version",
                                        [Symbol.for("name")]: "Error"
                                      };
                              }
                            };
                            var path$1 = Untildify(path);
                            return $$Promise.mapError($$Promise.mapOk(Process$AgdaModeVscode.Validation.run("\"" + (path$1 + "\" -V"), validator), (function (version) {
                                              return {
                                                      path: path$1,
                                                      args: args,
                                                      version: version
                                                    };
                                            })), (function (e) {
                                          return {
                                                  TAG: 3,
                                                  _0: e,
                                                  [Symbol.for("name")]: "Validation"
                                                };
                                        }));
                          })), setPath), (function (metadata) {
                    return {
                            metadata: metadata,
                            process: Process$AgdaModeVscode.make(metadata.path, metadata.args),
                            chan: Chan$AgdaModeVscode.make(undefined),
                            encountedFirstPrompt: false
                          };
                  })), wire);
}

function sendRequest(connection, encoded) {
  Process$AgdaModeVscode.send(connection.process, encoded);
  
}

function onResponse(connection, callback) {
  var scheduler = make(undefined);
  var match = $$Promise.pending(undefined);
  var stopListener = match[1];
  var listener = function (x) {
    if (x.TAG === /* Ok */0) {
      var match = x._0;
      if (match) {
        var error = match._0;
        if (error.TAG === /* Ok */0) {
          var response = error._0;
          if (response.TAG === /* NonLast */0) {
            return runNonLast(scheduler, callback, response._0);
          } else {
            return addLast(scheduler, response._0, response._1);
          }
        }
        Curry._1(callback, {
              TAG: 1,
              _0: {
                TAG: 14,
                _0: error._0,
                [Symbol.for("name")]: "ResponseParseError"
              },
              [Symbol.for("name")]: "Error"
            });
        return ;
      }
      Curry._1(stopListener, undefined);
      return runLast(scheduler, callback);
    }
    Curry._1(callback, {
          TAG: 1,
          _0: x._0,
          [Symbol.for("name")]: "Error"
        });
    
  };
  var listenerHandle = {
    contents: undefined
  };
  listenerHandle.contents = Chan$AgdaModeVscode.on(connection.chan, listener);
  return $$Promise.tap(match[0], (function (param) {
                return Belt_Option.forEach(listenerHandle.contents, (function (destroyListener) {
                              return Curry._1(destroyListener, undefined);
                            }));
              }));
}

function getVersion(conn) {
  return conn.metadata.version;
}

var Emacs = {
  make: make$1,
  destroy: destroy,
  onResponse: onResponse,
  sendRequest: sendRequest,
  getVersion: getVersion
};

function encode(x) {
  if (x) {
    return Json_encode.object_({
                hd: [
                  "tag",
                  "ReqCommand"
                ],
                tl: {
                  hd: [
                    "contents",
                    x._0
                  ],
                  tl: /* [] */0
                }
              });
  } else {
    return Json_encode.object_({
                hd: [
                  "tag",
                  "ReqInitialize"
                ],
                tl: /* [] */0
              });
  }
}

var LSPReq = {
  encode: encode
};

function fromJsError(error) {
  return (function (e) {return e.toString()})(error);
}

var decode = Util$AgdaModeVscode.Decode.sum(function (x) {
      switch (x) {
        case "ResCannotDecodeRequest" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (version) {
                                      return {
                                              TAG: 1,
                                              _0: version,
                                              [Symbol.for("name")]: "ServerCannotDecodeRequest"
                                            };
                                    }), Json_decode.string, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "ResCommand" :
            return {
                    TAG: 1,
                    _0: /* Command */0,
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "ResInitialize" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (version) {
                                      return {
                                              TAG: 0,
                                              _0: version,
                                              [Symbol.for("name")]: "Initialize"
                                            };
                                    }), Json_decode.string, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        default:
          throw {
                RE_EXN_ID: Json_decode.DecodeError,
                _1: "[LSP.Response] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

var LSPRes = {
  fromJsError: fromJsError,
  decode: decode
};

function toString$1(x) {
  if (typeof x === "number") {
    return "========";
  }
  switch (x.TAG | 0) {
    case /* ReactionNonLast */0 :
        return Response$AgdaModeVscode.toString(x._0);
    case /* ReactionLast */1 :
        return "[Last " + String(x._0) + "] " + Response$AgdaModeVscode.toString(x._1);
    case /* ReactionParseError */2 :
        return Parser$AgdaModeVscode.$$Error.toString(x._0);
    
  }
}

var decode$1 = Util$AgdaModeVscode.Decode.sum(function (x) {
      switch (x) {
        case "ReactionClearHighlightingNotOnlyTokenBased" :
        case "ReactionClearHighlightingTokenBased" :
            return {
                    TAG: 1,
                    _0: {
                      TAG: 0,
                      _0: /* ClearHighlighting */1,
                      [Symbol.for("name")]: "ReactionNonLast"
                    },
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "ReactionClearRunningInfo" :
            return {
                    TAG: 1,
                    _0: {
                      TAG: 0,
                      _0: /* ClearRunningInfo */0,
                      [Symbol.for("name")]: "ReactionNonLast"
                    },
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "ReactionDoneAborting" :
            return {
                    TAG: 1,
                    _0: {
                      TAG: 0,
                      _0: /* DoneAborting */2,
                      [Symbol.for("name")]: "ReactionNonLast"
                    },
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "ReactionDoneExiting" :
            return {
                    TAG: 1,
                    _0: {
                      TAG: 0,
                      _0: /* DoneExiting */3,
                      [Symbol.for("name")]: "ReactionNonLast"
                    },
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "ReactionEnd" :
            return {
                    TAG: 1,
                    _0: /* ReactionEnd */0,
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "ReactionGiveAction" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (param) {
                                      return {
                                              TAG: 0,
                                              _0: {
                                                TAG: 5,
                                                _0: param[0],
                                                _1: param[1],
                                                [Symbol.for("name")]: "GiveAction"
                                              },
                                              [Symbol.for("name")]: "ReactionNonLast"
                                            };
                                    }), (function (param) {
                                      return Json_decode.pair(Json_decode.$$int, Response$AgdaModeVscode.GiveAction.decode, param);
                                    }), param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "ReactionInteractionPoints" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (ids) {
                                      return {
                                              TAG: 1,
                                              _0: 1,
                                              _1: {
                                                TAG: 4,
                                                _0: ids,
                                                [Symbol.for("name")]: "InteractionPoints"
                                              },
                                              [Symbol.for("name")]: "ReactionLast"
                                            };
                                    }), (function (param) {
                                      return Json_decode.array(Json_decode.$$int, param);
                                    }), param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "ReactionLast" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (param) {
                                      var e = Response$AgdaModeVscode.parseFromString(param[1]);
                                      if (e.TAG === /* Ok */0) {
                                        return {
                                                TAG: 1,
                                                _0: param[0],
                                                _1: e._0,
                                                [Symbol.for("name")]: "ReactionLast"
                                              };
                                      } else {
                                        return {
                                                TAG: 2,
                                                _0: e._0,
                                                [Symbol.for("name")]: "ReactionParseError"
                                              };
                                      }
                                    }), (function (param) {
                                      return Json_decode.pair(Json_decode.$$int, Json_decode.string, param);
                                    }), param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "ReactionNonLast" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (raw) {
                                      var e = Response$AgdaModeVscode.parseFromString(raw);
                                      if (e.TAG === /* Ok */0) {
                                        return {
                                                TAG: 0,
                                                _0: e._0,
                                                [Symbol.for("name")]: "ReactionNonLast"
                                              };
                                      } else {
                                        return {
                                                TAG: 2,
                                                _0: e._0,
                                                [Symbol.for("name")]: "ReactionParseError"
                                              };
                                      }
                                    }), Json_decode.string, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        default:
          throw {
                RE_EXN_ID: Json_decode.DecodeError,
                _1: "[LSP.Reaction] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

var LSPReaction = {
  toString: toString$1,
  decode: decode$1
};

var errorChan = Chan$AgdaModeVscode.make(undefined);

var dataChan = Chan$AgdaModeVscode.make(undefined);

function onError(callback) {
  return new Vscode.Disposable(Chan$AgdaModeVscode.on(errorChan, (function (e) {
                    return Curry._1(callback, {
                                TAG: 5,
                                _0: e,
                                [Symbol.for("name")]: "ConnectionError"
                              });
                  })));
}

function sendRequest$1(self, data) {
  return $$Promise.mapError($$Promise.flatMapOk($$Promise.Js.toResult(self.client.onReady()), (function (param) {
                    return $$Promise.Js.toResult(self.client.sendRequest("agda", data));
                  })), (function (exn) {
                return {
                        TAG: 6,
                        _0: exn,
                        [Symbol.for("name")]: "CannotSendRequest"
                      };
              }));
}

function make$2(method) {
  var serverOptions;
  serverOptions = method.TAG === /* ViaStdIO */0 ? LSP$AgdaModeVscode.ServerOptions.makeWithCommand(method._0) : LSP$AgdaModeVscode.ServerOptions.makeWithStreamInfo(method._0);
  var documentSelector = [VSCode.StringOr.others({
          language: "agda",
          pattern: undefined,
          scheme: "file"
        })];
  var synchronize = Vscode.workspace.createFileSystemWatcher('**/.clientrc', false, false, false);
  var errorHandler = LSP$AgdaModeVscode.ErrorHandler.make((function (exn, _msg, _count) {
          Chan$AgdaModeVscode.emit(errorChan, exn);
          return /* Shutdown */1;
        }), (function (param) {
          return /* DoNotRestart */0;
        }));
  var clientOptions = LSP$AgdaModeVscode.LanguageClientOptions.make(documentSelector, synchronize, errorHandler);
  var languageClient = new VscodeLanguageclient.LanguageClient("agdaLanguageServer", "Agda Language Server", serverOptions, clientOptions);
  var self_subscription = languageClient.start();
  var self = {
    client: languageClient,
    subscription: self_subscription,
    method: method
  };
  return $$Promise.mapError($$Promise.map($$Promise.race({
                      hd: $$Promise.Js.toResult(languageClient.onReady()),
                      tl: {
                        hd: $$Promise.map(Chan$AgdaModeVscode.once(errorChan), (function (err) {
                                return {
                                        TAG: 1,
                                        _0: err,
                                        [Symbol.for("name")]: "Error"
                                      };
                              })),
                        tl: /* [] */0
                      }
                    }), (function (result) {
                    if (result.TAG !== /* Ok */0) {
                      return {
                              TAG: 1,
                              _0: result._0,
                              [Symbol.for("name")]: "Error"
                            };
                    }
                    languageClient.onRequest("agda", (function (json) {
                            Chan$AgdaModeVscode.emit(dataChan, json);
                            return $$Promise.resolved(undefined);
                          }));
                    return {
                            TAG: 0,
                            _0: self,
                            [Symbol.for("name")]: "Ok"
                          };
                  })), (function (e) {
                return {
                        TAG: 5,
                        _0: e,
                        [Symbol.for("name")]: "ConnectionError"
                      };
              }));
}

var singleton = {
  contents: /* Disconnected */0
};

function stop(param) {
  var match = singleton.contents;
  if (match) {
    singleton.contents = /* Disconnected */0;
    var self = match._0;
    self.subscription.dispose();
    return $$Promise.map($$Promise.Js.toResult(self.client.stop()), (function (param) {
                  
                }));
  } else {
    return $$Promise.resolved(undefined);
  }
}

function decodeResponse(json) {
  var response;
  try {
    response = Curry._1(decode, json);
  }
  catch (raw_msg){
    var msg = Caml_js_exceptions.internalToOCamlException(raw_msg);
    if (msg.RE_EXN_ID === Json_decode.DecodeError) {
      return {
              TAG: 1,
              _0: {
                TAG: 7,
                _0: msg._1,
                _1: json,
                [Symbol.for("name")]: "CannotDecodeResponse"
              },
              [Symbol.for("name")]: "Error"
            };
    }
    throw msg;
  }
  return {
          TAG: 0,
          _0: response,
          [Symbol.for("name")]: "Ok"
        };
}

function decodeReaction(json) {
  var notification;
  try {
    notification = Curry._1(decode$1, json);
  }
  catch (raw_msg){
    var msg = Caml_js_exceptions.internalToOCamlException(raw_msg);
    if (msg.RE_EXN_ID === Json_decode.DecodeError) {
      return {
              TAG: 1,
              _0: {
                TAG: 8,
                _0: msg._1,
                _1: json,
                [Symbol.for("name")]: "CannotDecodeNotification"
              },
              [Symbol.for("name")]: "Error"
            };
    }
    throw msg;
  }
  return {
          TAG: 0,
          _0: notification,
          [Symbol.for("name")]: "Ok"
        };
}

function sendRequestPrim(client, request) {
  return $$Promise.flatMapOk(sendRequest$1(client, encode(request)), (function (json) {
                return $$Promise.resolved(decodeResponse(json));
              }));
}

function probe(tryTCP, port, name) {
  var probeStdIO = function (name) {
    return $$Promise.mapError($$Promise.mapOk(Process$AgdaModeVscode.PathSearch.run(name), (function (path) {
                      return {
                              TAG: 0,
                              _0: name,
                              _1: path.trim(),
                              [Symbol.for("name")]: "ViaStdIO"
                            };
                    })), (function (e) {
                  return {
                          TAG: 0,
                          _0: e,
                          [Symbol.for("name")]: "CannotConnectViaStdIO"
                        };
                }));
  };
  var probeTCP = function (port) {
    var match = $$Promise.pending(undefined);
    var resolve = match[1];
    var socket = Net.connect(port, (function (param) {
            return Curry._1(resolve, {
                        TAG: 0,
                        _0: undefined,
                        [Symbol.for("name")]: "Ok"
                      });
          }));
    socket.on("error", (function (exn) {
            return Curry._1(resolve, {
                        TAG: 1,
                        _0: {
                          TAG: 1,
                          _0: exn,
                          [Symbol.for("name")]: "CannotConnectViaTCP"
                        },
                        [Symbol.for("name")]: "Error"
                      });
          }));
    return $$Promise.mapOk(match[0], (function (param) {
                  socket.destroy();
                  return {
                          TAG: 1,
                          _0: port,
                          [Symbol.for("name")]: "ViaTCP"
                        };
                }));
  };
  if (tryTCP) {
    return $$Promise.flatMapError(probeTCP(port), (function (param) {
                  return probeStdIO(name);
                }));
  } else {
    return probeStdIO(name);
  }
}

function start(tryTCP) {
  var match = singleton.contents;
  if (match) {
    return $$Promise.resolved({
                TAG: 0,
                _0: [
                  match._1,
                  match._0.method
                ],
                [Symbol.for("name")]: "Ok"
              });
  } else {
    return $$Promise.flatMap($$Promise.flatMapOk(probe(tryTCP, 4000, "als"), make$2), (function (result) {
                  if (result.TAG === /* Ok */0) {
                    var client = result._0;
                    return $$Promise.flatMapOk(sendRequestPrim(client, /* Initialize */0), (function (response) {
                                  if (typeof response === "number") {
                                    return $$Promise.resolved({
                                                TAG: 1,
                                                _0: /* InitializationFailed */0,
                                                [Symbol.for("name")]: "Error"
                                              });
                                  }
                                  if (response.TAG !== /* Initialize */0) {
                                    return $$Promise.resolved({
                                                TAG: 1,
                                                _0: {
                                                  TAG: 13,
                                                  _0: response._0,
                                                  [Symbol.for("name")]: "CannotDecodeRequest"
                                                },
                                                [Symbol.for("name")]: "Error"
                                              });
                                  }
                                  var version = response._0;
                                  singleton.contents = {
                                    _0: client,
                                    _1: version,
                                    [Symbol.for("name")]: "Connected"
                                  };
                                  return $$Promise.resolved({
                                              TAG: 0,
                                              _0: [
                                                version,
                                                client.method
                                              ],
                                              [Symbol.for("name")]: "Ok"
                                            });
                                }));
                  }
                  singleton.contents = /* Disconnected */0;
                  return $$Promise.resolved({
                              TAG: 1,
                              _0: result._0,
                              [Symbol.for("name")]: "Error"
                            });
                }));
  }
}

function getVersion$1(param) {
  var match = singleton.contents;
  if (match) {
    return match._1;
  }
  
}

function isConnected(param) {
  var match = singleton.contents;
  if (match) {
    return true;
  } else {
    return false;
  }
}

function sendRequest$2(request, handler) {
  var match = singleton.contents;
  if (!match) {
    return $$Promise.resolved({
                TAG: 1,
                _0: /* NotConnectedYet */2,
                [Symbol.for("name")]: "Error"
              });
  }
  var scheduler = make(undefined);
  var match$1 = $$Promise.pending(undefined);
  var resolve = match$1[1];
  var waitForResponseEnd = match$1[0];
  var subscription = new Vscode.Disposable(Chan$AgdaModeVscode.on(dataChan, (function (json) {
              var error = decodeReaction(json);
              if (error.TAG !== /* Ok */0) {
                return Curry._1(resolve, {
                            TAG: 1,
                            _0: error._0,
                            [Symbol.for("name")]: "Error"
                          });
              }
              var responese = error._0;
              if (typeof responese === "number") {
                return Curry._1(resolve, {
                            TAG: 0,
                            _0: undefined,
                            [Symbol.for("name")]: "Ok"
                          });
              }
              switch (responese.TAG | 0) {
                case /* ReactionNonLast */0 :
                    return runNonLast(scheduler, handler, responese._0);
                case /* ReactionLast */1 :
                    return addLast(scheduler, responese._0, responese._1);
                case /* ReactionParseError */2 :
                    return Curry._1(resolve, {
                                TAG: 1,
                                _0: {
                                  TAG: 14,
                                  _0: responese._0,
                                  [Symbol.for("name")]: "ResponseParseError"
                                },
                                [Symbol.for("name")]: "Error"
                              });
                
              }
            })));
  return $$Promise.tap($$Promise.tap($$Promise.flatMapOk(sendRequestPrim(match._0, {
                          _0: request,
                          [Symbol.for("name")]: "Command"
                        }), (function (result) {
                        if (typeof result === "number") {
                          return waitForResponseEnd;
                        } else if (result.TAG === /* Initialize */0) {
                          return $$Promise.resolved({
                                      TAG: 1,
                                      _0: /* InitializationFailed */0,
                                      [Symbol.for("name")]: "Error"
                                    });
                        } else {
                          return $$Promise.resolved({
                                      TAG: 1,
                                      _0: {
                                        TAG: 13,
                                        _0: result._0,
                                        [Symbol.for("name")]: "CannotDecodeRequest"
                                      },
                                      [Symbol.for("name")]: "Error"
                                    });
                        }
                      })), (function (param) {
                    subscription.dispose();
                    
                  })), (function (param) {
                return runLast(scheduler, handler);
              }));
}

var Module = {
  start: start,
  stop: stop,
  sendRequest: sendRequest$2,
  getVersion: getVersion$1,
  onError: onError,
  isConnected: isConnected
};

var LSP = {
  LSPReq: LSPReq,
  LSPRes: LSPRes,
  LSPReaction: LSPReaction,
  Module: Module,
  start: start,
  stop: stop,
  sendRequest: sendRequest$2,
  getVersion: getVersion$1,
  onError: onError,
  isConnected: isConnected
};

exports.$$Error = $$Error;
exports.Scheduler = Scheduler;
exports.Emacs = Emacs;
exports.LSP = LSP;
/* decode Not a pure module */
