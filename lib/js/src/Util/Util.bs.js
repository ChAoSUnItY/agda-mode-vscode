// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Caml_splice_call = require("bs-platform/lib/js/caml_splice_call.js");
var CompareVersions = require("compare-versions");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function sum(decoder) {
  return (function (param) {
      return Json_decode.andThen((function (tag) {
                    var d = Curry._1(decoder, tag);
                    if (d.tag) {
                      return d[0];
                    }
                    var d$1 = d[0];
                    return (function (param) {
                        return Json_decode.field("contents", d$1, param);
                      });
                  }), (function (param) {
                    return Json_decode.field("tag", Json_decode.string, param);
                  }), param);
    });
}

function maybe(decoder) {
  return sum((function (param) {
                if (param === "Just") {
                  return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (json) {
                                return Caml_option.some(Curry._1(decoder, json));
                              })]);
                } else {
                  return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [(function (param) {
                                
                              })]);
                }
              }));
}

function tuple5(decodeA, decodeB, decodeC, decodeD, decodeE, json) {
  if (Array.isArray(json)) {
    var length = json.length;
    if (length === 5) {
      try {
        return /* tuple */[
                Curry._1(decodeA, json[0]),
                Curry._1(decodeB, json[1]),
                Curry._1(decodeC, json[2]),
                Curry._1(decodeD, json[3]),
                Curry._1(decodeE, json[4])
              ];
      }
      catch (raw_msg){
        var msg = Caml_js_exceptions.internalToOCamlException(raw_msg);
        if (msg[0] === Json_decode.DecodeError) {
          throw [
                Json_decode.DecodeError,
                msg[1] + "\n\tin tuple5"
              ];
        }
        throw msg;
      }
    } else {
      throw [
            Json_decode.DecodeError,
            "Expected array of length 5, got array of length " + (String(length) + "")
          ];
    }
  } else {
    throw [
          Json_decode.DecodeError,
          "Expected array, got " + JSON.stringify(json)
        ];
  }
}

var Decode = {
  sum: sum,
  maybe: maybe,
  tuple5: tuple5
};

function tuple5$1(encodeA, encodeB, encodeC, encodeD, encodeE, param) {
  return [
          Curry._1(encodeA, param[0]),
          Curry._1(encodeB, param[1]),
          Curry._1(encodeC, param[2]),
          Curry._1(encodeD, param[3]),
          Curry._1(encodeE, param[4])
        ];
}

var Encode = {
  tuple5: tuple5$1
};

function manyIn(elems, elem) {
  return Caml_splice_call.spliceApply(React.createElement, [
              elem,
              { },
              elems
            ]);
}

function manyIn2(elems, elem, props) {
  return Caml_splice_call.spliceApply(React.createElement, [
              elem,
              props,
              elems
            ]);
}

function sepBy$prime(item, sep) {
  if (!item) {
    return React.createElement(React.Fragment, undefined);
  }
  var xs = item[1];
  var x = item[0];
  if (xs) {
    return manyIn(Belt_List.toArray(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      x,
                      Belt_List.map(xs, (function (i) {
                              return React.createElement(React.Fragment, undefined, sep, i);
                            }))
                    ])), "span");
  } else {
    return x;
  }
}

function sepBy(sep, xs) {
  return sepBy$prime(Belt_List.fromArray(xs), sep);
}

function enclosedBy(front, back, item) {
  return React.createElement(React.Fragment, undefined, front, " ", item, " ", back);
}

function when_(p, className) {
  if (p) {
    return " " + className;
  } else {
    return "";
  }
}

function showWhen(param) {
  if (param) {
    return "";
  } else {
    return " hidden";
  }
}

var React$1 = {
  manyIn: manyIn,
  manyIn2: manyIn2,
  sepBy$prime: sepBy$prime,
  sepBy: sepBy,
  enclosedBy: enclosedBy,
  when_: when_,
  showWhen: showWhen
};

var partial_arg = /-.*/;

function trim(param) {
  return param.replace(partial_arg, "");
}

function compare(a, b) {
  var match = CompareVersions(Curry._1(trim, a), Curry._1(trim, b));
  if (match !== -1) {
    if (match !== 0) {
      return /* GT */2;
    } else {
      return /* EQ */1;
    }
  } else {
    return /* LT */0;
  }
}

function gte(a, b) {
  var match = compare(a, b);
  return match !== 0;
}

var Version = {
  trim: trim,
  compare: compare,
  gte: gte
};

function array(xs) {
  return "[" + (Caml_splice_call.spliceObjApply(", ", "concat", [xs]) + "]");
}

var Pretty = {
  array: array
};

function oneByOne$prime(param) {
  if (!param) {
    return $$Promise.resolved(/* [] */0);
  }
  var xs = param[1];
  return $$Promise.flatMap(Curry._1(param[0], undefined), (function (x$prime) {
                return $$Promise.map(oneByOne$prime(xs), (function (xs$prime) {
                              return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                        x$prime,
                                        xs$prime
                                      ]);
                            }));
              }));
}

function oneByOne(xs) {
  return $$Promise.map(oneByOne$prime(Belt_List.fromArray(xs)), Belt_List.toArray);
}

function toString(_e) {
  return (_e.toString());
}

var JsError = {
  toString: toString
};

exports.Decode = Decode;
exports.Encode = Encode;
exports.React = React$1;
exports.Version = Version;
exports.Pretty = Pretty;
exports.oneByOne$prime = oneByOne$prime;
exports.oneByOne = oneByOne;
exports.JsError = JsError;
/* react Not a pure module */
