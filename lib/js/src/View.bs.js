// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/lib/js/src/Json_encode.bs.js");
var Util$AgdaModeVscode = require("./Util/Util.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Translator$AgdaModeVscode = require("./InputMethod/Translator.bs.js");
var Emacs__Parser$AgdaModeVscode = require("./View/Emacs/Emacs__Parser.bs.js");

function toString(string) {
  return string[0];
}

var decode = Util$AgdaModeVscode.Decode.sum((function (tag) {
        switch (tag) {
          case "Error" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (text) {
                                          return /* Error */Caml_chrome_debugger.variant("Error", 3, [text]);
                                        }), Json_decode.string, param);
                          })]);
          case "Plain" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (text) {
                                          return /* Plain */Caml_chrome_debugger.variant("Plain", 0, [text]);
                                        }), Json_decode.string, param);
                          })]);
          case "Success" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (text) {
                                          return /* Success */Caml_chrome_debugger.variant("Success", 1, [text]);
                                        }), Json_decode.string, param);
                          })]);
          case "Warning" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (text) {
                                          return /* Warning */Caml_chrome_debugger.variant("Warning", 2, [text]);
                                        }), Json_decode.string, param);
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "[Header] Unknown constructor: " + tag
                ];
        }
      }));

function encode(text) {
  switch (text.tag | 0) {
    case /* Plain */0 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "Plain"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            text[0]
                          ],
                          /* [] */0
                        ])
                    ]));
    case /* Success */1 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "Success"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            text[0]
                          ],
                          /* [] */0
                        ])
                    ]));
    case /* Warning */2 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "Warning"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            text[0]
                          ],
                          /* [] */0
                        ])
                    ]));
    case /* Error */3 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "Error"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            text[0]
                          ],
                          /* [] */0
                        ])
                    ]));
    
  }
}

var Header = {
  toString: toString,
  decode: decode,
  encode: encode
};

var decode$1 = Util$AgdaModeVscode.Decode.sum((function (tag) {
        switch (tag) {
          case "AllGoalsWarnings" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [/* AllGoalsWarnings */1]);
          case "Error" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [/* Error */4]);
          case "GoalType" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [/* GoalType */2]);
          case "Outputs" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [/* Outputs */0]);
          case "SearchAbout" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [/* SearchAbout */3]);
          case "Text" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [/* Text */5]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "[Body.Emacs] Unknown constructor: " + tag
                ];
        }
      }));

function encode$1(param) {
  switch (param) {
    case /* Outputs */0 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "Outputs"
                      ],
                      /* [] */0
                    ]));
    case /* AllGoalsWarnings */1 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "AllGoalsWarnings"
                      ],
                      /* [] */0
                    ]));
    case /* GoalType */2 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "GoalType"
                      ],
                      /* [] */0
                    ]));
    case /* SearchAbout */3 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "SearchAbout"
                      ],
                      /* [] */0
                    ]));
    case /* Error */4 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "Error"
                      ],
                      /* [] */0
                    ]));
    case /* Text */5 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "Text"
                      ],
                      /* [] */0
                    ]));
    
  }
}

var Emacs = {
  decode: decode$1,
  encode: encode$1
};

var decode$2 = Util$AgdaModeVscode.Decode.sum((function (tag) {
        switch (tag) {
          case "Emacs" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (param) {
                                          return /* Emacs */Caml_chrome_debugger.variant("Emacs", 1, [
                                                    param[0],
                                                    param[1],
                                                    param[2]
                                                  ]);
                                        }), (function (param) {
                                          return Json_decode.tuple3(decode$1, Json_decode.string, Json_decode.string, param);
                                        }), param);
                          })]);
          case "Nothing" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [/* Nothing */0]);
          case "Plain" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (text) {
                                          return /* Plain */Caml_chrome_debugger.variant("Plain", 0, [text]);
                                        }), Json_decode.string, param);
                          })]);
          case "Query" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (param) {
                                          return /* Query */Caml_chrome_debugger.variant("Query", 2, [
                                                    param[0],
                                                    param[1]
                                                  ]);
                                        }), (function (param) {
                                          return Json_decode.pair((function (param) {
                                                        return Json_decode.optional(Json_decode.string, param);
                                                      }), (function (param) {
                                                        return Json_decode.optional(Json_decode.string, param);
                                                      }), param);
                                        }), param);
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "[Body] Unknown constructor: " + tag
                ];
        }
      }));

function encode$2(text) {
  if (typeof text === "number") {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "Nothing"
                  ],
                  /* [] */0
                ]));
  }
  switch (text.tag | 0) {
    case /* Plain */0 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "Plain"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            text[0]
                          ],
                          /* [] */0
                        ])
                    ]));
    case /* Emacs */1 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "Emacs"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            Json_encode.tuple3(encode$1, (function (prim) {
                                    return prim;
                                  }), (function (prim) {
                                    return prim;
                                  }), /* tuple */[
                                  text[0],
                                  text[1],
                                  text[2]
                                ])
                          ],
                          /* [] */0
                        ])
                    ]));
    case /* Query */2 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "Query"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            Json_encode.pair((function (param) {
                                    return Json_encode.nullable((function (prim) {
                                                  return prim;
                                                }), param);
                                  }), (function (param) {
                                    return Json_encode.nullable((function (prim) {
                                                  return prim;
                                                }), param);
                                  }), /* tuple */[
                                  text[0],
                                  text[1]
                                ])
                          ],
                          /* [] */0
                        ])
                    ]));
    
  }
}

var Body = {
  Emacs: Emacs,
  decode: decode$2,
  encode: encode$2
};

var decode$3 = Util$AgdaModeVscode.Decode.sum((function (tag) {
        if (tag === "Position") {
          return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                        return Json_decode.map((function (param) {
                                      return {
                                              pos: param[0],
                                              line: param[1],
                                              col: param[2]
                                            };
                                    }), (function (param) {
                                      return Json_decode.tuple3((function (param) {
                                                    return Json_decode.optional(Json_decode.$$int, param);
                                                  }), Json_decode.$$int, Json_decode.$$int, param);
                                    }), param);
                      })]);
        }
        throw [
              Json_decode.DecodeError,
              "[View.Position] Unknown constructor: " + tag
            ];
      }));

function encode$3(param) {
  return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                /* tuple */[
                  "tag",
                  "Position"
                ],
                /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* tuple */[
                      "contents",
                      Json_encode.tuple3((function (param) {
                              return Json_encode.nullable((function (prim) {
                                            return prim;
                                          }), param);
                            }), (function (prim) {
                              return prim;
                            }), (function (prim) {
                              return prim;
                            }), /* tuple */[
                            param.pos,
                            param.line,
                            param.col
                          ])
                    ],
                    /* [] */0
                  ])
              ]));
}

var Position = {
  decode: decode$3,
  encode: encode$3
};

function fuse(a, b) {
  var start = Caml_obj.caml_greaterthan(a.start.pos, b.start.pos) ? b.start : a.start;
  var end_ = Caml_obj.caml_greaterthan(a.end_.pos, b.end_.pos) ? a.end_ : b.end_;
  return {
          start: start,
          end_: end_
        };
}

function toString$1(self) {
  if (self.start.line === self.end_.line) {
    return String(self.start.line) + ("," + (String(self.start.col) + ("-" + String(self.end_.col))));
  } else {
    return String(self.start.line) + ("," + (String(self.start.col) + ("-" + (String(self.end_.line) + ("," + String(self.end_.col))))));
  }
}

var decode$4 = Util$AgdaModeVscode.Decode.sum((function (tag) {
        if (tag === "Interval") {
          return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                        return Json_decode.map((function (param) {
                                      return {
                                              start: param[0],
                                              end_: param[1]
                                            };
                                    }), (function (param) {
                                      return Json_decode.pair(decode$3, decode$3, param);
                                    }), param);
                      })]);
        }
        throw [
              Json_decode.DecodeError,
              "[View.Interval] Unknown constructor: " + tag
            ];
      }));

function encode$4(param) {
  return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                /* tuple */[
                  "tag",
                  "Interval"
                ],
                /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* tuple */[
                      "contents",
                      Json_encode.pair(encode$3, encode$3, /* tuple */[
                            param.start,
                            param.end_
                          ])
                    ],
                    /* [] */0
                  ])
              ]));
}

var Interval = {
  fuse: fuse,
  toString: toString$1,
  decode: decode$4,
  encode: encode$4
};

var partial_arg = /^(\S+)\:(?:(\d+)\,(\d+)\-(\d+)\,(\d+)|(\d+)\,(\d+)\-(\d+))$/;

function parse(param) {
  return Emacs__Parser$AgdaModeVscode.captures(partial_arg, (function (captured) {
                var xs = Belt_Array.get(captured, 1);
                var srcFile = Belt_Option.flatMap(xs, (function (x) {
                        return x;
                      }));
                var xs$1 = Belt_Array.get(captured, 6);
                var sameRow = Belt_Option.isSome(Belt_Option.flatMap(xs$1, (function (x) {
                            return x;
                          })));
                if (sameRow) {
                  var xs$2 = Belt_Array.get(captured, 6);
                  return Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.flatMap(xs$2, (function (x) {
                                        return x;
                                      })), Pervasives.int_of_string_opt), (function (row) {
                                var xs = Belt_Array.get(captured, 7);
                                return Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.flatMap(xs, (function (x) {
                                                      return x;
                                                    })), Pervasives.int_of_string_opt), (function (colStart) {
                                              var xs = Belt_Array.get(captured, 8);
                                              return Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.flatMap(xs, (function (x) {
                                                                    return x;
                                                                  })), Pervasives.int_of_string_opt), (function (colEnd) {
                                                            return /* Range */Caml_chrome_debugger.simpleVariant("Range", [
                                                                      srcFile,
                                                                      [{
                                                                          start: {
                                                                            pos: undefined,
                                                                            line: row,
                                                                            col: colStart
                                                                          },
                                                                          end_: {
                                                                            pos: undefined,
                                                                            line: row,
                                                                            col: colEnd
                                                                          }
                                                                        }]
                                                                    ]);
                                                          }));
                                            }));
                              }));
                }
                var xs$3 = Belt_Array.get(captured, 2);
                return Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.flatMap(xs$3, (function (x) {
                                      return x;
                                    })), Pervasives.int_of_string_opt), (function (rowStart) {
                              var xs = Belt_Array.get(captured, 3);
                              return Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.flatMap(xs, (function (x) {
                                                    return x;
                                                  })), Pervasives.int_of_string_opt), (function (colStart) {
                                            var xs = Belt_Array.get(captured, 4);
                                            return Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.flatMap(xs, (function (x) {
                                                                  return x;
                                                                })), Pervasives.int_of_string_opt), (function (rowEnd) {
                                                          var xs = Belt_Array.get(captured, 5);
                                                          return Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.flatMap(xs, (function (x) {
                                                                                return x;
                                                                              })), Pervasives.int_of_string_opt), (function (colEnd) {
                                                                        return /* Range */Caml_chrome_debugger.simpleVariant("Range", [
                                                                                  srcFile,
                                                                                  [{
                                                                                      start: {
                                                                                        pos: undefined,
                                                                                        line: rowStart,
                                                                                        col: colStart
                                                                                      },
                                                                                      end_: {
                                                                                        pos: undefined,
                                                                                        line: rowEnd,
                                                                                        col: colEnd
                                                                                      }
                                                                                    }]
                                                                                ]);
                                                                      }));
                                                        }));
                                          }));
                            }));
              }), param);
}

function fuse$1(a, b) {
  var mergeTouching = function (l, e, s, r) {
    return Belt_List.concat(Belt_List.concat(l, /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      {
                        start: e.start,
                        end_: s.end_
                      },
                      /* [] */0
                    ])), r);
  };
  var fuseSome = function (s1, r1, s2, r2) {
    var r1$prime = Util$AgdaModeVscode.List.dropWhile((function (x) {
            return Caml_obj.caml_lessequal(x.end_.pos, s2.end_.pos);
          }), r1);
    return helpFuse(r1$prime, /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  fuse(s1, s2),
                  r2
                ]));
  };
  var outputLeftPrefix = function (s1, r1, s2, is2) {
    var match = Util$AgdaModeVscode.List.span((function (s) {
            return Caml_obj.caml_lessthan(s.end_.pos, s2.start.pos);
          }), r1);
    return Belt_List.concat(Belt_List.concat(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      s1,
                      /* [] */0
                    ]), match[0]), helpFuse(match[1], is2));
  };
  var helpFuse = function (a, b) {
    var match = Belt_List.reverse(a);
    var match$1 = Belt_List.reverse(b);
    if (!a) {
      return a;
    }
    if (!match) {
      if (b) {
        return Pervasives.failwith("something wrong with Range::fuse");
      } else {
        return b;
      }
    }
    if (!b) {
      if (b) {
        return Pervasives.failwith("something wrong with Range::fuse");
      } else {
        return b;
      }
    }
    if (!match$1) {
      return Pervasives.failwith("something wrong with Range::fuse");
    }
    var e2 = match$1[0];
    var r2 = b[1];
    var s2 = b[0];
    var e1 = match[0];
    var r1 = a[1];
    var s1 = a[0];
    if (Caml_obj.caml_lessthan(e1.end_.pos, s2.start.pos)) {
      return Belt_List.concat(a, b);
    } else if (Caml_obj.caml_lessthan(e2.end_.pos, s1.start.pos)) {
      return Belt_List.concat(b, a);
    } else if (e1.end_.pos === s2.start.pos) {
      return mergeTouching(match[1], e1, s2, r2);
    } else if (e2.end_.pos === s1.start.pos) {
      return mergeTouching(match$1[1], e2, s1, r1);
    } else if (Caml_obj.caml_lessthan(s1.end_.pos, s2.start.pos)) {
      return outputLeftPrefix(s1, r1, s2, b);
    } else if (Caml_obj.caml_lessthan(s2.end_.pos, s1.start.pos)) {
      return outputLeftPrefix(s2, r2, s1, a);
    } else if (Caml_obj.caml_lessthan(s1.end_.pos, s2.end_.pos)) {
      return fuseSome(s1, r1, s2, r2);
    } else {
      return fuseSome(s2, r2, s1, r1);
    }
  };
  if (a) {
    if (b) {
      return /* Range */Caml_chrome_debugger.simpleVariant("Range", [
                a[0],
                Belt_List.toArray(helpFuse(Belt_List.fromArray(a[1]), Belt_List.fromArray(b[1])))
              ]);
    } else {
      return a;
    }
  } else {
    return b;
  }
}

function toString$2(self) {
  if (!self) {
    return "";
  }
  var filepath = self[0];
  if (filepath !== undefined) {
    var xs = self[1];
    if (xs.length === 0) {
      return filepath;
    }
    var match = Belt_Array.get(xs, 0);
    var match$1 = Belt_Array.get(xs, xs.length - 1 | 0);
    return filepath + (":" + (
              match !== undefined && match$1 !== undefined ? toString$1({
                      start: match.start,
                      end_: match$1.end_
                    }) : ""
            ));
  }
  var xs$1 = self[1];
  var match$2 = Belt_Array.get(xs$1, 0);
  var match$3 = Belt_Array.get(xs$1, xs$1.length - 1 | 0);
  if (match$2 !== undefined && match$3 !== undefined) {
    return toString$1({
                start: match$2.start,
                end_: match$3.end_
              });
  } else {
    return "";
  }
}

var decode$5 = Util$AgdaModeVscode.Decode.sum((function (tag) {
        switch (tag) {
          case "NoRange" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [/* NoRange */0]);
          case "Range" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (param) {
                                          return /* Range */Caml_chrome_debugger.simpleVariant("Range", [
                                                    param[0],
                                                    param[1]
                                                  ]);
                                        }), (function (param) {
                                          return Json_decode.pair((function (param) {
                                                        return Json_decode.optional(Json_decode.string, param);
                                                      }), (function (param) {
                                                        return Json_decode.array(decode$4, param);
                                                      }), param);
                                        }), param);
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "[View.Range] Unknown constructor: " + tag
                ];
        }
      }));

function encode$5(param) {
  if (param) {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "Range"
                  ],
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "contents",
                        Json_encode.pair((function (param) {
                                return Json_encode.nullable((function (prim) {
                                              return prim;
                                            }), param);
                              }), (function (param) {
                                return Json_encode.array(encode$4, param);
                              }), /* tuple */[
                              param[0],
                              param[1]
                            ])
                      ],
                      /* [] */0
                    ])
                ]));
  } else {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "NoRange"
                  ],
                  /* [] */0
                ]));
  }
}

var $$Range = {
  parse: parse,
  fuse: fuse$1,
  toString: toString$2,
  decode: decode$5,
  encode: encode$5
};

var decode$6 = Util$AgdaModeVscode.Decode.sum((function (tag) {
        switch (tag) {
          case "ToHole" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (index) {
                                          return /* ToHole */Caml_chrome_debugger.variant("ToHole", 1, [index]);
                                        }), Json_decode.$$int, param);
                          })]);
          case "ToRange" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (range) {
                                          return /* ToRange */Caml_chrome_debugger.variant("ToRange", 0, [range]);
                                        }), decode$5, param);
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "[View.Link] Unknown constructor: " + tag
                ];
        }
      }));

function encode$6(range) {
  if (range.tag) {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "ToHole"
                  ],
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "contents",
                        range[0]
                      ],
                      /* [] */0
                    ])
                ]));
  } else {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "ToRange"
                  ],
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "contents",
                        encode$5(range[0])
                      ],
                      /* [] */0
                    ])
                ]));
  }
}

var Link = {
  decode: decode$6,
  encode: encode$6
};

var decode$7 = Util$AgdaModeVscode.Decode.sum((function (tag) {
        switch (tag) {
          case "Activate" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [/* Activate */0]);
          case "Deactivate" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [/* Deactivate */1]);
          case "MoveDown" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [/* MoveDown */4]);
          case "MoveLeft" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [/* MoveLeft */5]);
          case "MoveRight" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [/* MoveRight */3]);
          case "MoveUp" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [/* MoveUp */2]);
          case "Update" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (param) {
                                          return /* Update */Caml_chrome_debugger.simpleVariant("Update", [
                                                    param[0],
                                                    param[1],
                                                    param[2]
                                                  ]);
                                        }), (function (param) {
                                          return Json_decode.tuple3(Json_decode.string, Translator$AgdaModeVscode.decode, Json_decode.$$int, param);
                                        }), param);
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "[EventToView.InputMethod] Unknown constructor: " + tag
                ];
        }
      }));

function encode$7(param) {
  if (typeof param !== "number") {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "Update"
                  ],
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "contents",
                        Json_encode.tuple3((function (prim) {
                                return prim;
                              }), Translator$AgdaModeVscode.encode, (function (prim) {
                                return prim;
                              }), /* tuple */[
                              param[0],
                              param[1],
                              param[2]
                            ])
                      ],
                      /* [] */0
                    ])
                ]));
  }
  switch (param) {
    case /* Activate */0 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "Activate"
                      ],
                      /* [] */0
                    ]));
    case /* Deactivate */1 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "Deactivate"
                      ],
                      /* [] */0
                    ]));
    case /* MoveUp */2 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "MoveUp"
                      ],
                      /* [] */0
                    ]));
    case /* MoveRight */3 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "MoveRight"
                      ],
                      /* [] */0
                    ]));
    case /* MoveDown */4 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "MoveDown"
                      ],
                      /* [] */0
                    ]));
    case /* MoveLeft */5 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "MoveLeft"
                      ],
                      /* [] */0
                    ]));
    
  }
}

var InputMethod = {
  decode: decode$7,
  encode: encode$7
};

var decode$8 = Util$AgdaModeVscode.Decode.sum((function (tag) {
        switch (tag) {
          case "Display" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (param) {
                                          return /* Display */Caml_chrome_debugger.variant("Display", 0, [
                                                    param[0],
                                                    param[1]
                                                  ]);
                                        }), (function (param) {
                                          return Json_decode.pair(decode, decode$2, param);
                                        }), param);
                          })]);
          case "InputMethod" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* InputMethod */Caml_chrome_debugger.variant("InputMethod", 2, [x]);
                                        }), decode$7, param);
                          })]);
          case "QueryInterrupt" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [/* QueryInterrupt */0]);
          case "QueryUpdate" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (text) {
                                          return /* QueryUpdate */Caml_chrome_debugger.variant("QueryUpdate", 1, [text]);
                                        }), Json_decode.string, param);
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "[EventToView] Unknown constructor: " + tag
                ];
        }
      }));

function encode$8(text) {
  if (typeof text === "number") {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "QueryInterrupt"
                  ],
                  /* [] */0
                ]));
  }
  switch (text.tag | 0) {
    case /* Display */0 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "Display"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            Json_encode.pair(encode, encode$2, /* tuple */[
                                  text[0],
                                  text[1]
                                ])
                          ],
                          /* [] */0
                        ])
                    ]));
    case /* QueryUpdate */1 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "QueryUpdate"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            text[0]
                          ],
                          /* [] */0
                        ])
                    ]));
    case /* InputMethod */2 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "InputMethod"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            encode$7(text[0])
                          ],
                          /* [] */0
                        ])
                    ]));
    
  }
}

var EventToView = {
  InputMethod: InputMethod,
  decode: decode$8,
  encode: encode$8
};

var decode$9 = Util$AgdaModeVscode.Decode.sum((function (tag) {
        if (tag === "Query") {
          return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                        return Json_decode.map((function (param) {
                                      return /* Query */Caml_chrome_debugger.simpleVariant("Query", [
                                                param[0],
                                                param[1],
                                                param[2]
                                              ]);
                                    }), (function (param) {
                                      return Json_decode.tuple3(Json_decode.string, (function (param) {
                                                    return Json_decode.optional(Json_decode.string, param);
                                                  }), (function (param) {
                                                    return Json_decode.optional(Json_decode.string, param);
                                                  }), param);
                                    }), param);
                      })]);
        }
        throw [
              Json_decode.DecodeError,
              "[Request] Unknown constructor: " + tag
            ];
      }));

function encode$9(param) {
  return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                /* tuple */[
                  "tag",
                  "Query"
                ],
                /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* tuple */[
                      "contents",
                      Json_encode.tuple3((function (prim) {
                              return prim;
                            }), (function (param) {
                              return Json_encode.nullable((function (prim) {
                                            return prim;
                                          }), param);
                            }), (function (param) {
                              return Json_encode.nullable((function (prim) {
                                            return prim;
                                          }), param);
                            }), /* tuple */[
                            param[0],
                            param[1],
                            param[2]
                          ])
                    ],
                    /* [] */0
                  ])
              ]));
}

var $$Request = {
  decode: decode$9,
  encode: encode$9
};

var decode$10 = Util$AgdaModeVscode.Decode.sum((function (tag) {
        switch (tag) {
          case "Event" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* Event */Caml_chrome_debugger.variant("Event", 1, [x]);
                                        }), decode$8, param);
                          })]);
          case "Request" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* Request */Caml_chrome_debugger.variant("Request", 0, [x]);
                                        }), decode$9, param);
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "[RequestOrEventToView] Unknown constructor: " + tag
                ];
        }
      }));

function encode$10(payload) {
  if (payload.tag) {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "Event"
                  ],
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "contents",
                        encode$8(payload[0])
                      ],
                      /* [] */0
                    ])
                ]));
  } else {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "Request"
                  ],
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "contents",
                        encode$9(payload[0])
                      ],
                      /* [] */0
                    ])
                ]));
  }
}

var RequestOrEventToView = {
  decode: decode$10,
  encode: encode$10
};

var decode$11 = Util$AgdaModeVscode.Decode.sum((function (tag) {
        switch (tag) {
          case "QueryInterrupted" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [/* QueryInterrupted */1]);
          case "QuerySuccess" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (result) {
                                          return /* QuerySuccess */Caml_chrome_debugger.simpleVariant("QuerySuccess", [result]);
                                        }), Json_decode.string, param);
                          })]);
          case "Success" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [/* Success */0]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "[Response] Unknown constructor: " + tag
                ];
        }
      }));

function encode$11(result) {
  if (typeof result === "number") {
    if (result !== 0) {
      return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* tuple */[
                      "tag",
                      "QueryInterrupted"
                    ],
                    /* [] */0
                  ]));
    } else {
      return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* tuple */[
                      "tag",
                      "Success"
                    ],
                    /* [] */0
                  ]));
    }
  } else {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "QuerySuccess"
                  ],
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "contents",
                        result[0]
                      ],
                      /* [] */0
                    ])
                ]));
  }
}

var $$Response = {
  decode: decode$11,
  encode: encode$11
};

var decode$12 = Util$AgdaModeVscode.Decode.sum((function (tag) {
        switch (tag) {
          case "ChooseSymbol" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function ($$char) {
                                          return /* ChooseSymbol */Caml_chrome_debugger.variant("ChooseSymbol", 1, [$$char]);
                                        }), Json_decode.string, param);
                          })]);
          case "InsertChar" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function ($$char) {
                                          return /* InsertChar */Caml_chrome_debugger.variant("InsertChar", 0, [$$char]);
                                        }), Json_decode.string, param);
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "[Event.InputMethod] Unknown constructor: " + tag
                ];
        }
      }));

function encode$12($$char) {
  if ($$char.tag) {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "ChooseSymbol"
                  ],
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "contents",
                        $$char[0]
                      ],
                      /* [] */0
                    ])
                ]));
  } else {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "InsertChar"
                  ],
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "contents",
                        $$char[0]
                      ],
                      /* [] */0
                    ])
                ]));
  }
}

var InputMethod$1 = {
  decode: decode$12,
  encode: encode$12
};

var decode$13 = Util$AgdaModeVscode.Decode.sum((function (tag) {
        switch (tag) {
          case "Destroyed" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [/* Destroyed */1]);
          case "Initialized" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [/* Initialized */0]);
          case "InputMethod" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (action) {
                                          return /* InputMethod */Caml_chrome_debugger.variant("InputMethod", 0, [action]);
                                        }), decode$12, param);
                          })]);
          case "JumpToTarget" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (link) {
                                          return /* JumpToTarget */Caml_chrome_debugger.variant("JumpToTarget", 2, [link]);
                                        }), decode$6, param);
                          })]);
          case "MouseOut" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (link) {
                                          return /* MouseOut */Caml_chrome_debugger.variant("MouseOut", 4, [link]);
                                        }), decode$6, param);
                          })]);
          case "MouseOver" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (link) {
                                          return /* MouseOver */Caml_chrome_debugger.variant("MouseOver", 3, [link]);
                                        }), decode$6, param);
                          })]);
          case "QueryChange" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (text) {
                                          return /* QueryChange */Caml_chrome_debugger.variant("QueryChange", 1, [text]);
                                        }), Json_decode.string, param);
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "[Response.EventFromView] Unknown constructor: " + tag
                ];
        }
      }));

function encode$13(action) {
  if (typeof action === "number") {
    if (action === /* Initialized */0) {
      return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* tuple */[
                      "tag",
                      "Initialized"
                    ],
                    /* [] */0
                  ]));
    } else {
      return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* tuple */[
                      "tag",
                      "Destroyed"
                    ],
                    /* [] */0
                  ]));
    }
  }
  switch (action.tag | 0) {
    case /* InputMethod */0 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "InputMethod"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            encode$12(action[0])
                          ],
                          /* [] */0
                        ])
                    ]));
    case /* QueryChange */1 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "QueryChange"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            action[0]
                          ],
                          /* [] */0
                        ])
                    ]));
    case /* JumpToTarget */2 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "JumpToTarget"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            encode$6(action[0])
                          ],
                          /* [] */0
                        ])
                    ]));
    case /* MouseOver */3 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "MouseOver"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            encode$6(action[0])
                          ],
                          /* [] */0
                        ])
                    ]));
    case /* MouseOut */4 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "MouseOut"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            encode$6(action[0])
                          ],
                          /* [] */0
                        ])
                    ]));
    
  }
}

var EventFromView = {
  InputMethod: InputMethod$1,
  decode: decode$13,
  encode: encode$13
};

var decode$14 = Util$AgdaModeVscode.Decode.sum((function (tag) {
        switch (tag) {
          case "Event" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* Event */Caml_chrome_debugger.variant("Event", 1, [x]);
                                        }), decode$13, param);
                          })]);
          case "Response" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* Response */Caml_chrome_debugger.variant("Response", 0, [x]);
                                        }), decode$11, param);
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "[ResponseOrEventFromView] Unknown constructor: " + tag
                ];
        }
      }));

function encode$14(payload) {
  if (payload.tag) {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "Event"
                  ],
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "contents",
                        encode$13(payload[0])
                      ],
                      /* [] */0
                    ])
                ]));
  } else {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "Response"
                  ],
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "contents",
                        encode$11(payload[0])
                      ],
                      /* [] */0
                    ])
                ]));
  }
}

var ResponseOrEventFromView = {
  decode: decode$14,
  encode: encode$14
};

exports.Header = Header;
exports.Body = Body;
exports.Position = Position;
exports.Interval = Interval;
exports.$$Range = $$Range;
exports.Link = Link;
exports.EventToView = EventToView;
exports.$$Request = $$Request;
exports.RequestOrEventToView = RequestOrEventToView;
exports.$$Response = $$Response;
exports.EventFromView = EventFromView;
exports.ResponseOrEventFromView = ResponseOrEventFromView;
/* decode Not a pure module */
