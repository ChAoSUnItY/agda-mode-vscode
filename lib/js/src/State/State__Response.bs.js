// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Vscode = require("vscode");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Util$AgdaModeVscode = require("../Util/Util.bs.js");
var State$AgdaModeVscode = require("../State.bs.js");
var Editor$AgdaModeVscode = require("../Editor.bs.js");
var Parser$AgdaModeVscode = require("../Parser.bs.js");
var State__Goal$AgdaModeVscode = require("./State__Goal.bs.js");

function handle(state, x) {
  if (typeof x === "number") {
    return State$AgdaModeVscode.View.display(state, {
                TAG: 1,
                _0: "Compilation Done!",
                [Symbol.for("name")]: "Success"
              }, /* Nothing */0);
  }
  switch (x.TAG | 0) {
    case /* Constraints */0 :
        var body = x._0;
        if (body !== undefined) {
          return State$AgdaModeVscode.View.displayEmacs(state, /* Outputs */0, {
                      TAG: 0,
                      _0: "Constraints",
                      [Symbol.for("name")]: "Plain"
                    }, body);
        } else {
          return State$AgdaModeVscode.View.display(state, {
                      TAG: 0,
                      _0: "No Constraints",
                      [Symbol.for("name")]: "Plain"
                    }, /* Nothing */0);
        }
    case /* AllGoalsWarnings */1 :
        var body$1 = x._1;
        var header = x._0;
        if (body$1 === "nil") {
          return State$AgdaModeVscode.View.display(state, {
                      TAG: 1,
                      _0: header,
                      [Symbol.for("name")]: "Success"
                    }, /* Nothing */0);
        } else {
          return State$AgdaModeVscode.View.displayEmacs(state, /* AllGoalsWarnings */1, {
                      TAG: 0,
                      _0: header,
                      [Symbol.for("name")]: "Plain"
                    }, body$1);
        }
    case /* Time */2 :
        return State$AgdaModeVscode.View.displayEmacs(state, /* Text */5, {
                    TAG: 0,
                    _0: "Time",
                    [Symbol.for("name")]: "Plain"
                  }, x._0);
    case /* Error */3 :
        return State$AgdaModeVscode.View.displayEmacs(state, /* Error */4, {
                    TAG: 3,
                    _0: "Error!",
                    [Symbol.for("name")]: "Error"
                  }, x._0);
    case /* Intro */4 :
        return State$AgdaModeVscode.View.displayEmacs(state, /* Text */5, {
                    TAG: 0,
                    _0: "Intro",
                    [Symbol.for("name")]: "Plain"
                  }, x._0);
    case /* Auto */5 :
        return State$AgdaModeVscode.View.displayEmacs(state, /* Text */5, {
                    TAG: 0,
                    _0: "Auto",
                    [Symbol.for("name")]: "Plain"
                  }, x._0);
    case /* ModuleContents */6 :
        return State$AgdaModeVscode.View.displayEmacs(state, /* Text */5, {
                    TAG: 0,
                    _0: "Module Contents",
                    [Symbol.for("name")]: "Plain"
                  }, x._0);
    case /* SearchAbout */7 :
        return State$AgdaModeVscode.View.displayEmacs(state, /* SearchAbout */3, {
                    TAG: 0,
                    _0: "Search About",
                    [Symbol.for("name")]: "Plain"
                  }, x._0);
    case /* WhyInScope */8 :
        return State$AgdaModeVscode.View.displayEmacs(state, /* Text */5, {
                    TAG: 0,
                    _0: "Scope info",
                    [Symbol.for("name")]: "Plain"
                  }, x._0);
    case /* NormalForm */9 :
        return State$AgdaModeVscode.View.displayEmacs(state, /* Text */5, {
                    TAG: 0,
                    _0: "Normal form",
                    [Symbol.for("name")]: "Plain"
                  }, x._0);
    case /* GoalType */10 :
        return State$AgdaModeVscode.View.displayEmacs(state, /* GoalType */2, {
                    TAG: 0,
                    _0: "Goal and Context",
                    [Symbol.for("name")]: "Plain"
                  }, x._0);
    case /* CurrentGoal */11 :
        return State$AgdaModeVscode.View.display(state, {
                    TAG: 0,
                    _0: "Current goal",
                    [Symbol.for("name")]: "Plain"
                  }, {
                    TAG: 0,
                    _0: x._0,
                    [Symbol.for("name")]: "Plain"
                  });
    case /* InferredType */12 :
        return State$AgdaModeVscode.View.display(state, {
                    TAG: 0,
                    _0: "Inferred type",
                    [Symbol.for("name")]: "Plain"
                  }, {
                    TAG: 0,
                    _0: x._0,
                    [Symbol.for("name")]: "Plain"
                  });
    case /* Context */13 :
        return State$AgdaModeVscode.View.displayEmacs(state, /* Outputs */0, {
                    TAG: 0,
                    _0: "Context",
                    [Symbol.for("name")]: "Plain"
                  }, x._0);
    case /* HelperFunction */14 :
        var payload = x._0;
        return $$Promise.flatMap(Vscode.env.clipboard.writeText(payload), (function (param) {
                      return State$AgdaModeVscode.View.display(state, {
                                  TAG: 0,
                                  _0: "Helper function (copied to clipboard)",
                                  [Symbol.for("name")]: "Plain"
                                }, {
                                  TAG: 0,
                                  _0: payload,
                                  [Symbol.for("name")]: "Plain"
                                });
                    }));
    case /* Version */15 :
        return State$AgdaModeVscode.View.display(state, {
                    TAG: 0,
                    _0: "Version",
                    [Symbol.for("name")]: "Plain"
                  }, {
                    TAG: 0,
                    _0: x._0,
                    [Symbol.for("name")]: "Plain"
                  });
    
  }
}

var DisplayInfo = {
  handle: handle
};

function handle$1(state, dispatchCommand, response) {
  if (typeof response === "number") {
    if (response !== /* ClearHighlighting */1) {
      return $$Promise.resolved(undefined);
    }
    State$AgdaModeVscode.Decoration.clear(state);
    return $$Promise.resolved(undefined);
  } else {
    switch (response.TAG | 0) {
      case /* HighlightingInfoDirect */0 :
          State$AgdaModeVscode.Decoration.addViaPipe(state, response._1);
          return $$Promise.resolved(undefined);
      case /* HighlightingInfoIndirect */1 :
          State$AgdaModeVscode.Decoration.addViaFile(state, response._0);
          return $$Promise.resolved(undefined);
      case /* Status */2 :
          return $$Promise.resolved(undefined);
      case /* JumpToError */3 :
          var path = Parser$AgdaModeVscode.filepath(state.document.fileName);
          if (path === response._0) {
            var point = state.document.positionAt(response._1 - 1 | 0);
            Editor$AgdaModeVscode.Cursor.set(state.editor, point);
          }
          return $$Promise.resolved(undefined);
      case /* InteractionPoints */4 :
          return State__Goal$AgdaModeVscode.instantiate(state, response._0);
      case /* GiveAction */5 :
          var give = response._1;
          var index = response._0;
          var found = Belt_Array.keep(state.goals, (function (goal) {
                  return goal.index === index;
                }));
          var goal = Belt_Array.get(found, 0);
          if (goal === undefined) {
            return State$AgdaModeVscode.View.display(state, {
                        TAG: 3,
                        _0: "Error: Give failed",
                        [Symbol.for("name")]: "Error"
                      }, {
                        TAG: 0,
                        _0: "Cannot find goal #" + String(index),
                        [Symbol.for("name")]: "Plain"
                      });
          }
          if (typeof give === "number") {
            if (give !== 0) {
              return State__Goal$AgdaModeVscode.removeBoundaryAndDestroy(state, goal);
            } else {
              return $$Promise.flatMap(State__Goal$AgdaModeVscode.modify(state, goal, (function (content) {
                                return "(" + (content + ")");
                              })), (function (param) {
                            return State__Goal$AgdaModeVscode.removeBoundaryAndDestroy(state, goal);
                          }));
            }
          }
          var content = give._0;
          return $$Promise.flatMap(State__Goal$AgdaModeVscode.modify(state, goal, (function (param) {
                            return content.replace(/\\n/g, "\n");
                          })), (function (param) {
                        return State__Goal$AgdaModeVscode.removeBoundaryAndDestroy(state, goal);
                      }));
      case /* MakeCase */6 :
          var lines = response._1;
          var makeCaseType = response._0;
          return State__Goal$AgdaModeVscode.caseSimple(state, (function (goal) {
                        return $$Promise.flatMap(makeCaseType ? State__Goal$AgdaModeVscode.replaceWithLambda(state, goal, lines) : State__Goal$AgdaModeVscode.replaceWithLines(state, goal, lines), (function (param) {
                                      return Curry._1(dispatchCommand, /* Load */0);
                                    }));
                      }), State$AgdaModeVscode.View.displayOutOfGoalError(state));
      case /* SolveAll */7 :
          var solutions = response._0;
          var solveOne = function (param) {
            var solution = param[1];
            var index = param[0];
            var goals = Belt_Array.keep(state.goals, (function (goal) {
                    return goal.index === index;
                  }));
            var goal = Belt_Array.get(goals, 0);
            if (goal !== undefined) {
              return $$Promise.flatMap(State__Goal$AgdaModeVscode.modify(state, goal, (function (param) {
                                return solution;
                              })), (function (param) {
                            var param$1 = {
                              TAG: 3,
                              _0: goal,
                              [Symbol.for("name")]: "Give"
                            };
                            return State$AgdaModeVscode.Connection.sendRequest(state, (function (param) {
                                          return handle$1(state, dispatchCommand, param);
                                        }), param$1);
                          }));
            } else {
              return $$Promise.resolved(undefined);
            }
          };
          return $$Promise.flatMap(Util$AgdaModeVscode.oneByOne(Belt_Array.map(solutions, solveOne)), (function (param) {
                        var size = solutions.length;
                        if (size === 0) {
                          return State$AgdaModeVscode.View.display(state, {
                                      TAG: 3,
                                      _0: "No solutions found",
                                      [Symbol.for("name")]: "Error"
                                    }, /* Nothing */0);
                        } else {
                          return State$AgdaModeVscode.View.display(state, {
                                      TAG: 1,
                                      _0: String(size) + " goals solved",
                                      [Symbol.for("name")]: "Success"
                                    }, /* Nothing */0);
                        }
                      }));
      case /* DisplayInfo */8 :
          return handle(state, response._0);
      case /* RunningInfo */9 :
          return State$AgdaModeVscode.View.display(state, {
                      TAG: 0,
                      _0: "Type-checking",
                      [Symbol.for("name")]: "Plain"
                    }, {
                      TAG: 0,
                      _0: response._1,
                      [Symbol.for("name")]: "Plain"
                    });
      
    }
  }
}

exports.DisplayInfo = DisplayInfo;
exports.handle = handle$1;
/* vscode Not a pure module */
