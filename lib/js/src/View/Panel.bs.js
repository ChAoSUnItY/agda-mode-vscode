// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Body$AgdaModeVscode = require("./Body.bs.js");
var Hook$AgdaModeVscode = require("./Hook.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Header$AgdaModeVscode = require("./Header.bs.js");
var Keyboard$AgdaModeVscode = require("./Keyboard.bs.js");

function Panel(Props) {
  var onRequest = Props.onRequest;
  var onEventToView = Props.onEventToView;
  var onResponse = Props.onResponse;
  var onEventFromView = Props.onEventFromView;
  var match = React.useState((function () {
          return /* Plain */Caml_chrome_debugger.variant("Plain", 0, ["Loading ..."]);
        }));
  var setHeader = match[1];
  var match$1 = React.useState((function () {
          return /* Nothing */0;
        }));
  var setBody = match$1[1];
  var match$2 = React.useReducer(Keyboard$AgdaModeVscode.reducer, undefined);
  var runInputMethodAction = match$2[1];
  React.useEffect((function () {
          Curry._1(onEventFromView.emit, /* Initialized */0);
          
        }), []);
  var resolver = React.useRef(undefined);
  var onSubmit = function (result) {
    var resolve = resolver.current;
    if (resolve !== undefined) {
      Curry._1(resolve, result);
      resolver.current = undefined;
      return ;
    }
    
  };
  Hook$AgdaModeVscode.recv(onRequest, onResponse, (function (msg) {
          var value = msg[2];
          var placeholder = msg[1];
          var header = msg[0];
          var match = $$Promise.pending(undefined);
          resolver.current = match[1];
          Curry._1(setHeader, (function (param) {
                  return /* Plain */Caml_chrome_debugger.variant("Plain", 0, [header]);
                }));
          Curry._1(setBody, (function (param) {
                  return /* Query */Caml_chrome_debugger.variant("Query", 1, [
                            placeholder,
                            value
                          ]);
                }));
          return $$Promise.map(match[0], (function (result) {
                        if (result !== undefined) {
                          return /* QuerySuccess */Caml_chrome_debugger.simpleVariant("QuerySuccess", [result]);
                        } else {
                          return /* QueryInterrupted */1;
                        }
                      }));
        }));
  Hook$AgdaModeVscode.on(onEventToView, (function ($$event) {
          if (typeof $$event === "number") {
            switch ($$event) {
              case /* Show */0 :
              case /* Hide */1 :
                  return ;
              case /* InterruptQuery */2 :
                  return onSubmit(undefined);
              
            }
          } else {
            if ($$event.tag) {
              return Curry._1(runInputMethodAction, $$event[0]);
            }
            var body = $$event[1];
            var header = $$event[0];
            Curry._1(setHeader, (function (param) {
                    return header;
                  }));
            return Curry._1(setBody, (function (param) {
                          return body;
                        }));
          }
        }));
  return React.createElement("section", {
              className: "agda-mode native-key-bindings",
              tabIndex: -1
            }, React.createElement(Keyboard$AgdaModeVscode.make, {
                  state: match$2[0],
                  onInsertChar: (function ($$char) {
                      console.log("onInsertChar " + $$char);
                      return Curry._1(onEventFromView.emit, /* InputMethod */Caml_chrome_debugger.simpleVariant("InputMethod", [/* InsertChar */Caml_chrome_debugger.variant("InsertChar", 0, [$$char])]));
                    }),
                  onChooseSymbol: (function (symbol) {
                      console.log("onChooseSymbol " + symbol);
                      return Curry._1(onEventFromView.emit, /* InputMethod */Caml_chrome_debugger.simpleVariant("InputMethod", [/* ChooseSymbol */Caml_chrome_debugger.variant("ChooseSymbol", 1, [symbol])]));
                    })
                }), React.createElement(Header$AgdaModeVscode.make, {
                  header: match[0]
                }), React.createElement(Body$AgdaModeVscode.make, {
                  body: match$1[0],
                  onSubmit: onSubmit
                }));
}

var make = Panel;

exports.make = make;
/* react Not a pure module */
