// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var VSCode = require("rescript-vscode/lib/js/src/VSCode.bs.js");
var Vscode = require("vscode");
var Js_dict = require("rescript/lib/js/js_dict.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Editor$AgdaModeVscode = require("../Editor.bs.js");

function fromAspect(x) {
  switch (x) {
    case /* Comment */0 :
        return {
                light: {
                  TAG: 1,
                  _0: "#B0B0B0",
                  [Symbol.for("name")]: "Foreground"
                },
                dark: {
                  TAG: 1,
                  _0: "#505050",
                  [Symbol.for("name")]: "Foreground"
                }
              };
    case /* Keyword */1 :
        return {
                light: {
                  TAG: 1,
                  _0: "#CD6600",
                  [Symbol.for("name")]: "Foreground"
                },
                dark: {
                  TAG: 1,
                  _0: "#FF9932",
                  [Symbol.for("name")]: "Foreground"
                }
              };
    case /* String */2 :
        return {
                light: {
                  TAG: 1,
                  _0: "#B22222",
                  [Symbol.for("name")]: "Foreground"
                },
                dark: {
                  TAG: 1,
                  _0: "#DD4D4D",
                  [Symbol.for("name")]: "Foreground"
                }
              };
    case /* Number */3 :
        return {
                light: {
                  TAG: 1,
                  _0: "#800080",
                  [Symbol.for("name")]: "Foreground"
                },
                dark: {
                  TAG: 1,
                  _0: "#9010E0",
                  [Symbol.for("name")]: "Foreground"
                }
              };
    case /* Symbol */4 :
        return {
                light: {
                  TAG: 1,
                  _0: "#404040",
                  [Symbol.for("name")]: "Foreground"
                },
                dark: {
                  TAG: 1,
                  _0: "#BFBFBF",
                  [Symbol.for("name")]: "Foreground"
                }
              };
    case /* Error */9 :
        return {
                light: {
                  TAG: 1,
                  _0: "#FF0000",
                  [Symbol.for("name")]: "Foreground"
                },
                dark: {
                  TAG: 1,
                  _0: "#FF0000",
                  [Symbol.for("name")]: "Foreground"
                }
              };
    case /* UnsolvedMeta */11 :
    case /* UnsolvedConstraint */12 :
        return {
                light: {
                  TAG: 0,
                  _0: "#FFFF00",
                  [Symbol.for("name")]: "Background"
                },
                dark: {
                  TAG: 0,
                  _0: "#806B00",
                  [Symbol.for("name")]: "Background"
                }
              };
    case /* TerminationProblem */13 :
        return {
                light: {
                  TAG: 0,
                  _0: "#FFA07A",
                  [Symbol.for("name")]: "Background"
                },
                dark: {
                  TAG: 0,
                  _0: "#802400",
                  [Symbol.for("name")]: "Background"
                }
              };
    case /* PositivityProblem */14 :
        return {
                light: {
                  TAG: 0,
                  _0: "#CD853F",
                  [Symbol.for("name")]: "Background"
                },
                dark: {
                  TAG: 0,
                  _0: "#803F00",
                  [Symbol.for("name")]: "Background"
                }
              };
    case /* Deadcode */15 :
        return {
                light: {
                  TAG: 0,
                  _0: "#A9A9A9",
                  [Symbol.for("name")]: "Background"
                },
                dark: {
                  TAG: 0,
                  _0: "#808080",
                  [Symbol.for("name")]: "Background"
                }
              };
    case /* CoverageProblem */16 :
        return {
                light: {
                  TAG: 0,
                  _0: "#F5DEB3",
                  [Symbol.for("name")]: "Background"
                },
                dark: {
                  TAG: 0,
                  _0: "#805300",
                  [Symbol.for("name")]: "Background"
                }
              };
    case /* IncompletePattern */17 :
        return {
                light: {
                  TAG: 0,
                  _0: "#800080",
                  [Symbol.for("name")]: "Background"
                },
                dark: {
                  TAG: 0,
                  _0: "#800080",
                  [Symbol.for("name")]: "Background"
                }
              };
    case /* CatchallClause */19 :
        return {
                light: {
                  TAG: 0,
                  _0: "#F5F5F5",
                  [Symbol.for("name")]: "Background"
                },
                dark: {
                  TAG: 0,
                  _0: "#404040",
                  [Symbol.for("name")]: "Background"
                }
              };
    case /* ConfluenceProblem */20 :
        return {
                light: {
                  TAG: 0,
                  _0: "#FFC0CB",
                  [Symbol.for("name")]: "Background"
                },
                dark: {
                  TAG: 0,
                  _0: "#800080",
                  [Symbol.for("name")]: "Background"
                }
              };
    case /* ConstructorInductive */23 :
        return {
                light: {
                  TAG: 1,
                  _0: "#008B00",
                  [Symbol.for("name")]: "Foreground"
                },
                dark: {
                  TAG: 1,
                  _0: "#29CC29",
                  [Symbol.for("name")]: "Foreground"
                }
              };
    case /* ConstructorCoInductive */24 :
        return {
                light: {
                  TAG: 1,
                  _0: "#996600",
                  [Symbol.for("name")]: "Foreground"
                },
                dark: {
                  TAG: 1,
                  _0: "#FFEA75",
                  [Symbol.for("name")]: "Foreground"
                }
              };
    case /* Field */26 :
        return {
                light: {
                  TAG: 1,
                  _0: "#EE1289",
                  [Symbol.for("name")]: "Foreground"
                },
                dark: {
                  TAG: 1,
                  _0: "#F570B7",
                  [Symbol.for("name")]: "Foreground"
                }
              };
    case /* Module */28 :
        return {
                light: {
                  TAG: 1,
                  _0: "#800080",
                  [Symbol.for("name")]: "Foreground"
                },
                dark: {
                  TAG: 1,
                  _0: "#CD80FF",
                  [Symbol.for("name")]: "Foreground"
                }
              };
    case /* PrimitiveType */5 :
    case /* Datatype */25 :
    case /* Function */27 :
    case /* Postulate */29 :
    case /* Primitive */30 :
    case /* Record */31 :
        return {
                light: {
                  TAG: 1,
                  _0: "#0000CD",
                  [Symbol.for("name")]: "Foreground"
                },
                dark: {
                  TAG: 1,
                  _0: "#8080FF",
                  [Symbol.for("name")]: "Foreground"
                }
              };
    case /* Macro */33 :
        return {
                light: {
                  TAG: 1,
                  _0: "#458B74",
                  [Symbol.for("name")]: "Foreground"
                },
                dark: {
                  TAG: 1,
                  _0: "#73BAA2",
                  [Symbol.for("name")]: "Foreground"
                }
              };
    case /* Pragma */6 :
    case /* Background */7 :
    case /* Markup */8 :
    case /* DottedPattern */10 :
    case /* TypeChecks */18 :
    case /* Bound */21 :
    case /* Generalizable */22 :
    case /* Argument */32 :
    case /* Operator */34 :
        return ;
    
  }
}

function toVSCodeDecorations(input, editor) {
  var backgroundColorDict = {};
  var foregroundColorDict = {};
  var addFaceToDict = function (face, range) {
    if (face.TAG === /* Background */0) {
      var color = face._0;
      var ranges = Js_dict.get(backgroundColorDict, color);
      if (ranges !== undefined) {
        ranges.push(range);
      } else {
        backgroundColorDict[color] = [range];
      }
      return ;
    }
    var color$1 = face._0;
    var ranges$1 = Js_dict.get(foregroundColorDict, color$1);
    if (ranges$1 !== undefined) {
      ranges$1.push(range);
    } else {
      foregroundColorDict[color$1] = [range];
    }
    
  };
  Belt_Array.forEach(input, (function (param) {
          var range = param[1];
          var match = param[0];
          var theme = VSCode.ColorTheme.kind(Vscode.window.activeColorTheme);
          if (theme === /* Dark */1) {
            return addFaceToDict(match.dark, range);
          } else {
            return addFaceToDict(match.light, range);
          }
        }));
  var backgroundDecorations = Belt_Array.map(Js_dict.entries(backgroundColorDict), (function (param) {
          var ranges = param[1];
          return [
                  Editor$AgdaModeVscode.Decoration.highlightBackgroundWithColor(editor, param[0], ranges),
                  ranges
                ];
        }));
  var foregroundDecorations = Belt_Array.map(Js_dict.entries(foregroundColorDict), (function (param) {
          var ranges = param[1];
          return [
                  Editor$AgdaModeVscode.Decoration.decorateTextWithColor(editor, param[0], ranges),
                  ranges
                ];
        }));
  return foregroundDecorations.concat(backgroundDecorations);
}

exports.fromAspect = fromAspect;
exports.toVSCodeDecorations = toVSCodeDecorations;
/* VSCode Not a pure module */
