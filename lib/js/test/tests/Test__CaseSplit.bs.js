// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Vscode = require("vscode");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Mocha$BsMocha = require("bs-mocha/lib/js/src/Mocha.bs.js");
var Assert$BsMocha = require("bs-mocha/lib/js/src/Assert.bs.js");
var Promise$BsMocha = require("bs-mocha/lib/js/src/Promise.bs.js");
var Goal$AgdaModeVscode = require("../../src/Goal.bs.js");
var Task$AgdaModeVscode = require("../../src/Task/Task.bs.js");
var Util$AgdaModeVscode = require("../../src/Util/Util.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Editor$AgdaModeVscode = require("../../src/Editor.bs.js");
var States$AgdaModeVscode = require("../../src/States.bs.js");
var Dispatcher$AgdaModeVscode = require("../../src/Task/Dispatcher.bs.js");
var Test__Util$AgdaModeVscode = require("./Test__Util.bs.js");
var Handle__Goal$AgdaModeVscode = require("../../src/Task/Handle__Goal.bs.js");

function openTextEditor(path) {
  return $$Promise.flatMap(Vscode.workspace.openTextDocument(path), (function (textDocument) {
                return Vscode.window.showTextDocument(textDocument, undefined);
              }));
}

function makeTextEditor(content) {
  return $$Promise.flatMap(Vscode.workspace.openTextDocument({
                  content: content,
                  language: "agda"
                }), (function (textDocument) {
                return Vscode.window.showTextDocument(textDocument, undefined);
              }));
}

function wait(ms) {
  var match = $$Promise.pending(undefined);
  setTimeout(match[1], ms);
  return match[0];
}

var source = "\n_+_ : ℕ → ℕ → ℕ\nx + y = {!   !}\n";

var lines = [
  "Z + y = ?",
  "S x + y = ?"
];

function replaceWithLines(lines) {
  
}

Mocha$BsMocha.describe_only("Case split")(undefined, undefined, undefined, (function (param) {
        return Promise$BsMocha.it("0")(undefined, undefined, undefined, (function (param) {
                      var Goal = Goal$AgdaModeVscode.Impl({
                            Disposable: Editor$AgdaModeVscode.Disposable,
                            Point: {
                              line: Editor$AgdaModeVscode.Point.line,
                              column: Editor$AgdaModeVscode.Point.column,
                              make: Editor$AgdaModeVscode.Point.make,
                              translate: Editor$AgdaModeVscode.Point.translate,
                              compare: Editor$AgdaModeVscode.Point.compare
                            },
                            $$Range: Editor$AgdaModeVscode.$$Range,
                            editorType: Editor$AgdaModeVscode.editorType,
                            getExtensionPath: Editor$AgdaModeVscode.getExtensionPath,
                            getFileName: Editor$AgdaModeVscode.getFileName,
                            save: Editor$AgdaModeVscode.save,
                            isAgda: Editor$AgdaModeVscode.isAgda,
                            onDidChangeFileName: Editor$AgdaModeVscode.onDidChangeFileName,
                            onDidChangeActivation: Editor$AgdaModeVscode.onDidChangeActivation,
                            onDidCloseEditor: Editor$AgdaModeVscode.onDidCloseEditor,
                            registerCommand: Editor$AgdaModeVscode.registerCommand,
                            setContext: Editor$AgdaModeVscode.setContext,
                            addToSubscriptions: Editor$AgdaModeVscode.addToSubscriptions,
                            Config: {
                              getAgdaPath: Editor$AgdaModeVscode.Config.getAgdaPath,
                              setAgdaPath: Editor$AgdaModeVscode.Config.setAgdaPath,
                              getLibraryPath: Editor$AgdaModeVscode.Config.getLibraryPath,
                              getHighlightingMethod: Editor$AgdaModeVscode.Config.getHighlightingMethod,
                              getBackend: Editor$AgdaModeVscode.Config.getBackend
                            },
                            View: {
                              make: Editor$AgdaModeVscode.View.make,
                              destroy: Editor$AgdaModeVscode.View.destroy,
                              show: Editor$AgdaModeVscode.View.show,
                              hide: Editor$AgdaModeVscode.View.hide,
                              focus: Editor$AgdaModeVscode.View.focus,
                              send: Editor$AgdaModeVscode.View.send,
                              on: Editor$AgdaModeVscode.View.on
                            },
                            Decoration: {
                              decorate: Editor$AgdaModeVscode.Decoration.decorate,
                              highlightBackground: Editor$AgdaModeVscode.Decoration.highlightBackground,
                              highlightBackgroundWithColor: Editor$AgdaModeVscode.Decoration.highlightBackgroundWithColor,
                              decorateText: Editor$AgdaModeVscode.Decoration.decorateText,
                              decorateTextWithColor: Editor$AgdaModeVscode.Decoration.decorateTextWithColor,
                              overlayText: Editor$AgdaModeVscode.Decoration.overlayText,
                              overlayTextWithColor: Editor$AgdaModeVscode.Decoration.overlayTextWithColor,
                              underlineText: Editor$AgdaModeVscode.Decoration.underlineText,
                              destroy: Editor$AgdaModeVscode.Decoration.destroy
                            },
                            focus: Editor$AgdaModeVscode.focus,
                            getSelectionRange: Editor$AgdaModeVscode.getSelectionRange,
                            getSelectionRanges: Editor$AgdaModeVscode.getSelectionRanges,
                            getCursorPosition: Editor$AgdaModeVscode.getCursorPosition,
                            getCursorPositions: Editor$AgdaModeVscode.getCursorPositions,
                            setCursorPosition: Editor$AgdaModeVscode.setCursorPosition,
                            onChangeCursorPosition: Editor$AgdaModeVscode.onChangeCursorPosition,
                            rangeForLine: Editor$AgdaModeVscode.rangeForLine,
                            pointAtOffset: Editor$AgdaModeVscode.pointAtOffset,
                            offsetAtPoint: Editor$AgdaModeVscode.offsetAtPoint,
                            fromAgdaOffset: Editor$AgdaModeVscode.fromAgdaOffset,
                            toAgdaOffset: Editor$AgdaModeVscode.toAgdaOffset,
                            getText: Editor$AgdaModeVscode.getText,
                            getTextInRange: Editor$AgdaModeVscode.getTextInRange,
                            selectText: Editor$AgdaModeVscode.selectText,
                            setText: Editor$AgdaModeVscode.setText,
                            insertText: Editor$AgdaModeVscode.insertText,
                            deleteText: Editor$AgdaModeVscode.deleteText,
                            onChange: Editor$AgdaModeVscode.onChange,
                            copyToClipboard: Editor$AgdaModeVscode.copyToClipboard,
                            colorThemeIsDark: Editor$AgdaModeVscode.colorThemeIsDark,
                            lineEndingIsCRLF: Editor$AgdaModeVscode.lineEndingIsCRLF
                          });
                      var Task = Task$AgdaModeVscode.Impl({
                            Disposable: Editor$AgdaModeVscode.Disposable,
                            Point: {
                              line: Editor$AgdaModeVscode.Point.line,
                              column: Editor$AgdaModeVscode.Point.column,
                              make: Editor$AgdaModeVscode.Point.make,
                              translate: Editor$AgdaModeVscode.Point.translate,
                              compare: Editor$AgdaModeVscode.Point.compare
                            },
                            $$Range: Editor$AgdaModeVscode.$$Range,
                            editorType: Editor$AgdaModeVscode.editorType,
                            getExtensionPath: Editor$AgdaModeVscode.getExtensionPath,
                            getFileName: Editor$AgdaModeVscode.getFileName,
                            save: Editor$AgdaModeVscode.save,
                            isAgda: Editor$AgdaModeVscode.isAgda,
                            onDidChangeFileName: Editor$AgdaModeVscode.onDidChangeFileName,
                            onDidChangeActivation: Editor$AgdaModeVscode.onDidChangeActivation,
                            onDidCloseEditor: Editor$AgdaModeVscode.onDidCloseEditor,
                            registerCommand: Editor$AgdaModeVscode.registerCommand,
                            setContext: Editor$AgdaModeVscode.setContext,
                            addToSubscriptions: Editor$AgdaModeVscode.addToSubscriptions,
                            Config: {
                              getAgdaPath: Editor$AgdaModeVscode.Config.getAgdaPath,
                              setAgdaPath: Editor$AgdaModeVscode.Config.setAgdaPath,
                              getLibraryPath: Editor$AgdaModeVscode.Config.getLibraryPath,
                              getHighlightingMethod: Editor$AgdaModeVscode.Config.getHighlightingMethod,
                              getBackend: Editor$AgdaModeVscode.Config.getBackend
                            },
                            View: {
                              make: Editor$AgdaModeVscode.View.make,
                              destroy: Editor$AgdaModeVscode.View.destroy,
                              show: Editor$AgdaModeVscode.View.show,
                              hide: Editor$AgdaModeVscode.View.hide,
                              focus: Editor$AgdaModeVscode.View.focus,
                              send: Editor$AgdaModeVscode.View.send,
                              on: Editor$AgdaModeVscode.View.on
                            },
                            Decoration: {
                              decorate: Editor$AgdaModeVscode.Decoration.decorate,
                              highlightBackground: Editor$AgdaModeVscode.Decoration.highlightBackground,
                              highlightBackgroundWithColor: Editor$AgdaModeVscode.Decoration.highlightBackgroundWithColor,
                              decorateText: Editor$AgdaModeVscode.Decoration.decorateText,
                              decorateTextWithColor: Editor$AgdaModeVscode.Decoration.decorateTextWithColor,
                              overlayText: Editor$AgdaModeVscode.Decoration.overlayText,
                              overlayTextWithColor: Editor$AgdaModeVscode.Decoration.overlayTextWithColor,
                              underlineText: Editor$AgdaModeVscode.Decoration.underlineText,
                              destroy: Editor$AgdaModeVscode.Decoration.destroy
                            },
                            focus: Editor$AgdaModeVscode.focus,
                            getSelectionRange: Editor$AgdaModeVscode.getSelectionRange,
                            getSelectionRanges: Editor$AgdaModeVscode.getSelectionRanges,
                            getCursorPosition: Editor$AgdaModeVscode.getCursorPosition,
                            getCursorPositions: Editor$AgdaModeVscode.getCursorPositions,
                            setCursorPosition: Editor$AgdaModeVscode.setCursorPosition,
                            onChangeCursorPosition: Editor$AgdaModeVscode.onChangeCursorPosition,
                            rangeForLine: Editor$AgdaModeVscode.rangeForLine,
                            pointAtOffset: Editor$AgdaModeVscode.pointAtOffset,
                            offsetAtPoint: Editor$AgdaModeVscode.offsetAtPoint,
                            fromAgdaOffset: Editor$AgdaModeVscode.fromAgdaOffset,
                            toAgdaOffset: Editor$AgdaModeVscode.toAgdaOffset,
                            getText: Editor$AgdaModeVscode.getText,
                            getTextInRange: Editor$AgdaModeVscode.getTextInRange,
                            selectText: Editor$AgdaModeVscode.selectText,
                            setText: Editor$AgdaModeVscode.setText,
                            insertText: Editor$AgdaModeVscode.insertText,
                            deleteText: Editor$AgdaModeVscode.deleteText,
                            onChange: Editor$AgdaModeVscode.onChange,
                            copyToClipboard: Editor$AgdaModeVscode.copyToClipboard,
                            colorThemeIsDark: Editor$AgdaModeVscode.colorThemeIsDark,
                            lineEndingIsCRLF: Editor$AgdaModeVscode.lineEndingIsCRLF
                          });
                      Dispatcher$AgdaModeVscode.Impl({
                            Disposable: Editor$AgdaModeVscode.Disposable,
                            Point: {
                              line: Editor$AgdaModeVscode.Point.line,
                              column: Editor$AgdaModeVscode.Point.column,
                              make: Editor$AgdaModeVscode.Point.make,
                              translate: Editor$AgdaModeVscode.Point.translate,
                              compare: Editor$AgdaModeVscode.Point.compare
                            },
                            $$Range: Editor$AgdaModeVscode.$$Range,
                            editorType: Editor$AgdaModeVscode.editorType,
                            getExtensionPath: Editor$AgdaModeVscode.getExtensionPath,
                            getFileName: Editor$AgdaModeVscode.getFileName,
                            save: Editor$AgdaModeVscode.save,
                            isAgda: Editor$AgdaModeVscode.isAgda,
                            onDidChangeFileName: Editor$AgdaModeVscode.onDidChangeFileName,
                            onDidChangeActivation: Editor$AgdaModeVscode.onDidChangeActivation,
                            onDidCloseEditor: Editor$AgdaModeVscode.onDidCloseEditor,
                            registerCommand: Editor$AgdaModeVscode.registerCommand,
                            setContext: Editor$AgdaModeVscode.setContext,
                            addToSubscriptions: Editor$AgdaModeVscode.addToSubscriptions,
                            Config: {
                              getAgdaPath: Editor$AgdaModeVscode.Config.getAgdaPath,
                              setAgdaPath: Editor$AgdaModeVscode.Config.setAgdaPath,
                              getLibraryPath: Editor$AgdaModeVscode.Config.getLibraryPath,
                              getHighlightingMethod: Editor$AgdaModeVscode.Config.getHighlightingMethod,
                              getBackend: Editor$AgdaModeVscode.Config.getBackend
                            },
                            View: {
                              make: Editor$AgdaModeVscode.View.make,
                              destroy: Editor$AgdaModeVscode.View.destroy,
                              show: Editor$AgdaModeVscode.View.show,
                              hide: Editor$AgdaModeVscode.View.hide,
                              focus: Editor$AgdaModeVscode.View.focus,
                              send: Editor$AgdaModeVscode.View.send,
                              on: Editor$AgdaModeVscode.View.on
                            },
                            Decoration: {
                              decorate: Editor$AgdaModeVscode.Decoration.decorate,
                              highlightBackground: Editor$AgdaModeVscode.Decoration.highlightBackground,
                              highlightBackgroundWithColor: Editor$AgdaModeVscode.Decoration.highlightBackgroundWithColor,
                              decorateText: Editor$AgdaModeVscode.Decoration.decorateText,
                              decorateTextWithColor: Editor$AgdaModeVscode.Decoration.decorateTextWithColor,
                              overlayText: Editor$AgdaModeVscode.Decoration.overlayText,
                              overlayTextWithColor: Editor$AgdaModeVscode.Decoration.overlayTextWithColor,
                              underlineText: Editor$AgdaModeVscode.Decoration.underlineText,
                              destroy: Editor$AgdaModeVscode.Decoration.destroy
                            },
                            focus: Editor$AgdaModeVscode.focus,
                            getSelectionRange: Editor$AgdaModeVscode.getSelectionRange,
                            getSelectionRanges: Editor$AgdaModeVscode.getSelectionRanges,
                            getCursorPosition: Editor$AgdaModeVscode.getCursorPosition,
                            getCursorPositions: Editor$AgdaModeVscode.getCursorPositions,
                            setCursorPosition: Editor$AgdaModeVscode.setCursorPosition,
                            onChangeCursorPosition: Editor$AgdaModeVscode.onChangeCursorPosition,
                            rangeForLine: Editor$AgdaModeVscode.rangeForLine,
                            pointAtOffset: Editor$AgdaModeVscode.pointAtOffset,
                            offsetAtPoint: Editor$AgdaModeVscode.offsetAtPoint,
                            fromAgdaOffset: Editor$AgdaModeVscode.fromAgdaOffset,
                            toAgdaOffset: Editor$AgdaModeVscode.toAgdaOffset,
                            getText: Editor$AgdaModeVscode.getText,
                            getTextInRange: Editor$AgdaModeVscode.getTextInRange,
                            selectText: Editor$AgdaModeVscode.selectText,
                            setText: Editor$AgdaModeVscode.setText,
                            insertText: Editor$AgdaModeVscode.insertText,
                            deleteText: Editor$AgdaModeVscode.deleteText,
                            onChange: Editor$AgdaModeVscode.onChange,
                            copyToClipboard: Editor$AgdaModeVscode.copyToClipboard,
                            colorThemeIsDark: Editor$AgdaModeVscode.colorThemeIsDark,
                            lineEndingIsCRLF: Editor$AgdaModeVscode.lineEndingIsCRLF
                          });
                      var GoalHandler = Handle__Goal$AgdaModeVscode.Impl({
                            Disposable: Editor$AgdaModeVscode.Disposable,
                            Point: {
                              line: Editor$AgdaModeVscode.Point.line,
                              column: Editor$AgdaModeVscode.Point.column,
                              make: Editor$AgdaModeVscode.Point.make,
                              translate: Editor$AgdaModeVscode.Point.translate,
                              compare: Editor$AgdaModeVscode.Point.compare
                            },
                            $$Range: Editor$AgdaModeVscode.$$Range,
                            editorType: Editor$AgdaModeVscode.editorType,
                            getExtensionPath: Editor$AgdaModeVscode.getExtensionPath,
                            getFileName: Editor$AgdaModeVscode.getFileName,
                            save: Editor$AgdaModeVscode.save,
                            isAgda: Editor$AgdaModeVscode.isAgda,
                            onDidChangeFileName: Editor$AgdaModeVscode.onDidChangeFileName,
                            onDidChangeActivation: Editor$AgdaModeVscode.onDidChangeActivation,
                            onDidCloseEditor: Editor$AgdaModeVscode.onDidCloseEditor,
                            registerCommand: Editor$AgdaModeVscode.registerCommand,
                            setContext: Editor$AgdaModeVscode.setContext,
                            addToSubscriptions: Editor$AgdaModeVscode.addToSubscriptions,
                            Config: {
                              getAgdaPath: Editor$AgdaModeVscode.Config.getAgdaPath,
                              setAgdaPath: Editor$AgdaModeVscode.Config.setAgdaPath,
                              getLibraryPath: Editor$AgdaModeVscode.Config.getLibraryPath,
                              getHighlightingMethod: Editor$AgdaModeVscode.Config.getHighlightingMethod,
                              getBackend: Editor$AgdaModeVscode.Config.getBackend
                            },
                            View: {
                              make: Editor$AgdaModeVscode.View.make,
                              destroy: Editor$AgdaModeVscode.View.destroy,
                              show: Editor$AgdaModeVscode.View.show,
                              hide: Editor$AgdaModeVscode.View.hide,
                              focus: Editor$AgdaModeVscode.View.focus,
                              send: Editor$AgdaModeVscode.View.send,
                              on: Editor$AgdaModeVscode.View.on
                            },
                            Decoration: {
                              decorate: Editor$AgdaModeVscode.Decoration.decorate,
                              highlightBackground: Editor$AgdaModeVscode.Decoration.highlightBackground,
                              highlightBackgroundWithColor: Editor$AgdaModeVscode.Decoration.highlightBackgroundWithColor,
                              decorateText: Editor$AgdaModeVscode.Decoration.decorateText,
                              decorateTextWithColor: Editor$AgdaModeVscode.Decoration.decorateTextWithColor,
                              overlayText: Editor$AgdaModeVscode.Decoration.overlayText,
                              overlayTextWithColor: Editor$AgdaModeVscode.Decoration.overlayTextWithColor,
                              underlineText: Editor$AgdaModeVscode.Decoration.underlineText,
                              destroy: Editor$AgdaModeVscode.Decoration.destroy
                            },
                            focus: Editor$AgdaModeVscode.focus,
                            getSelectionRange: Editor$AgdaModeVscode.getSelectionRange,
                            getSelectionRanges: Editor$AgdaModeVscode.getSelectionRanges,
                            getCursorPosition: Editor$AgdaModeVscode.getCursorPosition,
                            getCursorPositions: Editor$AgdaModeVscode.getCursorPositions,
                            setCursorPosition: Editor$AgdaModeVscode.setCursorPosition,
                            onChangeCursorPosition: Editor$AgdaModeVscode.onChangeCursorPosition,
                            rangeForLine: Editor$AgdaModeVscode.rangeForLine,
                            pointAtOffset: Editor$AgdaModeVscode.pointAtOffset,
                            offsetAtPoint: Editor$AgdaModeVscode.offsetAtPoint,
                            fromAgdaOffset: Editor$AgdaModeVscode.fromAgdaOffset,
                            toAgdaOffset: Editor$AgdaModeVscode.toAgdaOffset,
                            getText: Editor$AgdaModeVscode.getText,
                            getTextInRange: Editor$AgdaModeVscode.getTextInRange,
                            selectText: Editor$AgdaModeVscode.selectText,
                            setText: Editor$AgdaModeVscode.setText,
                            insertText: Editor$AgdaModeVscode.insertText,
                            deleteText: Editor$AgdaModeVscode.deleteText,
                            onChange: Editor$AgdaModeVscode.onChange,
                            copyToClipboard: Editor$AgdaModeVscode.copyToClipboard,
                            colorThemeIsDark: Editor$AgdaModeVscode.colorThemeIsDark,
                            lineEndingIsCRLF: Editor$AgdaModeVscode.lineEndingIsCRLF
                          });
                      States$AgdaModeVscode.StateDispatcherPair.Impl({
                            Disposable: Editor$AgdaModeVscode.Disposable,
                            Point: {
                              line: Editor$AgdaModeVscode.Point.line,
                              column: Editor$AgdaModeVscode.Point.column,
                              make: Editor$AgdaModeVscode.Point.make,
                              translate: Editor$AgdaModeVscode.Point.translate,
                              compare: Editor$AgdaModeVscode.Point.compare
                            },
                            $$Range: Editor$AgdaModeVscode.$$Range,
                            editorType: Editor$AgdaModeVscode.editorType,
                            getExtensionPath: Editor$AgdaModeVscode.getExtensionPath,
                            getFileName: Editor$AgdaModeVscode.getFileName,
                            save: Editor$AgdaModeVscode.save,
                            isAgda: Editor$AgdaModeVscode.isAgda,
                            onDidChangeFileName: Editor$AgdaModeVscode.onDidChangeFileName,
                            onDidChangeActivation: Editor$AgdaModeVscode.onDidChangeActivation,
                            onDidCloseEditor: Editor$AgdaModeVscode.onDidCloseEditor,
                            registerCommand: Editor$AgdaModeVscode.registerCommand,
                            setContext: Editor$AgdaModeVscode.setContext,
                            addToSubscriptions: Editor$AgdaModeVscode.addToSubscriptions,
                            Config: {
                              getAgdaPath: Editor$AgdaModeVscode.Config.getAgdaPath,
                              setAgdaPath: Editor$AgdaModeVscode.Config.setAgdaPath,
                              getLibraryPath: Editor$AgdaModeVscode.Config.getLibraryPath,
                              getHighlightingMethod: Editor$AgdaModeVscode.Config.getHighlightingMethod,
                              getBackend: Editor$AgdaModeVscode.Config.getBackend
                            },
                            View: {
                              make: Editor$AgdaModeVscode.View.make,
                              destroy: Editor$AgdaModeVscode.View.destroy,
                              show: Editor$AgdaModeVscode.View.show,
                              hide: Editor$AgdaModeVscode.View.hide,
                              focus: Editor$AgdaModeVscode.View.focus,
                              send: Editor$AgdaModeVscode.View.send,
                              on: Editor$AgdaModeVscode.View.on
                            },
                            Decoration: {
                              decorate: Editor$AgdaModeVscode.Decoration.decorate,
                              highlightBackground: Editor$AgdaModeVscode.Decoration.highlightBackground,
                              highlightBackgroundWithColor: Editor$AgdaModeVscode.Decoration.highlightBackgroundWithColor,
                              decorateText: Editor$AgdaModeVscode.Decoration.decorateText,
                              decorateTextWithColor: Editor$AgdaModeVscode.Decoration.decorateTextWithColor,
                              overlayText: Editor$AgdaModeVscode.Decoration.overlayText,
                              overlayTextWithColor: Editor$AgdaModeVscode.Decoration.overlayTextWithColor,
                              underlineText: Editor$AgdaModeVscode.Decoration.underlineText,
                              destroy: Editor$AgdaModeVscode.Decoration.destroy
                            },
                            focus: Editor$AgdaModeVscode.focus,
                            getSelectionRange: Editor$AgdaModeVscode.getSelectionRange,
                            getSelectionRanges: Editor$AgdaModeVscode.getSelectionRanges,
                            getCursorPosition: Editor$AgdaModeVscode.getCursorPosition,
                            getCursorPositions: Editor$AgdaModeVscode.getCursorPositions,
                            setCursorPosition: Editor$AgdaModeVscode.setCursorPosition,
                            onChangeCursorPosition: Editor$AgdaModeVscode.onChangeCursorPosition,
                            rangeForLine: Editor$AgdaModeVscode.rangeForLine,
                            pointAtOffset: Editor$AgdaModeVscode.pointAtOffset,
                            offsetAtPoint: Editor$AgdaModeVscode.offsetAtPoint,
                            fromAgdaOffset: Editor$AgdaModeVscode.fromAgdaOffset,
                            toAgdaOffset: Editor$AgdaModeVscode.toAgdaOffset,
                            getText: Editor$AgdaModeVscode.getText,
                            getTextInRange: Editor$AgdaModeVscode.getTextInRange,
                            selectText: Editor$AgdaModeVscode.selectText,
                            setText: Editor$AgdaModeVscode.setText,
                            insertText: Editor$AgdaModeVscode.insertText,
                            deleteText: Editor$AgdaModeVscode.deleteText,
                            onChange: Editor$AgdaModeVscode.onChange,
                            copyToClipboard: Editor$AgdaModeVscode.copyToClipboard,
                            colorThemeIsDark: Editor$AgdaModeVscode.colorThemeIsDark,
                            lineEndingIsCRLF: Editor$AgdaModeVscode.lineEndingIsCRLF
                          });
                      console.log(Test__Util$AgdaModeVscode.Path.extensionPath(undefined));
                      return $$Promise.Js.toBsPromise($$Promise.flatMap(makeTextEditor(source), (function (editor) {
                                        return $$Promise.map(Curry._2(Goal.makeMany, editor, [0]), (function (goals) {
                                                      var goal = Belt_Array.get(goals, 0);
                                                      if (goal === undefined) {
                                                        return Assert$BsMocha.fail("failed to instantiate any goals");
                                                      }
                                                      var tasks = Curry._1(GoalHandler.handle, /* ReplaceWithLines */Caml_chrome_debugger.variant("ReplaceWithLines", 4, [
                                                              goal,
                                                              lines
                                                            ]));
                                                      console.log(Util$AgdaModeVscode.Pretty.list(Belt_List.map(tasks, Task.toString)));
                                                      
                                                    }));
                                      })));
                    }));
      }));

var Assert;

var P;

exports.Assert = Assert;
exports.P = P;
exports.openTextEditor = openTextEditor;
exports.makeTextEditor = makeTextEditor;
exports.wait = wait;
exports.source = source;
exports.lines = lines;
exports.replaceWithLines = replaceWithLines;
/*  Not a pure module */
