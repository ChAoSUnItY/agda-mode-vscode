// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_math = require("bs-platform/lib/js/js_math.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Body$AgdaModeVscode = require("./Body.bs.js");
var Hook$AgdaModeVscode = require("./Hook.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Header$AgdaModeVscode = require("./Header.bs.js");
var Keyboard$AgdaModeVscode = require("./Keyboard.bs.js");
var Component__Link$AgdaModeVscode = require("./Component/Component__Link.bs.js");

function Panel(Props) {
  var imageUri = Props.imageUri;
  var onRequest = Props.onRequest;
  var onEventToView = Props.onEventToView;
  var onResponse = Props.onResponse;
  var onEventFromView = Props.onEventFromView;
  var match = React.useState((function () {
          
        }));
  var setShouldPrank = match[1];
  var shouldPrank = match[0];
  var match$1 = React.useState((function () {
          return /* Plain */Caml_chrome_debugger.variant("Plain", 0, ["File not loaded yet"]);
        }));
  var setHeader = match$1[1];
  var match$2 = React.useState((function () {
          return /* Nothing */0;
        }));
  var setBody = match$2[1];
  var body = match$2[0];
  var match$3 = React.useReducer(Keyboard$AgdaModeVscode.reducer, undefined);
  var runInputMethodAction = match$3[1];
  var querying;
  querying = typeof body === "number" || body.tag !== /* Query */2 ? false : true;
  React.useEffect((function () {
          Curry._1(onEventFromView.emit, /* Initialized */0);
          
        }), []);
  var queryResponseResolver = React.useRef(undefined);
  var onSubmit = function (result) {
    return Belt_Option.forEach(queryResponseResolver.current, (function (resolve) {
                  Curry._1(resolve, result);
                  queryResponseResolver.current = undefined;
                  
                }));
  };
  var onChange = function (string) {
    return Curry._1(onEventFromView.emit, /* QueryChange */Caml_chrome_debugger.variant("QueryChange", 1, [string]));
  };
  Hook$AgdaModeVscode.recv(onRequest, onResponse, (function (msg) {
          var value = msg[3];
          var placeholder = msg[2];
          var body = msg[1];
          var header = msg[0];
          Curry._1(setShouldPrank, (function (param) {
                  
                }));
          var match = $$Promise.pending(undefined);
          queryResponseResolver.current = match[1];
          Curry._1(setHeader, (function (param) {
                  return /* Plain */Caml_chrome_debugger.variant("Plain", 0, [header]);
                }));
          Curry._1(setBody, (function (param) {
                  return /* Query */Caml_chrome_debugger.variant("Query", 2, [
                            body,
                            placeholder,
                            value
                          ]);
                }));
          return $$Promise.map(match[0], (function (result) {
                        if (result !== undefined) {
                          return /* QuerySuccess */Caml_chrome_debugger.simpleVariant("QuerySuccess", [result]);
                        } else {
                          return /* QueryInterrupted */1;
                        }
                      }));
        }));
  Hook$AgdaModeVscode.on(onEventToView, (function ($$event) {
          if (typeof $$event === "number") {
            if ($$event === /* QueryInterrupt */0) {
              Curry._1(setShouldPrank, (function (param) {
                      
                    }));
              return onSubmit(undefined);
            }
            var quotes = [
              "Why would you do that?",
              "Tut, tut, tut. Naughty, naughty, youâ€™ll get caughty."
            ];
            var quoteNumber = quotes.length;
            var selected = Js_math.random_int(0, quoteNumber);
            var quote = Belt_Option.getWithDefault(Belt_Array.get(quotes, selected), "Why would you do that?");
            if (imageUri !== undefined) {
              return Curry._1(setShouldPrank, (function (param) {
                            return /* tuple */[
                                    imageUri,
                                    quote
                                  ];
                          }));
            } else {
              return ;
            }
          } else {
            switch ($$event.tag | 0) {
              case /* Display */0 :
                  var body = $$event[1];
                  var header = $$event[0];
                  Curry._1(setShouldPrank, (function (param) {
                          
                        }));
                  Curry._1(setHeader, (function (param) {
                          return header;
                        }));
                  return Curry._1(setBody, (function (param) {
                                return body;
                              }));
              case /* QueryUpdate */1 :
                  var text = $$event[0];
                  Curry._1(setShouldPrank, (function (param) {
                          
                        }));
                  return Curry._1(setBody, (function (others) {
                                if (typeof others === "number" || others.tag !== /* Query */2) {
                                  return others;
                                } else {
                                  return /* Query */Caml_chrome_debugger.variant("Query", 2, [
                                            others[0],
                                            others[1],
                                            text
                                          ]);
                                }
                              }));
              case /* InputMethod */2 :
                  Curry._1(setShouldPrank, (function (param) {
                          
                        }));
                  return Curry._1(runInputMethodAction, $$event[0]);
              
            }
          }
        }));
  return React.createElement(Component__Link$AgdaModeVscode.Provider.make, Component__Link$AgdaModeVscode.Provider.makeProps(onEventFromView, React.createElement("section", {
                      className: "agda-mode native-key-bindings",
                      tabIndex: -1
                    }, React.createElement(Keyboard$AgdaModeVscode.make, {
                          state: match$3[0],
                          onInsertChar: (function ($$char) {
                              return Curry._1(onEventFromView.emit, /* InputMethod */Caml_chrome_debugger.variant("InputMethod", 0, [/* InsertChar */Caml_chrome_debugger.variant("InsertChar", 0, [$$char])]));
                            }),
                          onChooseSymbol: (function (symbol) {
                              return Curry._1(onEventFromView.emit, /* InputMethod */Caml_chrome_debugger.variant("InputMethod", 0, [/* ChooseSymbol */Caml_chrome_debugger.variant("ChooseSymbol", 1, [symbol])]));
                            }),
                          querying: querying
                        }), shouldPrank !== undefined ? React.createElement("div", {
                            className: "agda-mode-body"
                          }, React.createElement("div", {
                                id: "prank"
                              }, React.createElement("blockquote", undefined, shouldPrank[1]), React.createElement("img", {
                                    src: shouldPrank[0]
                                  }))) : React.createElement(React.Fragment, undefined, React.createElement(Header$AgdaModeVscode.make, {
                                header: match$1[0]
                              }), React.createElement(Body$AgdaModeVscode.make, {
                                body: body,
                                onSubmit: onSubmit,
                                onChange: onChange
                              }))), undefined));
}

var make = Panel;

exports.make = make;
/* react Not a pure module */
