// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var VSCode = require("bs-vscode/lib/js/src/VSCode.bs.js");
var Vscode = require("vscode");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");
var IM$AgdaModeVscode = require("../InputMethod/IM.bs.js");
var Chan$AgdaModeVscode = require("../Util/Chan.bs.js");
var Goal$AgdaModeVscode = require("../Goal.bs.js");
var Util$AgdaModeVscode = require("../Util/Util.bs.js");
var View$AgdaModeVscode = require("../View.bs.js");
var State$AgdaModeVscode = require("../State.bs.js");
var Config$AgdaModeVscode = require("../Config.bs.js");
var Editor$AgdaModeVscode = require("../Editor.bs.js");
var Parser$AgdaModeVscode = require("../Parser.bs.js");
var Command$AgdaModeVscode = require("../Command.bs.js");
var Request$AgdaModeVscode = require("../Request.bs.js");
var Connection$AgdaModeVscode = require("../Connection.bs.js");
var Handle__Goal$AgdaModeVscode = require("./Handle__Goal.bs.js");
var Handle__Response$AgdaModeVscode = require("./Handle__Response.bs.js");
var Handle__InputMethod$AgdaModeVscode = require("./Handle__InputMethod.bs.js");

var tally = {
  contents: 0
};

var allDone = Chan$AgdaModeVscode.make(undefined);

function runNonLast(promise) {
  tally.contents = tally.contents + 1 | 0;
  return $$Promise.tap(promise, (function (param) {
                tally.contents = tally.contents - 1 | 0;
                if (tally.contents === 0) {
                  return Chan$AgdaModeVscode.emit(allDone, undefined);
                }
                
              }));
}

function onceDone(param) {
  if (tally.contents === 0) {
    return $$Promise.resolved(undefined);
  } else {
    return Chan$AgdaModeVscode.once(allDone);
  }
}

var Lock = {
  runNonLast: runNonLast,
  onceDone: onceDone
};

function sendAgdaRequest(dispatchCommand, state, request) {
  var displayConnectionError = function (error) {
    var match = Connection$AgdaModeVscode.$$Error.toString(error);
    return State$AgdaModeVscode.View.display(state, {
                TAG: 3,
                _0: "Connection Error: " + match[0],
                [Symbol.for("name")]: "Error"
              }, {
                TAG: 0,
                _0: match[1],
                [Symbol.for("name")]: "Plain"
              });
  };
  var deferredLastResponses = [];
  var match = $$Promise.pending(undefined);
  var stopListener = match[1];
  var promise = match[0];
  var handle = {
    contents: undefined
  };
  var agdaResponseListener = function (x) {
    if (x.TAG === /* Ok */0) {
      var match = x._0;
      if (match) {
        var error = match._0;
        if (error.TAG === /* Ok */0) {
          var response = error._0;
          if (response.TAG === /* NonLast */0) {
            runNonLast(Handle__Response$AgdaModeVscode.handle(state, dispatchCommand, (function (param) {
                        return sendAgdaRequest(dispatchCommand, state, param);
                      }), response._0));
            return ;
          }
          deferredLastResponses.push([
                response._0,
                response._1
              ]);
          return ;
        }
        var body = Parser$AgdaModeVscode.$$Error.toString(error._0);
        State$AgdaModeVscode.View.display(state, {
              TAG: 3,
              _0: "Internal Parse Error",
              [Symbol.for("name")]: "Error"
            }, {
              TAG: 0,
              _0: body,
              [Symbol.for("name")]: "Plain"
            });
        return ;
      }
      var deferredLastResponses$1 = Belt_Array.map(deferredLastResponses.sort(function (x, y) {
                return Caml_primitive.caml_int_compare(x[0], y[0]);
              }), (function (prim) {
              return prim[1];
            }));
      $$Promise.flatMap($$Promise.map($$Promise.flatMap($$Promise.tap(onceDone(undefined), (function (param) {
                          return Curry._1(stopListener, undefined);
                        })), (function (param) {
                      return State$AgdaModeVscode.Decoration.apply(state);
                    })), (function (param) {
                  return Belt_Array.map(deferredLastResponses$1, (function (param) {
                                return Handle__Response$AgdaModeVscode.handle(state, dispatchCommand, (function (param) {
                                              return sendAgdaRequest(dispatchCommand, state, param);
                                            }), param);
                              }));
                })), Util$AgdaModeVscode.oneByOne);
      return ;
    }
    displayConnectionError(x._0);
    
  };
  return $$Promise.tap($$Promise.flatMap($$Promise.mapOk(State$AgdaModeVscode.connect(state), (function (connection) {
                        var $$document = state.editor.document;
                        var version = connection.metadata.version;
                        var filepath = Parser$AgdaModeVscode.filepath($$document.fileName);
                        var libraryPath = Config$AgdaModeVscode.getLibraryPath(undefined);
                        var highlightingMethod = Config$AgdaModeVscode.getHighlightingMethod(undefined);
                        var backend = Config$AgdaModeVscode.getBackend(undefined);
                        var encoded = Request$AgdaModeVscode.encode($$document, version, filepath, backend, libraryPath, highlightingMethod, request);
                        Connection$AgdaModeVscode.send(encoded, connection);
                        return connection;
                      })), (function (x) {
                    if (x.TAG !== /* Ok */0) {
                      return $$Promise.flatMap(displayConnectionError(x._0), (function (param) {
                                    return promise;
                                  }));
                    }
                    handle.contents = Chan$AgdaModeVscode.on(x._0.chan, agdaResponseListener);
                    return promise;
                  })), (function (param) {
                return Belt_Option.forEach(handle.contents, (function (destroyListener) {
                              return Curry._1(destroyListener, undefined);
                            }));
              }));
}

function dispatchCommand(state, _command) {
  while(true) {
    var command = _command;
    var dispatchCommand$1 = function (param) {
      return dispatchCommand(state, param);
    };
    var $$document = state.editor.document;
    var header = {
      TAG: 0,
      _0: Command$AgdaModeVscode.toString(command),
      [Symbol.for("name")]: "Plain"
    };
    if (typeof command === "number") {
      switch (command) {
        case /* Load */0 :
            return $$Promise.flatMap($$Promise.flatMap(State$AgdaModeVscode.View.display(state, {
                                TAG: 0,
                                _0: "Loading ...",
                                [Symbol.for("name")]: "Plain"
                              }, /* Nothing */0), (function($$document){
                          return function (param) {
                            return $$document.save();
                          }
                          }($$document))), (function($$document){
                      return function (param) {
                        var options = VSCode.TextDocumentShowOptions.make(undefined, false, undefined, undefined, undefined);
                        return $$Promise.flatMap(Vscode.window.showTextDocument($$document, options), (function (param) {
                                      return sendAgdaRequest(dispatchCommand$1, state, /* Load */0);
                                    }));
                      }
                      }($$document)));
        case /* Quit */1 :
            return $$Promise.resolved(undefined);
        case /* Restart */2 :
            _command = /* Load */0;
            continue ;
        case /* Refresh */3 :
            Handle__Goal$AgdaModeVscode.updateRanges(state);
            State$AgdaModeVscode.Decoration.refresh(state);
            return $$Promise.resolved(undefined);
        case /* Compile */4 :
            return sendAgdaRequest(dispatchCommand$1, state, /* Compile */1);
        case /* ToggleDisplayOfImplicitArguments */5 :
            return sendAgdaRequest(dispatchCommand$1, state, /* ToggleDisplayOfImplicitArguments */2);
        case /* ShowConstraints */6 :
            return sendAgdaRequest(dispatchCommand$1, state, /* ShowConstraints */3);
        case /* ShowGoals */7 :
            return sendAgdaRequest(dispatchCommand$1, state, /* ShowGoals */4);
        case /* NextGoal */8 :
            return Handle__Goal$AgdaModeVscode.next(state);
        case /* PreviousGoal */9 :
            return Handle__Goal$AgdaModeVscode.previous(state);
        case /* Give */10 :
            return Handle__Goal$AgdaModeVscode.$$case(state, (function (goal, param) {
                          return sendAgdaRequest(dispatchCommand$1, state, {
                                      TAG: 3,
                                      _0: goal,
                                      [Symbol.for("name")]: "Give"
                                    });
                        }), (function(header){
                      return function (goal) {
                        return State$AgdaModeVscode.View.prompt(state, header, {
                                    body: undefined,
                                    placeholder: "expression to give:",
                                    value: undefined
                                  }, (function (expr) {
                                      return $$Promise.flatMap(Handle__Goal$AgdaModeVscode.modify(state, goal, (function (param) {
                                                        return expr;
                                                      })), (function (param) {
                                                    return sendAgdaRequest(dispatchCommand$1, state, {
                                                                TAG: 3,
                                                                _0: goal,
                                                                [Symbol.for("name")]: "Give"
                                                              });
                                                  }));
                                    }));
                      }
                      }(header)), State$AgdaModeVscode.View.displayOutOfGoalError(state));
        case /* Refine */11 :
            return Handle__Goal$AgdaModeVscode.caseSimple(state, (function (goal) {
                          return sendAgdaRequest(dispatchCommand$1, state, {
                                      TAG: 4,
                                      _0: goal,
                                      [Symbol.for("name")]: "Refine"
                                    });
                        }), State$AgdaModeVscode.View.displayOutOfGoalError(state));
        case /* Auto */12 :
            return Handle__Goal$AgdaModeVscode.caseSimple(state, (function (goal) {
                          return sendAgdaRequest(dispatchCommand$1, state, {
                                      TAG: 6,
                                      _0: goal,
                                      [Symbol.for("name")]: "Auto"
                                    });
                        }), State$AgdaModeVscode.View.displayOutOfGoalError(state));
        case /* Case */13 :
            return Handle__Goal$AgdaModeVscode.$$case(state, (function (goal, param) {
                          return sendAgdaRequest(dispatchCommand$1, state, {
                                      TAG: 7,
                                      _0: goal,
                                      [Symbol.for("name")]: "Case"
                                    });
                        }), (function(header){
                      return function (goal) {
                        return State$AgdaModeVscode.View.prompt(state, header, {
                                    body: "Please specify which variable you wish to split",
                                    placeholder: "variable to case split:",
                                    value: undefined
                                  }, (function (expr) {
                                      return $$Promise.flatMap(Handle__Goal$AgdaModeVscode.modify(state, goal, (function (param) {
                                                        return expr;
                                                      })), (function (param) {
                                                    return sendAgdaRequest(dispatchCommand$1, state, {
                                                                TAG: 7,
                                                                _0: goal,
                                                                [Symbol.for("name")]: "Case"
                                                              });
                                                  }));
                                    }));
                      }
                      }(header)), State$AgdaModeVscode.View.displayOutOfGoalError(state));
        case /* WhyInScope */14 :
            var placeholder = "name:";
            return Handle__Goal$AgdaModeVscode.$$case(state, (function (goal, expr) {
                          return sendAgdaRequest(dispatchCommand$1, state, {
                                      TAG: 20,
                                      _0: expr,
                                      _1: goal,
                                      [Symbol.for("name")]: "WhyInScope"
                                    });
                        }), (function(header,placeholder){
                      return function (goal) {
                        return State$AgdaModeVscode.View.prompt(state, header, {
                                    body: undefined,
                                    placeholder: placeholder,
                                    value: undefined
                                  }, (function (expr) {
                                      return sendAgdaRequest(dispatchCommand$1, state, {
                                                  TAG: 20,
                                                  _0: expr,
                                                  _1: goal,
                                                  [Symbol.for("name")]: "WhyInScope"
                                                });
                                    }));
                      }
                      }(header,placeholder)), State$AgdaModeVscode.View.prompt(state, header, {
                            body: undefined,
                            placeholder: placeholder,
                            value: undefined
                          }, (function (expr) {
                              return sendAgdaRequest(dispatchCommand$1, state, {
                                          TAG: 21,
                                          _0: expr,
                                          [Symbol.for("name")]: "WhyInScopeGlobal"
                                        });
                            })));
        case /* Escape */15 :
            if (IM$AgdaModeVscode.isActivated(state.editorIM) || IM$AgdaModeVscode.isActivated(state.promptIM)) {
              return Handle__InputMethod$AgdaModeVscode.deactivate(state);
            } else {
              return State$AgdaModeVscode.View.interruptPrompt(state);
            }
        
      }
    } else {
      switch (command.TAG | 0) {
        case /* SolveConstraints */0 :
            var normalization = command._0;
            return Handle__Goal$AgdaModeVscode.caseSimple(state, (function(normalization){
                      return function (goal) {
                        return sendAgdaRequest(dispatchCommand$1, state, {
                                    TAG: 0,
                                    _0: normalization,
                                    _1: goal,
                                    [Symbol.for("name")]: "SolveConstraints"
                                  });
                      }
                      }(normalization)), sendAgdaRequest(dispatchCommand$1, state, {
                            TAG: 1,
                            _0: normalization,
                            [Symbol.for("name")]: "SolveConstraintsGlobal"
                          }));
        case /* SearchAbout */1 :
            var normalization$1 = command._0;
            return State$AgdaModeVscode.View.prompt(state, header, {
                        body: undefined,
                        placeholder: "name:",
                        value: undefined
                      }, (function(normalization$1){
                      return function (expr) {
                        return sendAgdaRequest(dispatchCommand$1, state, {
                                    TAG: 2,
                                    _0: normalization$1,
                                    _1: expr,
                                    [Symbol.for("name")]: "SearchAbout"
                                  });
                      }
                      }(normalization$1)));
        case /* ElaborateAndGive */2 :
            var normalization$2 = command._0;
            return Handle__Goal$AgdaModeVscode.$$case(state, (function(normalization$2){
                      return function (goal, expr) {
                        return sendAgdaRequest(dispatchCommand$1, state, {
                                    TAG: 5,
                                    _0: normalization$2,
                                    _1: expr,
                                    _2: goal,
                                    [Symbol.for("name")]: "ElaborateAndGive"
                                  });
                      }
                      }(normalization$2)), (function(header,normalization$2){
                      return function (goal) {
                        return State$AgdaModeVscode.View.prompt(state, header, {
                                    body: undefined,
                                    placeholder: "expression to elaborate and give:",
                                    value: undefined
                                  }, (function (expr) {
                                      return sendAgdaRequest(dispatchCommand$1, state, {
                                                  TAG: 5,
                                                  _0: normalization$2,
                                                  _1: expr,
                                                  _2: goal,
                                                  [Symbol.for("name")]: "ElaborateAndGive"
                                                });
                                    }));
                      }
                      }(header,normalization$2)), State$AgdaModeVscode.View.displayOutOfGoalError(state));
        case /* HelperFunctionType */3 :
            var normalization$3 = command._0;
            return Handle__Goal$AgdaModeVscode.$$case(state, (function(normalization$3){
                      return function (goal, expr) {
                        return sendAgdaRequest(dispatchCommand$1, state, {
                                    TAG: 8,
                                    _0: normalization$3,
                                    _1: expr,
                                    _2: goal,
                                    [Symbol.for("name")]: "HelperFunctionType"
                                  });
                      }
                      }(normalization$3)), (function(header,normalization$3){
                      return function (goal) {
                        return State$AgdaModeVscode.View.prompt(state, header, {
                                    body: undefined,
                                    placeholder: "expression:",
                                    value: undefined
                                  }, (function (expr) {
                                      return sendAgdaRequest(dispatchCommand$1, state, {
                                                  TAG: 8,
                                                  _0: normalization$3,
                                                  _1: expr,
                                                  _2: goal,
                                                  [Symbol.for("name")]: "HelperFunctionType"
                                                });
                                    }));
                      }
                      }(header,normalization$3)), State$AgdaModeVscode.View.displayOutOfGoalError(state));
        case /* InferType */4 :
            var normalization$4 = command._0;
            var placeholder$1 = "expression to infer:";
            return Handle__Goal$AgdaModeVscode.$$case(state, (function(normalization$4){
                      return function (goal, expr) {
                        return sendAgdaRequest(dispatchCommand$1, state, {
                                    TAG: 9,
                                    _0: normalization$4,
                                    _1: expr,
                                    _2: goal,
                                    [Symbol.for("name")]: "InferType"
                                  });
                      }
                      }(normalization$4)), (function(header,normalization$4,placeholder$1){
                      return function (goal) {
                        return State$AgdaModeVscode.View.prompt(state, header, {
                                    body: undefined,
                                    placeholder: placeholder$1,
                                    value: undefined
                                  }, (function (expr) {
                                      return sendAgdaRequest(dispatchCommand$1, state, {
                                                  TAG: 9,
                                                  _0: normalization$4,
                                                  _1: expr,
                                                  _2: goal,
                                                  [Symbol.for("name")]: "InferType"
                                                });
                                    }));
                      }
                      }(header,normalization$4,placeholder$1)), State$AgdaModeVscode.View.prompt(state, header, {
                            body: undefined,
                            placeholder: placeholder$1,
                            value: undefined
                          }, (function(normalization$4){
                          return function (expr) {
                            return sendAgdaRequest(dispatchCommand$1, state, {
                                        TAG: 10,
                                        _0: normalization$4,
                                        _1: expr,
                                        [Symbol.for("name")]: "InferTypeGlobal"
                                      });
                          }
                          }(normalization$4))));
        case /* Context */5 :
            var normalization$5 = command._0;
            return Handle__Goal$AgdaModeVscode.caseSimple(state, (function(normalization$5){
                      return function (goal) {
                        return sendAgdaRequest(dispatchCommand$1, state, {
                                    TAG: 11,
                                    _0: normalization$5,
                                    _1: goal,
                                    [Symbol.for("name")]: "Context"
                                  });
                      }
                      }(normalization$5)), State$AgdaModeVscode.View.displayOutOfGoalError(state));
        case /* GoalType */6 :
            var normalization$6 = command._0;
            return Handle__Goal$AgdaModeVscode.caseSimple(state, (function(normalization$6){
                      return function (goal) {
                        return sendAgdaRequest(dispatchCommand$1, state, {
                                    TAG: 12,
                                    _0: normalization$6,
                                    _1: goal,
                                    [Symbol.for("name")]: "GoalType"
                                  });
                      }
                      }(normalization$6)), State$AgdaModeVscode.View.displayOutOfGoalError(state));
        case /* GoalTypeAndContext */7 :
            var normalization$7 = command._0;
            return Handle__Goal$AgdaModeVscode.caseSimple(state, (function(normalization$7){
                      return function (goal) {
                        return sendAgdaRequest(dispatchCommand$1, state, {
                                    TAG: 13,
                                    _0: normalization$7,
                                    _1: goal,
                                    [Symbol.for("name")]: "GoalTypeAndContext"
                                  });
                      }
                      }(normalization$7)), State$AgdaModeVscode.View.displayOutOfGoalError(state));
        case /* EventFromView */8 :
            var $$event = command._0;
            if (typeof $$event === "number") {
              if ($$event === /* Destroyed */1) {
                return State$AgdaModeVscode.destroy(state);
              } else {
                return $$Promise.resolved(undefined);
              }
            }
            switch ($$event.TAG | 0) {
              case /* InputMethod */0 :
                  var $$char = $$event._0;
                  if ($$char.TAG !== /* InsertChar */0) {
                    return Handle__InputMethod$AgdaModeVscode.chooseSymbol(state, $$char._0);
                  }
                  _command = {
                    TAG: 13,
                    _0: {
                      _0: $$char._0,
                      [Symbol.for("name")]: "InsertChar"
                    },
                    [Symbol.for("name")]: "InputMethod"
                  };
                  continue ;
              case /* PromptIMUpdate */1 :
                  var interval = $$event._0;
                  if (typeof interval !== "number") {
                    if (interval.TAG === /* MouseSelect */0) {
                      return Handle__InputMethod$AgdaModeVscode.select(state, [interval._0]);
                    } else {
                      return Handle__InputMethod$AgdaModeVscode.keyUpdatePromptIM(state, interval._0);
                    }
                  }
                  switch (interval) {
                    case /* BrowseUp */0 :
                        _command = {
                          TAG: 13,
                          _0: /* BrowseUp */1,
                          [Symbol.for("name")]: "InputMethod"
                        };
                        continue ;
                    case /* BrowseDown */1 :
                        _command = {
                          TAG: 13,
                          _0: /* BrowseDown */3,
                          [Symbol.for("name")]: "InputMethod"
                        };
                        continue ;
                    case /* BrowseLeft */2 :
                        _command = {
                          TAG: 13,
                          _0: /* BrowseLeft */4,
                          [Symbol.for("name")]: "InputMethod"
                        };
                        continue ;
                    case /* BrowseRight */3 :
                        _command = {
                          TAG: 13,
                          _0: /* BrowseRight */2,
                          [Symbol.for("name")]: "InputMethod"
                        };
                        continue ;
                    case /* Escape */4 :
                        if (IM$AgdaModeVscode.isActivated(state.editorIM) || IM$AgdaModeVscode.isActivated(state.promptIM)) {
                          return Handle__InputMethod$AgdaModeVscode.deactivate(state);
                        } else {
                          return State$AgdaModeVscode.View.interruptPrompt(state);
                        }
                    
                  }
              case /* JumpToTarget */2 :
                  var link = $$event._0;
                  var $$document$1 = state.editor.document;
                  Editor$AgdaModeVscode.focus($$document$1);
                  var path = Parser$AgdaModeVscode.filepath($$document$1.fileName);
                  if (link.TAG === /* ToRange */0) {
                    var match = link._0;
                    if (!match) {
                      return $$Promise.resolved(undefined);
                    }
                    var filePath = match._0;
                    if (filePath === undefined) {
                      return $$Promise.resolved(undefined);
                    }
                    if (path === filePath) {
                      var ranges = Belt_Array.map(match._1, View$AgdaModeVscode.AgdaInterval.toRange);
                      Editor$AgdaModeVscode.$$Selection.setMany(state.editor, ranges);
                    }
                    return $$Promise.resolved(undefined);
                  }
                  var index = link._0;
                  var goal = state.goals.find((function(index){
                      return function (goal) {
                        return goal.index === index;
                      }
                      }(index)));
                  if (goal !== undefined) {
                    Goal$AgdaModeVscode.setCursor(goal, state.editor);
                  }
                  return $$Promise.resolved(undefined);
              default:
                return $$Promise.resolved(undefined);
            }
        case /* GoalTypeContextAndInferredType */9 :
            var normalization$8 = command._0;
            return Handle__Goal$AgdaModeVscode.$$case(state, (function(normalization$8){
                      return function (goal, expr) {
                        return sendAgdaRequest(dispatchCommand$1, state, {
                                    TAG: 14,
                                    _0: normalization$8,
                                    _1: expr,
                                    _2: goal,
                                    [Symbol.for("name")]: "GoalTypeContextAndInferredType"
                                  });
                      }
                      }(normalization$8)), (function(normalization$8){
                      return function (goal) {
                        return sendAgdaRequest(dispatchCommand$1, state, {
                                    TAG: 13,
                                    _0: normalization$8,
                                    _1: goal,
                                    [Symbol.for("name")]: "GoalTypeAndContext"
                                  });
                      }
                      }(normalization$8)), State$AgdaModeVscode.View.displayOutOfGoalError(state));
        case /* GoalTypeContextAndCheckedType */10 :
            var normalization$9 = command._0;
            return Handle__Goal$AgdaModeVscode.$$case(state, (function(normalization$9){
                      return function (goal, expr) {
                        return sendAgdaRequest(dispatchCommand$1, state, {
                                    TAG: 15,
                                    _0: normalization$9,
                                    _1: expr,
                                    _2: goal,
                                    [Symbol.for("name")]: "GoalTypeContextAndCheckedType"
                                  });
                      }
                      }(normalization$9)), (function(header,normalization$9){
                      return function (goal) {
                        return State$AgdaModeVscode.View.prompt(state, header, {
                                    body: undefined,
                                    placeholder: "expression to type:",
                                    value: undefined
                                  }, (function (expr) {
                                      return sendAgdaRequest(dispatchCommand$1, state, {
                                                  TAG: 15,
                                                  _0: normalization$9,
                                                  _1: expr,
                                                  _2: goal,
                                                  [Symbol.for("name")]: "GoalTypeContextAndCheckedType"
                                                });
                                    }));
                      }
                      }(header,normalization$9)), State$AgdaModeVscode.View.displayOutOfGoalError(state));
        case /* ModuleContents */11 :
            var normalization$10 = command._0;
            var placeholder$2 = "module name:";
            return Handle__Goal$AgdaModeVscode.$$case(state, (function(normalization$10){
                      return function (goal, expr) {
                        return sendAgdaRequest(dispatchCommand$1, state, {
                                    TAG: 16,
                                    _0: normalization$10,
                                    _1: expr,
                                    _2: goal,
                                    [Symbol.for("name")]: "ModuleContents"
                                  });
                      }
                      }(normalization$10)), (function(header,normalization$10,placeholder$2){
                      return function (goal) {
                        return State$AgdaModeVscode.View.prompt(state, header, {
                                    body: undefined,
                                    placeholder: placeholder$2,
                                    value: undefined
                                  }, (function (expr) {
                                      return sendAgdaRequest(dispatchCommand$1, state, {
                                                  TAG: 16,
                                                  _0: normalization$10,
                                                  _1: expr,
                                                  _2: goal,
                                                  [Symbol.for("name")]: "ModuleContents"
                                                });
                                    }));
                      }
                      }(header,normalization$10,placeholder$2)), State$AgdaModeVscode.View.prompt(state, header, {
                            body: undefined,
                            placeholder: placeholder$2,
                            value: undefined
                          }, (function(normalization$10){
                          return function (expr) {
                            return sendAgdaRequest(dispatchCommand$1, state, {
                                        TAG: 17,
                                        _0: normalization$10,
                                        _1: expr,
                                        [Symbol.for("name")]: "ModuleContentsGlobal"
                                      });
                          }
                          }(normalization$10))));
        case /* ComputeNormalForm */12 :
            var computeMode = command._0;
            var placeholder$3 = "expression to normalize:";
            return Handle__Goal$AgdaModeVscode.$$case(state, (function(computeMode){
                      return function (goal, expr) {
                        return sendAgdaRequest(dispatchCommand$1, state, {
                                    TAG: 18,
                                    _0: computeMode,
                                    _1: expr,
                                    _2: goal,
                                    [Symbol.for("name")]: "ComputeNormalForm"
                                  });
                      }
                      }(computeMode)), (function(header,computeMode,placeholder$3){
                      return function (goal) {
                        return State$AgdaModeVscode.View.prompt(state, header, {
                                    body: undefined,
                                    placeholder: placeholder$3,
                                    value: undefined
                                  }, (function (expr) {
                                      return sendAgdaRequest(dispatchCommand$1, state, {
                                                  TAG: 18,
                                                  _0: computeMode,
                                                  _1: expr,
                                                  _2: goal,
                                                  [Symbol.for("name")]: "ComputeNormalForm"
                                                });
                                    }));
                      }
                      }(header,computeMode,placeholder$3)), State$AgdaModeVscode.View.prompt(state, header, {
                            body: undefined,
                            placeholder: placeholder$3,
                            value: undefined
                          }, (function(computeMode){
                          return function (expr) {
                            return sendAgdaRequest(dispatchCommand$1, state, {
                                        TAG: 19,
                                        _0: computeMode,
                                        _1: expr,
                                        [Symbol.for("name")]: "ComputeNormalFormGlobal"
                                      });
                          }
                          }(computeMode))));
        case /* InputMethod */13 :
            var $$char$1 = command._0;
            if (typeof $$char$1 !== "number") {
              return Handle__InputMethod$AgdaModeVscode.insertChar(state, $$char$1._0);
            }
            switch ($$char$1) {
              case /* Activate */0 :
                  return Handle__InputMethod$AgdaModeVscode.activateEditorIM(state);
              case /* BrowseUp */1 :
                  return Handle__InputMethod$AgdaModeVscode.moveUp(state);
              case /* BrowseRight */2 :
                  return Handle__InputMethod$AgdaModeVscode.moveRight(state);
              case /* BrowseDown */3 :
                  return Handle__InputMethod$AgdaModeVscode.moveDown(state);
              case /* BrowseLeft */4 :
                  return Handle__InputMethod$AgdaModeVscode.moveLeft(state);
              
            }
        
      }
    }
  };
}

exports.Lock = Lock;
exports.sendAgdaRequest = sendAgdaRequest;
exports.dispatchCommand = dispatchCommand;
/* allDone Not a pure module */
