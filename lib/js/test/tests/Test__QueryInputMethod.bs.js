// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Mocha$BsMocha = require("bs-mocha/lib/js/src/Mocha.bs.js");
var Assert$BsMocha = require("bs-mocha/lib/js/src/Assert.bs.js");
var Editor$AgdaModeVscode = require("../../src/Editor.bs.js");
var QueryIM$AgdaModeVscode = require("../../src/InputMethod/QueryIM.bs.js");

var QueryIM = QueryIM$AgdaModeVscode.Impl({
      Disposable: Editor$AgdaModeVscode.Disposable,
      Point: {
        line: Editor$AgdaModeVscode.Point.line,
        column: Editor$AgdaModeVscode.Point.column,
        make: Editor$AgdaModeVscode.Point.make,
        translate: Editor$AgdaModeVscode.Point.translate,
        compare: Editor$AgdaModeVscode.Point.compare
      },
      pointAtOffset: Editor$AgdaModeVscode.pointAtOffset,
      offsetAtPoint: Editor$AgdaModeVscode.offsetAtPoint,
      $$Range: Editor$AgdaModeVscode.$$Range,
      editorType: Editor$AgdaModeVscode.editorType,
      getExtensionPath: Editor$AgdaModeVscode.getExtensionPath,
      getFileName: Editor$AgdaModeVscode.getFileName,
      save: Editor$AgdaModeVscode.save,
      onDidChangeFileName: Editor$AgdaModeVscode.onDidChangeFileName,
      onDidChangeActivation: Editor$AgdaModeVscode.onDidChangeActivation,
      onDidCloseEditor: Editor$AgdaModeVscode.onDidCloseEditor,
      registerCommand: Editor$AgdaModeVscode.registerCommand,
      setContext: Editor$AgdaModeVscode.setContext,
      getDisposables: Editor$AgdaModeVscode.getDisposables,
      Config: {
        getAgdaPath: Editor$AgdaModeVscode.Config.getAgdaPath,
        setAgdaPath: Editor$AgdaModeVscode.Config.setAgdaPath,
        getLibraryPath: Editor$AgdaModeVscode.Config.getLibraryPath,
        getHighlightingMethod: Editor$AgdaModeVscode.Config.getHighlightingMethod,
        getBackend: Editor$AgdaModeVscode.Config.getBackend
      },
      View: {
        make: Editor$AgdaModeVscode.View.make,
        destroy: Editor$AgdaModeVscode.View.destroy,
        show: Editor$AgdaModeVscode.View.show,
        hide: Editor$AgdaModeVscode.View.hide,
        focus: Editor$AgdaModeVscode.View.focus,
        send: Editor$AgdaModeVscode.View.send,
        onEvent: Editor$AgdaModeVscode.View.onEvent
      },
      Decoration: {
        decorate: Editor$AgdaModeVscode.Decoration.decorate,
        highlightBackground: Editor$AgdaModeVscode.Decoration.highlightBackground,
        highlightBackgroundWithColor: Editor$AgdaModeVscode.Decoration.highlightBackgroundWithColor,
        decorateText: Editor$AgdaModeVscode.Decoration.decorateText,
        decorateTextWithColor: Editor$AgdaModeVscode.Decoration.decorateTextWithColor,
        overlayText: Editor$AgdaModeVscode.Decoration.overlayText,
        overlayTextWithColor: Editor$AgdaModeVscode.Decoration.overlayTextWithColor,
        underlineText: Editor$AgdaModeVscode.Decoration.underlineText,
        destroy: Editor$AgdaModeVscode.Decoration.destroy
      },
      focus: Editor$AgdaModeVscode.focus,
      getSelectionRange: Editor$AgdaModeVscode.getSelectionRange,
      getSelectionRanges: Editor$AgdaModeVscode.getSelectionRanges,
      getCursorPosition: Editor$AgdaModeVscode.getCursorPosition,
      getCursorPositions: Editor$AgdaModeVscode.getCursorPositions,
      setCursorPosition: Editor$AgdaModeVscode.setCursorPosition,
      setCursorPositions: Editor$AgdaModeVscode.setCursorPositions,
      onChangeCursorPosition: Editor$AgdaModeVscode.onChangeCursorPosition,
      rangeForLine: Editor$AgdaModeVscode.rangeForLine,
      fromAgdaOffset: Editor$AgdaModeVscode.fromAgdaOffset,
      toAgdaOffset: Editor$AgdaModeVscode.toAgdaOffset,
      getText: Editor$AgdaModeVscode.getText,
      getTextInRange: Editor$AgdaModeVscode.getTextInRange,
      selectText: Editor$AgdaModeVscode.selectText,
      replaceText: Editor$AgdaModeVscode.replaceText,
      insertText: Editor$AgdaModeVscode.insertText,
      insertTexts: Editor$AgdaModeVscode.insertTexts,
      deleteText: Editor$AgdaModeVscode.deleteText,
      onChange: Editor$AgdaModeVscode.onChange,
      copyToClipboard: Editor$AgdaModeVscode.copyToClipboard,
      colorThemeIsDark: Editor$AgdaModeVscode.colorThemeIsDark,
      lineEndingIsCRLF: Editor$AgdaModeVscode.lineEndingIsCRLF
    });

function testQueryIMUpdate(self, input, output, command, param) {
  var result = Curry._2(QueryIM.update, self, input);
  if (result !== undefined) {
    Assert$BsMocha.equal(undefined, result[0], output);
    if (command !== undefined) {
      return Assert$BsMocha.equal(undefined, result[1], command);
    } else {
      return ;
    }
  } else {
    return Assert$BsMocha.fail("shouldn't be deactivated after \"" + (input + "\""));
  }
}

Mocha$BsMocha.describe("Input Method (Query)")(undefined, undefined, undefined, (function (param) {
        Mocha$BsMocha.describe("Insertion")(undefined, undefined, undefined, (function (param) {
                Mocha$BsMocha.it("should translate \"\bn\" to \"ùïü\"")(undefined, undefined, undefined, (function (param) {
                        var queryIM = Curry._1(QueryIM.make, undefined);
                        Curry._2(QueryIM.activate, queryIM, "");
                        testQueryIMUpdate(queryIM, "b", "‚ô≠", undefined, undefined);
                        return testQueryIMUpdate(queryIM, "‚ô≠n", "ùïü", /* Deactivate */1, undefined);
                      }));
                return Mocha$BsMocha.it("should translate \"garbage \\bn\" to \"garbage ùïü\"")(undefined, undefined, undefined, (function (param) {
                              var queryIM = Curry._1(QueryIM.make, undefined);
                              Curry._2(QueryIM.activate, queryIM, "garbage ");
                              testQueryIMUpdate(queryIM, "garbage b", "garbage ‚ô≠", undefined, undefined);
                              return testQueryIMUpdate(queryIM, "garbage ‚ô≠n", "garbage ùïü", /* Deactivate */1, undefined);
                            }));
              }));
        return Mocha$BsMocha.describe("Backspacing")(undefined, undefined, undefined, (function (param) {
                      return Mocha$BsMocha.it("should work just fine")(undefined, undefined, undefined, (function (param) {
                                    var queryIM = Curry._1(QueryIM.make, undefined);
                                    Curry._2(QueryIM.activate, queryIM, "");
                                    testQueryIMUpdate(queryIM, "l", "‚Üê", undefined, undefined);
                                    testQueryIMUpdate(queryIM, "‚Üêa", "‚Üêa", undefined, undefined);
                                    testQueryIMUpdate(queryIM, "‚Üêam", "‚Üêam", undefined, undefined);
                                    testQueryIMUpdate(queryIM, "‚Üêamb", "‚Üêamb", undefined, undefined);
                                    testQueryIMUpdate(queryIM, "‚Üêambd", "‚Üêambd", undefined, undefined);
                                    testQueryIMUpdate(queryIM, "‚Üêambda", "Œª", undefined, undefined);
                                    testQueryIMUpdate(queryIM, "", "lambd", undefined, undefined);
                                    testQueryIMUpdate(queryIM, "lamb", "lamb", undefined, undefined);
                                    testQueryIMUpdate(queryIM, "lambd", "lambd", undefined, undefined);
                                    testQueryIMUpdate(queryIM, "lambda", "Œª", undefined, undefined);
                                    testQueryIMUpdate(queryIM, "Œªb", "Œªb", undefined, undefined);
                                    testQueryIMUpdate(queryIM, "Œªba", "Œªba", undefined, undefined);
                                    return testQueryIMUpdate(queryIM, "Œªbar", "∆õ", /* Deactivate */1, undefined);
                                  }));
                    }));
      }));

var Assert;

exports.QueryIM = QueryIM;
exports.Assert = Assert;
exports.testQueryIMUpdate = testQueryIMUpdate;
/* QueryIM Not a pure module */
