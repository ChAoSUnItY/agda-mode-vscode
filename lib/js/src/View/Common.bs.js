// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Belt_List = require("rescript/lib/js/belt_List.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Pervasives = require("rescript/lib/js/pervasives.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/lib/js/src/Json_encode.bs.js");
var Util$AgdaModeVscode = require("../Util/Util.bs.js");
var Emacs__Parser$AgdaModeVscode = require("./Panel/Emacs/Emacs__Parser.bs.js");

function decode(param) {
  return Json_decode.map((function (param) {
                return {
                        line: param[0],
                        col: param[1],
                        pos: param[2]
                      };
              }), (function (param) {
                return Json_decode.tuple3(Json_decode.$$int, Json_decode.$$int, Json_decode.$$int, param);
              }), param);
}

function encode(x) {
  return Json_encode.tuple3((function (prim) {
                return prim;
              }), (function (prim) {
                return prim;
              }), (function (prim) {
                return prim;
              }), [
              x.line,
              x.col,
              x.pos
            ]);
}

var AgdaPosition = {
  decode: decode,
  encode: encode
};

function make(start, end_) {
  return {
          start: start,
          end_: end_
        };
}

function fuse(a, b) {
  var start = a.start.pos > b.start.pos ? b.start : a.start;
  var end_ = a.end_.pos > b.end_.pos ? a.end_ : b.end_;
  return {
          start: start,
          end_: end_
        };
}

function toString(self) {
  if (self.start.line === self.end_.line) {
    return String(self.start.line) + ("," + (String(self.start.col) + ("-" + String(self.end_.col))));
  } else {
    return String(self.start.line) + ("," + (String(self.start.col) + ("-" + (String(self.end_.line) + ("," + String(self.end_.col))))));
  }
}

function decode$1(param) {
  return Json_decode.map((function (param) {
                return {
                        start: param[0],
                        end_: param[1]
                      };
              }), (function (param) {
                return Json_decode.pair(decode, decode, param);
              }), param);
}

function encode$1(x) {
  return Json_encode.pair(encode, encode, [
              x.start,
              x.end_
            ]);
}

var AgdaInterval = {
  make: make,
  fuse: fuse,
  toString: toString,
  decode: decode$1,
  encode: encode$1
};

var partial_arg = /^(\S+)\:(?:(\d+)\,(\d+)\-(\d+)\,(\d+)|(\d+)\,(\d+)\-(\d+)|(\d+)\,(\d+))$/;

function parse(param) {
  return Emacs__Parser$AgdaModeVscode.captures(partial_arg, (function (captured) {
                var xs = Belt_Array.get(captured, 1);
                var srcFile = Belt_Option.flatMap(xs, (function (x) {
                        return x;
                      }));
                var xs$1 = Belt_Array.get(captured, 2);
                var isType1 = Belt_Option.isSome(Belt_Option.flatMap(xs$1, (function (x) {
                            return x;
                          })));
                var xs$2 = Belt_Array.get(captured, 6);
                var isType2 = Belt_Option.isSome(Belt_Option.flatMap(xs$2, (function (x) {
                            return x;
                          })));
                if (isType1) {
                  var xs$3 = Belt_Array.get(captured, 2);
                  return Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.flatMap(xs$3, (function (x) {
                                        return x;
                                      })), Pervasives.int_of_string_opt), (function (rowStart) {
                                var xs = Belt_Array.get(captured, 3);
                                return Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.flatMap(xs, (function (x) {
                                                      return x;
                                                    })), Pervasives.int_of_string_opt), (function (colStart) {
                                              var xs = Belt_Array.get(captured, 4);
                                              return Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.flatMap(xs, (function (x) {
                                                                    return x;
                                                                  })), Pervasives.int_of_string_opt), (function (rowEnd) {
                                                            var xs = Belt_Array.get(captured, 5);
                                                            return Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.flatMap(xs, (function (x) {
                                                                                  return x;
                                                                                })), Pervasives.int_of_string_opt), (function (colEnd) {
                                                                          return {
                                                                                  _0: srcFile,
                                                                                  _1: [{
                                                                                      start: {
                                                                                        line: rowStart,
                                                                                        col: colStart,
                                                                                        pos: 0
                                                                                      },
                                                                                      end_: {
                                                                                        line: rowEnd,
                                                                                        col: colEnd,
                                                                                        pos: 0
                                                                                      }
                                                                                    }],
                                                                                  [Symbol.for("name")]: "Range"
                                                                                };
                                                                        }));
                                                          }));
                                            }));
                              }));
                }
                if (isType2) {
                  var xs$4 = Belt_Array.get(captured, 6);
                  return Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.flatMap(xs$4, (function (x) {
                                        return x;
                                      })), Pervasives.int_of_string_opt), (function (row) {
                                var xs = Belt_Array.get(captured, 7);
                                return Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.flatMap(xs, (function (x) {
                                                      return x;
                                                    })), Pervasives.int_of_string_opt), (function (colStart) {
                                              var xs = Belt_Array.get(captured, 8);
                                              return Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.flatMap(xs, (function (x) {
                                                                    return x;
                                                                  })), Pervasives.int_of_string_opt), (function (colEnd) {
                                                            return {
                                                                    _0: srcFile,
                                                                    _1: [{
                                                                        start: {
                                                                          line: row,
                                                                          col: colStart,
                                                                          pos: 0
                                                                        },
                                                                        end_: {
                                                                          line: row,
                                                                          col: colEnd,
                                                                          pos: 0
                                                                        }
                                                                      }],
                                                                    [Symbol.for("name")]: "Range"
                                                                  };
                                                          }));
                                            }));
                              }));
                }
                var xs$5 = Belt_Array.get(captured, 9);
                return Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.flatMap(xs$5, (function (x) {
                                      return x;
                                    })), Pervasives.int_of_string_opt), (function (row) {
                              var xs = Belt_Array.get(captured, 10);
                              return Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.flatMap(xs, (function (x) {
                                                    return x;
                                                  })), Pervasives.int_of_string_opt), (function (col) {
                                            return {
                                                    _0: srcFile,
                                                    _1: [{
                                                        start: {
                                                          line: row,
                                                          col: col,
                                                          pos: 0
                                                        },
                                                        end_: {
                                                          line: row,
                                                          col: col,
                                                          pos: 0
                                                        }
                                                      }],
                                                    [Symbol.for("name")]: "Range"
                                                  };
                                          }));
                            }));
              }), param);
}

function fuse$1(a, b) {
  var mergeTouching = function (l, e, s, r) {
    return Belt_List.concat(Belt_List.concat(l, {
                    hd: {
                      start: e.start,
                      end_: s.end_
                    },
                    tl: /* [] */0
                  }), r);
  };
  var fuseSome = function (s1, r1, s2, r2) {
    var r1$p = Util$AgdaModeVscode.List.dropWhile((function (x) {
            return x.end_.pos <= s2.end_.pos;
          }), r1);
    return helpFuse(r1$p, {
                hd: fuse(s1, s2),
                tl: r2
              });
  };
  var outputLeftPrefix = function (s1, r1, s2, is2) {
    var match = Util$AgdaModeVscode.List.span((function (s) {
            return s.end_.pos < s2.start.pos;
          }), r1);
    return Belt_List.concat(Belt_List.concat({
                    hd: s1,
                    tl: /* [] */0
                  }, match[0]), helpFuse(match[1], is2));
  };
  var helpFuse = function (a, b) {
    var match = Belt_List.reverse(a);
    var match$1 = Belt_List.reverse(b);
    if (!a) {
      return a;
    }
    if (!match) {
      if (b) {
        return Pervasives.failwith("something wrong with Range::fuse");
      } else {
        return b;
      }
    }
    if (!b) {
      if (b) {
        return Pervasives.failwith("something wrong with Range::fuse");
      } else {
        return b;
      }
    }
    if (!match$1) {
      return Pervasives.failwith("something wrong with Range::fuse");
    }
    var e2 = match$1.hd;
    var r2 = b.tl;
    var s2 = b.hd;
    var e1 = match.hd;
    var r1 = a.tl;
    var s1 = a.hd;
    if (e1.end_.pos < s2.start.pos) {
      return Belt_List.concat(a, b);
    } else if (e2.end_.pos < s1.start.pos) {
      return Belt_List.concat(b, a);
    } else if (e1.end_.pos === s2.start.pos) {
      return mergeTouching(match.tl, e1, s2, r2);
    } else if (e2.end_.pos === s1.start.pos) {
      return mergeTouching(match$1.tl, e2, s1, r1);
    } else if (s1.end_.pos < s2.start.pos) {
      return outputLeftPrefix(s1, r1, s2, b);
    } else if (s2.end_.pos < s1.start.pos) {
      return outputLeftPrefix(s2, r2, s1, a);
    } else if (s1.end_.pos < s2.end_.pos) {
      return fuseSome(s1, r1, s2, r2);
    } else {
      return fuseSome(s2, r2, s1, r1);
    }
  };
  if (a) {
    if (b) {
      return {
              _0: a._0,
              _1: Belt_List.toArray(helpFuse(Belt_List.fromArray(a._1), Belt_List.fromArray(b._1))),
              [Symbol.for("name")]: "Range"
            };
    } else {
      return a;
    }
  } else {
    return b;
  }
}

function toString$1(self) {
  if (!self) {
    return "";
  }
  var filepath = self._0;
  if (filepath !== undefined) {
    var xs = self._1;
    if (xs.length === 0) {
      return filepath;
    }
    var match = Belt_Array.get(xs, 0);
    var match$1 = Belt_Array.get(xs, xs.length - 1 | 0);
    if (match !== undefined && match$1 !== undefined) {
      return filepath + ":" + toString({
                  start: match.start,
                  end_: match$1.end_
                });
    } else {
      return "";
    }
  }
  var xs$1 = self._1;
  var match$2 = Belt_Array.get(xs$1, 0);
  var match$3 = Belt_Array.get(xs$1, xs$1.length - 1 | 0);
  if (match$2 !== undefined && match$3 !== undefined) {
    return toString({
                start: match$2.start,
                end_: match$3.end_
              });
  } else {
    return "";
  }
}

var decode$2 = Util$AgdaModeVscode.Decode.sum(function (x) {
      switch (x) {
        case "NoRange" :
            return {
                    TAG: 1,
                    _0: /* NoRange */0,
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "Range" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (param) {
                                      return {
                                              _0: param[0],
                                              _1: param[1],
                                              [Symbol.for("name")]: "Range"
                                            };
                                    }), (function (param) {
                                      return Json_decode.pair((function (param) {
                                                    return Json_decode.optional(Json_decode.string, param);
                                                  }), (function (param) {
                                                    return Json_decode.array(decode$1, param);
                                                  }), param);
                                    }), param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        default:
          throw {
                RE_EXN_ID: Json_decode.DecodeError,
                _1: "[Agda.Range] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

function encode$2(x) {
  if (x) {
    return Json_encode.object_({
                hd: [
                  "tag",
                  "Range"
                ],
                tl: {
                  hd: [
                    "contents",
                    Json_encode.pair((function (param) {
                            return Json_encode.nullable((function (prim) {
                                          return prim;
                                        }), param);
                          }), (function (param) {
                            return Json_encode.array(encode$1, param);
                          }), [
                          x._0,
                          x._1
                        ])
                  ],
                  tl: /* [] */0
                }
              });
  } else {
    return Json_encode.object_({
                hd: [
                  "tag",
                  "NoRange"
                ],
                tl: /* [] */0
              });
  }
}

var AgdaRange = {
  parse: parse,
  fuse: fuse$1,
  toString: toString$1,
  decode: decode$2,
  encode: encode$2
};

function contains(interval, offset) {
  if (Caml_obj.lessequal(interval[0], offset)) {
    return Caml_obj.lessequal(offset, interval[1]);
  } else {
    return false;
  }
}

function decode$3(param) {
  return Json_decode.pair(Json_decode.$$int, Json_decode.$$int, param);
}

function encode$3(param) {
  return Json_encode.pair((function (prim) {
                return prim;
              }), (function (prim) {
                return prim;
              }), param);
}

var Interval = {
  contains: contains,
  decode: decode$3,
  encode: encode$3
};

exports.AgdaPosition = AgdaPosition;
exports.AgdaInterval = AgdaInterval;
exports.AgdaRange = AgdaRange;
exports.Interval = Interval;
/* decode Not a pure module */
