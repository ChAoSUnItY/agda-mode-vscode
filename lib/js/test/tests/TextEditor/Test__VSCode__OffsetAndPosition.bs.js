// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Vscode = require("vscode");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Mocha$BsMocha = require("bs-mocha/lib/js/src/Mocha.bs.js");
var Assert$BsMocha = require("bs-mocha/lib/js/src/Assert.bs.js");
var Promise$BsMocha = require("bs-mocha/lib/js/src/Promise.bs.js");
var Editor$AgdaModeVscode = require("../../../src/Editor.bs.js");

function openTextEditor(content) {
  return $$Promise.flatMap(Vscode.workspace.openTextDocument({
                  content: content,
                  language: "agda"
                }), (function (textDocument) {
                return Vscode.window.showTextDocument(textDocument, undefined);
              }));
}

function getTextToOffsetAt(textEditor, offset) {
  var range = new Vscode.Range(Editor$AgdaModeVscode.pointAtOffset(textEditor, 0), Editor$AgdaModeVscode.pointAtOffset(textEditor, offset));
  return Editor$AgdaModeVscode.getTextInRange(textEditor, range);
}

Mocha$BsMocha.describe_only("Conversion between Offsets and Positions")(undefined, undefined, undefined, (function (param) {
        Mocha$BsMocha.describe("Editor.characterWidth")(undefined, undefined, undefined, (function (param) {
                Mocha$BsMocha.it("should calculate the width of some grapheme cluster")(undefined, undefined, undefined, (function (param) {
                        var actual = Editor$AgdaModeVscode.characterWidth("𝐀");
                        return Assert$BsMocha.deep_equal(undefined, actual, 1);
                      }));
                return Mocha$BsMocha.it("should calculate the width of some ordinary ASCII character")(undefined, undefined, undefined, (function (param) {
                              var actual = Editor$AgdaModeVscode.characterWidth("a");
                              return Assert$BsMocha.deep_equal(undefined, actual, 1);
                            }));
              }));
        Mocha$BsMocha.describe("VSCode.TextDocument.positionAt")(undefined, undefined, undefined, (function (param) {
                var openTextDocument = Vscode.workspace.openTextDocument({
                      content: "𝐀𝐁𝐂𝐃𝐄𝐅𝐆𝐇\na",
                      language: "agda"
                    });
                return Promise$BsMocha.it("should count it wrong")(undefined, undefined, undefined, (function (param) {
                              return $$Promise.Js.toBsPromise($$Promise.map(openTextDocument, (function (textDocument) {
                                                var range = new Vscode.Range(textDocument.positionAt(0), textDocument.positionAt(4));
                                                var actual = textDocument.getText(Caml_option.some(range));
                                                Assert$BsMocha.not_equal(undefined, actual, "𝐀𝐁𝐂𝐃");
                                                return Assert$BsMocha.equal(undefined, actual, "𝐀𝐁");
                                              })));
                            }));
              }));
        Mocha$BsMocha.describe("Editor.stringAtOffset")(undefined, undefined, undefined, (function (param) {
                return Promise$BsMocha.it("shouldn't cut into a grapheme")(undefined, undefined, undefined, (function (param) {
                              return $$Promise.Js.toBsPromise($$Promise.map(openTextEditor("𝐀a𝐁bb𝐂c𝐃dd𝐄e𝐅𝐆𝐇\na"), (function (textEditor) {
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 0), "");
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 1), "𝐀");
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 2), "𝐀");
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 3), "𝐀a");
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 4), "𝐀a𝐁");
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 5), "𝐀a𝐁");
                                                return Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 6), "𝐀a𝐁b");
                                              })));
                            }));
              }));
        return Mocha$BsMocha.describe_skip("Editor.pointAtOffset")(undefined, undefined, undefined, (function (param) {
                      var openTextEditor = function (content) {
                        return $$Promise.flatMap(Vscode.workspace.openTextDocument({
                                        content: content,
                                        language: "agda"
                                      }), (function (textDocument) {
                                      return Vscode.window.showTextDocument(textDocument, undefined);
                                    }));
                      };
                      Promise$BsMocha.it("should count it right")(undefined, undefined, undefined, (function (param) {
                              return $$Promise.Js.toBsPromise($$Promise.map(openTextEditor("𝐀𝐁𝐂𝐃𝐄𝐅𝐆𝐇\na"), (function (textEditor) {
                                                var range = new Vscode.Range(Editor$AgdaModeVscode.pointAtOffset(textEditor, 0), Editor$AgdaModeVscode.pointAtOffset(textEditor, 4));
                                                var actual = Editor$AgdaModeVscode.getTextInRange(textEditor, range);
                                                return Assert$BsMocha.equal(undefined, actual, "𝐀𝐁𝐂𝐃");
                                              })));
                            }));
                      return Promise$BsMocha.it("should count it right")(undefined, undefined, undefined, (function (param) {
                                    return $$Promise.Js.toBsPromise($$Promise.map(openTextEditor("𝐀a𝐁bb𝐂c𝐃dd𝐄𝐅𝐆𝐇\na"), (function (textEditor) {
                                                      var range = new Vscode.Range(Editor$AgdaModeVscode.pointAtOffset(textEditor, 0), Editor$AgdaModeVscode.pointAtOffset(textEditor, 4));
                                                      var actual = Editor$AgdaModeVscode.getTextInRange(textEditor, range);
                                                      return Assert$BsMocha.equal(undefined, actual, "𝐀a𝐁b");
                                                    })));
                                  }));
                    }));
      }));

var Assert;

var P;

exports.Assert = Assert;
exports.P = P;
exports.openTextEditor = openTextEditor;
exports.getTextToOffsetAt = getTextToOffsetAt;
/*  Not a pure module */
