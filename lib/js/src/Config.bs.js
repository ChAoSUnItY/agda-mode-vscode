// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Vscode = require("vscode");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Parser$AgdaModeVscode = require("./Parser.bs.js");

function setAgdaPath(path) {
  return Vscode.workspace.getConfiguration("agdaMode", undefined).update("agdaPath", path, 1, undefined);
}

function getAgdaPath(param) {
  return Vscode.workspace.getConfiguration("agdaMode", undefined).get("agdaPath");
}

function getLibraryPath(param) {
  var raw = Belt_Option.getWithDefault(Vscode.workspace.getConfiguration("agdaMode", undefined).get("libraryPath"), "");
  return Belt_Array.map(Belt_Array.keep(raw.split(","), (function (x) {
                    return x !== "";
                  })), Parser$AgdaModeVscode.filepath);
}

function getHighlightingMethod(param) {
  var raw = Vscode.workspace.getConfiguration("agdaMode", undefined).get("highlighting.IPC");
  if (raw === "Standard input/output") {
    return true;
  } else {
    return false;
  }
}

function getSemanticHighlighting(param) {
  var raw = Vscode.workspace.getConfiguration("agdaMode", undefined).get("highlighting.semanticToken");
  if (raw !== undefined && raw) {
    return true;
  } else {
    return false;
  }
}

function getBackend(param) {
  var raw = Vscode.workspace.getConfiguration("agdaMode", undefined).get("backend");
  if (raw === undefined) {
    return "GHCNoMain";
  }
  switch (raw) {
    case "GHC" :
        return "GHCNoMain";
    case "LaTeX" :
        return "LaTeX";
    case "QuickLaTeX" :
        return "QuickLaTeX";
    default:
      return "GHCNoMain";
  }
}

var VSRange;

exports.VSRange = VSRange;
exports.setAgdaPath = setAgdaPath;
exports.getAgdaPath = getAgdaPath;
exports.getLibraryPath = getLibraryPath;
exports.getHighlightingMethod = getHighlightingMethod;
exports.getSemanticHighlighting = getSemanticHighlighting;
exports.getBackend = getBackend;
/* vscode Not a pure module */
