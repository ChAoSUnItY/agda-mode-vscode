// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Item$AgdaModeVscode = require("../View/Component/Item.bs.js");
var Editor$AgdaModeVscode = require("../Editor.bs.js");
var State__Type$AgdaModeVscode = require("./State__Type.bs.js");
var ViewController$AgdaModeVscode = require("../View/ViewController.bs.js");
var Connection__Error$AgdaModeVscode = require("../Connection/Connection__Error.bs.js");

function sendEvent(state, $$event) {
  State__Type$AgdaModeVscode.ViewCache.cacheEvent(state.viewCache, $$event);
  return ViewController$AgdaModeVscode.sendEvent(state.view, $$event);
}

function restore(state) {
  return State__Type$AgdaModeVscode.ViewCache.restore(state.viewCache, state.view);
}

function display(state, header, body) {
  return sendEvent(state, {
              TAG: 0,
              _0: header,
              _1: body,
              [Symbol.for("name")]: "Display"
            });
}

function displayInAppendMode(state, header, body) {
  return sendEvent(state, {
              TAG: 1,
              _0: header,
              _1: body,
              [Symbol.for("name")]: "Append"
            });
}

function displayOutOfGoalError(state) {
  return display(state, {
              TAG: 3,
              _0: "Out of goal",
              [Symbol.for("name")]: "Error"
            }, [Item$AgdaModeVscode.plainText("Please place the cursor in a goal")]);
}

function displayConnectionError(state, error) {
  var match = Connection__Error$AgdaModeVscode.toString(error);
  return display(state, {
              TAG: 3,
              _0: "Connection Error: " + match[0],
              [Symbol.for("name")]: "Error"
            }, [Item$AgdaModeVscode.plainText(match[1])]);
}

function displayConnectionStatus(state, status) {
  if (status.TAG === /* Emacs */0) {
    return sendEvent(state, {
                TAG: 2,
                _0: "Emacs",
                [Symbol.for("name")]: "SetStatus"
              });
  } else if (status._1.TAG === /* ViaStdIO */0) {
    return sendEvent(state, {
                TAG: 2,
                _0: "LSP",
                [Symbol.for("name")]: "SetStatus"
              });
  } else {
    return sendEvent(state, {
                TAG: 2,
                _0: "LSP (TCP)",
                [Symbol.for("name")]: "SetStatus"
              });
  }
}

function updateIM(state, $$event) {
  return sendEvent(state, {
              TAG: 4,
              _0: $$event,
              [Symbol.for("name")]: "InputMethod"
            });
}

function updatePromptIM(state, content) {
  return sendEvent(state, {
              TAG: 3,
              _0: content,
              [Symbol.for("name")]: "PromptIMUpdate"
            });
}

function prompt(state, header, prompt$1, callbackOnPromptSuccess) {
  State__Type$AgdaModeVscode.Context.setPrompt(true);
  ViewController$AgdaModeVscode.focus(state.view);
  var request = {
    _0: header,
    _1: prompt$1,
    [Symbol.for("name")]: "Prompt"
  };
  var callback = function (response) {
    if (response) {
      return $$Promise.map(Curry._1(callbackOnPromptSuccess, response._0), (function (param) {
                    State__Type$AgdaModeVscode.Context.setPrompt(false);
                    Editor$AgdaModeVscode.focus(state.document);
                    return State__Type$AgdaModeVscode.ViewCache.clearPrompt(state.viewCache);
                  }));
    } else {
      State__Type$AgdaModeVscode.Context.setPrompt(false);
      Editor$AgdaModeVscode.focus(state.document);
      State__Type$AgdaModeVscode.ViewCache.clearPrompt(state.viewCache);
      State__Type$AgdaModeVscode.ViewCache.restore(state.viewCache, state.view);
      return $$Promise.resolved(undefined);
    }
  };
  State__Type$AgdaModeVscode.ViewCache.cacheRequest(state.viewCache, request, callback);
  return ViewController$AgdaModeVscode.sendRequest(state.view, request, callback);
}

function interruptPrompt(state) {
  return $$Promise.tap(sendEvent(state, /* PromptInterrupt */0), (function (param) {
                State__Type$AgdaModeVscode.Context.setPrompt(false);
                Editor$AgdaModeVscode.focus(state.document);
                State__Type$AgdaModeVscode.ViewCache.clearPrompt(state.viewCache);
                return State__Type$AgdaModeVscode.ViewCache.restore(state.viewCache, state.view);
              }));
}

var Module = {
  restore: restore,
  display: display,
  displayInAppendMode: displayInAppendMode,
  displayOutOfGoalError: displayOutOfGoalError,
  displayConnectionError: displayConnectionError,
  displayConnectionStatus: displayConnectionStatus,
  updateIM: updateIM,
  updatePromptIM: updatePromptIM,
  prompt: prompt,
  interruptPrompt: interruptPrompt
};

exports.Module = Module;
exports.restore = restore;
exports.display = display;
exports.displayInAppendMode = displayInAppendMode;
exports.displayOutOfGoalError = displayOutOfGoalError;
exports.displayConnectionError = displayConnectionError;
exports.displayConnectionStatus = displayConnectionStatus;
exports.updateIM = updateIM;
exports.updatePromptIM = updatePromptIM;
exports.prompt = prompt;
exports.interruptPrompt = interruptPrompt;
/* Promise Not a pure module */
