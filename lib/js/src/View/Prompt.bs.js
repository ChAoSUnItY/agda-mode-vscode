// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Webapi__Dom__Element = require("bs-webapi/lib/js/src/Webapi/Dom/Webapi__Dom__Element.bs.js");

function Prompt(Props) {
  var inputMethodActivated = Props.inputMethodActivated;
  var prompt = Props.prompt;
  var onSubmit = Props.onSubmit;
  var onChange = Props.onChange;
  if (prompt === undefined) {
    return React.createElement(React.Fragment, undefined);
  }
  var body = prompt[0];
  var placeholder = Belt_Option.getWithDefault(prompt[1], "");
  var value = Belt_Option.getWithDefault(prompt[2], "");
  var match = React.useState(function () {
        
      });
  var setSelectionInterval = match[1];
  var selectionInterval = match[0];
  var onKeyUp = function ($$event) {
    var match = $$event.key;
    var arrowKey;
    switch (match) {
      case "ArrowDown" :
          arrowKey = /* BrowseDown */1;
          break;
      case "ArrowLeft" :
          arrowKey = /* BrowseLeft */2;
          break;
      case "ArrowRight" :
          arrowKey = /* BrowseRight */3;
          break;
      case "ArrowUp" :
          arrowKey = /* BrowseUp */0;
          break;
      case "Escape" :
          arrowKey = /* Escape */4;
          break;
      default:
        arrowKey = undefined;
    }
    return Belt_Option.forEach(arrowKey, (function (action) {
                  if (inputMethodActivated) {
                    Curry._1(onChange, action);
                    $$event.preventDefault();
                    return ;
                  } else if (action === /* Escape */4) {
                    Curry._1(onSubmit, undefined);
                    $$event.preventDefault();
                    return ;
                  } else {
                    return ;
                  }
                }));
  };
  var onMouseUp = function ($$event) {
    if (!inputMethodActivated) {
      return ;
    }
    $$event.persist();
    var selectionInterval_0 = $$event.target.selectionStart;
    var selectionInterval_1 = $$event.target.selectionEnd;
    var selectionInterval = [
      selectionInterval_0,
      selectionInterval_1
    ];
    Curry._1(setSelectionInterval, (function (param) {
            return selectionInterval;
          }));
    return Curry._1(onChange, {
                TAG: 0,
                _0: selectionInterval,
                [Symbol.for("name")]: "Select"
              });
  };
  var onChange$1 = function ($$event) {
    var value = $$event.target.value;
    $$event.persist();
    Curry._1(setSelectionInterval, (function (param) {
            return [
                    $$event.target.selectionStart,
                    $$event.target.selectionEnd
                  ];
          }));
    return Curry._1(onChange, {
                TAG: 1,
                _0: value,
                [Symbol.for("name")]: "Change"
              });
  };
  var onSubmit$1 = function (_event) {
    return Curry._1(onSubmit, value);
  };
  return React.createElement("div", {
              className: "agda-mode-prompt"
            }, React.createElement("form", {
                  onSubmit: onSubmit$1
                }, body !== undefined ? React.createElement("p", undefined, body) : React.createElement(React.Fragment, undefined), React.createElement("input", {
                      ref: (function (ref) {
                          Belt_Option.forEach((ref == null) ? undefined : Caml_option.some(ref), (function (input) {
                                  return Belt_Option.forEach(selectionInterval, (function (param) {
                                                var setSelectionRange = ((elem, start, end_) => elem.setSelectionRange(start, end_));
                                                setSelectionRange(input, param[0], param[1]);
                                                
                                              }));
                                }));
                          setTimeout((function (param) {
                                  Belt_Option.forEach(Belt_Option.flatMap((ref == null) ? undefined : Caml_option.some(ref), Webapi__Dom__Element.asHtmlElement), (function (prim) {
                                          prim.focus();
                                          
                                        }));
                                  
                                }), 100);
                          
                        }),
                      placeholder: placeholder,
                      type: "text",
                      value: value,
                      onKeyUp: onKeyUp,
                      onChange: onChange$1,
                      onMouseUp: onMouseUp
                    })));
}

var make = Prompt;

exports.make = make;
/* react Not a pure module */
