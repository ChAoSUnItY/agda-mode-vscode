// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var State$AgdaModeVscode = require("./State.bs.js");
var Command$AgdaModeVscode = require("./Command.bs.js");
var Scheduler$AgdaModeVscode = require("./Task/Scheduler.bs.js");

function Impl(Editor) {
  var Scheduler = Scheduler$AgdaModeVscode.Impl(Editor);
  var State = State$AgdaModeVscode.Impl(Editor);
  var dict = { };
  var get = function (fileName) {
    return Js_dict.get(dict, fileName);
  };
  var getByEditor = function (editor) {
    return Belt_Option.flatMap(Curry._1(Editor.getFileName, editor), get);
  };
  var add = function (fileName, state) {
    var match = Js_dict.get(dict, fileName);
    if (match !== undefined) {
      return ;
    } else {
      dict[fileName] = state;
      return ;
    }
  };
  var rename = function (oldName, newName) {
    var delete_ = (function (dict, key) {delete dict[key]});
    return Belt_Option.forEach(Js_dict.get(dict, oldName), (function (state) {
                  console.log("[ states ][ rename ]", oldName, newName);
                  delete_(dict, oldName);
                  return add(newName, state);
                }));
  };
  var remove = function (fileName) {
    var delete_ = (function (dict, key) {delete dict[key]});
    return delete_(dict, fileName);
  };
  var destroy = function (fileName) {
    Belt_Option.forEach(Js_dict.get(dict, fileName), (function (param) {
            console.log("[ states ][ destroy ]");
            Curry._1(State.destroy, param[0]);
            Curry._1(Scheduler.destroy, param[1]);
            
          }));
    return remove(fileName);
  };
  var contains = function (fileName) {
    return Belt_Option.isSome(Js_dict.get(dict, fileName));
  };
  var destroyAll = function (param) {
    return Belt_Array.forEach(Js_dict.entries(dict), (function (param) {
                  var match = param[1];
                  Curry._1(State.destroy, match[0]);
                  Curry._1(Scheduler.destroy, match[1]);
                  
                }));
  };
  return {
          Scheduler: Scheduler,
          State: State,
          dict: dict,
          get: get,
          getByEditor: getByEditor,
          add: add,
          rename: rename,
          remove: remove,
          destroy: destroy,
          contains: contains,
          destroyAll: destroyAll
        };
}

var StateDict = {
  Impl: Impl
};

function Impl$1(Editor) {
  var Scheduler = Scheduler$AgdaModeVscode.Impl(Editor);
  var State = State$AgdaModeVscode.Impl(Editor);
  var dict = { };
  var get = function (fileName) {
    return Js_dict.get(dict, fileName);
  };
  var getByEditor = function (editor) {
    return Belt_Option.flatMap(Curry._1(Editor.getFileName, editor), get);
  };
  var add = function (fileName, state) {
    var match = Js_dict.get(dict, fileName);
    if (match !== undefined) {
      return ;
    } else {
      dict[fileName] = state;
      return ;
    }
  };
  var rename = function (oldName, newName) {
    var delete_ = (function (dict, key) {delete dict[key]});
    return Belt_Option.forEach(Js_dict.get(dict, oldName), (function (state) {
                  console.log("[ states ][ rename ]", oldName, newName);
                  delete_(dict, oldName);
                  return add(newName, state);
                }));
  };
  var remove = function (fileName) {
    var delete_ = (function (dict, key) {delete dict[key]});
    return delete_(dict, fileName);
  };
  var destroy = function (fileName) {
    Belt_Option.forEach(Js_dict.get(dict, fileName), (function (param) {
            console.log("[ states ][ destroy ]");
            Curry._1(State.destroy, param[0]);
            Curry._1(Scheduler.destroy, param[1]);
            
          }));
    return remove(fileName);
  };
  var contains = function (fileName) {
    return Belt_Option.isSome(Js_dict.get(dict, fileName));
  };
  var destroyAll = function (param) {
    return Belt_Array.forEach(Js_dict.entries(dict), (function (param) {
                  var match = param[1];
                  Curry._1(State.destroy, match[0]);
                  Curry._1(Scheduler.destroy, match[1]);
                  
                }));
  };
  var States = {
    Scheduler: Scheduler,
    State: State,
    dict: dict,
    get: get,
    getByEditor: getByEditor,
    add: add,
    rename: rename,
    remove: remove,
    destroy: destroy,
    contains: contains,
    destroyAll: destroyAll
  };
  var State$1 = State$AgdaModeVscode.Impl(Editor);
  var TaskRunner = Scheduler$AgdaModeVscode.Impl(Editor);
  var addToSubscriptions = function (f, context) {
    context.subscriptions.push(f);
    
  };
  var activate = function (context) {
    console.log("[ states ] activate");
    Curry._2(Editor.addToSubscriptions, Curry._1(Editor.onDidCloseEditor, destroy), context);
    Curry._2(Editor.addToSubscriptions, Curry._1(Editor.onDidChangeFileName, (function (oldName, newName) {
                return Belt_Option.forEach(oldName, (function (oldName) {
                              return Belt_Option.forEach(newName, (function (newName) {
                                            if (contains(oldName)) {
                                              if (Curry._1(Editor.isAgda, newName)) {
                                                return rename(oldName, newName);
                                              } else {
                                                return destroy(oldName);
                                              }
                                            }
                                            
                                          }));
                            }));
              })), context);
    Curry._2(Editor.addToSubscriptions, Curry._1(Editor.onDidChangeActivation, (function (prev, next) {
                Belt_Option.forEach(Belt_Option.flatMap(prev, get), (function (param) {
                        return Curry._1(State$1.hide, param[0]);
                      }));
                return Belt_Option.forEach(Belt_Option.flatMap(next, get), (function (param) {
                              return Curry._1(State$1.show, param[0]);
                            }));
              })), context);
    return Belt_Array.forEach(Command$AgdaModeVscode.names, (function (param) {
                  var name = param[1];
                  var command = param[0];
                  return Curry._2(Editor.addToSubscriptions, Curry._2(Editor.registerCommand, name, (function (editor) {
                                    console.log("[ command ] " + name);
                                    if (typeof command === "number" && command === 0) {
                                      Belt_Option.forEach(Curry._1(Editor.getFileName, editor), (function (fileName) {
                                              var _state = get(fileName);
                                              if (_state !== undefined) {
                                                return ;
                                              }
                                              var state = Curry._2(State$1.make, context, editor);
                                              var taskRunner = Curry._1(TaskRunner.make, state);
                                              Curry._2(Editor.addToSubscriptions, Curry._2(Editor.View.on, state.view, (function ($$event) {
                                                          Curry._2(TaskRunner.dispatchCommand, taskRunner, /* ViewEvent */Caml_chrome_debugger.variant("ViewEvent", 3, [$$event]));
                                                          
                                                        })), context);
                                              $$Promise.get(Curry._1(State$1.onceDestroyed, state), (function (param) {
                                                      return destroy(fileName);
                                                    }));
                                              return add(fileName, /* tuple */[
                                                          state,
                                                          taskRunner
                                                        ]);
                                            }));
                                    }
                                    return Belt_Option.forEach(getByEditor(editor), (function (param) {
                                                  var runner = param[1];
                                                  if (typeof command === "number" && command === 8) {
                                                    Curry._2(TaskRunner.interrupt, runner, /* Escape */8);
                                                    return ;
                                                  } else {
                                                    Curry._2(TaskRunner.dispatchCommand, runner, command);
                                                    return ;
                                                  }
                                                }));
                                  })), context);
                }));
  };
  var deactivate = function (param) {
    return destroyAll(undefined);
  };
  return {
          States: States,
          State: State$1,
          TaskRunner: TaskRunner,
          addToSubscriptions: addToSubscriptions,
          activate: activate,
          deactivate: deactivate
        };
}

exports.StateDict = StateDict;
exports.Impl = Impl$1;
/* Promise Not a pure module */
