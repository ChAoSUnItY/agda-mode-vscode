// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Mocha$BsMocha = require("bs-mocha/lib/js/src/Mocha.bs.js");
var Assert$BsMocha = require("bs-mocha/lib/js/src/Assert.bs.js");
var RichText$AgdaModeVscode = require("../../../src/View/Component/RichText.bs.js");
var Emacs__Parser2$AgdaModeVscode = require("../../../src/View/Panel/Emacs/Emacs__Parser2.bs.js");

Mocha$BsMocha.describe("when running Emacs__Parser2.parseGoalType")(undefined, undefined, undefined, (function (param) {
        Mocha$BsMocha.it("should should parse goal only")(undefined, undefined, undefined, (function (param) {
                var actual = Emacs__Parser2$AgdaModeVscode.parseGoalType("Goal: ℕ\n————————————————————————————————————————————————————————————");
                var expected = [{
                    TAG: 0,
                    _0: "Goal",
                    _1: "special",
                    _2: RichText$AgdaModeVscode.string("ℕ"),
                    _3: undefined,
                    _4: undefined,
                    [Symbol.for("name")]: "Labeled"
                  }];
                Assert$BsMocha.deep_equal(undefined, actual, expected);
              }));
        Mocha$BsMocha.it("should should parse goal + have")(undefined, undefined, undefined, (function (param) {
                var actual = Emacs__Parser2$AgdaModeVscode.parseGoalType("Goal: ℕ\nHave: ℕ\n————————————————————————————————————————————————————————————");
                var expected = [
                  {
                    TAG: 0,
                    _0: "Goal",
                    _1: "special",
                    _2: RichText$AgdaModeVscode.string("ℕ"),
                    _3: undefined,
                    _4: undefined,
                    [Symbol.for("name")]: "Labeled"
                  },
                  {
                    TAG: 0,
                    _0: "Have",
                    _1: "special",
                    _2: RichText$AgdaModeVscode.string("ℕ"),
                    _3: undefined,
                    _4: undefined,
                    [Symbol.for("name")]: "Labeled"
                  }
                ];
                Assert$BsMocha.deep_equal(undefined, actual, expected);
              }));
        Mocha$BsMocha.it("should should parse goal + have + context")(undefined, undefined, undefined, (function (param) {
                var actual = Emacs__Parser2$AgdaModeVscode.parseGoalType("Goal: ℕ\nHave: ℕ\n————————————————————————————————————————————————————————————\ny : ℕ\nx : ℕ");
                var expected = [
                  {
                    TAG: 0,
                    _0: "Goal",
                    _1: "special",
                    _2: RichText$AgdaModeVscode.string("ℕ"),
                    _3: undefined,
                    _4: undefined,
                    [Symbol.for("name")]: "Labeled"
                  },
                  {
                    TAG: 0,
                    _0: "Have",
                    _1: "special",
                    _2: RichText$AgdaModeVscode.string("ℕ"),
                    _3: undefined,
                    _4: undefined,
                    [Symbol.for("name")]: "Labeled"
                  },
                  {
                    TAG: 1,
                    _0: RichText$AgdaModeVscode.concatMany([
                          RichText$AgdaModeVscode.string("y"),
                          RichText$AgdaModeVscode.string(" : "),
                          RichText$AgdaModeVscode.string("ℕ")
                        ]),
                    _1: undefined,
                    _2: undefined,
                    [Symbol.for("name")]: "Unlabeled"
                  },
                  {
                    TAG: 1,
                    _0: RichText$AgdaModeVscode.concatMany([
                          RichText$AgdaModeVscode.string("x"),
                          RichText$AgdaModeVscode.string(" : "),
                          RichText$AgdaModeVscode.string("ℕ")
                        ]),
                    _1: undefined,
                    _2: undefined,
                    [Symbol.for("name")]: "Unlabeled"
                  }
                ];
                Assert$BsMocha.deep_equal(undefined, actual, expected);
              }));
      }));

Mocha$BsMocha.describe_only("when running Emacs__Parser2.parseAllGoalsWarnings")(undefined, undefined, undefined, (function (param) {
        Mocha$BsMocha.it("should should parse goal only")(undefined, undefined, undefined, (function (param) {
                var actual = Emacs__Parser2$AgdaModeVscode.parseAllGoalsWarnings("*All Goals*", "\n?0 : ℕ\n?1 : ℕ\n");
                var expected = [
                  {
                    TAG: 1,
                    _0: RichText$AgdaModeVscode.concatMany([
                          RichText$AgdaModeVscode.hole(0),
                          RichText$AgdaModeVscode.string(" : "),
                          RichText$AgdaModeVscode.string("ℕ")
                        ]),
                    _1: undefined,
                    _2: undefined,
                    [Symbol.for("name")]: "Unlabeled"
                  },
                  {
                    TAG: 1,
                    _0: RichText$AgdaModeVscode.concatMany([
                          RichText$AgdaModeVscode.hole(1),
                          RichText$AgdaModeVscode.string(" : "),
                          RichText$AgdaModeVscode.string("ℕ")
                        ]),
                    _1: undefined,
                    _2: undefined,
                    [Symbol.for("name")]: "Unlabeled"
                  }
                ];
                Assert$BsMocha.deep_equal(undefined, actual, expected);
              }));
      }));

var Assert;

exports.Assert = Assert;
/*  Not a pure module */
