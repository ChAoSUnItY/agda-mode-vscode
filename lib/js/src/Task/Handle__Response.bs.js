// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Task$AgdaModeVscode = require("./Task.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function Impl(Editor) {
  var Task = Task$AgdaModeVscode.Impl(Editor);
  var handle = function (payload) {
    if (typeof payload === "number") {
      return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                Curry._2(Task.displaySuccess, "Compilation Done!", undefined),
                /* [] */0
              ]);
    }
    switch (payload.tag | 0) {
      case /* Constraints */0 :
          var payload$1 = payload[0];
          if (payload$1 !== undefined) {
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      Curry._2(Task.display, "Constraints", payload$1),
                      /* [] */0
                    ]);
          } else {
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      Curry._2(Task.display, "No Constraints", undefined),
                      /* [] */0
                    ]);
          }
      case /* AllGoalsWarnings */1 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.display, payload[0], payload[1]),
                    /* [] */0
                  ]);
      case /* Time */2 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.display, "Time", payload[0]),
                    /* [] */0
                  ]);
      case /* Error */3 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.displayError, "Error", payload[0]),
                    /* [] */0
                  ]);
      case /* Intro */4 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.display, "Intro", payload[0]),
                    /* [] */0
                  ]);
      case /* Auto */5 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.displaySuccess, "Auto", payload[0]),
                    /* [] */0
                  ]);
      case /* ModuleContents */6 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.display, "Module Contents", payload[0]),
                    /* [] */0
                  ]);
      case /* SearchAbout */7 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.display, "Searching about ...", payload[0]),
                    /* [] */0
                  ]);
      case /* WhyInScope */8 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.display, "Scope info", payload[0]),
                    /* [] */0
                  ]);
      case /* NormalForm */9 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.display, "Normal form", payload[0]),
                    /* [] */0
                  ]);
      case /* GoalType */10 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.display, "Goal Type", payload[0]),
                    /* [] */0
                  ]);
      case /* CurrentGoal */11 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.display, "Current goal", payload[0]),
                    /* [] */0
                  ]);
      case /* InferredType */12 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.display, "Inferred type", payload[0]),
                    /* [] */0
                  ]);
      case /* Context */13 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.display, "Context", payload[0]),
                    /* [] */0
                  ]);
      case /* HelperFunction */14 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.display, "Helper function", payload[0]),
                    /* [] */0
                  ]);
      case /* Version */15 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.display, "Version", payload[0]),
                    /* [] */0
                  ]);
      
    }
  };
  var DisplayInfo = {
    handle: handle
  };
  var handle$1 = function (info) {
    if (typeof info === "number") {
      return /* [] */0;
    }
    switch (info.tag | 0) {
      case /* InteractionPoints */3 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* Goal */Caml_chrome_debugger.variant("Goal", 4, [/* Instantiate */Caml_chrome_debugger.variant("Instantiate", 0, [info[0]])]),
                    /* [] */0
                  ]);
      case /* DisplayInfo */7 :
          return handle(info[0]);
      case /* RunningInfo */8 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.display, "Type-checking", info[1]),
                    /* [] */0
                  ]);
      default:
        return /* [] */0;
    }
  };
  return {
          Task: Task,
          DisplayInfo: DisplayInfo,
          handle: handle$1
        };
}

exports.Impl = Impl;
/* Task-AgdaModeVscode Not a pure module */
