// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';


function encode(x) {
  switch (x) {
    case /* Simplified */0 :
        return "Simplified";
    case /* Instantiated */1 :
        return "Instantiated";
    case /* Normalised */2 :
        return "Normalised";
    
  }
}

function toString(x) {
  switch (x) {
    case /* Simplified */0 :
        return "(simplified)";
    case /* Instantiated */1 :
        return "(instantiated)";
    case /* Normalised */2 :
        return "(normalised)";
    
  }
}

var Normalization = {
  encode: encode,
  toString: toString
};

function encode$1(x) {
  switch (x) {
    case /* DefaultCompute */0 :
        return "DefaultCompute";
    case /* IgnoreAbstract */1 :
        return "IgnoreAbstract";
    case /* UseShowInstance */2 :
        return "UseShowInstance";
    
  }
}

function ignoreAbstract(x) {
  return x !== 0;
}

var ComputeMode = {
  encode: encode$1,
  ignoreAbstract: ignoreAbstract
};

function toString$1(x) {
  if (typeof x === "number") {
    switch (x) {
      case /* Activate */0 :
          return "Activate";
      case /* Deactivate */1 :
          return "Deactivate";
      case /* MoveUp */2 :
          return "MoveUp";
      case /* MoveRight */3 :
          return "MoveRight";
      case /* MoveDown */4 :
          return "MoveDown";
      case /* MoveLeft */5 :
          return "MoveLeft";
      
    }
  } else {
    switch (x.TAG | 0) {
      case /* PromptChange */0 :
          return "PromptChange '" + (x._0 + "'");
      case /* Rewrite */1 :
          return "Rewrite";
      case /* UpdateView */2 :
          return "UpdateView";
      case /* InsertChar */3 :
          return "InsertChar '" + (x._0 + "'");
      case /* ChooseSymbol */4 :
          return "ChooseSymbol '" + (x._0 + "'");
      
    }
  }
}

var InputMethod = {
  toString: toString$1
};

var names = [
  [
    /* Load */0,
    "load"
  ],
  [
    /* Quit */1,
    "quit"
  ],
  [
    /* Restart */2,
    "restart"
  ],
  [
    /* Compile */4,
    "compile"
  ],
  [
    /* ToggleDisplayOfImplicitArguments */5,
    "toggle-display-of-implicit-arguments"
  ],
  [
    /* ShowConstraints */6,
    "show-constraints"
  ],
  [
    {
      TAG: 0,
      _0: /* Simplified */0,
      [Symbol.for("name")]: "SolveConstraints"
    },
    "solve-constraints[Simplified]"
  ],
  [
    {
      TAG: 0,
      _0: /* Instantiated */1,
      [Symbol.for("name")]: "SolveConstraints"
    },
    "solve-constraints[Instantiated]"
  ],
  [
    {
      TAG: 0,
      _0: /* Normalised */2,
      [Symbol.for("name")]: "SolveConstraints"
    },
    "solve-constraints[Normalised]"
  ],
  [
    /* ShowGoals */7,
    "show-goals"
  ],
  [
    /* NextGoal */8,
    "next-goal"
  ],
  [
    /* PreviousGoal */9,
    "previous-goal"
  ],
  [
    {
      TAG: 1,
      _0: /* Simplified */0,
      [Symbol.for("name")]: "SearchAbout"
    },
    "search-about[Simplified]"
  ],
  [
    {
      TAG: 1,
      _0: /* Instantiated */1,
      [Symbol.for("name")]: "SearchAbout"
    },
    "search-about[Instantiated]"
  ],
  [
    {
      TAG: 1,
      _0: /* Normalised */2,
      [Symbol.for("name")]: "SearchAbout"
    },
    "search-about[Normalised]"
  ],
  [
    /* Give */10,
    "give"
  ],
  [
    /* Refine */11,
    "refine"
  ],
  [
    {
      TAG: 2,
      _0: /* Simplified */0,
      [Symbol.for("name")]: "ElaborateAndGive"
    },
    "elaborate-and-give[Simplified]"
  ],
  [
    {
      TAG: 2,
      _0: /* Instantiated */1,
      [Symbol.for("name")]: "ElaborateAndGive"
    },
    "elaborate-and-give[Instantiated]"
  ],
  [
    {
      TAG: 2,
      _0: /* Normalised */2,
      [Symbol.for("name")]: "ElaborateAndGive"
    },
    "elaborate-and-give[Normalised]"
  ],
  [
    /* Auto */12,
    "auto"
  ],
  [
    /* Case */13,
    "case"
  ],
  [
    {
      TAG: 3,
      _0: /* Simplified */0,
      [Symbol.for("name")]: "HelperFunctionType"
    },
    "helper-function-type[Simplified]"
  ],
  [
    {
      TAG: 3,
      _0: /* Instantiated */1,
      [Symbol.for("name")]: "HelperFunctionType"
    },
    "helper-function-type[Instantiated]"
  ],
  [
    {
      TAG: 3,
      _0: /* Normalised */2,
      [Symbol.for("name")]: "HelperFunctionType"
    },
    "helper-function-type[Normalised]"
  ],
  [
    {
      TAG: 4,
      _0: /* Simplified */0,
      [Symbol.for("name")]: "InferType"
    },
    "infer-type[Simplified]"
  ],
  [
    {
      TAG: 4,
      _0: /* Instantiated */1,
      [Symbol.for("name")]: "InferType"
    },
    "infer-type[Instantiated]"
  ],
  [
    {
      TAG: 4,
      _0: /* Normalised */2,
      [Symbol.for("name")]: "InferType"
    },
    "infer-type[Normalised]"
  ],
  [
    {
      TAG: 5,
      _0: /* Simplified */0,
      [Symbol.for("name")]: "Context"
    },
    "context[Simplified]"
  ],
  [
    {
      TAG: 5,
      _0: /* Instantiated */1,
      [Symbol.for("name")]: "Context"
    },
    "context[Instantiated]"
  ],
  [
    {
      TAG: 5,
      _0: /* Normalised */2,
      [Symbol.for("name")]: "Context"
    },
    "context[Normalised]"
  ],
  [
    {
      TAG: 6,
      _0: /* Simplified */0,
      [Symbol.for("name")]: "GoalType"
    },
    "goal-type[Simplified]"
  ],
  [
    {
      TAG: 6,
      _0: /* Instantiated */1,
      [Symbol.for("name")]: "GoalType"
    },
    "goal-type[Instantiated]"
  ],
  [
    {
      TAG: 6,
      _0: /* Normalised */2,
      [Symbol.for("name")]: "GoalType"
    },
    "goal-type[Normalised]"
  ],
  [
    {
      TAG: 7,
      _0: /* Simplified */0,
      [Symbol.for("name")]: "GoalTypeAndContext"
    },
    "goal-type-and-context[Simplified]"
  ],
  [
    {
      TAG: 7,
      _0: /* Instantiated */1,
      [Symbol.for("name")]: "GoalTypeAndContext"
    },
    "goal-type-and-context[Instantiated]"
  ],
  [
    {
      TAG: 7,
      _0: /* Normalised */2,
      [Symbol.for("name")]: "GoalTypeAndContext"
    },
    "goal-type-and-context[Normalised]"
  ],
  [
    {
      TAG: 9,
      _0: /* Simplified */0,
      [Symbol.for("name")]: "GoalTypeContextAndInferredType"
    },
    "goal-type-context-and-inferred-type[Simplified]"
  ],
  [
    {
      TAG: 9,
      _0: /* Instantiated */1,
      [Symbol.for("name")]: "GoalTypeContextAndInferredType"
    },
    "goal-type-context-and-inferred-type[Instantiated]"
  ],
  [
    {
      TAG: 9,
      _0: /* Normalised */2,
      [Symbol.for("name")]: "GoalTypeContextAndInferredType"
    },
    "goal-type-context-and-inferred-type[Normalised]"
  ],
  [
    {
      TAG: 10,
      _0: /* Simplified */0,
      [Symbol.for("name")]: "GoalTypeContextAndCheckedType"
    },
    "goal-type-context-and-checked-type[Simplified]"
  ],
  [
    {
      TAG: 10,
      _0: /* Instantiated */1,
      [Symbol.for("name")]: "GoalTypeContextAndCheckedType"
    },
    "goal-type-context-and-checked-type[Instantiated]"
  ],
  [
    {
      TAG: 10,
      _0: /* Normalised */2,
      [Symbol.for("name")]: "GoalTypeContextAndCheckedType"
    },
    "goal-type-context-and-checked-type[Normalised]"
  ],
  [
    {
      TAG: 11,
      _0: /* Simplified */0,
      [Symbol.for("name")]: "ModuleContents"
    },
    "module-contents[Simplified]"
  ],
  [
    {
      TAG: 11,
      _0: /* Instantiated */1,
      [Symbol.for("name")]: "ModuleContents"
    },
    "module-contents[Instantiated]"
  ],
  [
    {
      TAG: 11,
      _0: /* Normalised */2,
      [Symbol.for("name")]: "ModuleContents"
    },
    "module-contents[Normalised]"
  ],
  [
    {
      TAG: 12,
      _0: /* DefaultCompute */0,
      [Symbol.for("name")]: "ComputeNormalForm"
    },
    "compute-normal-form[DefaultCompute]"
  ],
  [
    {
      TAG: 12,
      _0: /* IgnoreAbstract */1,
      [Symbol.for("name")]: "ComputeNormalForm"
    },
    "compute-normal-form[IgnoreAbstract]"
  ],
  [
    {
      TAG: 12,
      _0: /* UseShowInstance */2,
      [Symbol.for("name")]: "ComputeNormalForm"
    },
    "compute-normal-form[UseShowInstance]"
  ],
  [
    /* WhyInScope */14,
    "why-in-scope"
  ],
  [
    /* Escape */15,
    "escape"
  ],
  [
    {
      TAG: 13,
      _0: /* Activate */0,
      [Symbol.for("name")]: "InputMethod"
    },
    "input-symbol[Activate]"
  ],
  [
    {
      TAG: 13,
      _0: /* MoveUp */2,
      [Symbol.for("name")]: "InputMethod"
    },
    "input-symbol[MoveUp]"
  ],
  [
    {
      TAG: 13,
      _0: /* MoveRight */3,
      [Symbol.for("name")]: "InputMethod"
    },
    "input-symbol[MoveRight]"
  ],
  [
    {
      TAG: 13,
      _0: /* MoveDown */4,
      [Symbol.for("name")]: "InputMethod"
    },
    "input-symbol[MoveDown]"
  ],
  [
    {
      TAG: 13,
      _0: /* MoveLeft */5,
      [Symbol.for("name")]: "InputMethod"
    },
    "input-symbol[MoveLeft]"
  ],
  [
    {
      TAG: 13,
      _0: {
        TAG: 3,
        _0: "{",
        [Symbol.for("name")]: "InsertChar"
      },
      [Symbol.for("name")]: "InputMethod"
    },
    "input-symbol[InsertOpenCurlyBraces]"
  ],
  [
    {
      TAG: 13,
      _0: {
        TAG: 3,
        _0: "(",
        [Symbol.for("name")]: "InsertChar"
      },
      [Symbol.for("name")]: "InputMethod"
    },
    "input-symbol[InsertOpenParenthesis]"
  ]
];

function toString$2(x) {
  if (typeof x === "number") {
    switch (x) {
      case /* Load */0 :
          return "Load";
      case /* Quit */1 :
          return "Quit";
      case /* Restart */2 :
          return "Restart";
      case /* Refresh */3 :
          return "Refresh ";
      case /* Compile */4 :
          return "Compile";
      case /* ToggleDisplayOfImplicitArguments */5 :
          return "Toggle display of hidden arguments";
      case /* ShowConstraints */6 :
          return "Show constraints";
      case /* ShowGoals */7 :
          return "Show goals";
      case /* NextGoal */8 :
          return "Next goal";
      case /* PreviousGoal */9 :
          return "Previous goal";
      case /* Give */10 :
          return "Give";
      case /* Refine */11 :
          return "Refine";
      case /* Auto */12 :
          return "Auto";
      case /* Case */13 :
          return "Case";
      case /* WhyInScope */14 :
          return "Why in scope";
      case /* Escape */15 :
          return "Escape";
      
    }
  } else {
    switch (x.TAG | 0) {
      case /* SolveConstraints */0 :
          return "Solve constraints " + toString(x._0);
      case /* SearchAbout */1 :
          return "Search about " + toString(x._0);
      case /* ElaborateAndGive */2 :
          return "Elaborate and give " + toString(x._0);
      case /* HelperFunctionType */3 :
          return "Helper function type " + toString(x._0);
      case /* InferType */4 :
          return "Infer type " + toString(x._0);
      case /* Context */5 :
          return "Context " + toString(x._0);
      case /* GoalType */6 :
          return "Goal type " + toString(x._0);
      case /* GoalTypeAndContext */7 :
          return "Goal type and context " + toString(x._0);
      case /* EventFromView */8 :
          return "Event from the view";
      case /* GoalTypeContextAndInferredType */9 :
          return "Goal type, context and inferred type " + toString(x._0);
      case /* GoalTypeContextAndCheckedType */10 :
          return "Goal type, context and checked type " + toString(x._0);
      case /* ModuleContents */11 :
          return "Module contents " + toString(x._0);
      case /* ComputeNormalForm */12 :
          switch (x._0) {
            case /* DefaultCompute */0 :
                return "Compute normal form (DefaultCompute)";
            case /* IgnoreAbstract */1 :
                return "Compute normal form (IgnoreAbstract)";
            case /* UseShowInstance */2 :
                return "Compute normal form (UseShowInstance)";
            
          }
      case /* InputMethod */13 :
          return "Input symbol " + toString$1(x._0);
      
    }
  }
}

exports.Normalization = Normalization;
exports.ComputeMode = ComputeMode;
exports.InputMethod = InputMethod;
exports.names = names;
exports.toString = toString$2;
/* No side effect */
