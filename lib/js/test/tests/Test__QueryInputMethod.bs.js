// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Mocha$BsMocha = require("bs-mocha/lib/js/src/Mocha.bs.js");
var Assert$BsMocha = require("bs-mocha/lib/js/src/Assert.bs.js");
var PromptIM$AgdaModeVscode = require("../../src/InputMethod/PromptIM.bs.js");

function testPromptIMUpdate(self, input, output, command, param) {
  var result = PromptIM$AgdaModeVscode.update(self, input);
  if (result !== undefined) {
    Assert$BsMocha.equal(undefined, result[0], output);
    if (command !== undefined) {
      return Assert$BsMocha.equal(undefined, result[1], command);
    } else {
      return ;
    }
  } else {
    return Assert$BsMocha.fail("shouldn't be deactivated after \"" + (input + "\""));
  }
}

Mocha$BsMocha.describe("Input Method (Prompt)")(undefined, undefined, undefined, (function (param) {
        Mocha$BsMocha.describe("Insertion")(undefined, undefined, undefined, (function (param) {
                Mocha$BsMocha.it("should translate \"\bn\" to \"ùïü\"")(undefined, undefined, undefined, (function (param) {
                        var promptIM = PromptIM$AgdaModeVscode.make(undefined);
                        PromptIM$AgdaModeVscode.activate(promptIM, "");
                        testPromptIMUpdate(promptIM, "b", "‚ô≠", undefined, undefined);
                        return testPromptIMUpdate(promptIM, "‚ô≠n", "ùïü", /* Deactivate */1, undefined);
                      }));
                return Mocha$BsMocha.it("should translate \"garbage \\bn\" to \"garbage ùïü\"")(undefined, undefined, undefined, (function (param) {
                              var promptIM = PromptIM$AgdaModeVscode.make(undefined);
                              PromptIM$AgdaModeVscode.activate(promptIM, "garbage ");
                              testPromptIMUpdate(promptIM, "garbage b", "garbage ‚ô≠", undefined, undefined);
                              return testPromptIMUpdate(promptIM, "garbage ‚ô≠n", "garbage ùïü", /* Deactivate */1, undefined);
                            }));
              }));
        return Mocha$BsMocha.describe("Backspacing")(undefined, undefined, undefined, (function (param) {
                      return Mocha$BsMocha.it("should work just fine")(undefined, undefined, undefined, (function (param) {
                                    var promptIM = PromptIM$AgdaModeVscode.make(undefined);
                                    PromptIM$AgdaModeVscode.activate(promptIM, "");
                                    testPromptIMUpdate(promptIM, "l", "‚Üê", undefined, undefined);
                                    testPromptIMUpdate(promptIM, "‚Üêa", "‚Üêa", undefined, undefined);
                                    testPromptIMUpdate(promptIM, "‚Üêam", "‚Üêam", undefined, undefined);
                                    testPromptIMUpdate(promptIM, "‚Üêamb", "‚Üêamb", undefined, undefined);
                                    testPromptIMUpdate(promptIM, "‚Üêambd", "‚Üêambd", undefined, undefined);
                                    testPromptIMUpdate(promptIM, "‚Üêambda", "Œª", undefined, undefined);
                                    testPromptIMUpdate(promptIM, "", "lambd", undefined, undefined);
                                    testPromptIMUpdate(promptIM, "lamb", "lamb", undefined, undefined);
                                    testPromptIMUpdate(promptIM, "lambd", "lambd", undefined, undefined);
                                    testPromptIMUpdate(promptIM, "lambda", "Œª", undefined, undefined);
                                    testPromptIMUpdate(promptIM, "Œªb", "Œªb", undefined, undefined);
                                    testPromptIMUpdate(promptIM, "Œªba", "Œªba", undefined, undefined);
                                    return testPromptIMUpdate(promptIM, "Œªbar", "∆õ", /* Deactivate */1, undefined);
                                  }));
                    }));
      }));

var Assert;

exports.Assert = Assert;
exports.testPromptIMUpdate = testPromptIMUpdate;
/*  Not a pure module */
