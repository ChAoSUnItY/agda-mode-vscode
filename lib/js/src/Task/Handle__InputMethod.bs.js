// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Task$AgdaModeVscode = require("./Task.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var QueryIM$AgdaModeVscode = require("../InputMethod/QueryIM.bs.js");
var EditorIM$AgdaModeVscode = require("../InputMethod/EditorIM.bs.js");

function Impl(Editor) {
  var Task = Task$AgdaModeVscode.Impl(Editor);
  var EditorIM = EditorIM$AgdaModeVscode.Impl(Editor);
  var handle = function (input) {
    if (typeof input === "number") {
      switch (input) {
        case /* Activate */0 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* WithStateP */Caml_chrome_debugger.variant("WithStateP", 8, [(function (state) {
                              if (state.editorIM.activated) {
                                Curry._1(EditorIM.insertBackslash, state.editor);
                                Curry._1(EditorIM.deactivate, state.editorIM);
                                return $$Promise.resolved(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                              /* ViewEvent */Caml_chrome_debugger.variant("ViewEvent", 2, [/* InputMethod */Caml_chrome_debugger.variant("InputMethod", 2, [/* Deactivate */1])]),
                                              /* [] */0
                                            ]));
                              }
                              var startingRanges = Belt_Array.map(Curry._1(Editor.getSelections, state.editor), (function (range) {
                                      return /* tuple */[
                                              Curry._2(Editor.offsetAtPoint, state.editor, Curry._1(Editor.$$Range.start, range)),
                                              Curry._2(Editor.offsetAtPoint, state.editor, Curry._1(Editor.$$Range.end_, range))
                                            ];
                                    }));
                              Curry._3(EditorIM.activate, state.editorIM, state.editor, startingRanges);
                              return $$Promise.resolved(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                            /* ViewEvent */Caml_chrome_debugger.variant("ViewEvent", 2, [/* InputMethod */Caml_chrome_debugger.variant("InputMethod", 2, [/* Activate */0])]),
                                            /* [] */0
                                          ]));
                            })]),
                      /* [] */0
                    ]);
        case /* Deactivate */1 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* WithState */Caml_chrome_debugger.variant("WithState", 7, [(function (state) {
                              return Curry._1(EditorIM.deactivate, state.editorIM);
                            })]),
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* ViewEvent */Caml_chrome_debugger.variant("ViewEvent", 2, [/* InputMethod */Caml_chrome_debugger.variant("InputMethod", 2, [/* Deactivate */1])]),
                          /* [] */0
                        ])
                    ]);
        case /* MoveUp */2 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* WithState */Caml_chrome_debugger.variant("WithState", 7, [(function (state) {
                              return Curry._2(EditorIM.moveUp, state.editorIM, state.editor);
                            })]),
                      /* [] */0
                    ]);
        case /* MoveRight */3 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* WithState */Caml_chrome_debugger.variant("WithState", 7, [(function (state) {
                              return Curry._2(EditorIM.moveRight, state.editorIM, state.editor);
                            })]),
                      /* [] */0
                    ]);
        case /* MoveDown */4 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* WithState */Caml_chrome_debugger.variant("WithState", 7, [(function (state) {
                              return Curry._2(EditorIM.moveDown, state.editorIM, state.editor);
                            })]),
                      /* [] */0
                    ]);
        case /* MoveLeft */5 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* WithState */Caml_chrome_debugger.variant("WithState", 7, [(function (state) {
                              return Curry._2(EditorIM.moveLeft, state.editorIM, state.editor);
                            })]),
                      /* [] */0
                    ]);
        
      }
    } else {
      switch (input.tag | 0) {
        case /* QueryChange */0 :
            var input$1 = input[0];
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* WithStateP */Caml_chrome_debugger.variant("WithStateP", 8, [(function (state) {
                              var shouldActivate = input$1.endsWith("\\");
                              var deactivateEditorIM = function (param) {
                                Curry._1(EditorIM.deactivate, state.editorIM);
                                return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                          /* ViewEvent */Caml_chrome_debugger.variant("ViewEvent", 2, [/* InputMethod */Caml_chrome_debugger.variant("InputMethod", 2, [/* Deactivate */1])]),
                                          /* [] */0
                                        ]);
                              };
                              var activateQueryIM = function (param) {
                                var input$2 = input$1.substring(0, input$1.length - 1 | 0);
                                QueryIM$AgdaModeVscode.activate(state.queryIM, input$2);
                                return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                          /* ViewEvent */Caml_chrome_debugger.variant("ViewEvent", 2, [/* InputMethod */Caml_chrome_debugger.variant("InputMethod", 2, [/* Activate */0])]),
                                          /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                              /* ViewEvent */Caml_chrome_debugger.variant("ViewEvent", 2, [/* PromptUpdate */Caml_chrome_debugger.variant("PromptUpdate", 1, [input$2])]),
                                              /* [] */0
                                            ])
                                        ]);
                              };
                              if (state.editorIM.activated) {
                                if (shouldActivate) {
                                  return $$Promise.resolved(Belt_List.concatMany([
                                                  deactivateEditorIM(undefined),
                                                  activateQueryIM(undefined)
                                                ]));
                                } else {
                                  return $$Promise.resolved(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                /* ViewEvent */Caml_chrome_debugger.variant("ViewEvent", 2, [/* PromptUpdate */Caml_chrome_debugger.variant("PromptUpdate", 1, [input$1])]),
                                                /* [] */0
                                              ]));
                                }
                              }
                              if (!state.queryIM.activated) {
                                if (shouldActivate) {
                                  return $$Promise.resolved(activateQueryIM(undefined));
                                } else {
                                  return $$Promise.resolved(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                /* ViewEvent */Caml_chrome_debugger.variant("ViewEvent", 2, [/* PromptUpdate */Caml_chrome_debugger.variant("PromptUpdate", 1, [input$1])]),
                                                /* [] */0
                                              ]));
                                }
                              }
                              var result = QueryIM$AgdaModeVscode.update(state.queryIM, input$1);
                              if (result !== undefined) {
                                return $$Promise.resolved(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                              /* ViewEvent */Caml_chrome_debugger.variant("ViewEvent", 2, [/* PromptUpdate */Caml_chrome_debugger.variant("PromptUpdate", 1, [result[0]])]),
                                              /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                  /* DispatchCommand */Caml_chrome_debugger.variant("DispatchCommand", 0, [/* InputMethod */Caml_chrome_debugger.variant("InputMethod", 13, [result[1]])]),
                                                  /* [] */0
                                                ])
                                            ]));
                              } else {
                                return $$Promise.resolved(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                              /* DispatchCommand */Caml_chrome_debugger.variant("DispatchCommand", 0, [/* InputMethod */Caml_chrome_debugger.variant("InputMethod", 13, [/* Deactivate */1])]),
                                              /* [] */0
                                            ]));
                              }
                            })]),
                      /* [] */0
                    ]);
        case /* Update */1 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* ViewEvent */Caml_chrome_debugger.variant("ViewEvent", 2, [/* InputMethod */Caml_chrome_debugger.variant("InputMethod", 2, [/* Update */Caml_chrome_debugger.simpleVariant("Update", [
                                  input[0],
                                  input[1],
                                  input[2]
                                ])])]),
                      /* [] */0
                    ]);
        case /* InsertChar */2 :
            var $$char = input[0];
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* WithStateP */Caml_chrome_debugger.variant("WithStateP", 8, [(function (state) {
                              if (state.editorIM.activated) {
                                Curry._2(EditorIM.insertChar, state.editor, $$char);
                                return $$Promise.resolved(/* [] */0);
                              }
                              if (!state.queryIM.activated) {
                                return $$Promise.resolved(/* [] */0);
                              }
                              var result = QueryIM$AgdaModeVscode.insertChar(state.queryIM, $$char);
                              if (result !== undefined) {
                                return $$Promise.resolved(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                              /* ViewEvent */Caml_chrome_debugger.variant("ViewEvent", 2, [/* PromptUpdate */Caml_chrome_debugger.variant("PromptUpdate", 1, [result[0]])]),
                                              /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                  /* DispatchCommand */Caml_chrome_debugger.variant("DispatchCommand", 0, [/* InputMethod */Caml_chrome_debugger.variant("InputMethod", 13, [result[1]])]),
                                                  /* [] */0
                                                ])
                                            ]));
                              } else {
                                return $$Promise.resolved(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                              /* DispatchCommand */Caml_chrome_debugger.variant("DispatchCommand", 0, [/* InputMethod */Caml_chrome_debugger.variant("InputMethod", 13, [/* Deactivate */1])]),
                                              /* [] */0
                                            ]));
                              }
                            })]),
                      /* [] */0
                    ]);
        case /* ChooseSymbol */3 :
            var symbol = input[0];
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* WithStateP */Caml_chrome_debugger.variant("WithStateP", 8, [(function (state) {
                              if (state.editorIM.activated) {
                                Curry._3(EditorIM.chooseSymbol, state.editorIM, state.editor, symbol);
                                return $$Promise.resolved(/* [] */0);
                              }
                              if (!state.queryIM.activated) {
                                return $$Promise.resolved(/* [] */0);
                              }
                              var match = state.queryIM.buffer.symbol;
                              if (match === undefined) {
                                return $$Promise.resolved(/* [] */0);
                              }
                              var init = state.queryIM.buffer;
                              state.queryIM.buffer = {
                                symbol: /* tuple */[
                                  symbol,
                                  match[1]
                                ],
                                tail: init.tail,
                                translation: init.translation,
                                candidateIndex: init.candidateIndex
                              };
                              return $$Promise.resolved(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                            /* ViewEvent */Caml_chrome_debugger.variant("ViewEvent", 2, [/* PromptUpdate */Caml_chrome_debugger.variant("PromptUpdate", 1, [symbol])]),
                                            /* [] */0
                                          ]));
                            })]),
                      /* [] */0
                    ]);
        
      }
    }
  };
  return {
          Task: Task,
          EditorIM: EditorIM,
          handle: handle
        };
}

exports.Impl = Impl;
/* Promise Not a pure module */
