// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/lib/js/src/Json_encode.bs.js");
var Common$AgdaModeVscode = require("../Common.bs.js");
var Component__Link$AgdaModeVscode = require("./Component/Component__Link.bs.js");

var empty_classNames = [];

var empty = {
  link: undefined,
  classNames: empty_classNames,
  icon: undefined
};

function decode(json) {
  return {
          link: Json_decode.field("attrLink", (function (param) {
                  return Json_decode.optional(Common$AgdaModeVscode.Link.decode, param);
                }), json),
          classNames: Json_decode.field("attrClassNames", (function (param) {
                  return Json_decode.array(Json_decode.string, param);
                }), json),
          icon: Json_decode.field("attrIcon", (function (param) {
                  return Json_decode.optional(Json_decode.string, param);
                }), json)
        };
}

function encode(x) {
  return Json_encode.object_({
              hd: [
                "attrLink",
                Json_encode.nullable(Common$AgdaModeVscode.Link.encode, x.link)
              ],
              tl: {
                hd: [
                  "attrClassNames",
                  Json_encode.array((function (prim) {
                          return prim;
                        }), x.classNames)
                ],
                tl: {
                  hd: [
                    "attrIcon",
                    Json_encode.nullable((function (prim) {
                            return prim;
                          }), x.icon)
                  ],
                  tl: /* [] */0
                }
              }
            });
}

var Attributes = {
  empty: empty,
  decode: decode,
  encode: encode
};

function decode$1(param) {
  return Json_decode.map((function (param) {
                return {
                        _0: param[0],
                        _1: param[1],
                        [Symbol.for("name")]: "Elem"
                      };
              }), (function (param) {
                return Json_decode.pair(Json_decode.string, decode, param);
              }), param);
}

function encode$1(x) {
  return Json_encode.pair((function (prim) {
                return prim;
              }), encode, [
              x._0,
              x._1
            ]);
}

var $$Element = {
  decode: decode$1,
  encode: encode$1
};

var empty$1 = {
  _0: [],
  [Symbol.for("name")]: "RichText"
};

function string(s) {
  return {
          _0: [{
              _0: s,
              _1: empty,
              [Symbol.for("name")]: "Elem"
            }],
          [Symbol.for("name")]: "RichText"
        };
}

function hole(i) {
  return {
          _0: [{
              _0: "?" + String(i),
              _1: {
                link: {
                  TAG: 1,
                  _0: i,
                  [Symbol.for("name")]: "Hole"
                },
                classNames: [],
                icon: undefined
              },
              [Symbol.for("name")]: "Elem"
            }],
          [Symbol.for("name")]: "RichText"
        };
}

function srcLoc(range) {
  return {
          _0: [
            {
              _0: "",
              _1: {
                link: undefined,
                classNames: [],
                icon: "link"
              },
              [Symbol.for("name")]: "Elem"
            },
            {
              _0: Common$AgdaModeVscode.AgdaRange.toString(range),
              _1: {
                link: {
                  TAG: 0,
                  _0: range,
                  [Symbol.for("name")]: "SrcLoc"
                },
                classNames: [],
                icon: undefined
              },
              [Symbol.for("name")]: "Elem"
            }
          ],
          [Symbol.for("name")]: "RichText"
        };
}

function concatMany(xs) {
  return {
          _0: Belt_Array.concatMany(Belt_Array.map(xs, (function (x) {
                      return x._0;
                    }))),
          [Symbol.for("name")]: "RichText"
        };
}

function parse(raw) {
  return concatMany(Belt_Array.mapWithIndex(Belt_Array.keepMap(raw.split(/([^\(\)\s]+\:(?:\d+\,\d+\-\d+\,\d+|\d+\,\d+\-\d+))/), (function (x) {
                        return x;
                      })), (function (i, token) {
                    var match = i % 2;
                    if (match !== 1) {
                      return string(token);
                    } else {
                      return Belt_Option.mapWithDefault(Curry._1(Common$AgdaModeVscode.AgdaRange.parse, token), string(token), srcLoc);
                    }
                  })));
}

function make(value) {
  return React.createElement("span", undefined, Belt_Array.mapWithIndex(value._0, (function (i, x) {
                    var attributes = x._1;
                    var text = x._0;
                    var target = attributes.link;
                    if (target !== undefined) {
                      return React.createElement(Component__Link$AgdaModeVscode.make, {
                                  target: target,
                                  jump: true,
                                  hover: false,
                                  className: attributes.classNames,
                                  children: text,
                                  key: String(i)
                                });
                    }
                    var kind = attributes.icon;
                    if (kind !== undefined) {
                      return React.createElement("div", {
                                  key: String(i),
                                  className: "codicon codicon-" + kind
                                });
                    } else {
                      return React.createElement("span", {
                                  key: String(i)
                                }, text);
                    }
                  })));
}

function decode$2(param) {
  return Json_decode.map((function (elems) {
                return {
                        _0: elems,
                        [Symbol.for("name")]: "RichText"
                      };
              }), (function (param) {
                return Json_decode.array(decode$1, param);
              }), param);
}

function encode$2(x) {
  return Json_encode.array(encode$1, x._0);
}

var Module = {
  Attributes: Attributes,
  $$Element: $$Element,
  empty: empty$1,
  string: string,
  hole: hole,
  srcLoc: srcLoc,
  concatMany: concatMany,
  parse: parse,
  make: make,
  decode: decode$2,
  encode: encode$2
};

function RichText(Props) {
  return make(Props.value);
}

var make$1 = RichText;

exports.Module = Module;
exports.Attributes = Attributes;
exports.$$Element = $$Element;
exports.empty = empty$1;
exports.string = string;
exports.hole = hole;
exports.srcLoc = srcLoc;
exports.concatMany = concatMany;
exports.parse = parse;
exports.decode = decode$2;
exports.encode = encode$2;
exports.make = make$1;
/* react Not a pure module */
