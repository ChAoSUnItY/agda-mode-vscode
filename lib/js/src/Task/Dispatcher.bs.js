// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Task$AgdaModeVscode = require("./Task.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Runner2$AgdaModeVscode = require("./Runner2.bs.js");
var Handle__Error$AgdaModeVscode = require("./Handle__Error.bs.js");
var Handle__Command$AgdaModeVscode = require("./Handle__Command.bs.js");
var Handle__Response$AgdaModeVscode = require("./Handle__Response.bs.js");

function Impl(Editor) {
  var ErrorHandler = Handle__Error$AgdaModeVscode.Impl(Editor);
  var ResponseHandler = Handle__Response$AgdaModeVscode.Impl(Editor);
  var Task = Task$AgdaModeVscode.Impl(Editor);
  var dispatchCommand = function (self, command) {
    var CommandHandler = Handle__Command$AgdaModeVscode.Impl(Editor);
    var tasks = Curry._1(CommandHandler.handle, command);
    return Runner2$AgdaModeVscode.pushToBackAndRun(self.otherTaskRunner, tasks);
  };
  var sendAgdaRequest = function (runTasks, state, req) {
    var match = $$Promise.pending(undefined);
    var resolve = match[1];
    var promise = match[0];
    var handle = {
      contents: undefined
    };
    var handler = function (error) {
      if (error.tag) {
        var tasks = Curry._1(ErrorHandler.handle, /* Connection */Caml_chrome_debugger.variant("Connection", 0, [error[0]]));
        return $$Promise.get(Curry._1(runTasks, tasks), resolve);
      }
      var match = error[0];
      if (!match) {
        return Curry._1(resolve, undefined);
      }
      var error$1 = match[0];
      if (error$1.tag) {
        var tasks$1 = Curry._1(ErrorHandler.handle, /* Parser */Caml_chrome_debugger.variant("Parser", 1, [error$1[0]]));
        return $$Promise.get(Curry._1(runTasks, tasks$1), resolve);
      }
      var tasks$2 = Curry._1(ResponseHandler.handle, error$1[0]);
      Curry._1(runTasks, tasks$2);
      
    };
    return $$Promise.tap($$Promise.flatMap(Curry._2(Task.State.sendRequestToAgda, state, req), (function (connection) {
                      if (connection.tag) {
                        var tasks = Curry._1(ErrorHandler.handle, connection[0]);
                        $$Promise.get(Curry._1(runTasks, tasks), resolve);
                        return promise;
                      }
                      handle.contents = Curry._1(connection[0].emitter.on, handler);
                      return promise;
                    })), (function (param) {
                  return Belt_Option.forEach(handle.contents, (function (f) {
                                return Curry._1(f, undefined);
                              }));
                }));
  };
  var make = function (state) {
    var self = {
      agdaRequestRunner: Runner2$AgdaModeVscode.make(undefined),
      agdaRequestStatus: /* Available */0,
      viewRequestRunner: Runner2$AgdaModeVscode.make(undefined),
      viewRequestStatus: /* Available */0,
      otherTaskRunner: Runner2$AgdaModeVscode.make(undefined)
    };
    Runner2$AgdaModeVscode.setup(self.otherTaskRunner, (function (task) {
            if (typeof task === "number") {
              return $$Promise.resolved(undefined);
            }
            if (task.tag) {
              return $$Promise.resolved(undefined);
            }
            var req = task[0];
            var runTasks = function (tasks) {
              return Runner2$AgdaModeVscode.pushToBackAndRun(self.otherTaskRunner, tasks);
            };
            var reqs = self.agdaRequestStatus;
            if (reqs) {
              reqs[0].push(req);
              return $$Promise.resolved(undefined);
            } else {
              self.agdaRequestStatus = /* Occupied */Caml_chrome_debugger.simpleVariant("Occupied", [[]]);
              return $$Promise.flatMap(sendAgdaRequest(runTasks, state, req), (function (param) {
                            var reqs = self.agdaRequestStatus;
                            var reqs$1 = reqs ? Belt_List.fromArray(reqs[0]) : /* [] */0;
                            self.agdaRequestStatus = /* Available */0;
                            return Runner2$AgdaModeVscode.pushToFrontAndRun(self.agdaRequestRunner, reqs$1);
                          }));
            }
          }));
    return self;
  };
  return {
          ErrorHandler: ErrorHandler,
          ResponseHandler: ResponseHandler,
          Task: Task,
          dispatchCommand: dispatchCommand,
          sendAgdaRequest: sendAgdaRequest,
          make: make
        };
}

exports.Impl = Impl;
/* Promise Not a pure module */
