// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Eventemitter3 = require("eventemitter3");

function onNewListener(arg1, obj) {
  return obj.on("newListener", arg1);
}

function onNewListener2(arg1, obj) {
  return obj.on("newListener", arg1);
}

function onNewListener3(arg1, obj) {
  return obj.on("newListener", arg1);
}

function onceNewListener(arg1, obj) {
  return obj.once("newListener", arg1);
}

function onceNewListener2(arg1, obj) {
  return obj.once("newListener", arg1);
}

function onceNewListener3(arg1, obj) {
  return obj.once("newListener", arg1);
}

function onRemoveListener(arg1, obj) {
  return obj.on("removeListener", arg1);
}

function onceRemoveListener(arg1, obj) {
  return obj.once("removeListener", arg1);
}

function addListener(arg1, arg2, obj) {
  return obj.addListener(arg1, arg2);
}

function addListener2(arg1, arg2, obj) {
  return obj.addListener(arg1, arg2);
}

function addListener3(arg1, arg2, obj) {
  return obj.addListener(arg1, arg2);
}

function emit0(arg1, obj) {
  return obj.emit(arg1);
}

function emit(arg1, arg2, obj) {
  return obj.emit(arg1, arg2);
}

function emit2(arg1, arg2, arg3, obj) {
  return obj.emit(arg1, arg2, arg3);
}

function emit3(arg1, arg2, arg3, arg4, obj) {
  return obj.emit(arg1, arg2, arg3, arg4);
}

function eventNames(arg1, obj) {
  return obj.eventNames(arg1);
}

function listenerCount(arg1, obj) {
  return obj.listenerCount(arg1);
}

function listeners(arg1, obj) {
  return obj.listeners(arg1);
}

function listeners2(arg1, obj) {
  return obj.listeners(arg1);
}

function listeners3(arg1, obj) {
  return obj.listeners(arg1);
}

function off(arg1, arg2, obj) {
  return obj.off(arg1, arg2);
}

function off2(arg1, arg2, obj) {
  return obj.off(arg1, arg2);
}

function off3(arg1, arg2, obj) {
  return obj.off(arg1, arg2);
}

function once(arg1, arg2, obj) {
  return obj.once(arg1, arg2);
}

function once2(arg1, arg2, obj) {
  return obj.once(arg1, arg2);
}

function once3(arg1, arg2, obj) {
  return obj.once(arg1, arg2);
}

function prependListener(arg1, arg2, obj) {
  return obj.prependListener(arg1, arg2);
}

function prependListener2(arg1, arg2, obj) {
  return obj.prependListener(arg1, arg2);
}

function prependListener3(arg1, arg2, obj) {
  return obj.prependListener(arg1, arg2);
}

function prependOnceListener(arg1, arg2, obj) {
  return obj.prependOnceListener(arg1, arg2);
}

function prependOnceListener2(arg1, arg2, obj) {
  return obj.prependOnceListener(arg1, arg2);
}

function prependOnceListener3(arg1, arg2, obj) {
  return obj.prependOnceListener(arg1, arg2);
}

function removeAllListeners_(arg1, obj) {
  return obj.removeAllListeners(arg1);
}

function setMaxListeners(arg1, obj) {
  return obj.setMaxListeners(arg1);
}

function rawListeners(arg1, obj) {
  return obj.rawListeners(arg1);
}

function rawListeners2(arg1, obj) {
  return obj.rawListeners(arg1);
}

function rawListeners3(arg1, obj) {
  return obj.rawListeners(arg1);
}

var EventEmitter3 = {
  onNewListener: onNewListener,
  onNewListener2: onNewListener2,
  onNewListener3: onNewListener3,
  onceNewListener: onceNewListener,
  onceNewListener2: onceNewListener2,
  onceNewListener3: onceNewListener3,
  onRemoveListener: onRemoveListener,
  onceRemoveListener: onceRemoveListener,
  addListener: addListener,
  addListener2: addListener2,
  addListener3: addListener3,
  emit0: emit0,
  emit: emit,
  emit2: emit2,
  emit3: emit3,
  eventNames: eventNames,
  listenerCount: listenerCount,
  listeners: listeners,
  listeners2: listeners2,
  listeners3: listeners3,
  off: off,
  off2: off2,
  off3: off3,
  on: addListener,
  on2: addListener2,
  on3: addListener3,
  once: once,
  once2: once2,
  once3: once3,
  prependListener: prependListener,
  prependListener2: prependListener2,
  prependListener3: prependListener3,
  prependOnceListener: prependOnceListener,
  prependOnceListener2: prependOnceListener2,
  prependOnceListener3: prependOnceListener3,
  removeAllListeners_: removeAllListeners_,
  removeListener: off,
  removeListener2: off2,
  removeListener3: off3,
  setMaxListeners: setMaxListeners,
  rawListeners: rawListeners,
  rawListeners2: rawListeners2,
  rawListeners3: rawListeners3
};

function make(prim) {
  return new Eventemitter3.EventEmitter();
}

function emit$1(self, x) {
  self.emit("data", x);
}

function on(self, callback) {
  self.addListener("data", callback);
  return function (param) {
    self.off("data", callback);
  };
}

function once$1(self) {
  var match = $$Promise.pending(undefined);
  self.once("data", match[1]);
  return match[0];
}

function destroy(self) {
  self.removeAllListeners();
}

var Module = {
  make: make,
  emit: emit$1,
  on: on,
  once: once$1,
  destroy: destroy
};

exports.EventEmitter3 = EventEmitter3;
exports.Module = Module;
exports.make = make;
exports.emit = emit$1;
exports.on = on;
exports.once = once$1;
exports.destroy = destroy;
/* Promise Not a pure module */
