// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Vscode = require("vscode");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var IM$AgdaModeVscode = require("../InputMethod/IM.bs.js");
var Util$AgdaModeVscode = require("../Util/Util.bs.js");
var Editor$AgdaModeVscode = require("../Editor.bs.js");

function activate(self, editor) {
  var $$document = editor.document;
  var intervals = Belt_Array.map(Editor$AgdaModeVscode.$$Selection.getMany(editor), (function (range) {
          return [
                  $$document.offsetAt(range.start),
                  $$document.offsetAt(range.end)
                ];
        }));
  IM$AgdaModeVscode.activate(self, Caml_option.some(editor), intervals);
  return {
          hd: {
            TAG: 2,
            _0: {
              TAG: 2,
              _0: /* Activate */0,
              [Symbol.for("name")]: "InputMethod"
            },
            [Symbol.for("name")]: "ViewEvent"
          },
          tl: /* [] */0
        };
}

function deactivate(self) {
  IM$AgdaModeVscode.deactivate(self);
  return {
          hd: {
            TAG: 2,
            _0: {
              TAG: 2,
              _0: /* Deactivate */1,
              [Symbol.for("name")]: "InputMethod"
            },
            [Symbol.for("name")]: "ViewEvent"
          },
          tl: /* [] */0
        };
}

function handle(state, output) {
  var handle$1 = function (kind) {
    if (typeof kind === "number") {
      if (kind === /* Activate */0) {
        return $$Promise.resolved({
                    hd: {
                      TAG: 0,
                      _0: {
                        TAG: 13,
                        _0: /* Activate */0,
                        [Symbol.for("name")]: "InputMethod"
                      },
                      [Symbol.for("name")]: "DispatchCommand"
                    },
                    tl: /* [] */0
                  });
      } else {
        return $$Promise.resolved({
                    hd: {
                      TAG: 2,
                      _0: {
                        TAG: 2,
                        _0: /* Deactivate */1,
                        [Symbol.for("name")]: "InputMethod"
                      },
                      [Symbol.for("name")]: "ViewEvent"
                    },
                    tl: /* [] */0
                  });
      }
    }
    if (!kind.TAG) {
      return $$Promise.resolved({
                  hd: {
                    TAG: 2,
                    _0: {
                      TAG: 2,
                      _0: {
                        _0: kind._0,
                        _1: kind._1,
                        _2: kind._2,
                        [Symbol.for("name")]: "Update"
                      },
                      [Symbol.for("name")]: "InputMethod"
                    },
                    [Symbol.for("name")]: "ViewEvent"
                  },
                  tl: /* [] */0
                });
    }
    var resolve = kind._1;
    var $$document = state.editor.document;
    var replacements = Belt_Array.map(kind._0, (function (param) {
            var interval = param[0];
            var range = new Vscode.Range($$document.positionAt(interval[0]), $$document.positionAt(interval[1]));
            return [
                    range,
                    param[1]
                  ];
          }));
    return $$Promise.map(Editor$AgdaModeVscode.$$Text.batchReplace($$document, replacements), (function (param) {
                  Curry._1(resolve, undefined);
                  return /* [] */0;
                }));
  };
  return $$Promise.map(Util$AgdaModeVscode.oneByOne(Belt_Array.map(output, handle$1)), Belt_List.concatMany);
}

var EditorIM = {
  activate: activate,
  deactivate: deactivate,
  handle: handle
};

var previous = {
  contents: ""
};

var current = {
  contents: ""
};

function activate$1(self, input) {
  var cursorOffset = input.length - 1 | 0;
  var input$1 = input.substring(0, cursorOffset);
  previous.contents = input$1;
  IM$AgdaModeVscode.activate(self, undefined, [[
          cursorOffset,
          cursorOffset
        ]]);
  return {
          hd: {
            TAG: 2,
            _0: {
              TAG: 2,
              _0: /* Activate */0,
              [Symbol.for("name")]: "InputMethod"
            },
            [Symbol.for("name")]: "ViewEvent"
          },
          tl: {
            hd: {
              TAG: 2,
              _0: {
                TAG: 1,
                _0: input$1,
                [Symbol.for("name")]: "PromptIMUpdate"
              },
              [Symbol.for("name")]: "ViewEvent"
            },
            tl: /* [] */0
          }
        };
}

function deactivate$1(self) {
  IM$AgdaModeVscode.deactivate(self);
  return {
          hd: {
            TAG: 2,
            _0: {
              TAG: 2,
              _0: /* Deactivate */1,
              [Symbol.for("name")]: "InputMethod"
            },
            [Symbol.for("name")]: "ViewEvent"
          },
          tl: /* [] */0
        };
}

function change(self, input) {
  current.contents = input;
  var input$1 = IM$AgdaModeVscode.deviseChange(self, previous.contents, input);
  if (input$1 !== undefined) {
    return IM$AgdaModeVscode.run(self, undefined, input$1);
  } else {
    return $$Promise.resolved([/* Deactivate */1]);
  }
}

function insertChar(self, $$char) {
  return change(self, previous.contents + $$char);
}

function handle$1(self, output) {
  var handle$2 = function (kind) {
    if (typeof kind === "number") {
      if (kind === /* Activate */0) {
        return {
                hd: {
                  TAG: 0,
                  _0: {
                    TAG: 13,
                    _0: /* Activate */0,
                    [Symbol.for("name")]: "InputMethod"
                  },
                  [Symbol.for("name")]: "DispatchCommand"
                },
                tl: /* [] */0
              };
      }
      IM$AgdaModeVscode.deactivate(self);
      return {
              hd: {
                TAG: 2,
                _0: {
                  TAG: 2,
                  _0: /* Deactivate */1,
                  [Symbol.for("name")]: "InputMethod"
                },
                [Symbol.for("name")]: "ViewEvent"
              },
              tl: /* [] */0
            };
    } else {
      if (!kind.TAG) {
        return {
                hd: {
                  TAG: 2,
                  _0: {
                    TAG: 2,
                    _0: {
                      _0: kind._0,
                      _1: kind._1,
                      _2: kind._2,
                      [Symbol.for("name")]: "Update"
                    },
                    [Symbol.for("name")]: "InputMethod"
                  },
                  [Symbol.for("name")]: "ViewEvent"
                },
                tl: /* [] */0
              };
      }
      Curry._1(kind._1, undefined);
      var replaced = {
        contents: current.contents
      };
      var delta = {
        contents: 0
      };
      var replace = function (param) {
        var t = param[1];
        var match = param[0];
        var end_ = match[1];
        var start = match[0];
        replaced.contents = replaced.contents.slice(0, delta.contents + start | 0) + t + replaced.contents.slice(delta.contents + end_ | 0);
        delta.contents = (delta.contents + t.length | 0) - (end_ - start | 0) | 0;
        
      };
      Belt_Array.forEach(kind._0, replace);
      return {
              hd: {
                TAG: 2,
                _0: {
                  TAG: 1,
                  _0: replaced.contents,
                  [Symbol.for("name")]: "PromptIMUpdate"
                },
                [Symbol.for("name")]: "ViewEvent"
              },
              tl: /* [] */0
            };
    }
  };
  return Belt_List.concatMany(Belt_Array.map(output, handle$2));
}

var PromptIM = {
  previous: previous,
  current: current,
  activate: activate$1,
  deactivate: deactivate$1,
  change: change,
  insertChar: insertChar,
  handle: handle$1
};

function isActivated(state) {
  if (IM$AgdaModeVscode.isActivated(state.editorIM)) {
    return /* Editor */0;
  } else if (IM$AgdaModeVscode.isActivated(state.promptIM)) {
    return /* Prompt */1;
  } else {
    return /* None */2;
  }
}

function deactivate$2(state) {
  var match = isActivated(state);
  switch (match) {
    case /* Editor */0 :
        IM$AgdaModeVscode.deactivate(state.editorIM);
        return {
                hd: {
                  TAG: 2,
                  _0: {
                    TAG: 2,
                    _0: /* Deactivate */1,
                    [Symbol.for("name")]: "InputMethod"
                  },
                  [Symbol.for("name")]: "ViewEvent"
                },
                tl: /* [] */0
              };
    case /* Prompt */1 :
        IM$AgdaModeVscode.deactivate(state.promptIM);
        return {
                hd: {
                  TAG: 2,
                  _0: {
                    TAG: 2,
                    _0: /* Deactivate */1,
                    [Symbol.for("name")]: "InputMethod"
                  },
                  [Symbol.for("name")]: "ViewEvent"
                },
                tl: /* [] */0
              };
    case /* None */2 :
        return /* [] */0;
    
  }
}

function activate$2(state) {
  var match = isActivated(state);
  switch (match) {
    case /* Editor */0 :
        Belt_Array.forEach(Editor$AgdaModeVscode.Cursor.getMany(state.editor), (function (point) {
                Editor$AgdaModeVscode.$$Text.insert(state.editor.document, point, "\\");
                
              }));
        IM$AgdaModeVscode.deactivate(state.editorIM);
        return {
                hd: {
                  TAG: 2,
                  _0: {
                    TAG: 2,
                    _0: /* Deactivate */1,
                    [Symbol.for("name")]: "InputMethod"
                  },
                  [Symbol.for("name")]: "ViewEvent"
                },
                tl: /* [] */0
              };
    case /* Prompt */1 :
        return Belt_List.concat((IM$AgdaModeVscode.deactivate(state.promptIM), {
                      hd: {
                        TAG: 2,
                        _0: {
                          TAG: 2,
                          _0: /* Deactivate */1,
                          [Symbol.for("name")]: "InputMethod"
                        },
                        [Symbol.for("name")]: "ViewEvent"
                      },
                      tl: /* [] */0
                    }), activate(state.editorIM, state.editor));
    case /* None */2 :
        return activate(state.editorIM, state.editor);
    
  }
}

function shouldActivatePromptIM(input) {
  return input.endsWith("\\");
}

function activatePromptIM(state, input) {
  var match = isActivated(state);
  switch (match) {
    case /* Editor */0 :
        if (input.endsWith("\\")) {
          return $$Promise.resolved(Belt_List.concat((IM$AgdaModeVscode.deactivate(state.editorIM), {
                            hd: {
                              TAG: 2,
                              _0: {
                                TAG: 2,
                                _0: /* Deactivate */1,
                                [Symbol.for("name")]: "InputMethod"
                              },
                              [Symbol.for("name")]: "ViewEvent"
                            },
                            tl: /* [] */0
                          }), activate$1(state.promptIM, input)));
        } else {
          return $$Promise.resolved({
                      hd: {
                        TAG: 2,
                        _0: {
                          TAG: 1,
                          _0: input,
                          [Symbol.for("name")]: "PromptIMUpdate"
                        },
                        [Symbol.for("name")]: "ViewEvent"
                      },
                      tl: /* [] */0
                    });
        }
    case /* Prompt */1 :
        var partial_arg = state.promptIM;
        return $$Promise.map(change(state.promptIM, input), (function (param) {
                      return handle$1(partial_arg, param);
                    }));
    case /* None */2 :
        if (input.endsWith("\\")) {
          return $$Promise.resolved(activate$1(state.promptIM, input));
        } else {
          return $$Promise.resolved({
                      hd: {
                        TAG: 2,
                        _0: {
                          TAG: 1,
                          _0: input,
                          [Symbol.for("name")]: "PromptIMUpdate"
                        },
                        [Symbol.for("name")]: "ViewEvent"
                      },
                      tl: /* [] */0
                    });
        }
    
  }
}

function chooseSymbol(state, symbol) {
  var match = isActivated(state);
  switch (match) {
    case /* Editor */0 :
        return $$Promise.map($$Promise.flatMap(IM$AgdaModeVscode.run(state.editorIM, Caml_option.some(state.editor), {
                            TAG: 2,
                            _0: {
                              _0: symbol,
                              [Symbol.for("name")]: "ChooseSymbol"
                            },
                            [Symbol.for("name")]: "Candidate"
                          }), (function (param) {
                          return handle(state, param);
                        })), (function (tasks1) {
                      return Belt_List.concat(tasks1, deactivate$2(state));
                    }));
    case /* Prompt */1 :
        var partial_arg = state.promptIM;
        return $$Promise.map($$Promise.map(IM$AgdaModeVscode.run(state.promptIM, undefined, {
                            TAG: 2,
                            _0: {
                              _0: symbol,
                              [Symbol.for("name")]: "ChooseSymbol"
                            },
                            [Symbol.for("name")]: "Candidate"
                          }), (function (param) {
                          return handle$1(partial_arg, param);
                        })), (function (tasks1) {
                      return Belt_List.concat(tasks1, deactivate$2(state));
                    }));
    case /* None */2 :
        return $$Promise.resolved(/* [] */0);
    
  }
}

function insertChar$1(state, $$char) {
  var match = isActivated(state);
  switch (match) {
    case /* Editor */0 :
        var $$char$1 = $$char.charAt(0);
        Belt_Array.forEach(Editor$AgdaModeVscode.Cursor.getMany(state.editor), (function (point) {
                Editor$AgdaModeVscode.$$Text.insert(state.editor.document, point, $$char$1);
                
              }));
        return $$Promise.resolved(/* [] */0);
    case /* Prompt */1 :
        var partial_arg = state.promptIM;
        return $$Promise.map(insertChar(state.promptIM, $$char), (function (param) {
                      return handle$1(partial_arg, param);
                    }));
    case /* None */2 :
        return $$Promise.resolved(/* [] */0);
    
  }
}

function moveUp(state) {
  var match = isActivated(state);
  switch (match) {
    case /* Editor */0 :
        return $$Promise.flatMap(IM$AgdaModeVscode.run(state.editorIM, Caml_option.some(state.editor), {
                        TAG: 2,
                        _0: /* BrowseUp */0,
                        [Symbol.for("name")]: "Candidate"
                      }), (function (param) {
                      return handle(state, param);
                    }));
    case /* Prompt */1 :
        var partial_arg = state.promptIM;
        return $$Promise.map(IM$AgdaModeVscode.run(state.promptIM, undefined, {
                        TAG: 2,
                        _0: /* BrowseUp */0,
                        [Symbol.for("name")]: "Candidate"
                      }), (function (param) {
                      return handle$1(partial_arg, param);
                    }));
    case /* None */2 :
        return $$Promise.resolved(/* [] */0);
    
  }
}

function moveDown(state) {
  var match = isActivated(state);
  switch (match) {
    case /* Editor */0 :
        return $$Promise.flatMap(IM$AgdaModeVscode.run(state.editorIM, Caml_option.some(state.editor), {
                        TAG: 2,
                        _0: /* BrowseDown */1,
                        [Symbol.for("name")]: "Candidate"
                      }), (function (param) {
                      return handle(state, param);
                    }));
    case /* Prompt */1 :
        var partial_arg = state.promptIM;
        return $$Promise.map(IM$AgdaModeVscode.run(state.promptIM, undefined, {
                        TAG: 2,
                        _0: /* BrowseDown */1,
                        [Symbol.for("name")]: "Candidate"
                      }), (function (param) {
                      return handle$1(partial_arg, param);
                    }));
    case /* None */2 :
        return $$Promise.resolved(/* [] */0);
    
  }
}

function moveLeft(state) {
  var match = isActivated(state);
  switch (match) {
    case /* Editor */0 :
        return $$Promise.flatMap(IM$AgdaModeVscode.run(state.editorIM, Caml_option.some(state.editor), {
                        TAG: 2,
                        _0: /* BrowseLeft */2,
                        [Symbol.for("name")]: "Candidate"
                      }), (function (param) {
                      return handle(state, param);
                    }));
    case /* Prompt */1 :
        var partial_arg = state.promptIM;
        return $$Promise.map(IM$AgdaModeVscode.run(state.promptIM, undefined, {
                        TAG: 2,
                        _0: /* BrowseLeft */2,
                        [Symbol.for("name")]: "Candidate"
                      }), (function (param) {
                      return handle$1(partial_arg, param);
                    }));
    case /* None */2 :
        return $$Promise.resolved(/* [] */0);
    
  }
}

function moveRight(state) {
  var match = isActivated(state);
  switch (match) {
    case /* Editor */0 :
        return $$Promise.flatMap(IM$AgdaModeVscode.run(state.editorIM, Caml_option.some(state.editor), {
                        TAG: 2,
                        _0: /* BrowseRight */3,
                        [Symbol.for("name")]: "Candidate"
                      }), (function (param) {
                      return handle(state, param);
                    }));
    case /* Prompt */1 :
        var partial_arg = state.promptIM;
        return $$Promise.map(IM$AgdaModeVscode.run(state.promptIM, undefined, {
                        TAG: 2,
                        _0: /* BrowseRight */3,
                        [Symbol.for("name")]: "Candidate"
                      }), (function (param) {
                      return handle$1(partial_arg, param);
                    }));
    case /* None */2 :
        return $$Promise.resolved(/* [] */0);
    
  }
}

function handle$2(x) {
  if (typeof x === "number") {
    switch (x) {
      case /* Activate */0 :
          return {
                  hd: {
                    TAG: 8,
                    _0: (function (state) {
                        return $$Promise.resolved(activate$2(state));
                      }),
                    [Symbol.for("name")]: "WithStateP"
                  },
                  tl: /* [] */0
                };
      case /* MoveUp */1 :
          return {
                  hd: {
                    TAG: 8,
                    _0: moveUp,
                    [Symbol.for("name")]: "WithStateP"
                  },
                  tl: /* [] */0
                };
      case /* MoveRight */2 :
          return {
                  hd: {
                    TAG: 8,
                    _0: moveRight,
                    [Symbol.for("name")]: "WithStateP"
                  },
                  tl: /* [] */0
                };
      case /* MoveDown */3 :
          return {
                  hd: {
                    TAG: 8,
                    _0: moveDown,
                    [Symbol.for("name")]: "WithStateP"
                  },
                  tl: /* [] */0
                };
      case /* MoveLeft */4 :
          return {
                  hd: {
                    TAG: 8,
                    _0: moveLeft,
                    [Symbol.for("name")]: "WithStateP"
                  },
                  tl: /* [] */0
                };
      
    }
  } else {
    var $$char = x._0;
    return {
            hd: {
              TAG: 8,
              _0: (function (state) {
                  return insertChar$1(state, $$char);
                }),
              [Symbol.for("name")]: "WithStateP"
            },
            tl: /* [] */0
          };
  }
}

exports.EditorIM = EditorIM;
exports.PromptIM = PromptIM;
exports.isActivated = isActivated;
exports.deactivate = deactivate$2;
exports.activate = activate$2;
exports.shouldActivatePromptIM = shouldActivatePromptIM;
exports.activatePromptIM = activatePromptIM;
exports.chooseSymbol = chooseSymbol;
exports.insertChar = insertChar$1;
exports.moveUp = moveUp;
exports.moveDown = moveDown;
exports.moveLeft = moveLeft;
exports.moveRight = moveRight;
exports.handle = handle$2;
/* vscode Not a pure module */
