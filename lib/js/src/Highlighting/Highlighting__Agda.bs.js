// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_List = require("rescript/lib/js/belt_List.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Pervasives = require("rescript/lib/js/pervasives.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Util$AgdaModeVscode = require("../Util/Util.bs.js");
var Parser$AgdaModeVscode = require("../Parser/Parser.bs.js");

function toString(x) {
  switch (x) {
    case /* Comment */0 :
        return "Comment";
    case /* Keyword */1 :
        return "Keyword";
    case /* String */2 :
        return "String";
    case /* Number */3 :
        return "Number";
    case /* Symbol */4 :
        return "Symbol";
    case /* PrimitiveType */5 :
        return "PrimitiveType";
    case /* Pragma */6 :
        return "Pragma";
    case /* Background */7 :
        return "Background";
    case /* Markup */8 :
        return "Markup";
    case /* Error */9 :
        return "Error";
    case /* DottedPattern */10 :
        return "DottedPattern";
    case /* UnsolvedMeta */11 :
        return "UnsolvedMeta";
    case /* UnsolvedConstraint */12 :
        return "UnsolvedConstraint";
    case /* TerminationProblem */13 :
        return "TerminationProblem";
    case /* PositivityProblem */14 :
        return "PositivityProblem";
    case /* Deadcode */15 :
        return "Deadcode";
    case /* CoverageProblem */16 :
        return "CoverageProblem";
    case /* IncompletePattern */17 :
        return "IncompletePattern";
    case /* TypeChecks */18 :
        return "TypeChecks";
    case /* CatchallClause */19 :
        return "CatchallClause";
    case /* ConfluenceProblem */20 :
        return "ConfluenceProblem";
    case /* Bound */21 :
        return "Bound";
    case /* Generalizable */22 :
        return "Generalizable";
    case /* ConstructorInductive */23 :
        return "ConstructorInductive";
    case /* ConstructorCoInductive */24 :
        return "ConstructorCoInductive";
    case /* Datatype */25 :
        return "Datatype";
    case /* Field */26 :
        return "Field";
    case /* Function */27 :
        return "Function";
    case /* Module */28 :
        return "Module";
    case /* Postulate */29 :
        return "Postulate";
    case /* Primitive */30 :
        return "Primitive";
    case /* Record */31 :
        return "Record";
    case /* Argument */32 :
        return "Argument";
    case /* Macro */33 :
        return "Macro";
    case /* Operator */34 :
        return "Operator";
    
  }
}

function parse(x) {
  switch (x) {
    case "argument" :
        return /* Argument */32;
    case "background" :
        return /* Background */7;
    case "bound" :
        return /* Bound */21;
    case "catchallclause" :
        return /* CatchallClause */19;
    case "coinductiveconstructor" :
        return /* ConstructorCoInductive */24;
    case "comment" :
        return /* Comment */0;
    case "confluenceproblem" :
        return /* ConfluenceProblem */20;
    case "coverageproblem" :
        return /* CoverageProblem */16;
    case "datatype" :
        return /* Datatype */25;
    case "deadcode" :
        return /* Deadcode */15;
    case "dottedpattern" :
        return /* DottedPattern */10;
    case "error" :
        return /* Error */9;
    case "field" :
        return /* Field */26;
    case "function" :
        return /* Function */27;
    case "generalizable" :
        return /* Generalizable */22;
    case "incompletepattern" :
        return /* IncompletePattern */17;
    case "inductiveconstructor" :
        return /* ConstructorInductive */23;
    case "keyword" :
        return /* Keyword */1;
    case "macro" :
        return /* Macro */33;
    case "markup" :
        return /* Markup */8;
    case "module" :
        return /* Module */28;
    case "number" :
        return /* Number */3;
    case "operator" :
        return /* Operator */34;
    case "positivityproblem" :
        return /* PositivityProblem */14;
    case "postulate" :
        return /* Postulate */29;
    case "pragma" :
        return /* Pragma */6;
    case "primitive" :
        return /* Primitive */30;
    case "primitivetype" :
        return /* PrimitiveType */5;
    case "record" :
        return /* Record */31;
    case "string" :
        return /* String */2;
    case "symbol" :
        return /* Symbol */4;
    case "terminationproblem" :
        return /* TerminationProblem */13;
    case "typechecks" :
        return /* TypeChecks */18;
    case "unsolvedconstraint" :
        return /* UnsolvedConstraint */12;
    case "unsolvedmeta" :
        return /* UnsolvedMeta */11;
    default:
      return /* Operator */34;
  }
}

var Aspect = {
  toString: toString,
  parse: parse
};

function toString$1(self) {
  var match = self.source;
  return "Annotation " + (String(self.start) + (" " + (String(self.end_) + (" " + (Util$AgdaModeVscode.Pretty.list(Belt_List.fromArray(self.aspects)) + (
                    match !== undefined ? match[0] + (" " + String(match[1])) : ""
                  ))))));
}

function parse$1(x) {
  if (x.TAG === /* A */0) {
    return ;
  }
  var xs = x._0;
  var len = xs.length;
  if (len >= 7) {
    return ;
  }
  switch (len) {
    case 3 :
        var start$p = xs[0];
        if (start$p.TAG !== /* A */0) {
          return ;
        }
        var end_$p = xs[1];
        if (end_$p.TAG !== /* A */0) {
          return ;
        }
        var end_$p$1 = end_$p._0;
        var aspects = xs[2];
        return Belt_Option.flatMap(Pervasives.int_of_string_opt(start$p._0), (function (start) {
                      return Belt_Option.map(Pervasives.int_of_string_opt(end_$p$1), (function (end_) {
                                    return {
                                            start: start - 1 | 0,
                                            end_: end_ - 1 | 0,
                                            aspects: Belt_Array.map(Parser$AgdaModeVscode.SExpression.flatten(aspects), parse),
                                            isTokenBased: false,
                                            note: undefined,
                                            source: undefined
                                          };
                                  }));
                    }));
    case 4 :
        var start$p$1 = xs[0];
        if (start$p$1.TAG !== /* A */0) {
          return ;
        }
        var end_$p$2 = xs[1];
        if (end_$p$2.TAG !== /* A */0) {
          return ;
        }
        var end_$p$3 = end_$p$2._0;
        var aspects$1 = xs[2];
        return Belt_Option.flatMap(Pervasives.int_of_string_opt(start$p$1._0), (function (start) {
                      return Belt_Option.map(Pervasives.int_of_string_opt(end_$p$3), (function (end_) {
                                    return {
                                            start: start - 1 | 0,
                                            end_: end_ - 1 | 0,
                                            aspects: Belt_Array.map(Parser$AgdaModeVscode.SExpression.flatten(aspects$1), parse),
                                            isTokenBased: false,
                                            note: undefined,
                                            source: undefined
                                          };
                                  }));
                    }));
    case 0 :
    case 1 :
    case 2 :
    case 5 :
        return ;
    case 6 :
        var start$p$2 = xs[0];
        if (start$p$2.TAG !== /* A */0) {
          return ;
        }
        var end_$p$4 = xs[1];
        if (end_$p$4.TAG !== /* A */0) {
          return ;
        }
        var end_$p$5 = end_$p$4._0;
        var aspects$2 = xs[2];
        var match = xs[5];
        if (match.TAG === /* A */0) {
          return ;
        }
        var match$1 = match._0;
        if (match$1.length !== 3) {
          return ;
        }
        var filepath = match$1[0];
        if (filepath.TAG !== /* A */0) {
          return ;
        }
        var filepath$1 = filepath._0;
        var index$p = match$1[2];
        if (index$p.TAG !== /* A */0) {
          return ;
        }
        var index$p$1 = index$p._0;
        return Belt_Option.flatMap(Pervasives.int_of_string_opt(start$p$2._0), (function (start) {
                      return Belt_Option.flatMap(Pervasives.int_of_string_opt(end_$p$5), (function (end_) {
                                    return Belt_Option.map(Pervasives.int_of_string_opt(index$p$1), (function (index) {
                                                  return {
                                                          start: start - 1 | 0,
                                                          end_: end_ - 1 | 0,
                                                          aspects: Belt_Array.map(Parser$AgdaModeVscode.SExpression.flatten(aspects$2), parse),
                                                          isTokenBased: false,
                                                          note: undefined,
                                                          source: [
                                                            filepath$1,
                                                            index
                                                          ]
                                                        };
                                                }));
                                  }));
                    }));
    
  }
}

function parseDirectHighlightings(tokens) {
  return Belt_Array.keepMap(Belt_Array.map(tokens.slice(2), parse$1), (function (x) {
                return x;
              }));
}

function decode(param) {
  return Json_decode.map((function (param) {
                return {
                        start: param[0] - 1 | 0,
                        end_: param[1] - 1 | 0,
                        aspects: Belt_Array.map(param[2], parse),
                        isTokenBased: param[3],
                        note: param[4],
                        source: param[5]
                      };
              }), (function (param) {
                return Util$AgdaModeVscode.Decode.tuple6(Json_decode.$$int, Json_decode.$$int, (function (param) {
                              return Json_decode.array(Json_decode.string, param);
                            }), Json_decode.bool, (function (param) {
                              return Json_decode.optional(Json_decode.string, param);
                            }), (function (param) {
                              return Json_decode.optional((function (param) {
                                            return Json_decode.pair(Json_decode.string, Json_decode.$$int, param);
                                          }), param);
                            }), param);
              }), param);
}

var Info = {
  toString: toString$1,
  parse: parse$1,
  parseDirectHighlightings: parseDirectHighlightings,
  decode: decode
};

function decode$1(param) {
  return Json_decode.map((function (param) {
                return {
                        _0: param[0],
                        _1: param[1],
                        [Symbol.for("name")]: "Infos"
                      };
              }), (function (param) {
                return Json_decode.pair(Json_decode.bool, (function (param) {
                              return Json_decode.array(decode, param);
                            }), param);
              }), param);
}

function toInfos(x) {
  return x._1;
}

var Infos = {
  decode: decode$1,
  toInfos: toInfos
};

var Token;

exports.Aspect = Aspect;
exports.Token = Token;
exports.Info = Info;
exports.Infos = Infos;
/* Util-AgdaModeVscode Not a pure module */
