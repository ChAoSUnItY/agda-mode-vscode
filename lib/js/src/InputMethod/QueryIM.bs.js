// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Buffer$AgdaModeVscode = require("./Buffer.bs.js");

function Impl(Editor) {
  var $$Buffer = Buffer$AgdaModeVscode.Impl(Editor);
  var make = function (param) {
    return {
            activated: false,
            start: 0,
            buffer: Curry._1($$Buffer.make, undefined)
          };
  };
  var activate = function (self, text) {
    self.activated = true;
    self.start = text.length;
    
  };
  var update = function (self, input) {
    var penult = input.length - 1 | 0;
    var before = input.substring(0, self.start);
    var actual = input.substring(0, penult);
    var expected = before + Curry._1($$Buffer.toSurface, self.buffer);
    var isInsertion = actual === expected;
    if (isInsertion) {
      var insertedText = input.substring(penult);
      var change = {
        offset: penult,
        insertText: insertedText,
        replaceLength: 0
      };
      var match = Curry._3($$Buffer.reflectEditorChange, self.buffer, self.start, change);
      var buffer = match[0];
      self.buffer = buffer;
      if (buffer.translation.further) {
        return /* tuple */[
                before + Curry._1($$Buffer.toSurface, buffer),
                /* Update */Caml_chrome_debugger.variant("Update", 1, [
                    Curry._1($$Buffer.toSequence, buffer),
                    buffer.translation,
                    buffer.candidateIndex
                  ])
              ];
      } else {
        self.buffer = Curry._1($$Buffer.make, undefined);
        self.activated = false;
        if (match[1] !== undefined) {
          return /* tuple */[
                  before + Curry._1($$Buffer.toSurface, buffer),
                  /* Deactivate */1
                ];
        } else {
          return /* tuple */[
                  before + (Curry._1($$Buffer.toSurface, buffer) + insertedText),
                  /* Deactivate */1
                ];
        }
      }
    }
    self.buffer = Curry._1($$Buffer.make, undefined);
    self.activated = false;
    
  };
  return {
          $$Buffer: $$Buffer,
          make: make,
          activate: activate,
          update: update
        };
}

exports.Impl = Impl;
/* Buffer-AgdaModeVscode Not a pure module */
