// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Js_string = require("rescript/lib/js/js_string.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var IM$AgdaModeVscode = require("../InputMethod/IM.bs.js");
var Util$AgdaModeVscode = require("../Util/Util.bs.js");
var Config$AgdaModeVscode = require("../Config.bs.js");
var Editor$AgdaModeVscode = require("../Editor.bs.js");
var State__Type$AgdaModeVscode = require("./State__Type.bs.js");
var State__View$AgdaModeVscode = require("./State__View.bs.js");

function handle(state, output) {
  var handle$1 = function (kind) {
    if (typeof kind === "number") {
      if (kind === /* Activate */0) {
        State__Type$AgdaModeVscode.Context.setIM(true);
        return State__View$AgdaModeVscode.Panel.updateIM(state, /* Activate */0);
      }
      State__Type$AgdaModeVscode.Context.setIM(false);
      return State__View$AgdaModeVscode.Panel.updateIM(state, /* Deactivate */1);
    } else {
      if (kind.TAG === /* UpdateView */0) {
        return State__View$AgdaModeVscode.Panel.updateIM(state, {
                    _0: kind._0,
                    _1: kind._1,
                    _2: kind._2,
                    [Symbol.for("name")]: "Update"
                  });
      }
      var resolve = kind._1;
      var replacements = Belt_Array.map(kind._0, (function (param) {
              var range = Editor$AgdaModeVscode.$$Range.fromInterval(state.document, param[0]);
              return [
                      range,
                      param[1]
                    ];
            }));
      return $$Promise.map(Editor$AgdaModeVscode.$$Text.batchReplace(state.document, replacements), (function (param) {
                    Curry._1(resolve, undefined);
                  }));
    }
  };
  return $$Promise.map(Util$AgdaModeVscode.oneByOne(Belt_Array.map(output, handle$1)), (function (param) {
                
              }));
}

function runAndHandle(state, action) {
  return handle(state, IM$AgdaModeVscode.run(state.editorIM, Caml_option.some(state.editor), action));
}

function activate(state) {
  var partial_arg = state.document;
  var intervals = Belt_Array.map(Editor$AgdaModeVscode.$$Selection.getMany(state.editor), (function (param) {
          return Editor$AgdaModeVscode.$$Range.toInterval(partial_arg, param);
        }));
  return runAndHandle(state, {
              TAG: 0,
              _0: intervals,
              [Symbol.for("name")]: "Activate"
            });
}

var previous = {
  contents: ""
};

function handle$1(state, output) {
  var handle$2 = function (kind) {
    if (typeof kind === "number") {
      if (kind === /* Activate */0) {
        return $$Promise.flatMap(State__View$AgdaModeVscode.Panel.updateIM(state, /* Activate */0), (function (param) {
                      return State__View$AgdaModeVscode.Panel.updatePromptIM(state, previous.contents);
                    }));
      } else {
        return State__View$AgdaModeVscode.Panel.updateIM(state, /* Deactivate */1);
      }
    }
    if (kind.TAG === /* UpdateView */0) {
      return State__View$AgdaModeVscode.Panel.updateIM(state, {
                  _0: kind._0,
                  _1: kind._1,
                  _2: kind._2,
                  [Symbol.for("name")]: "Update"
                });
    }
    Curry._1(kind._1, undefined);
    var replaced = {
      contents: previous.contents
    };
    var delta = {
      contents: 0
    };
    var replace = function (param) {
      var t = param[1];
      var match = param[0];
      var end_ = match[1];
      var start = match[0];
      replaced.contents = replaced.contents.slice(0, delta.contents + start | 0) + t + replaced.contents.slice(delta.contents + end_ | 0);
      delta.contents = (delta.contents + t.length | 0) - (end_ - start | 0) | 0;
    };
    Belt_Array.forEach(kind._0, replace);
    previous.contents = replaced.contents;
    return State__View$AgdaModeVscode.Panel.updatePromptIM(state, replaced.contents);
  };
  return $$Promise.map(Util$AgdaModeVscode.oneByOne(Belt_Array.map(output, handle$2)), (function (param) {
                
              }));
}

function runAndHandle$1(state, action) {
  return handle$1(state, IM$AgdaModeVscode.run(state.promptIM, undefined, action));
}

function keyUpdate(state, next) {
  var deviseChange = function (previous, next) {
    var inputLength = next.length;
    var init = function (s) {
      return Js_string.substring(0, s.length - 1 | 0, s);
    };
    var last = function (s) {
      return Js_string.substringToEnd(s.length - 1 | 0, s);
    };
    if (init(next) === previous) {
      return {
              TAG: 1,
              _0: [{
                  offset: inputLength - 1 | 0,
                  insertedText: last(next),
                  replacedTextLength: 0
                }],
              [Symbol.for("name")]: "KeyUpdate"
            };
    } else if (next === init(previous)) {
      return {
              TAG: 1,
              _0: [{
                  offset: inputLength,
                  insertedText: "",
                  replacedTextLength: 1
                }],
              [Symbol.for("name")]: "KeyUpdate"
            };
    } else {
      return /* Deactivate */0;
    }
  };
  var input = deviseChange(previous.contents, next);
  var output = IM$AgdaModeVscode.run(state.promptIM, undefined, input);
  previous.contents = next;
  return handle$1(state, output);
}

function activate$1(state, input) {
  var cursorOffset = input.length - 1 | 0;
  var input$1 = Js_string.substring(0, cursorOffset, input);
  previous.contents = input$1;
  return runAndHandle$1(state, {
              TAG: 0,
              _0: [[
                  cursorOffset,
                  cursorOffset
                ]],
              [Symbol.for("name")]: "Activate"
            });
}

function isActivated(state) {
  if (IM$AgdaModeVscode.isActivated(state.editorIM)) {
    return /* Editor */0;
  } else if (IM$AgdaModeVscode.isActivated(state.promptIM)) {
    return /* Prompt */1;
  } else {
    return /* None */2;
  }
}

function deactivate(state) {
  var match = isActivated(state);
  switch (match) {
    case /* Editor */0 :
        return runAndHandle(state, /* Deactivate */0);
    case /* Prompt */1 :
        return runAndHandle$1(state, /* Deactivate */0);
    case /* None */2 :
        return $$Promise.resolved(undefined);
    
  }
}

var activationKey = Config$AgdaModeVscode.InputMethod.getActivationKey(undefined);

function activateEditorIM(state) {
  var match = isActivated(state);
  switch (match) {
    case /* Editor */0 :
        Belt_Array.forEach(Editor$AgdaModeVscode.Cursor.getMany(state.editor), (function (point) {
                Editor$AgdaModeVscode.$$Text.insert(state.document, point, activationKey);
              }));
        return runAndHandle(state, /* Deactivate */0);
    case /* Prompt */1 :
        return $$Promise.flatMap(runAndHandle$1(state, /* Deactivate */0), (function (param) {
                      return activate(state);
                    }));
    case /* None */2 :
        return activate(state);
    
  }
}

function keyUpdatePromptIM(state, input) {
  var match = isActivated(state);
  switch (match) {
    case /* Editor */0 :
        if (Js_string.endsWith(activationKey, input)) {
          return $$Promise.flatMap(runAndHandle(state, /* Deactivate */0), (function (param) {
                        return activate$1(state, input);
                      }));
        } else {
          return State__View$AgdaModeVscode.Panel.updatePromptIM(state, input);
        }
    case /* Prompt */1 :
        return keyUpdate(state, input);
    case /* None */2 :
        if (Js_string.endsWith(activationKey, input)) {
          return activate$1(state, input);
        } else {
          return State__View$AgdaModeVscode.Panel.updatePromptIM(state, input);
        }
    
  }
}

function keyUpdateEditorIM(state, changes) {
  var match = isActivated(state);
  if (match !== 0) {
    return $$Promise.resolved(undefined);
  } else {
    return handle(state, IM$AgdaModeVscode.run(state.editorIM, Caml_option.some(state.editor), {
                    TAG: 1,
                    _0: changes,
                    [Symbol.for("name")]: "KeyUpdate"
                  }));
  }
}

function select(state, intervals) {
  var match = isActivated(state);
  switch (match) {
    case /* Editor */0 :
        return runAndHandle(state, {
                    TAG: 2,
                    _0: intervals,
                    [Symbol.for("name")]: "MouseSelect"
                  });
    case /* Prompt */1 :
        return runAndHandle$1(state, {
                    TAG: 2,
                    _0: intervals,
                    [Symbol.for("name")]: "MouseSelect"
                  });
    case /* None */2 :
        return $$Promise.resolved(undefined);
    
  }
}

function chooseSymbol(state, symbol) {
  var match = isActivated(state);
  switch (match) {
    case /* Editor */0 :
        return $$Promise.flatMap(runAndHandle(state, {
                        TAG: 3,
                        _0: {
                          _0: symbol,
                          [Symbol.for("name")]: "ChooseSymbol"
                        },
                        [Symbol.for("name")]: "Candidate"
                      }), (function (param) {
                      return deactivate(state);
                    }));
    case /* Prompt */1 :
        return $$Promise.flatMap(runAndHandle$1(state, {
                        TAG: 3,
                        _0: {
                          _0: symbol,
                          [Symbol.for("name")]: "ChooseSymbol"
                        },
                        [Symbol.for("name")]: "Candidate"
                      }), (function (param) {
                      return deactivate(state);
                    }));
    case /* None */2 :
        return $$Promise.resolved(undefined);
    
  }
}

function insertChar(state, $$char) {
  var match = isActivated(state);
  switch (match) {
    case /* Editor */0 :
        var $$char$1 = Js_string.charAt(0, $$char);
        var positions = Editor$AgdaModeVscode.Cursor.getMany(state.editor);
        return $$Promise.map(Editor$AgdaModeVscode.$$Text.batchInsert(state.document, positions, $$char$1), (function (param) {
                      Editor$AgdaModeVscode.focus(state.document);
                    }));
    case /* Prompt */1 :
        return keyUpdate(state, previous.contents + $$char);
    case /* None */2 :
        return $$Promise.resolved(undefined);
    
  }
}

function moveUp(state) {
  var match = isActivated(state);
  switch (match) {
    case /* Editor */0 :
        return runAndHandle(state, {
                    TAG: 3,
                    _0: /* BrowseUp */0,
                    [Symbol.for("name")]: "Candidate"
                  });
    case /* Prompt */1 :
        return runAndHandle$1(state, {
                    TAG: 3,
                    _0: /* BrowseUp */0,
                    [Symbol.for("name")]: "Candidate"
                  });
    case /* None */2 :
        return $$Promise.resolved(undefined);
    
  }
}

function moveDown(state) {
  var match = isActivated(state);
  switch (match) {
    case /* Editor */0 :
        return runAndHandle(state, {
                    TAG: 3,
                    _0: /* BrowseDown */1,
                    [Symbol.for("name")]: "Candidate"
                  });
    case /* Prompt */1 :
        return runAndHandle$1(state, {
                    TAG: 3,
                    _0: /* BrowseDown */1,
                    [Symbol.for("name")]: "Candidate"
                  });
    case /* None */2 :
        return $$Promise.resolved(undefined);
    
  }
}

function moveLeft(state) {
  var match = isActivated(state);
  switch (match) {
    case /* Editor */0 :
        return runAndHandle(state, {
                    TAG: 3,
                    _0: /* BrowseLeft */2,
                    [Symbol.for("name")]: "Candidate"
                  });
    case /* Prompt */1 :
        return runAndHandle$1(state, {
                    TAG: 3,
                    _0: /* BrowseLeft */2,
                    [Symbol.for("name")]: "Candidate"
                  });
    case /* None */2 :
        return $$Promise.resolved(undefined);
    
  }
}

function moveRight(state) {
  var match = isActivated(state);
  switch (match) {
    case /* Editor */0 :
        return runAndHandle(state, {
                    TAG: 3,
                    _0: /* BrowseRight */3,
                    [Symbol.for("name")]: "Candidate"
                  });
    case /* Prompt */1 :
        return runAndHandle$1(state, {
                    TAG: 3,
                    _0: /* BrowseRight */3,
                    [Symbol.for("name")]: "Candidate"
                  });
    case /* None */2 :
        return $$Promise.resolved(undefined);
    
  }
}

var Module = {
  deactivate: deactivate,
  select: select,
  insertChar: insertChar,
  chooseSymbol: chooseSymbol,
  moveUp: moveUp,
  moveDown: moveDown,
  moveLeft: moveLeft,
  moveRight: moveRight,
  activateEditorIM: activateEditorIM,
  keyUpdateEditorIM: keyUpdateEditorIM,
  keyUpdatePromptIM: keyUpdatePromptIM
};

exports.Module = Module;
exports.deactivate = deactivate;
exports.select = select;
exports.insertChar = insertChar;
exports.chooseSymbol = chooseSymbol;
exports.moveUp = moveUp;
exports.moveDown = moveDown;
exports.moveLeft = moveLeft;
exports.moveRight = moveRight;
exports.activateEditorIM = activateEditorIM;
exports.keyUpdateEditorIM = keyUpdateEditorIM;
exports.keyUpdatePromptIM = keyUpdatePromptIM;
/* activationKey Not a pure module */
