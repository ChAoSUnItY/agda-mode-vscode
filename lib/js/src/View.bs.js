// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/lib/js/src/Json_encode.bs.js");
var Util$AgdaModeVscode = require("./Util/Util.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

var decode = Util$AgdaModeVscode.Decode.sum((function (tag) {
        switch (tag) {
          case "Error" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (text) {
                                          return /* Error */Caml_chrome_debugger.variant("Error", 3, [text]);
                                        }), Json_decode.string, param);
                          })]);
          case "Plain" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (text) {
                                          return /* Plain */Caml_chrome_debugger.variant("Plain", 0, [text]);
                                        }), Json_decode.string, param);
                          })]);
          case "Success" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (text) {
                                          return /* Success */Caml_chrome_debugger.variant("Success", 1, [text]);
                                        }), Json_decode.string, param);
                          })]);
          case "Warning" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (text) {
                                          return /* Warning */Caml_chrome_debugger.variant("Warning", 2, [text]);
                                        }), Json_decode.string, param);
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "[Request.Header] Unknown constructor: " + tag
                ];
        }
      }));

function encode(text) {
  switch (text.tag | 0) {
    case /* Plain */0 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "Plain"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            text[0]
                          ],
                          /* [] */0
                        ])
                    ]));
    case /* Success */1 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "Success"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            text[0]
                          ],
                          /* [] */0
                        ])
                    ]));
    case /* Warning */2 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "Warning"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            text[0]
                          ],
                          /* [] */0
                        ])
                    ]));
    case /* Error */3 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "Error"
                      ],
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* tuple */[
                            "contents",
                            text[0]
                          ],
                          /* [] */0
                        ])
                    ]));
    
  }
}

var Header = {
  decode: decode,
  encode: encode
};

var decode$1 = Util$AgdaModeVscode.Decode.sum((function (tag) {
        switch (tag) {
          case "Nothing" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [(function (param) {
                            return /* Nothing */0;
                          })]);
          case "Plain" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (text) {
                                          return /* Plain */Caml_chrome_debugger.variant("Plain", 0, [text]);
                                        }), Json_decode.string, param);
                          })]);
          case "Query" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (param) {
                                          return /* Query */Caml_chrome_debugger.variant("Query", 1, [
                                                    param[0],
                                                    param[1]
                                                  ]);
                                        }), (function (param) {
                                          return Json_decode.pair((function (param) {
                                                        return Json_decode.optional(Json_decode.string, param);
                                                      }), (function (param) {
                                                        return Json_decode.optional(Json_decode.string, param);
                                                      }), param);
                                        }), param);
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "[Request.Body] Unknown constructor: " + tag
                ];
        }
      }));

function encode$1(text) {
  if (typeof text === "number") {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "Nothing"
                  ],
                  /* [] */0
                ]));
  } else if (text.tag) {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "Query"
                  ],
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "contents",
                        Json_encode.pair((function (param) {
                                return Json_encode.nullable((function (prim) {
                                              return prim;
                                            }), param);
                              }), (function (param) {
                                return Json_encode.nullable((function (prim) {
                                              return prim;
                                            }), param);
                              }), /* tuple */[
                              text[0],
                              text[1]
                            ])
                      ],
                      /* [] */0
                    ])
                ]));
  } else {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "Plain"
                  ],
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "contents",
                        text[0]
                      ],
                      /* [] */0
                    ])
                ]));
  }
}

var Body = {
  decode: decode$1,
  encode: encode$1
};

var decode$2 = Util$AgdaModeVscode.Decode.sum((function (tag) {
        switch (tag) {
          case "Activate" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [(function (param) {
                            return /* Activate */0;
                          })]);
          case "Deactivate" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [(function (param) {
                            return /* Deactivate */1;
                          })]);
          case "Update" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (param) {
                                          return /* Update */Caml_chrome_debugger.simpleVariant("Update", [
                                                    param[0],
                                                    param[1]
                                                  ]);
                                        }), (function (param) {
                                          return Json_decode.pair(Json_decode.string, (function (param) {
                                                        return Json_decode.array(Json_decode.string, param);
                                                      }), param);
                                        }), param);
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "[Request.InputMethod] Unknown constructor: " + tag
                ];
        }
      }));

function encode$2(param) {
  if (typeof param === "number") {
    if (param !== 0) {
      return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* tuple */[
                      "tag",
                      "Deactivate"
                    ],
                    /* [] */0
                  ]));
    } else {
      return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* tuple */[
                      "tag",
                      "Activate"
                    ],
                    /* [] */0
                  ]));
    }
  } else {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "Update"
                  ],
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "contents",
                        Json_encode.pair((function (prim) {
                                return prim;
                              }), (function (param) {
                                return Json_encode.array((function (prim) {
                                              return prim;
                                            }), param);
                              }), /* tuple */[
                              param[0],
                              param[1]
                            ])
                      ],
                      /* [] */0
                    ])
                ]));
  }
}

var InputMethod = {
  decode: decode$2,
  encode: encode$2
};

var decode$3 = Util$AgdaModeVscode.Decode.sum((function (tag) {
        switch (tag) {
          case "Hide" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [(function (param) {
                            return /* Hide */1;
                          })]);
          case "InputMethod" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* InputMethod */Caml_chrome_debugger.variant("InputMethod", 1, [x]);
                                        }), decode$2, param);
                          })]);
          case "InterruptQuery" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [(function (param) {
                            return /* InterruptQuery */2;
                          })]);
          case "Plain" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (param) {
                                          return /* Plain */Caml_chrome_debugger.variant("Plain", 0, [
                                                    param[0],
                                                    param[1]
                                                  ]);
                                        }), (function (param) {
                                          return Json_decode.pair(decode, decode$1, param);
                                        }), param);
                          })]);
          case "Show" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [(function (param) {
                            return /* Show */0;
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "[Request] Unknown constructor: " + tag
                ];
        }
      }));

function encode$3(payload) {
  if (typeof payload !== "number") {
    if (payload.tag) {
      return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* tuple */[
                      "tag",
                      "InputMethod"
                    ],
                    /* :: */Caml_chrome_debugger.simpleVariant("::", [
                        /* tuple */[
                          "contents",
                          encode$2(payload[0])
                        ],
                        /* [] */0
                      ])
                  ]));
    } else {
      return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* tuple */[
                      "tag",
                      "Plain"
                    ],
                    /* :: */Caml_chrome_debugger.simpleVariant("::", [
                        /* tuple */[
                          "contents",
                          Json_encode.pair(encode, encode$1, /* tuple */[
                                payload[0],
                                payload[1]
                              ])
                        ],
                        /* [] */0
                      ])
                  ]));
    }
  }
  switch (payload) {
    case /* Show */0 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "Show"
                      ],
                      /* [] */0
                    ]));
    case /* Hide */1 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "Hide"
                      ],
                      /* [] */0
                    ]));
    case /* InterruptQuery */2 :
        return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "tag",
                        "InterruptQuery"
                      ],
                      /* [] */0
                    ]));
    
  }
}

var $$Request = {
  Header: Header,
  Body: Body,
  InputMethod: InputMethod,
  decode: decode$3,
  encode: encode$3
};

var decode$4 = Util$AgdaModeVscode.Decode.sum((function (tag) {
        if (tag === "InsertChar") {
          return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                        return Json_decode.map((function ($$char) {
                                      return /* InsertChar */Caml_chrome_debugger.simpleVariant("InsertChar", [$$char]);
                                    }), Json_decode.string, param);
                      })]);
        }
        throw [
              Json_decode.DecodeError,
              "[Request.InputMethod] Unknown constructor: " + tag
            ];
      }));

function encode$4($$char) {
  return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                /* tuple */[
                  "tag",
                  "InsertChar"
                ],
                /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* tuple */[
                      "contents",
                      $$char[0]
                    ],
                    /* [] */0
                  ])
              ]));
}

var InputMethod$1 = {
  decode: decode$4,
  encode: encode$4
};

var decode$5 = Util$AgdaModeVscode.Decode.sum((function (tag) {
        switch (tag) {
          case "Destroyed" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [(function (param) {
                            return /* Destroyed */1;
                          })]);
          case "Initialized" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [(function (param) {
                            return /* Initialized */0;
                          })]);
          case "InputMethod" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (action) {
                                          return /* InputMethod */Caml_chrome_debugger.simpleVariant("InputMethod", [action]);
                                        }), decode$4, param);
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "[Response.EVent] Unknown constructor: " + tag
                ];
        }
      }));

function encode$5(action) {
  if (typeof action === "number") {
    if (action !== 0) {
      return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* tuple */[
                      "tag",
                      "Destroyed"
                    ],
                    /* [] */0
                  ]));
    } else {
      return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* tuple */[
                      "tag",
                      "Initialized"
                    ],
                    /* [] */0
                  ]));
    }
  } else {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "InputMethod"
                  ],
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "contents",
                        encode$4(action[0])
                      ],
                      /* [] */0
                    ])
                ]));
  }
}

var $$Event = {
  InputMethod: InputMethod$1,
  decode: decode$5,
  encode: encode$5
};

var decode$6 = Util$AgdaModeVscode.Decode.sum((function (tag) {
        switch (tag) {
          case "EventPiggyBack" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function ($$event) {
                                          return /* EventPiggyBack */Caml_chrome_debugger.variant("EventPiggyBack", 0, [$$event]);
                                        }), decode$5, param);
                          })]);
          case "QueryInterrupted" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [(function (param) {
                            return /* QueryInterrupted */1;
                          })]);
          case "QuerySuccess" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (result) {
                                          return /* QuerySuccess */Caml_chrome_debugger.variant("QuerySuccess", 1, [result]);
                                        }), Json_decode.string, param);
                          })]);
          case "Success" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [(function (param) {
                            return /* Success */0;
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "[Response] Unknown constructor: " + tag
                ];
        }
      }));

function encode$6(result) {
  if (typeof result === "number") {
    if (result === /* Success */0) {
      return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* tuple */[
                      "tag",
                      "Success"
                    ],
                    /* [] */0
                  ]));
    } else {
      return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* tuple */[
                      "tag",
                      "QueryInterrupted"
                    ],
                    /* [] */0
                  ]));
    }
  } else if (result.tag) {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "QuerySuccess"
                  ],
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "contents",
                        result[0]
                      ],
                      /* [] */0
                    ])
                ]));
  } else {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "EventPiggyBack"
                  ],
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "contents",
                        encode$5(result[0])
                      ],
                      /* [] */0
                    ])
                ]));
  }
}

var $$Response = {
  decode: decode$6,
  encode: encode$6
};

exports.$$Request = $$Request;
exports.$$Event = $$Event;
exports.$$Response = $$Response;
/* decode Not a pure module */
