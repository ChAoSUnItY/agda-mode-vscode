// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Webapi__Dom__Element = require("bs-webapi/lib/js/src/Webapi/Webapi__Dom/Webapi__Dom__Element.js");
var Component$AgdaModeVscode = require("./Component/Component.bs.js");
var Emacs__Parser2$AgdaModeVscode = require("./Emacs/Emacs__Parser2.bs.js");

function Body(Props) {
  var body = Props.body;
  var onSubmit = Props.onSubmit;
  var onChange = Props.onChange;
  if (typeof body === "number") {
    return React.createElement(React.Fragment, undefined);
  }
  switch (body.tag | 0) {
    case /* Plain */0 :
        var items = [/* PlainText */Caml_chrome_debugger.variant("PlainText", 0, [Component$AgdaModeVscode.$$Text.parse(body[0])])];
        return React.createElement("div", {
                    className: "agda-mode-body"
                  }, React.createElement("ul", undefined, Belt_Array.mapWithIndex(items, (function (i, item) {
                              return React.createElement(Component$AgdaModeVscode.Item.make, {
                                          item: item,
                                          key: String(i)
                                        });
                            }))));
    case /* Emacs */1 :
        var body$1 = body[2];
        var items$1;
        switch (body[0]) {
          case /* Outputs */0 :
              items$1 = Emacs__Parser2$AgdaModeVscode.parseOutputs(body$1);
              break;
          case /* AllGoalsWarnings */1 :
              items$1 = Emacs__Parser2$AgdaModeVscode.parseAllGoalsWarnings(body[1], body$1);
              break;
          case /* GoalType */2 :
              items$1 = Emacs__Parser2$AgdaModeVscode.parseGoalType(body$1);
              break;
          case /* SearchAbout */3 :
              items$1 = Emacs__Parser2$AgdaModeVscode.parseSearchAbout(body$1);
              break;
          case /* Error */4 :
              items$1 = Emacs__Parser2$AgdaModeVscode.parseError(body$1);
              break;
          case /* Text */5 :
              items$1 = Emacs__Parser2$AgdaModeVscode.parseText(body$1);
              break;
          
        }
        return React.createElement("div", {
                    className: "agda-mode-body"
                  }, React.createElement("ul", undefined, Belt_Array.mapWithIndex(items$1, (function (i, item) {
                              return React.createElement(Component$AgdaModeVscode.Item.make, {
                                          item: item,
                                          key: String(i)
                                        });
                            }))));
    case /* Query */2 :
        var placeholder = Belt_Option.getWithDefault(body[0], "");
        var value = Belt_Option.getWithDefault(body[1], "");
        var onChange$1 = function ($$event) {
          return Curry._1(onChange, $$event.target.value);
        };
        var onSubmit$1 = function (_event) {
          return Curry._1(onSubmit, value);
        };
        return React.createElement("div", {
                    className: "agda-mode-query"
                  }, React.createElement("form", {
                        onSubmit: onSubmit$1
                      }, React.createElement("input", {
                            ref: (function (ref) {
                                setTimeout((function (param) {
                                        Belt_Option.forEach(Belt_Option.flatMap((ref == null) ? undefined : Caml_option.some(ref), Webapi__Dom__Element.asHtmlElement), (function (prim) {
                                                prim.focus();
                                                
                                              }));
                                        
                                      }), 100);
                                
                              }),
                            placeholder: placeholder,
                            type: "text",
                            value: value,
                            onChange: onChange$1
                          })));
    
  }
}

var make = Body;

exports.make = make;
/* react Not a pure module */
