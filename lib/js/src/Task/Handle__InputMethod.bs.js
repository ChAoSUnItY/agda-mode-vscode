// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Editor$AgdaModeVscode = require("../Editor.bs.js");
var EditorIM$AgdaModeVscode = require("../InputMethod/EditorIM.bs.js");
var PromptIM$AgdaModeVscode = require("../InputMethod/PromptIM.bs.js");

function handle(input) {
  if (typeof input === "number") {
    switch (input) {
      case /* Activate */0 :
          return {
                  hd: {
                    TAG: 8,
                    _0: (function (state) {
                        if (state.editorIM.activated) {
                          EditorIM$AgdaModeVscode.insertBackslash(state.editor);
                          EditorIM$AgdaModeVscode.deactivate(state.editorIM);
                          return $$Promise.resolved({
                                      hd: {
                                        TAG: 2,
                                        _0: {
                                          TAG: 2,
                                          _0: /* Deactivate */1,
                                          [Symbol.for("name")]: "InputMethod"
                                        },
                                        [Symbol.for("name")]: "ViewEvent"
                                      },
                                      tl: /* [] */0
                                    });
                        }
                        var $$document = state.editor.document;
                        var startingRanges = Belt_Array.map(Editor$AgdaModeVscode.$$Selection.getMany(state.editor), (function (range) {
                                return [
                                        $$document.offsetAt(range.start),
                                        $$document.offsetAt(range.end)
                                      ];
                              }));
                        EditorIM$AgdaModeVscode.activate(state.editorIM, state.editor, startingRanges);
                        return $$Promise.resolved({
                                    hd: {
                                      TAG: 2,
                                      _0: {
                                        TAG: 2,
                                        _0: /* Activate */0,
                                        [Symbol.for("name")]: "InputMethod"
                                      },
                                      [Symbol.for("name")]: "ViewEvent"
                                    },
                                    tl: /* [] */0
                                  });
                      }),
                    [Symbol.for("name")]: "WithStateP"
                  },
                  tl: /* [] */0
                };
      case /* Deactivate */1 :
          return {
                  hd: {
                    TAG: 7,
                    _0: (function (state) {
                        EditorIM$AgdaModeVscode.deactivate(state.editorIM);
                        return PromptIM$AgdaModeVscode.deactivate(state.promptIM);
                      }),
                    [Symbol.for("name")]: "WithState"
                  },
                  tl: {
                    hd: {
                      TAG: 2,
                      _0: {
                        TAG: 2,
                        _0: /* Deactivate */1,
                        [Symbol.for("name")]: "InputMethod"
                      },
                      [Symbol.for("name")]: "ViewEvent"
                    },
                    tl: /* [] */0
                  }
                };
      case /* MoveUp */2 :
          return {
                  hd: {
                    TAG: 7,
                    _0: (function (state) {
                        return EditorIM$AgdaModeVscode.moveUp(state.editorIM, state.editor);
                      }),
                    [Symbol.for("name")]: "WithState"
                  },
                  tl: /* [] */0
                };
      case /* MoveRight */3 :
          return {
                  hd: {
                    TAG: 7,
                    _0: (function (state) {
                        return EditorIM$AgdaModeVscode.moveRight(state.editorIM, state.editor);
                      }),
                    [Symbol.for("name")]: "WithState"
                  },
                  tl: /* [] */0
                };
      case /* MoveDown */4 :
          return {
                  hd: {
                    TAG: 7,
                    _0: (function (state) {
                        return EditorIM$AgdaModeVscode.moveDown(state.editorIM, state.editor);
                      }),
                    [Symbol.for("name")]: "WithState"
                  },
                  tl: /* [] */0
                };
      case /* MoveLeft */5 :
          return {
                  hd: {
                    TAG: 7,
                    _0: (function (state) {
                        return EditorIM$AgdaModeVscode.moveLeft(state.editorIM, state.editor);
                      }),
                    [Symbol.for("name")]: "WithState"
                  },
                  tl: /* [] */0
                };
      
    }
  } else {
    switch (input.TAG | 0) {
      case /* PromptChange */0 :
          var input$1 = input._0;
          return {
                  hd: {
                    TAG: 8,
                    _0: (function (state) {
                        var shouldActivate = input$1.endsWith("\\");
                        var deactivateEditorIM = function (param) {
                          EditorIM$AgdaModeVscode.deactivate(state.editorIM);
                          return {
                                  hd: {
                                    TAG: 2,
                                    _0: {
                                      TAG: 2,
                                      _0: /* Deactivate */1,
                                      [Symbol.for("name")]: "InputMethod"
                                    },
                                    [Symbol.for("name")]: "ViewEvent"
                                  },
                                  tl: /* [] */0
                                };
                        };
                        var activatePromptIM = function (param) {
                          var input$2 = input$1.substring(0, input$1.length - 1 | 0);
                          PromptIM$AgdaModeVscode.activate(state.promptIM, input$2);
                          return {
                                  hd: {
                                    TAG: 2,
                                    _0: {
                                      TAG: 2,
                                      _0: /* Activate */0,
                                      [Symbol.for("name")]: "InputMethod"
                                    },
                                    [Symbol.for("name")]: "ViewEvent"
                                  },
                                  tl: {
                                    hd: {
                                      TAG: 2,
                                      _0: {
                                        TAG: 1,
                                        _0: input$2,
                                        [Symbol.for("name")]: "PromptIMUpdate"
                                      },
                                      [Symbol.for("name")]: "ViewEvent"
                                    },
                                    tl: /* [] */0
                                  }
                                };
                        };
                        if (state.editorIM.activated) {
                          if (shouldActivate) {
                            return $$Promise.resolved(Belt_List.concatMany([
                                            deactivateEditorIM(undefined),
                                            activatePromptIM(undefined)
                                          ]));
                          } else {
                            return $$Promise.resolved({
                                        hd: {
                                          TAG: 2,
                                          _0: {
                                            TAG: 1,
                                            _0: input$1,
                                            [Symbol.for("name")]: "PromptIMUpdate"
                                          },
                                          [Symbol.for("name")]: "ViewEvent"
                                        },
                                        tl: /* [] */0
                                      });
                          }
                        }
                        if (!state.promptIM.activated) {
                          if (shouldActivate) {
                            return $$Promise.resolved(activatePromptIM(undefined));
                          } else {
                            return $$Promise.resolved({
                                        hd: {
                                          TAG: 2,
                                          _0: {
                                            TAG: 1,
                                            _0: input$1,
                                            [Symbol.for("name")]: "PromptIMUpdate"
                                          },
                                          [Symbol.for("name")]: "ViewEvent"
                                        },
                                        tl: /* [] */0
                                      });
                          }
                        }
                        var result = PromptIM$AgdaModeVscode.update(state.promptIM, input$1);
                        if (result !== undefined) {
                          return $$Promise.resolved({
                                      hd: {
                                        TAG: 2,
                                        _0: {
                                          TAG: 1,
                                          _0: result[0],
                                          [Symbol.for("name")]: "PromptIMUpdate"
                                        },
                                        [Symbol.for("name")]: "ViewEvent"
                                      },
                                      tl: {
                                        hd: {
                                          TAG: 0,
                                          _0: {
                                            TAG: 13,
                                            _0: result[1],
                                            [Symbol.for("name")]: "InputMethod"
                                          },
                                          [Symbol.for("name")]: "DispatchCommand"
                                        },
                                        tl: /* [] */0
                                      }
                                    });
                        } else {
                          return $$Promise.resolved({
                                      hd: {
                                        TAG: 0,
                                        _0: {
                                          TAG: 13,
                                          _0: /* Deactivate */1,
                                          [Symbol.for("name")]: "InputMethod"
                                        },
                                        [Symbol.for("name")]: "DispatchCommand"
                                      },
                                      tl: /* [] */0
                                    });
                        }
                      }),
                    [Symbol.for("name")]: "WithStateP"
                  },
                  tl: /* [] */0
                };
      case /* Update */1 :
          return {
                  hd: {
                    TAG: 2,
                    _0: {
                      TAG: 2,
                      _0: {
                        _0: input._0,
                        _1: input._1,
                        _2: input._2,
                        [Symbol.for("name")]: "Update"
                      },
                      [Symbol.for("name")]: "InputMethod"
                    },
                    [Symbol.for("name")]: "ViewEvent"
                  },
                  tl: /* [] */0
                };
      case /* InsertChar */2 :
          var $$char = input._0;
          return {
                  hd: {
                    TAG: 8,
                    _0: (function (state) {
                        if (state.editorIM.activated) {
                          EditorIM$AgdaModeVscode.insertChar(state.editor, $$char);
                          return $$Promise.resolved(/* [] */0);
                        }
                        if (!state.promptIM.activated) {
                          return $$Promise.resolved(/* [] */0);
                        }
                        var result = PromptIM$AgdaModeVscode.insertChar(state.promptIM, $$char);
                        if (result !== undefined) {
                          return $$Promise.resolved({
                                      hd: {
                                        TAG: 2,
                                        _0: {
                                          TAG: 1,
                                          _0: result[0],
                                          [Symbol.for("name")]: "PromptIMUpdate"
                                        },
                                        [Symbol.for("name")]: "ViewEvent"
                                      },
                                      tl: {
                                        hd: {
                                          TAG: 0,
                                          _0: {
                                            TAG: 13,
                                            _0: result[1],
                                            [Symbol.for("name")]: "InputMethod"
                                          },
                                          [Symbol.for("name")]: "DispatchCommand"
                                        },
                                        tl: /* [] */0
                                      }
                                    });
                        } else {
                          return $$Promise.resolved({
                                      hd: {
                                        TAG: 0,
                                        _0: {
                                          TAG: 13,
                                          _0: /* Deactivate */1,
                                          [Symbol.for("name")]: "InputMethod"
                                        },
                                        [Symbol.for("name")]: "DispatchCommand"
                                      },
                                      tl: /* [] */0
                                    });
                        }
                      }),
                    [Symbol.for("name")]: "WithStateP"
                  },
                  tl: /* [] */0
                };
      case /* ChooseSymbol */3 :
          var symbol = input._0;
          return {
                  hd: {
                    TAG: 8,
                    _0: (function (state) {
                        if (state.editorIM.activated) {
                          EditorIM$AgdaModeVscode.chooseSymbol(state.editorIM, state.editor, symbol);
                          return $$Promise.resolved(/* [] */0);
                        }
                        if (!state.promptIM.activated) {
                          return $$Promise.resolved(/* [] */0);
                        }
                        var match = state.promptIM.buffer.symbol;
                        if (match === undefined) {
                          return $$Promise.resolved(/* [] */0);
                        }
                        var init = state.promptIM.buffer;
                        state.promptIM.buffer = {
                          symbol: [
                            symbol,
                            match[1]
                          ],
                          tail: init.tail,
                          translation: init.translation,
                          candidateIndex: init.candidateIndex
                        };
                        return $$Promise.resolved({
                                    hd: {
                                      TAG: 2,
                                      _0: {
                                        TAG: 1,
                                        _0: symbol,
                                        [Symbol.for("name")]: "PromptIMUpdate"
                                      },
                                      [Symbol.for("name")]: "ViewEvent"
                                    },
                                    tl: /* [] */0
                                  });
                      }),
                    [Symbol.for("name")]: "WithStateP"
                  },
                  tl: /* [] */0
                };
      
    }
  }
}

exports.handle = handle;
/* Promise Not a pure module */
