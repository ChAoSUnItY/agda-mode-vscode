// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Vscode = require("vscode");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Js_string = require("rescript/lib/js/js_string.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Parser$AgdaModeVscode = require("./Parser/Parser.bs.js");

var inTestingMode = {
  contents: false
};

var agdaVersionInTestingMode = {
  contents: "agda"
};

var agdaPathInTestingMode = {
  contents: ""
};

var useAgdaLanguageServerInTestingMode = {
  contents: false
};

function setAgdaVersion(path) {
  if (inTestingMode.contents) {
    agdaVersionInTestingMode.contents = path;
    return $$Promise.resolved(undefined);
  } else {
    return Vscode.workspace.getConfiguration("agdaMode", undefined).update("connection.agdaVersion", path, 1, undefined);
  }
}

function getAgdaVersion(param) {
  if (inTestingMode.contents) {
    return agdaVersionInTestingMode.contents;
  } else {
    return Belt_Option.getWithDefault(Belt_Option.flatMap(Belt_Option.map(Vscode.workspace.getConfiguration("agdaMode", undefined).get("connection.agdaVersion"), (function (prim) {
                          return prim.trim();
                        })), (function (s) {
                      if (s === "") {
                        return ;
                      } else {
                        return s;
                      }
                    })), "agda");
  }
}

function setAgdaPath(path) {
  if (inTestingMode.contents) {
    agdaPathInTestingMode.contents = path;
    return $$Promise.resolved(undefined);
  } else {
    return Vscode.workspace.getConfiguration("agdaMode", undefined).update("connection.agdaPath", path, 1, undefined);
  }
}

function getAgdaPath(param) {
  if (inTestingMode.contents) {
    return agdaPathInTestingMode.contents;
  } else {
    return Belt_Option.mapWithDefault(Vscode.workspace.getConfiguration("agdaMode", undefined).get("connection.agdaPath"), "", (function (prim) {
                  return prim.trim();
                }));
  }
}

function getCommandLineOptions(param) {
  return Belt_Array.keep(Belt_Option.mapWithDefault(Vscode.workspace.getConfiguration("agdaMode", undefined).get("connection.commandLineOptions"), [], (function (s) {
                    return Js_string.split(" ", s.trim());
                  })), (function (s) {
                return s.trim() !== "";
              }));
}

function getUseAgdaLanguageServer(param) {
  if (inTestingMode.contents) {
    return useAgdaLanguageServerInTestingMode.contents;
  }
  var raw = Vscode.workspace.getConfiguration("agdaMode", undefined).get("connection.agdaLanguageServer");
  if (raw !== undefined && raw) {
    return true;
  } else {
    return false;
  }
}

function setUseAgdaLanguageServer(mode) {
  if (inTestingMode.contents) {
    useAgdaLanguageServerInTestingMode.contents = mode;
    return $$Promise.resolved(undefined);
  } else {
    return Vscode.workspace.getConfiguration("agdaMode", undefined).update("connection.agdaLanguageServer", mode, 1, undefined);
  }
}

function getAgdaLanguageServerPort(param) {
  var raw = Vscode.workspace.getConfiguration("agdaMode", undefined).get("connection.agdaLanguageServerPort");
  if (raw !== undefined) {
    return Caml_option.valFromOption(raw);
  } else {
    return 4096;
  }
}

function getAgdaLanguageServerCommandLineOptions(param) {
  return Belt_Array.keep(Belt_Option.mapWithDefault(Vscode.workspace.getConfiguration("agdaMode", undefined).get("connection.agdaLanguageServerOptions"), [], (function (s) {
                    return Js_string.split(" ", s.trim());
                  })), (function (s) {
                return s.trim() !== "";
              }));
}

var Connection = {
  agdaVersionInTestingMode: agdaVersionInTestingMode,
  agdaPathInTestingMode: agdaPathInTestingMode,
  useAgdaLanguageServerInTestingMode: useAgdaLanguageServerInTestingMode,
  setAgdaVersion: setAgdaVersion,
  getAgdaVersion: getAgdaVersion,
  setAgdaPath: setAgdaPath,
  getAgdaPath: getAgdaPath,
  getCommandLineOptions: getCommandLineOptions,
  getUseAgdaLanguageServer: getUseAgdaLanguageServer,
  setUseAgdaLanguageServer: setUseAgdaLanguageServer,
  getAgdaLanguageServerPort: getAgdaLanguageServerPort,
  getAgdaLanguageServerCommandLineOptions: getAgdaLanguageServerCommandLineOptions
};

function setPanelMountingPosition(mountAt) {
  return Vscode.workspace.getConfiguration("agdaMode", undefined).update("view.panelMountPosition", mountAt ? "right" : "bottom", 1, undefined);
}

function getPanelMountingPosition(param) {
  var result = Vscode.workspace.getConfiguration("agdaMode", undefined).get("view.panelMountPosition");
  if (result === "right") {
    return /* Right */1;
  } else {
    return /* Bottom */0;
  }
}

var View = {
  setPanelMountingPosition: setPanelMountingPosition,
  getPanelMountingPosition: getPanelMountingPosition
};

function getLibraryPath(param) {
  var raw = Belt_Option.getWithDefault(Vscode.workspace.getConfiguration("agdaMode", undefined).get("libraryPath"), "");
  return Belt_Array.map(Belt_Array.keep(Js_string.split(",", raw), (function (x) {
                    return x !== "";
                  })), Parser$AgdaModeVscode.filepath);
}

function getHighlightingMethod(param) {
  var raw = Vscode.workspace.getConfiguration("agdaMode", undefined).get("highlighting.IPC");
  if (raw === "Standard input/output") {
    return true;
  } else {
    return false;
  }
}

function getHighlightWithThemeColors(param) {
  var raw = Vscode.workspace.getConfiguration("agdaMode", undefined).get("highlighting.getHighlightWithThemeColors");
  if (raw !== undefined && !raw) {
    return false;
  } else {
    return true;
  }
}

var Highlighting = {
  getHighlightingMethod: getHighlightingMethod,
  getHighlightWithThemeColors: getHighlightWithThemeColors
};

function getBackend(param) {
  var raw = Vscode.workspace.getConfiguration("agdaMode", undefined).get("backend");
  if (raw === undefined) {
    return "GHCNoMain";
  }
  switch (raw) {
    case "GHC" :
        return "GHCNoMain";
    case "LaTeX" :
        return "LaTeX";
    case "QuickLaTeX" :
        return "QuickLaTeX";
    default:
      return "GHCNoMain";
  }
}

function getEnable(param) {
  var raw = Vscode.workspace.getConfiguration("agdaMode", undefined).get("inputMethod.enable");
  if (raw !== undefined && !raw) {
    return false;
  } else {
    return true;
  }
}

function getActivationKey(param) {
  var raw = Vscode.workspace.getConfiguration("agdaMode", undefined).get("inputMethod.activationKey");
  if (raw === undefined) {
    return "\\";
  }
  var key = Js_string.substrAtMost(0, 1, Caml_option.valFromOption(raw));
  if (key === "") {
    return "\\";
  } else {
    return key;
  }
}

var InputMethod = {
  getEnable: getEnable,
  getActivationKey: getActivationKey
};

var VSRange;

exports.VSRange = VSRange;
exports.inTestingMode = inTestingMode;
exports.Connection = Connection;
exports.View = View;
exports.getLibraryPath = getLibraryPath;
exports.Highlighting = Highlighting;
exports.getBackend = getBackend;
exports.InputMethod = InputMethod;
/* vscode Not a pure module */
