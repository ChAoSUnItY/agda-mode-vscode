// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Process = require("process");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Util$AgdaModeVscode = require("../Util/Util.bs.js");
var Config$AgdaModeVscode = require("../Config.bs.js");
var Source$LanguageServerMule = require("language-server-mule/lib/js/src/Source.bs.js");

function chooseFromReleases(releases) {
  var chooseRelease = function (releases) {
    console.log("releases", Belt_Array.map(releases, (function (release) {
                return release.tagName;
              })));
    var matched = Belt_Array.keep(releases, (function (release) {
            var x = release.tagName;
            var lower = Util$AgdaModeVscode.Version.compare(x, "v0.1.0.0");
            var upper = Util$AgdaModeVscode.Version.compare(x, "v0.2.0.0");
            if (lower === /* EQ */1 || lower === /* GT */2) {
              return upper === /* LT */0;
            } else {
              return false;
            }
          }));
    console.log("matched", matched);
    return Belt_Array.get(matched, 0);
  };
  var chooseAsset = function (release) {
    var os = Process.platform;
    var expectedSuffix;
    switch (os) {
      case "darwin" :
          expectedSuffix = "macos.zip";
          break;
      case "linux" :
          expectedSuffix = "ubuntu.zip";
          break;
      case "win32" :
          expectedSuffix = "windows.zip";
          break;
      default:
        expectedSuffix = undefined;
    }
    return Belt_Option.map(Belt_Option.flatMap(expectedSuffix, (function (suffix) {
                      var matched = Belt_Array.keep(release.assets, (function (asset) {
                              return asset.name.endsWith(suffix);
                            }));
                      return Belt_Array.get(matched, 0);
                    })), (function (asset) {
                  return {
                          release: release,
                          asset: asset,
                          srcUrl: asset.url,
                          fileName: release.tagName + "-" + os
                        };
                }));
  };
  return Belt_Option.flatMap(chooseRelease(releases), chooseAsset);
}

function probeLSP(globalStoragePath, onDownload) {
  var port = Config$AgdaModeVscode.Connection.getAgdaLanguageServerPort(undefined);
  return Source$LanguageServerMule.Module.searchUntilSuccess([
              {
                TAG: 2,
                _0: port,
                _1: "localhost",
                [Symbol.for("name")]: "FromTCP"
              },
              {
                TAG: 1,
                _0: "als",
                [Symbol.for("name")]: "FromCommand"
              }
            ]);
}

function probeEmacs(param) {
  var storedPath = Config$AgdaModeVscode.Connection.getAgdaPath(undefined);
  return Source$LanguageServerMule.Module.searchUntilSuccess([
              {
                TAG: 0,
                _0: storedPath,
                [Symbol.for("name")]: "FromFile"
              },
              {
                TAG: 1,
                _0: "agda",
                [Symbol.for("name")]: "FromCommand"
              }
            ]);
}

var Version;

exports.Version = Version;
exports.chooseFromReleases = chooseFromReleases;
exports.probeLSP = probeLSP;
exports.probeEmacs = probeEmacs;
/* process Not a pure module */
