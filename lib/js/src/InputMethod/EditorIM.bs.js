// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Vscode = require("vscode");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");
var Chan$AgdaModeVscode = require("../Util/Chan.bs.js");
var Util$AgdaModeVscode = require("../Util/Util.bs.js");
var Buffer$AgdaModeVscode = require("./Buffer.bs.js");
var Editor$AgdaModeVscode = require("../Editor.bs.js");

function make(param) {
  return {
          isBusy: false,
          backlog: []
        };
}

function isBusy(self) {
  return self.isBusy;
}

function lock(self) {
  self.isBusy = true;
  
}

function unlock(self, callback) {
  self.isBusy = false;
  Belt_Array.forEach(self.backlog, (function (param) {
          return Curry._1(param[1], Curry._1(callback, param[0]));
        }));
  self.backlog = [];
  
}

function validate(self, callback, positions) {
  if (!self.isBusy) {
    return $$Promise.resolved(Curry._1(callback, positions));
  }
  var match = $$Promise.pending(undefined);
  self.backlog.push([
        positions,
        match[1]
      ]);
  return match[0];
}

var CursorValidator = {
  make: make,
  isBusy: isBusy,
  lock: lock,
  unlock: unlock,
  validate: validate
};

function log(param) {
  
}

function toString(self) {
  return "(" + String(self.interval[0]) + ", " + (String(self.interval[1]) + ")");
}

function withIn(instance, offset) {
  var match = instance.interval;
  if (match[0] <= offset) {
    return offset <= match[1];
  } else {
    return false;
  }
}

function destroy(instance) {
  Belt_Array.forEach(instance.decoration, Editor$AgdaModeVscode.Decoration.destroy);
  instance.decoration = [];
  
}

function validateCursorPositions(self, $$document, points) {
  var offsets = Belt_Array.map(points, (function (param) {
          return $$document.offsetAt(param);
        }));
  Curry._1(log, "\n### Cursors  : " + (Util$AgdaModeVscode.Pretty.array(Belt_Array.map(offsets.sort(Caml_primitive.caml_int_compare), (function (prim) {
                    return String(prim);
                  }))) + ("\n### Instances: " + Util$AgdaModeVscode.Pretty.array(Belt_Array.map(self.instances, toString)))));
  self.instances = Belt_Array.keep(self.instances, (function (instance) {
          var survived = Belt_Array.some(offsets, (function (param) {
                  return withIn(instance, param);
                }));
          if (!survived) {
            destroy(instance);
          }
          return survived;
        }));
  if (self.instances.length === 0) {
    Chan$AgdaModeVscode.emit(self.chanTest, /* Deactivate */2);
    return true;
  } else {
    return false;
  }
}

function toRewrites(instances, modify) {
  var accum = {
    contents: 0
  };
  return Belt_Array.keepMap(instances, (function (instance) {
                var match = instance.interval;
                var end_ = match[1];
                var start = match[0];
                instance.interval = [
                  start + accum.contents | 0,
                  end_ + accum.contents | 0
                ];
                return Belt_Option.map(Curry._1(modify, instance), (function (replacement) {
                              var delta = replacement.length - (end_ - start | 0) | 0;
                              accum.contents = accum.contents + delta | 0;
                              return {
                                      intervalBefore: instance.interval,
                                      intervalAfter: [
                                        instance.interval[0],
                                        instance.interval[1] + delta | 0
                                      ],
                                      text: replacement,
                                      instance: instance
                                    };
                            }));
              }));
}

function applyRewrites(self, editor, rewrites) {
  var $$document = editor.document;
  self.cursorValidator.isBusy = true;
  var replacements = Belt_Array.map(rewrites, (function (param) {
          var intervalBefore = param.intervalBefore;
          var editorRange = new Vscode.Range($$document.positionAt(intervalBefore[0]), $$document.positionAt(intervalBefore[1]));
          return [
                  editorRange,
                  param.text
                ];
        }));
  return $$Promise.map(Editor$AgdaModeVscode.$$Text.batchReplace($$document, replacements), (function (param) {
                Belt_Array.forEach(rewrites, (function (rewrite) {
                        return Belt_Option.forEach(rewrite.instance, (function (instance) {
                                      instance.interval = rewrite.intervalAfter;
                                      Belt_Array.forEach(instance.decoration, Editor$AgdaModeVscode.Decoration.destroy);
                                      instance.decoration = [];
                                      var $$document = editor.document;
                                      var match = instance.interval;
                                      var start = $$document.positionAt(match[0]);
                                      var end_ = $$document.positionAt(match[1]);
                                      var range = new Vscode.Range(start, end_);
                                      instance.decoration = [Editor$AgdaModeVscode.Decoration.underlineText(editor, range)];
                                      
                                    }));
                      }));
                Chan$AgdaModeVscode.emit(self.chanTest, /* Change */0);
                unlock(self.cursorValidator, (function (param) {
                        return validateCursorPositions(self, $$document, param);
                      }));
                return Belt_Option.map(Belt_Array.get(self.instances, 0), (function (instance) {
                              return {
                                      TAG: 1,
                                      _0: Buffer$AgdaModeVscode.toSequence(instance.buffer),
                                      _1: instance.buffer.translation,
                                      _2: instance.buffer.candidateIndex,
                                      [Symbol.for("name")]: "Update"
                                    };
                            }));
              }));
}

function updateInstanceOffsets(instances, changes) {
  var changes$1 = changes.sort(function (x, y) {
        return Caml_primitive.caml_int_compare(x.offset, y.offset);
      });
  var go = function (_accum, _x) {
    while(true) {
      var x = _x;
      var accum = _accum;
      var match = x[0];
      if (match) {
        var match$1 = x[1];
        if (!match$1) {
          return /* [] */0;
        }
        var is = match$1.tl;
        var instance = match$1.hd;
        var cs = match.tl;
        var change = match.hd;
        var match$2 = instance.interval;
        var end_ = match$2[1];
        var start = match$2[0];
        var delta = change.insertedText.length - change.replacedTextLength | 0;
        if (withIn(instance, change.offset)) {
          instance.interval = [
            accum + start | 0,
            (accum + end_ | 0) + delta | 0
          ];
          return {
                  hd: [
                    instance,
                    {
                      offset: change.offset + accum | 0,
                      insertedText: change.insertedText,
                      replacedTextLength: change.replacedTextLength
                    }
                  ],
                  tl: go(accum + delta | 0, [
                        cs,
                        is
                      ])
                };
        }
        if (change.offset < instance.interval[0]) {
          _x = [
            cs,
            {
              hd: instance,
              tl: is
            }
          ];
          _accum = accum + delta | 0;
          continue ;
        }
        instance.interval = [
          accum + start | 0,
          accum + end_ | 0
        ];
        return {
                hd: [
                  instance,
                  undefined
                ],
                tl: go(accum, [
                      {
                        hd: change,
                        tl: cs
                      },
                      is
                    ])
              };
      }
      var match$3 = x[1];
      if (match$3) {
        return Belt_List.map({
                    hd: match$3.hd,
                    tl: match$3.tl
                  }, (function (i) {
                      return [
                              i,
                              undefined
                            ];
                    }));
      } else {
        return /* [] */0;
      }
    };
  };
  var instancesWithChanges = Belt_List.toArray(go(0, [
            Belt_List.fromArray(changes$1),
            Belt_List.fromArray(instances)
          ]));
  var rewrites = [];
  var accum = {
    contents: 0
  };
  var instances$1 = Belt_Array.keepMap(instancesWithChanges, (function (param) {
          var change = param[1];
          var instance = param[0];
          if (change === undefined) {
            return instance;
          }
          var match = Buffer$AgdaModeVscode.update(instance.buffer, instance.interval[0], change);
          var buffer = match[0];
          Belt_Option.forEach(match[1], (function (text) {
                  var match = instance.interval;
                  var end_ = match[1];
                  var start = match[0];
                  var delta = text.length - (end_ - start | 0) | 0;
                  rewrites.push({
                        intervalBefore: [
                          start + accum.contents | 0,
                          end_ + accum.contents | 0
                        ],
                        intervalAfter: [
                          start + accum.contents | 0,
                          (end_ + accum.contents | 0) + delta | 0
                        ],
                        text: text,
                        instance: buffer.translation.further ? instance : undefined
                      });
                  accum.contents = accum.contents + delta | 0;
                  
                }));
          if (buffer.translation.further) {
            instance.buffer = buffer;
            return instance;
          } else {
            destroy(instance);
            return ;
          }
        }));
  return [
          instances$1,
          rewrites
        ];
}

function activate(self, editor, cursors) {
  self.activated = true;
  Chan$AgdaModeVscode.emit(self.chanTest, /* Activate */1);
  Vscode.commands.executeCommand("setContext", "agdaModeTyping", true);
  self.instances = Belt_Array.map(cursors.sort(function (x, y) {
            return Caml_primitive.caml_int_compare(x[0], y[0]);
          }), (function (param) {
          var $$document = editor.document;
          var start = $$document.positionAt(param[0]);
          var end_ = $$document.positionAt(param[1]);
          return {
                  interval: param,
                  decoration: [Editor$AgdaModeVscode.Decoration.underlineText(editor, new Vscode.Range(start, end_))],
                  buffer: Buffer$AgdaModeVscode.make(undefined)
                };
        }));
  
}

function handleTextEditorSelectionChangeEvent($$event) {
  return Belt_Array.map($$event.selections, (function (prim) {
                return prim.anchor;
              }));
}

function handleTextDocumentChangeEvent(editor, $$event) {
  var fileName = editor.document.fileName;
  var eventFileName = $$event.document.fileName;
  if (fileName === eventFileName) {
    return Belt_Array.map($$event.contentChanges, (function (change) {
                  return {
                          offset: change.rangeOffset,
                          insertedText: change.text,
                          replacedTextLength: change.rangeLength
                        };
                }));
  } else {
    return [];
  }
}

function changeSelection(self, editor, positions) {
  if (!self.activated) {
    return $$Promise.resolved(undefined);
  }
  var partial_arg = editor.document;
  return $$Promise.map(validate(self.cursorValidator, (function (param) {
                    return validateCursorPositions(self, partial_arg, param);
                  }), positions), (function (shouldDeactivate) {
                if (shouldDeactivate) {
                  return /* Deactivate */1;
                }
                
              }));
}

function changeDocument(self, editor, changes) {
  if (!(self.activated && !self.cursorValidator.isBusy)) {
    return $$Promise.resolved(undefined);
  }
  var match = updateInstanceOffsets(self.instances, changes);
  self.instances = match[0];
  return applyRewrites(self, editor, match[1]);
}

function deactivate(self) {
  Vscode.commands.executeCommand("setContext", "agdaModeTyping", false);
  Chan$AgdaModeVscode.emit(self.chanTest, /* Deactivate */2);
  Belt_Array.forEach(self.instances, destroy);
  self.instances = [];
  self.activated = false;
  
}

function make$1(chanTest) {
  return {
          instances: [],
          activated: false,
          cursorValidator: {
            isBusy: false,
            backlog: []
          },
          chanTest: chanTest
        };
}

function isActivated(self) {
  return self.activated;
}

function moveUp(self, editor) {
  var rewrites = toRewrites(self.instances, (function (instance) {
          instance.buffer = Buffer$AgdaModeVscode.moveUp(instance.buffer);
          return Belt_Array.get(instance.buffer.translation.candidateSymbols, instance.buffer.candidateIndex);
        }));
  return applyRewrites(self, editor, rewrites);
}

function moveRight(self, editor) {
  var rewrites = toRewrites(self.instances, (function (instance) {
          instance.buffer = Buffer$AgdaModeVscode.moveRight(instance.buffer);
          return Belt_Array.get(instance.buffer.translation.candidateSymbols, instance.buffer.candidateIndex);
        }));
  return applyRewrites(self, editor, rewrites);
}

function moveDown(self, editor) {
  var rewrites = toRewrites(self.instances, (function (instance) {
          instance.buffer = Buffer$AgdaModeVscode.moveDown(instance.buffer);
          return Belt_Array.get(instance.buffer.translation.candidateSymbols, instance.buffer.candidateIndex);
        }));
  return applyRewrites(self, editor, rewrites);
}

function moveLeft(self, editor) {
  var rewrites = toRewrites(self.instances, (function (instance) {
          instance.buffer = Buffer$AgdaModeVscode.moveLeft(instance.buffer);
          return Belt_Array.get(instance.buffer.translation.candidateSymbols, instance.buffer.candidateIndex);
        }));
  return applyRewrites(self, editor, rewrites);
}

function chooseSymbol(self, editor, symbol) {
  var rewrites = toRewrites(self.instances, (function (param) {
          return symbol;
        }));
  return applyRewrites(self, editor, rewrites);
}

function insertBackslash(editor) {
  return Belt_Array.forEach(Editor$AgdaModeVscode.Cursor.getMany(editor), (function (point) {
                Editor$AgdaModeVscode.$$Text.insert(editor.document, point, "\\");
                
              }));
}

function insertChar(editor, $$char) {
  var $$char$1 = $$char.charAt(0);
  return Belt_Array.forEach(Editor$AgdaModeVscode.Cursor.getMany(editor), (function (point) {
                Editor$AgdaModeVscode.$$Text.insert(editor.document, point, $$char$1);
                
              }));
}

var Module = {
  make: make$1,
  activate: activate,
  deactivate: deactivate,
  isActivated: isActivated,
  handleTextEditorSelectionChangeEvent: handleTextEditorSelectionChangeEvent,
  handleTextDocumentChangeEvent: handleTextDocumentChangeEvent,
  changeSelection: changeSelection,
  changeDocument: changeDocument,
  chooseSymbol: chooseSymbol,
  moveUp: moveUp,
  moveRight: moveRight,
  moveDown: moveDown,
  moveLeft: moveLeft,
  insertBackslash: insertBackslash,
  insertChar: insertChar
};

exports.CursorValidator = CursorValidator;
exports.Module = Module;
exports.make = make$1;
exports.activate = activate;
exports.deactivate = deactivate;
exports.isActivated = isActivated;
exports.handleTextEditorSelectionChangeEvent = handleTextEditorSelectionChangeEvent;
exports.handleTextDocumentChangeEvent = handleTextDocumentChangeEvent;
exports.changeSelection = changeSelection;
exports.changeDocument = changeDocument;
exports.chooseSymbol = chooseSymbol;
exports.moveUp = moveUp;
exports.moveRight = moveRight;
exports.moveDown = moveDown;
exports.moveLeft = moveLeft;
exports.insertBackslash = insertBackslash;
exports.insertChar = insertChar;
/* vscode Not a pure module */
