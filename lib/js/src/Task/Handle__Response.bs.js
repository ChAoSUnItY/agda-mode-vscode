// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Util = require("util");
var Curry = require("bs-platform/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Task$AgdaModeVscode = require("./Task.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Parser$AgdaModeVscode = require("../Parser.bs.js");
var Highlighting$AgdaModeVscode = require("../Highlighting.bs.js");

function Impl(Editor) {
  var Task = Task$AgdaModeVscode.Impl(Editor);
  var handle = function (payload) {
    if (typeof payload === "number") {
      return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                Curry._2(Task.displaySuccess, "Compilation Done!", undefined),
                /* [] */0
              ]);
    }
    switch (payload.tag | 0) {
      case /* Constraints */0 :
          var payload$1 = payload[0];
          if (payload$1 !== undefined) {
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      Curry._2(Task.display, "Constraints", payload$1),
                      /* [] */0
                    ]);
          } else {
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      Curry._2(Task.display, "No Constraints", undefined),
                      /* [] */0
                    ]);
          }
      case /* AllGoalsWarnings */1 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.display, payload[0], payload[1]),
                    /* [] */0
                  ]);
      case /* Time */2 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.display, "Time", payload[0]),
                    /* [] */0
                  ]);
      case /* Error */3 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.displayError, "Error", payload[0]),
                    /* [] */0
                  ]);
      case /* Intro */4 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.display, "Intro", payload[0]),
                    /* [] */0
                  ]);
      case /* Auto */5 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.displaySuccess, "Auto", payload[0]),
                    /* [] */0
                  ]);
      case /* ModuleContents */6 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.display, "Module Contents", payload[0]),
                    /* [] */0
                  ]);
      case /* SearchAbout */7 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.display, "Search About", payload[0]),
                    /* [] */0
                  ]);
      case /* WhyInScope */8 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.display, "Scope info", payload[0]),
                    /* [] */0
                  ]);
      case /* NormalForm */9 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.display, "Normal form", payload[0]),
                    /* [] */0
                  ]);
      case /* GoalType */10 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.display, "Goal Type", payload[0]),
                    /* [] */0
                  ]);
      case /* CurrentGoal */11 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.display, "Current goal", payload[0]),
                    /* [] */0
                  ]);
      case /* InferredType */12 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.display, "Inferred type", payload[0]),
                    /* [] */0
                  ]);
      case /* Context */13 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.display, "Context", payload[0]),
                    /* [] */0
                  ]);
      case /* HelperFunction */14 :
          var payload$2 = payload[0];
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* WithStateP */Caml_chrome_debugger.variant("WithStateP", 8, [(function (param) {
                            return $$Promise.map(Curry._1(Editor.copyToClipboard, payload$2), (function (param) {
                                          return /* [] */0;
                                        }));
                          })]),
                    /* :: */Caml_chrome_debugger.simpleVariant("::", [
                        Curry._2(Task.display, "Helper function (copied to clipboard)", payload$2),
                        /* [] */0
                      ])
                  ]);
      case /* Version */15 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.display, "Version", payload[0]),
                    /* [] */0
                  ]);
      
    }
  };
  var DisplayInfo = {
    handle: handle
  };
  var handle$1 = function (response) {
    if (typeof response === "number") {
      return /* [] */0;
    }
    switch (response.tag | 0) {
      case /* HighlightingInfoDirect */0 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* AddHighlightings */Caml_chrome_debugger.variant("AddHighlightings", 4, [response[1]]),
                    /* [] */0
                  ]);
      case /* HighlightingInfoIndirect */1 :
          var filepath = response[0];
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* WithStateP */Caml_chrome_debugger.variant("WithStateP", 8, [(function (param) {
                            var readFile = Util.promisify((function (prim, prim$1) {
                                    Fs.readFile(prim, prim$1);
                                    
                                  }));
                            return $$Promise.map($$Promise.Js.toResult($$Promise.Js.fromBsPromise(readFile(filepath))), (function (content) {
                                          if (content.tag) {
                                            return /* [] */0;
                                          }
                                          var expressions = Parser$AgdaModeVscode.SExpression.parse(content[0].toString());
                                          Belt_Array.keepMap(expressions, (function (error) {
                                                  if (error.tag) {
                                                    return error[0];
                                                  }
                                                  
                                                }));
                                          var annotations = Belt_Array.concatMany(Belt_Array.keepMap(expressions, (function (param) {
                                                      if (param.tag) {
                                                        return ;
                                                      }
                                                      var xs = param[0];
                                                      if (xs.tag) {
                                                        return Highlighting$AgdaModeVscode.parseIndirectHighlightings(xs[0]);
                                                      } else {
                                                        return [];
                                                      }
                                                    })));
                                          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                    /* AddHighlightings */Caml_chrome_debugger.variant("AddHighlightings", 4, [annotations]),
                                                    /* [] */0
                                                  ]);
                                        }));
                          })]),
                    /* [] */0
                  ]);
      case /* Status */2 :
          return /* [] */0;
      case /* JumpToError */3 :
          var offset = response[1];
          var filepath$1 = response[0];
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* WithStateP */Caml_chrome_debugger.variant("WithStateP", 8, [(function (state) {
                            var path = Curry._1(Editor.getFileName, state.editor);
                            if (path !== undefined && path === filepath$1) {
                              return $$Promise.resolved(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                            /* Goal */Caml_chrome_debugger.variant("Goal", 6, [/* SetCursor */Caml_chrome_debugger.variant("SetCursor", 2, [offset - 1 | 0])]),
                                            /* [] */0
                                          ]));
                            } else {
                              return $$Promise.resolved(/* [] */0);
                            }
                          })]),
                    /* [] */0
                  ]);
      case /* InteractionPoints */4 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* Goal */Caml_chrome_debugger.variant("Goal", 6, [/* Instantiate */Caml_chrome_debugger.variant("Instantiate", 0, [response[0]])]),
                    /* :: */Caml_chrome_debugger.simpleVariant("::", [
                        /* Goal */Caml_chrome_debugger.variant("Goal", 6, [/* RestoreCursor */4]),
                        /* [] */0
                      ])
                  ]);
      case /* GiveAction */5 :
          var give = response[1];
          var index = response[0];
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* WithStateP */Caml_chrome_debugger.variant("WithStateP", 8, [(function (state) {
                            var found = Belt_Array.keep(state.goals, (function (goal) {
                                    return goal.index === index;
                                  }));
                            var goal = Belt_Array.get(found, 0);
                            if (goal === undefined) {
                              return $$Promise.resolved(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                            Curry._2(Task.displayError, "Error: Give failed", "Cannot find goal #" + String(index)),
                                            /* [] */0
                                          ]));
                            }
                            var tasks;
                            if (typeof give === "number") {
                              tasks = give !== 0 ? /* [] */0 : /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                    /* Goal */Caml_chrome_debugger.variant("Goal", 6, [/* Modify */Caml_chrome_debugger.variant("Modify", 1, [
                                            goal,
                                            (function (content) {
                                                return "(" + (content + ")");
                                              })
                                          ])]),
                                    /* [] */0
                                  ]);
                            } else {
                              var content = give[0];
                              tasks = /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                  /* Goal */Caml_chrome_debugger.variant("Goal", 6, [/* Modify */Caml_chrome_debugger.variant("Modify", 1, [
                                          goal,
                                          (function (param) {
                                              return content.replace(/\\n/g, "\n");
                                            })
                                        ])]),
                                  /* [] */0
                                ]);
                            }
                            return $$Promise.resolved(Belt_List.concatMany([
                                            tasks,
                                            /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                /* Goal */Caml_chrome_debugger.variant("Goal", 6, [/* RemoveBoundaryAndDestroy */Caml_chrome_debugger.variant("RemoveBoundaryAndDestroy", 3, [goal])]),
                                                /* [] */0
                                              ])
                                          ]));
                          })]),
                    /* [] */0
                  ]);
      case /* MakeCase */6 :
          var lines = response[1];
          var makeCaseType = response[0];
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* Goal */Caml_chrome_debugger.variant("Goal", 6, [/* LocalOrGlobal */Caml_chrome_debugger.variant("LocalOrGlobal", 6, [
                            (function (goal) {
                                if (makeCaseType) {
                                  return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                            /* Goal */Caml_chrome_debugger.variant("Goal", 6, [/* ReplaceWithLambda */Caml_chrome_debugger.variant("ReplaceWithLambda", 5, [
                                                    goal,
                                                    lines
                                                  ])]),
                                            /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                /* DispatchCommand */Caml_chrome_debugger.variant("DispatchCommand", 0, [/* Load */0]),
                                                /* [] */0
                                              ])
                                          ]);
                                } else {
                                  return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                            /* Goal */Caml_chrome_debugger.variant("Goal", 6, [/* ReplaceWithLines */Caml_chrome_debugger.variant("ReplaceWithLines", 4, [
                                                    goal,
                                                    lines
                                                  ])]),
                                            /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                /* DispatchCommand */Caml_chrome_debugger.variant("DispatchCommand", 0, [/* Load */0]),
                                                /* [] */0
                                              ])
                                          ]);
                                }
                              }),
                            /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                /* Error */Caml_chrome_debugger.variant("Error", 5, [/* OutOfGoal */1]),
                                /* [] */0
                              ])
                          ])]),
                    /* [] */0
                  ]);
      case /* SolveAll */7 :
          var solutions = response[0];
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* WithStateP */Caml_chrome_debugger.variant("WithStateP", 8, [(function (state) {
                            var solveOne = function (param) {
                              var solution = param[1];
                              var index = param[0];
                              var goals = Belt_Array.keep(state.goals, (function (goal) {
                                      return goal.index === index;
                                    }));
                              var goal = Belt_Array.get(goals, 0);
                              if (goal !== undefined) {
                                return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                          /* Goal */Caml_chrome_debugger.variant("Goal", 6, [/* Modify */Caml_chrome_debugger.variant("Modify", 1, [
                                                  goal,
                                                  (function (param) {
                                                      return solution;
                                                    })
                                                ])]),
                                          /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                              /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 1, [/* Give */Caml_chrome_debugger.variant("Give", 3, [goal])]),
                                              /* [] */0
                                            ])
                                        ]);
                              } else {
                                return /* [] */0;
                              }
                            };
                            var tasks = Belt_List.concatMany(Belt_Array.map(solutions, solveOne));
                            var size = solutions.length;
                            var after = size === 0 ? /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                  Curry._2(Task.displayError, "No solutions found", undefined),
                                  /* [] */0
                                ]) : /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                  Curry._2(Task.displaySuccess, String(size) + " goals solved", undefined),
                                  /* [] */0
                                ]);
                            return $$Promise.resolved(Belt_List.concat(tasks, after));
                          })]),
                    /* [] */0
                  ]);
      case /* DisplayInfo */8 :
          return handle(response[0]);
      case /* RunningInfo */9 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.display, "Type-checking", response[1]),
                    /* [] */0
                  ]);
      
    }
  };
  return {
          Task: Task,
          DisplayInfo: DisplayInfo,
          handle: handle$1
        };
}

exports.Impl = Impl;
/* fs Not a pure module */
