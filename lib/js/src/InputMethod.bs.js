// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Task$AgdaModeVscode = require("./Task/Task.bs.js");
var Util$AgdaModeVscode = require("./Util/Util.bs.js");

function Impl(Editor) {
  var Task = Task$AgdaModeVscode.Impl(Editor);
  var make = function (editor, offset) {
    var point = Curry._2(Editor.pointAtOffset, editor, offset);
    return {
            range: /* tuple */[
              offset,
              offset
            ],
            decoration: Curry._2(Editor.Decoration.underlineText, editor, Curry._2(Editor.$$Range.make, point, point))
          };
  };
  var withIn = function (instance, offset) {
    var match = instance.range;
    if (match[0] <= offset) {
      return offset <= match[1];
    } else {
      return false;
    }
  };
  var destroy = function (instance) {
    console.log("KILL");
    return Belt_Array.forEach(instance.decoration, Editor.Decoration.destroy);
  };
  var Instance = {
    make: make,
    withIn: withIn,
    destroy: destroy
  };
  var activate = function (editor, offsets) {
    var instances = {
      contents: Belt_Array.map(offsets, (function (param) {
              return make(editor, param);
            }))
    };
    var editorChangeHandle = {
      contents: undefined
    };
    var cursorChangeHandle = {
      contents: undefined
    };
    var checkIfEveryonesAlive = function (param) {
      if (instances.contents.length === 0) {
        console.log("ALL DEAD");
        Belt_Option.forEach(editorChangeHandle.contents, Editor.Disposable.dispose);
        return Belt_Option.forEach(cursorChangeHandle.contents, Editor.Disposable.dispose);
      }
      
    };
    var editorChangelistener = function (change) {
      instances.contents = Belt_Array.map(instances.contents, (function (instance) {
              var match = instance.range;
              if (withIn(instance, change.offset)) {
                console.log(change);
                instance.range = /* tuple */[
                  match[0],
                  (match[1] + change.insertText.length | 0) - change.replaceLength | 0
                ];
              }
              return instance;
            }));
      
    };
    var cursorChangelistener = function (points) {
      checkIfEveryonesAlive(undefined);
      var offsets = Belt_Array.map(points, Curry._1(Editor.offsetAtPoint, editor));
      console.log(Util$AgdaModeVscode.Pretty.array(Belt_Array.map(offsets, (function (prim) {
                      return String(prim);
                    }))));
      instances.contents = Belt_Array.keep(instances.contents, (function (instance) {
              var survived = Belt_Array.some(offsets, (function (param) {
                      return withIn(instance, param);
                    }));
              if (!survived) {
                destroy(instance);
              }
              return survived;
            }));
      
    };
    editorChangeHandle.contents = Caml_option.some(Curry._1(Editor.onChange, (function (changes) {
                checkIfEveryonesAlive(undefined);
                return Belt_Array.forEach(changes, editorChangelistener);
              })));
    cursorChangeHandle.contents = Caml_option.some(Curry._1(Editor.onChangeCursorPosition, cursorChangelistener));
    
  };
  return {
          Task: Task,
          Instance: Instance,
          activate: activate
        };
}

exports.Impl = Impl;
/* Task-AgdaModeVscode Not a pure module */
