// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Body$AgdaModeVscode = require("./Body.bs.js");
var Hook$AgdaModeVscode = require("./Hook.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Header$AgdaModeVscode = require("./Header.bs.js");
var Prompt$AgdaModeVscode = require("./Prompt.bs.js");
var Keyboard$AgdaModeVscode = require("./Keyboard.bs.js");
var Component__Link$AgdaModeVscode = require("./Component/Component__Link.bs.js");

function Panel(Props) {
  var onRequest = Props.onRequest;
  var onEventToView = Props.onEventToView;
  var onResponse = Props.onResponse;
  var onEventFromView = Props.onEventFromView;
  var match = React.useState((function () {
          return /* Plain */Caml_chrome_debugger.variant("Plain", 0, ["File not loaded yet"]);
        }));
  var setHeader = match[1];
  var match$1 = React.useState((function () {
          return /* Nothing */0;
        }));
  var setBody = match$1[1];
  var savedHeaderAndBody = React.useRef(undefined);
  var saveHeaderAndBody = function (header, body) {
    savedHeaderAndBody.current = /* tuple */[
      header,
      body
    ];
    
  };
  var restoreHeaderAndBody = function (param) {
    return Belt_Option.forEach(savedHeaderAndBody.current, (function (param) {
                  var body = param[1];
                  var header = param[0];
                  Curry._1(setHeader, (function (param) {
                          return header;
                        }));
                  Curry._1(setBody, (function (param) {
                          return body;
                        }));
                  savedHeaderAndBody.current = undefined;
                  
                }));
  };
  var match$2 = React.useState((function () {
          
        }));
  var setPrompt = match$2[1];
  var prompt = match$2[0];
  var prompting = Belt_Option.isSome(prompt);
  var match$3 = React.useReducer(Keyboard$AgdaModeVscode.reducer, undefined);
  var runInputMethodAction = match$3[1];
  React.useEffect((function () {
          Curry._1(onEventFromView.emit, /* Initialized */0);
          
        }), []);
  var promptResponseResolver = React.useRef(undefined);
  var onSubmit = function (result) {
    return Belt_Option.forEach(promptResponseResolver.current, (function (resolve) {
                  Curry._1(setPrompt, (function (param) {
                          
                        }));
                  Curry._1(resolve, result);
                  promptResponseResolver.current = undefined;
                  
                }));
  };
  var onChange = function (string) {
    return Curry._1(onEventFromView.emit, /* PromptChange */Caml_chrome_debugger.variant("PromptChange", 1, [string]));
  };
  Hook$AgdaModeVscode.recv(onRequest, onResponse, (function (msg) {
          var match = msg[1];
          var value = match.value;
          var placeholder = match.placeholder;
          var body$prime = match.body;
          var header$prime = msg[0];
          Curry._1(setHeader, (function (param) {
                  return header$prime;
                }));
          Curry._1(setBody, (function (param) {
                  return /* Nothing */0;
                }));
          Curry._1(setPrompt, (function (param) {
                  return /* tuple */[
                          body$prime,
                          placeholder,
                          value
                        ];
                }));
          var match$1 = $$Promise.pending(undefined);
          promptResponseResolver.current = match$1[1];
          return $$Promise.map(match$1[0], (function (result) {
                        if (result !== undefined) {
                          return /* PromptSuccess */Caml_chrome_debugger.simpleVariant("PromptSuccess", [result]);
                        } else {
                          console.log("NOTHING BACK");
                          restoreHeaderAndBody(undefined);
                          return /* PromptInterrupted */0;
                        }
                      }));
        }));
  Hook$AgdaModeVscode.on(onEventToView, (function ($$event) {
          if (typeof $$event === "number") {
            onSubmit(undefined);
            Curry._1(setPrompt, (function (param) {
                    
                  }));
            return restoreHeaderAndBody(undefined);
          }
          switch ($$event.tag | 0) {
            case /* Display */0 :
                var body = $$event[1];
                var header = $$event[0];
                onSubmit(undefined);
                saveHeaderAndBody(header, body);
                Curry._1(setHeader, (function (param) {
                        return header;
                      }));
                return Curry._1(setBody, (function (param) {
                              return body;
                            }));
            case /* PromptIMUpdate */1 :
                var text = $$event[0];
                return Curry._1(setPrompt, (function (param) {
                              if (param !== undefined) {
                                return /* tuple */[
                                        param[0],
                                        param[1],
                                        text
                                      ];
                              }
                              
                            }));
            case /* InputMethod */2 :
                return Curry._1(runInputMethodAction, $$event[0]);
            
          }
        }));
  return React.createElement(Component__Link$AgdaModeVscode.Provider.make, Component__Link$AgdaModeVscode.Provider.makeProps(onEventFromView, React.createElement("section", {
                      className: "agda-mode native-key-bindings",
                      tabIndex: -1
                    }, React.createElement("div", {
                          className: "agda-mode-header-container"
                        }, React.createElement(Header$AgdaModeVscode.make, {
                              header: match[0]
                            }), React.createElement(Prompt$AgdaModeVscode.make, {
                              prompt: prompt,
                              onSubmit: onSubmit,
                              onChange: onChange
                            }), React.createElement(Keyboard$AgdaModeVscode.make, {
                              state: match$3[0],
                              onInsertChar: (function ($$char) {
                                  return Curry._1(onEventFromView.emit, /* InputMethod */Caml_chrome_debugger.variant("InputMethod", 0, [/* InsertChar */Caml_chrome_debugger.variant("InsertChar", 0, [$$char])]));
                                }),
                              onChooseSymbol: (function (symbol) {
                                  return Curry._1(onEventFromView.emit, /* InputMethod */Caml_chrome_debugger.variant("InputMethod", 0, [/* ChooseSymbol */Caml_chrome_debugger.variant("ChooseSymbol", 1, [symbol])]));
                                }),
                              prompting: prompting
                            })), React.createElement(Body$AgdaModeVscode.make, {
                          body: match$1[0]
                        })), undefined));
}

var make = Panel;

exports.make = make;
/* react Not a pure module */
