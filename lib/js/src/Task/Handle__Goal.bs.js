// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var $$String = require("bs-platform/lib/js/string.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Goal$AgdaModeVscode = require("../Goal.bs.js");
var Task$AgdaModeVscode = require("./Task.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var State$AgdaModeVscode = require("../State.bs.js");

function Impl(Editor) {
  var Task = Task$AgdaModeVscode.Impl(Editor);
  var State = State$AgdaModeVscode.Impl(Editor);
  var Goal = Goal$AgdaModeVscode.Impl(Editor);
  var getOffsets = function (state) {
    return Belt_Array.map(state.goals, (function (goal) {
                  return goal.range[0] + 3 | 0;
                }));
  };
  var pointingAt = function (cursor, state) {
    var cursorOffset = cursor !== undefined ? cursor : Curry._2(Editor.offsetAtPoint, state.editor, Curry._1(Editor.getCursorPosition, state.editor));
    var pointedGoals = Belt_Array.keep(state.goals, (function (goal) {
            if (goal.range[0] <= cursorOffset) {
              return cursorOffset <= goal.range[1];
            } else {
              return false;
            }
          }));
    return Belt_Array.get(pointedGoals, 0);
  };
  var handle = function (indices) {
    if (typeof indices === "number") {
      switch (indices) {
        case /* UpdateRange */0 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* WithState */Caml_chrome_debugger.variant("WithState", 5, [(function (state) {
                              Curry._2(Task.Goal.updateRanges, state.goals, state.editor);
                              return $$Promise.resolved(/* [] */0);
                            })]),
                      /* [] */0
                    ]);
        case /* Next */1 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* Goal */Caml_chrome_debugger.variant("Goal", 4, [/* UpdateRange */0]),
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* WithState */Caml_chrome_debugger.variant("WithState", 5, [(function (state) {
                                  console.log(Curry._1(Editor.getText, state.editor));
                                  var nextGoal = {
                                    contents: undefined
                                  };
                                  var cursorOffset = Curry._2(Editor.offsetAtPoint, state.editor, Curry._1(Editor.getCursorPosition, state.editor));
                                  var offsets = getOffsets(state);
                                  Belt_Array.forEach(offsets, (function (offset) {
                                          if (cursorOffset < offset && nextGoal.contents === undefined) {
                                            nextGoal.contents = offset;
                                            return ;
                                          }
                                          
                                        }));
                                  if (nextGoal.contents === undefined) {
                                    nextGoal.contents = Belt_Array.get(offsets, 0);
                                  }
                                  var offset = nextGoal.contents;
                                  if (offset !== undefined) {
                                    Curry._2(Editor.setCursorPosition, state.editor, Curry._2(Editor.pointAtOffset, state.editor, offset));
                                  }
                                  return $$Promise.resolved(/* [] */0);
                                })]),
                          /* [] */0
                        ])
                    ]);
        case /* Previous */2 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* Goal */Caml_chrome_debugger.variant("Goal", 4, [/* UpdateRange */0]),
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* WithState */Caml_chrome_debugger.variant("WithState", 5, [(function (state) {
                                  var previousGoal = {
                                    contents: undefined
                                  };
                                  var cursorOffset = Curry._2(Editor.offsetAtPoint, state.editor, Curry._1(Editor.getCursorPosition, state.editor));
                                  var offsets = getOffsets(state);
                                  Belt_Array.forEach(offsets, (function (offset) {
                                          if (cursorOffset > offset) {
                                            previousGoal.contents = offset;
                                            return ;
                                          }
                                          
                                        }));
                                  if (previousGoal.contents === undefined) {
                                    previousGoal.contents = Belt_Array.get(offsets, offsets.length - 1 | 0);
                                  }
                                  var offset = previousGoal.contents;
                                  if (offset !== undefined) {
                                    Curry._2(Editor.setCursorPosition, state.editor, Curry._2(Editor.pointAtOffset, state.editor, offset));
                                  }
                                  return $$Promise.resolved(/* [] */0);
                                })]),
                          /* [] */0
                        ])
                    ]);
        
      }
    } else {
      switch (indices.tag | 0) {
        case /* Instantiate */0 :
            var indices$1 = indices[0];
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* WithState */Caml_chrome_debugger.variant("WithState", 5, [(function (state) {
                              Belt_Array.forEach(state.goals, Task.Goal.destroy);
                              return $$Promise.map(Curry._2(Task.Goal.makeMany, state.editor, indices$1), (function (goals) {
                                            state.goals = goals;
                                            return /* [] */0;
                                          }));
                            })]),
                      /* [] */0
                    ]);
        case /* Modify */1 :
            var f = indices[1];
            var goal = indices[0];
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* Goal */Caml_chrome_debugger.variant("Goal", 4, [/* UpdateRange */0]),
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* WithState */Caml_chrome_debugger.variant("WithState", 5, [(function (state) {
                                  var content = Curry._2(Task.Goal.getContent, goal, state.editor);
                                  console.log("[ goal ][ modify ] \"" + (content + ("\" => \"" + (Curry._1(f, content) + "\""))));
                                  return $$Promise.map(Curry._3(Task.Goal.setContent, goal, state.editor, Curry._1(f, content)), (function (param) {
                                                if (param) {
                                                  return /* [] */0;
                                                } else {
                                                  return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                            Curry._2(Task.displayError, "Goal-related Error", "Failed to modify the content of goal #" + String(goal.index)),
                                                            /* [] */0
                                                          ]);
                                                }
                                              }));
                                })]),
                          /* [] */0
                        ])
                    ]);
        case /* RemoveBoundaryAndDestroy */2 :
            var goal$1 = indices[0];
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* Goal */Caml_chrome_debugger.variant("Goal", 4, [/* UpdateRange */0]),
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* WithState */Caml_chrome_debugger.variant("WithState", 5, [(function (state) {
                                  var innerRange = Curry._2(Task.Goal.getInnerRange, goal$1, state.editor);
                                  var outerRange = Curry._2(Editor.$$Range.make, Curry._2(Editor.pointAtOffset, state.editor, goal$1.range[0]), Curry._2(Editor.pointAtOffset, state.editor, goal$1.range[1]));
                                  var content = $$String.trim(Curry._2(Editor.getTextInRange, state.editor, innerRange));
                                  return $$Promise.map(Curry._3(Editor.setText, state.editor, outerRange, content), (function (param) {
                                                if (param) {
                                                  Curry._1(Task.Goal.destroy, goal$1);
                                                  return /* [] */0;
                                                } else {
                                                  return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                            Curry._2(Task.displayError, "Goal-related Error", "Unable to remove the boundary of goal #" + String(goal$1.index)),
                                                            /* [] */0
                                                          ]);
                                                }
                                              }));
                                })]),
                          /* [] */0
                        ])
                    ]);
        case /* GetPointedOr */3 :
            var alternative = indices[1];
            var callback = indices[0];
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* Goal */Caml_chrome_debugger.variant("Goal", 4, [/* UpdateRange */0]),
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* WithState */Caml_chrome_debugger.variant("WithState", 5, [(function (state) {
                                  var goal = pointingAt(undefined, state);
                                  if (goal === undefined) {
                                    return $$Promise.resolved(alternative);
                                  }
                                  var content = Curry._2(Task.Goal.getContent, goal, state.editor);
                                  return $$Promise.resolved(Curry._2(callback, goal, content === "" ? undefined : content));
                                })]),
                          /* [] */0
                        ])
                    ]);
        case /* GetIndexedOr */4 :
            var alternative$1 = indices[2];
            var callback$1 = indices[1];
            var index = indices[0];
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* Goal */Caml_chrome_debugger.variant("Goal", 4, [/* UpdateRange */0]),
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* WithState */Caml_chrome_debugger.variant("WithState", 5, [(function (state) {
                                  var found = Belt_Array.keep(state.goals, (function (goal) {
                                          return goal.index === index;
                                        }));
                                  var goal = Belt_Array.get(found, 0);
                                  if (goal === undefined) {
                                    return $$Promise.resolved(alternative$1);
                                  }
                                  var content = Curry._2(Task.Goal.getContent, goal, state.editor);
                                  return $$Promise.resolved(Curry._2(callback$1, goal, content === "" ? undefined : content));
                                })]),
                          /* [] */0
                        ])
                    ]);
        
      }
    }
  };
  return {
          Task: Task,
          State: State,
          Goal: Goal,
          getOffsets: getOffsets,
          pointingAt: pointingAt,
          handle: handle
        };
}

exports.Impl = Impl;
/* Promise Not a pure module */
