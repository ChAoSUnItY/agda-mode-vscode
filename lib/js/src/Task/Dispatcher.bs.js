// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Task$AgdaModeVscode = require("./Task.bs.js");
var Util$AgdaModeVscode = require("../Util/Util.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Command$AgdaModeVscode = require("../Command.bs.js");
var Runner2$AgdaModeVscode = require("./Runner2.bs.js");
var Response$AgdaModeVscode = require("../Response.bs.js");
var Handle__Goal$AgdaModeVscode = require("./Handle__Goal.bs.js");
var Handle__Error$AgdaModeVscode = require("./Handle__Error.bs.js");
var Handle__Command$AgdaModeVscode = require("./Handle__Command.bs.js");
var Handle__Response$AgdaModeVscode = require("./Handle__Response.bs.js");

function Impl(Editor) {
  var ErrorHandler = Handle__Error$AgdaModeVscode.Impl(Editor);
  var GoalHandler = Handle__Goal$AgdaModeVscode.Impl(Editor);
  var ResponseHandler = Handle__Response$AgdaModeVscode.Impl(Editor);
  var Task = Task$AgdaModeVscode.Impl(Editor);
  var dispatchCommand = function (self, command) {
    var CommandHandler = Handle__Command$AgdaModeVscode.Impl(Editor);
    var tasks = Curry._1(CommandHandler.handle, command);
    return $$Promise.tap(Runner2$AgdaModeVscode.pushAndRun(self.generalTaskRunner, tasks), (function (param) {
                  console.log(Command$AgdaModeVscode.toString(command) + " completed");
                  console.log(self);
                  
                }));
  };
  var sendAgdaRequest = function (runTasks, state, req) {
    var match = $$Promise.pending(undefined);
    var resolve = match[1];
    var promise = match[0];
    var handle = {
      contents: undefined
    };
    var handler = function (error) {
      if (error.tag) {
        var tasks = Curry._1(ErrorHandler.handle, /* Connection */Caml_chrome_debugger.variant("Connection", 0, [error[0]]));
        return $$Promise.get(Curry._1(runTasks, tasks), resolve);
      }
      var match = error[0];
      if (!match) {
        return Curry._1(resolve, undefined);
      }
      var error$1 = match[0];
      if (error$1.tag) {
        var tasks$1 = Curry._1(ErrorHandler.handle, /* Parser */Caml_chrome_debugger.variant("Parser", 1, [error$1[0]]));
        return $$Promise.get(Curry._1(runTasks, tasks$1), resolve);
      }
      var response = error$1[0];
      console.log(">>> " + Response$AgdaModeVscode.toString(response));
      var tasks$2 = Curry._1(ResponseHandler.handle, response);
      Curry._1(runTasks, tasks$2);
      
    };
    return $$Promise.tap($$Promise.flatMap(Curry._2(Task.State.sendRequestToAgda, state, req), (function (connection) {
                      if (connection.tag) {
                        var tasks = Curry._1(ErrorHandler.handle, connection[0]);
                        $$Promise.get(Curry._1(runTasks, tasks), resolve);
                        return promise;
                      }
                      handle.contents = Curry._1(connection[0].emitter.on, handler);
                      return promise;
                    })), (function (param) {
                  return Belt_Option.forEach(handle.contents, (function (f) {
                                return Curry._1(f, undefined);
                              }));
                }));
  };
  var make = function (state) {
    var self_agdaRequestRunner = Runner2$AgdaModeVscode.make(undefined);
    var self_viewRequestRunner = Runner2$AgdaModeVscode.make(undefined);
    var self_generalTaskRunner = Runner2$AgdaModeVscode.make(undefined);
    var self = {
      agdaRequestRunner: self_agdaRequestRunner,
      viewRequestRunner: self_viewRequestRunner,
      generalTaskRunner: self_generalTaskRunner
    };
    Runner2$AgdaModeVscode.setup(self_generalTaskRunner, (function (task) {
            console.log("general " + Curry._1(Task.toString, task));
            if (typeof task === "number") {
              return $$Promise.map(Curry._1(Task.State.destroy, state), (function (param) {
                            return /* [] */0;
                          }));
            }
            switch (task.tag | 0) {
              case /* DispatchCommand */0 :
                  return $$Promise.resolved(/* [] */0);
              case /* SendRequest */1 :
                  return $$Promise.map(Runner2$AgdaModeVscode.pushAndRun(self_agdaRequestRunner, /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                    task[0],
                                    /* [] */0
                                  ])), (function (param) {
                                return /* [] */0;
                              }));
              case /* ViewReq */2 :
                  var callback = task[1];
                  return $$Promise.map(Curry._2(Task.State.sendRequestToView, state, task[0]), (function (response) {
                                var tasks = Curry._1(callback, response);
                                console.log("View Response: " + Util$AgdaModeVscode.Pretty.array(Belt_List.toArray(Belt_List.map(tasks, Task.toString))));
                                Runner2$AgdaModeVscode.pushInternal(self_generalTaskRunner, tasks);
                                return /* [] */0;
                              }));
              case /* ViewEvent */3 :
                  if (task[0]) {
                    return $$Promise.resolved(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                  /* Terminate */0,
                                  /* [] */0
                                ]));
                  } else {
                    return $$Promise.resolved(/* [] */0);
                  }
              case /* Error */4 :
                  return $$Promise.resolved(Curry._1(ErrorHandler.handle, task[0]));
              case /* Goal */5 :
                  return $$Promise.resolved(Curry._1(GoalHandler.handle, task[0]));
              case /* WithState */6 :
                  return Curry._1(task[0], state);
              case /* Debug */7 :
                  return $$Promise.resolved(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                Curry._2(Task.displayWarning, "Debug", task[0]),
                                /* [] */0
                              ]));
              
            }
          }));
    Runner2$AgdaModeVscode.setup(self_agdaRequestRunner, (function (req) {
            console.log("agdaRequestRunner");
            return $$Promise.map(sendAgdaRequest((function (tasks) {
                              console.log("push");
                              Runner2$AgdaModeVscode.pushInternal(self_generalTaskRunner, tasks);
                              return $$Promise.resolved(undefined);
                            }), state, req), (function (param) {
                          return /* [] */0;
                        }));
          }));
    Runner2$AgdaModeVscode.setup(self_viewRequestRunner, (function (req) {
            console.log("viewRequestRunner");
            console.log(req);
            return $$Promise.resolved(/* [] */0);
          }));
    return self;
  };
  var interrupt = function (self, command) {
    var CommandHandler = Handle__Command$AgdaModeVscode.Impl(Editor);
    var tasks = Curry._1(CommandHandler.handle, command);
    return Runner2$AgdaModeVscode.pushAndRun(self.generalTaskRunner, tasks);
  };
  var destroy = function (self) {
    Runner2$AgdaModeVscode.terminate(self.agdaRequestRunner);
    Runner2$AgdaModeVscode.terminate(self.viewRequestRunner);
    return Runner2$AgdaModeVscode.terminate(self.generalTaskRunner);
  };
  return {
          ErrorHandler: ErrorHandler,
          GoalHandler: GoalHandler,
          ResponseHandler: ResponseHandler,
          Task: Task,
          dispatchCommand: dispatchCommand,
          sendAgdaRequest: sendAgdaRequest,
          make: make,
          interrupt: interrupt,
          destroy: destroy
        };
}

exports.Impl = Impl;
/* Promise Not a pure module */
