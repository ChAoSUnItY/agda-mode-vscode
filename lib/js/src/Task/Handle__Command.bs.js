// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Task$AgdaModeVscode = require("./Task.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Command$AgdaModeVscode = require("../Command.bs.js");

function Impl(Editor) {
  var Task = Task$AgdaModeVscode.Impl(Editor);
  var handle = function (normalization) {
    if (typeof normalization === "number") {
      switch (normalization) {
        case /* Load */0 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* WithState */Caml_chrome_debugger.variant("WithState", 5, [(function (state) {
                              return $$Promise.map(Curry._1(Editor.save, state.editor), (function (param) {
                                            return /* [] */0;
                                          }));
                            })]),
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* Goal */Caml_chrome_debugger.variant("Goal", 4, [/* SaveCursor */3]),
                          /* :: */Caml_chrome_debugger.simpleVariant("::", [
                              /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 0, [/* Load */0]),
                              /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                  /* Goal */Caml_chrome_debugger.variant("Goal", 4, [/* RestoreCursor */4]),
                                  /* [] */0
                                ])
                            ])
                        ])
                    ]);
        case /* Quit */1 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* Terminate */0,
                      /* [] */0
                    ]);
        case /* NextGoal */2 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* Goal */Caml_chrome_debugger.variant("Goal", 4, [/* Next */1]),
                      /* [] */0
                    ]);
        case /* PreviousGoal */3 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* Goal */Caml_chrome_debugger.variant("Goal", 4, [/* Previous */2]),
                      /* [] */0
                    ]);
        case /* Give */4 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* Goal */Caml_chrome_debugger.variant("Goal", 4, [/* GetPointedOr */Caml_chrome_debugger.variant("GetPointedOr", 5, [
                              (function (goal, content) {
                                  if (content !== undefined) {
                                    return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                              /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 0, [/* Give */Caml_chrome_debugger.variant("Give", 0, [goal])]),
                                              /* [] */0
                                            ]);
                                  } else {
                                    return Curry._4(Task.query, /* Plain */Caml_chrome_debugger.variant("Plain", 0, [Command$AgdaModeVscode.toString(/* Give */4)]), "expression to give:", undefined, (function (expr) {
                                                  return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                            /* Goal */Caml_chrome_debugger.variant("Goal", 4, [/* Modify */Caml_chrome_debugger.variant("Modify", 1, [
                                                                    goal,
                                                                    (function (param) {
                                                                        return expr;
                                                                      })
                                                                  ])]),
                                                            /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                                /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 0, [/* Give */Caml_chrome_debugger.variant("Give", 0, [goal])]),
                                                                /* [] */0
                                                              ])
                                                          ]);
                                                }));
                                  }
                                }),
                              /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                  /* Error */Caml_chrome_debugger.variant("Error", 3, [/* OutOfGoal */1]),
                                  /* [] */0
                                ])
                            ])]),
                      /* [] */0
                    ]);
        case /* Refine */5 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* Goal */Caml_chrome_debugger.variant("Goal", 4, [/* GetPointedOr */Caml_chrome_debugger.variant("GetPointedOr", 5, [
                              (function (goal, param) {
                                  return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                            /* Goal */Caml_chrome_debugger.variant("Goal", 4, [/* SaveCursor */3]),
                                            /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 0, [/* Refine */Caml_chrome_debugger.variant("Refine", 1, [goal])]),
                                                /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                    /* Goal */Caml_chrome_debugger.variant("Goal", 4, [/* RestoreCursor */4]),
                                                    /* [] */0
                                                  ])
                                              ])
                                          ]);
                                }),
                              /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                  /* Error */Caml_chrome_debugger.variant("Error", 3, [/* OutOfGoal */1]),
                                  /* [] */0
                                ])
                            ])]),
                      /* [] */0
                    ]);
        case /* Auto */6 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* Goal */Caml_chrome_debugger.variant("Goal", 4, [/* GetPointedOr */Caml_chrome_debugger.variant("GetPointedOr", 5, [
                              (function (goal, param) {
                                  return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                            /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 0, [/* Auto */Caml_chrome_debugger.variant("Auto", 2, [goal])]),
                                            /* [] */0
                                          ]);
                                }),
                              /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                  /* Error */Caml_chrome_debugger.variant("Error", 3, [/* OutOfGoal */1]),
                                  /* [] */0
                                ])
                            ])]),
                      /* [] */0
                    ]);
        case /* Case */7 :
            var header = /* Plain */Caml_chrome_debugger.variant("Plain", 0, [Command$AgdaModeVscode.toString(/* Case */7)]);
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* Goal */Caml_chrome_debugger.variant("Goal", 4, [/* GetPointedOr */Caml_chrome_debugger.variant("GetPointedOr", 5, [
                              (function (goal, param) {
                                  if (param !== undefined) {
                                    return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                              /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 0, [/* Case */Caml_chrome_debugger.variant("Case", 3, [goal])]),
                                              /* [] */0
                                            ]);
                                  } else {
                                    return Curry._4(Task.query, header, "expression to case:", undefined, (function (expr) {
                                                  return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                            /* Goal */Caml_chrome_debugger.variant("Goal", 4, [/* Modify */Caml_chrome_debugger.variant("Modify", 1, [
                                                                    goal,
                                                                    (function (param) {
                                                                        return expr;
                                                                      })
                                                                  ])]),
                                                            /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                                /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 0, [/* Case */Caml_chrome_debugger.variant("Case", 3, [goal])]),
                                                                /* [] */0
                                                              ])
                                                          ]);
                                                }));
                                  }
                                }),
                              /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                  /* Error */Caml_chrome_debugger.variant("Error", 3, [/* OutOfGoal */1]),
                                  /* [] */0
                                ])
                            ])]),
                      /* [] */0
                    ]);
        case /* Escape */8 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* ViewReq */Caml_chrome_debugger.variant("ViewReq", 1, [
                          /* InterruptQuery */2,
                          (function (param) {
                              return /* [] */0;
                            })
                        ]),
                      /* [] */0
                    ]);
        
      }
    } else {
      switch (normalization.tag | 0) {
        case /* InferType */0 :
            var normalization$1 = normalization[0];
            var header$1 = /* Plain */Caml_chrome_debugger.variant("Plain", 0, [Command$AgdaModeVscode.toString(/* InferType */Caml_chrome_debugger.variant("InferType", 0, [normalization$1]))]);
            var placeholder = "expression to infer:";
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* Goal */Caml_chrome_debugger.variant("Goal", 4, [/* GetPointedOr */Caml_chrome_debugger.variant("GetPointedOr", 5, [
                              (function (goal, expr) {
                                  if (expr !== undefined) {
                                    return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                              /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 0, [/* InferType */Caml_chrome_debugger.variant("InferType", 4, [
                                                      normalization$1,
                                                      expr,
                                                      goal
                                                    ])]),
                                              /* [] */0
                                            ]);
                                  } else {
                                    return Curry._4(Task.query, header$1, placeholder, undefined, (function (expr) {
                                                  return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                            /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 0, [/* InferType */Caml_chrome_debugger.variant("InferType", 4, [
                                                                    normalization$1,
                                                                    expr,
                                                                    goal
                                                                  ])]),
                                                            /* [] */0
                                                          ]);
                                                }));
                                  }
                                }),
                              Curry._4(Task.query, header$1, placeholder, undefined, (function (expr) {
                                      return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 0, [/* InferTypeGlobal */Caml_chrome_debugger.variant("InferTypeGlobal", 5, [
                                                        normalization$1,
                                                        expr
                                                      ])]),
                                                /* [] */0
                                              ]);
                                    }))
                            ])]),
                      /* [] */0
                    ]);
        case /* GoalType */1 :
            var normalization$2 = normalization[0];
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* Goal */Caml_chrome_debugger.variant("Goal", 4, [/* GetPointedOr */Caml_chrome_debugger.variant("GetPointedOr", 5, [
                              (function (goal, param) {
                                  return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                            /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 0, [/* GoalType */Caml_chrome_debugger.variant("GoalType", 6, [
                                                    normalization$2,
                                                    goal
                                                  ])]),
                                            /* [] */0
                                          ]);
                                }),
                              /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                  /* Error */Caml_chrome_debugger.variant("Error", 3, [/* OutOfGoal */1]),
                                  /* [] */0
                                ])
                            ])]),
                      /* [] */0
                    ]);
        case /* ViewEvent */2 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* ViewEvent */Caml_chrome_debugger.variant("ViewEvent", 2, [normalization[0]]),
                      /* [] */0
                    ]);
        
      }
    }
  };
  return {
          Task: Task,
          handle: handle
        };
}

exports.Impl = Impl;
/* Promise Not a pure module */
