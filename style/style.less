@import "variables";

// dimensions

@root-padding: 20px; // the left/right padding of the root housing element

@padding: 1rem;

@header-height: 2rem;

@left-border-width: 0.2rem;

// vscode: removes focus outline  
*:focus {
    outline: none;
}

.agda-mode {
    height: 100%;
}

// we need this container to overcome the width problem of fixed elements
.agda-mode-header-container {
    position: fixed;
    width   : 100%; // this 100% percentage is relative to the viewport rather than its parent
    left    : 0; // stick it to the viewport
}

.agda-mode-keyboard {
    @button-height: 1.5rem;
    @button-margin: 0.2rem;

    margin: 0 @root-padding;

    // position
    //  default: stick to the top 
    //  prompting: normal flow
    position: absolute;

    &.prompting {
        position: relative;
    }

    // dimension
    width     : calc(100% - 2.5rem); // why 2.5 ???
    min-height: @header-height;

    &.deactivated {
        display: none
    }

    // color
    background: @header-background;

    .agda-mode-keyboard-sequence-and-candidates {
        display    : flex;
        // dimensions
        padding    : @padding 0;
        min-height : 2rem;
        line-height: 2rem;

        .agda-mode-keyboard-sequence {
            padding    : 0rem @padding;
            flex-grow  : 100;
            background : @body-background;
            font-weight: bold;
        }

        .agda-mode-keyboard-candidates {
            margin-left: @padding;

            width      : calc(@button-height * 10 + @button-margin * 20);
            flex-grow  : 0;
            font-weight: bold;
        }
    }

    .agda-mode-keyboard-suggestions {
        max-width     : 100%;
        display       : flex;
        flex-wrap     : wrap;
        padding-bottom: @padding;
    }

    .agda-mode-key {
        align-self: center;


        background: @input-background;
        color     : @foreground;

        top          : 0;
        width        : @button-height;
        height       : @button-height;
        line-height  : @button-height;
        margin       : @button-margin;
        padding      : 0;
        border       : 0;
        border-radius: @button-margin;
        text-align   : center;

        &:hover {
            background: @selection;
            cursor    : pointer;
        }

        &.selected {
            background: @selection;
        }
    }
}

.agda-mode-header {

    height: @header-height;

    margin : 0 @root-padding;
    padding: @padding*0.5 0;

    // create a shadow at the bottom of the <Header>
    box-shadow: @header-background 0px 3px 3px;

    background: @header-background;

    line-height: @header-height;
    font-size  : 150%;
    font-weight: bold;

    &.success {
        color: @success
    }

    &.error {
        color: @error
    }

    &.warning {
        color: @warning
    }

    .agda-mode-header-status { 
        color: @foreground-subtle;
        font-size: 50%;
        font-variant: small-caps;
        float: right
    }
}

.agda-mode-body {

    @line-height: 1.5rem;

    padding-top: @header-height + @padding;

    white-space: pre;

    font-family: Menlo, Monaco, 'Courier New', monospace;
    font-size  : 125%;
    line-height: @line-height;

    .codicon {
        vertical-align: middle;
    }

    li {
        // dimensions
        margin    : @padding 0;
        padding   : @padding/2 @padding;

        &:first-of-type {
            margin-top: 0;
        }

        display: flex;

        &:hover {
            .item-raw-button {
                visibility: visible;
            }
        }

    }

    li.unlabeled-item,
    li.labeled-item {
        // background & border
        background: @body-background;
        border-left: @left-border-width solid @body-background;
    }

    li.header-item {
        margin    : 0;
        padding   : 0;
        h3 {
            margin: 0;
        }
    }

    li .item-content {
        white-space: pre-wrap;
        order      : 1;
        flex-grow  : 1;
    }

    // the button that shows "raw Emacs string" when clicked
    // only be visible when the parent <li> is hovered, or when it was clicked
    li .item-raw-button {
        visibility: hidden;


        order    : 1;
        flex-grow: 0;

        font-variant: small-caps;
        text-align  : right;

        color: @foreground-subtle;

        &:hover {
            cursor: pointer;
            color : @foreground-highlight
        }

        &.active {
            // make the button visible when clicked
            visibility: visible;

            cursor: pointer;
            color : @warning
        }
    }

    li .item-label {
        order: 2;

        margin-left: @padding/2;

        font-variant: small-caps;
        font-weight : bolder;
        text-align  : right;
    }

    li.special .item-label {
        color: @success
    }

    li.special {
        border-color: @success
    }

    li.warning .item-label {
        color: @warning
    }

    li.warning {
        border-color: @warning
    }

    li.error .item-label {
        color: @error
    }

    li.error {
        border-color: @error
    }

    ul {
        list-style: none;
        padding   : 0px;
        margin    : 0px;
    }

}

// the total height of .agda-mode-prompt should be the same as @header-height
.agda-mode-prompt {
    white-space: pre;
    padding    : 0 @padding @padding @padding;

    input {
        // Issue #31 - make the input box larger
        width    : calc(100% - @padding * 2);
        font-size: 150%;
        padding  : @padding;
        height   : 1rem;

        background-color: @input-background;
        border          : none;
        color           : @input;
    }

    input::-webkit-input-placeholder {
        color: @inputPlaceholder;
    }
}


// components
.component-link {
    color: @link;

    .codicon-link::after {
        content    : " ";
        white-space: pre;
    }

    &.component-hole,
    &.component-location {
        color: @hole;
    }
}

.component-link:hover {
    color          : @link-hover;
    cursor         : pointer;
    text-decoration: underline;

    &.component-hole,
    &.component-location {
        color: @hole-hover;
    }
}

.component-horz {
    display: inline-flex;
    flex-wrap: wrap;
}

// seperate each .component-horz-item
.component-horz-item {
    margin-right: 1ch
}

// but not the last one
.component-horz-item:last-of-type {
    margin-right: 0
}