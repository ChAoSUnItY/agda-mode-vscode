// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function encode(param) {
  switch (param) {
    case /* Simplified */0 :
        return "Simplified";
    case /* Instantiated */1 :
        return "Instantiated";
    case /* Normalised */2 :
        return "Normalised";
    
  }
}

function toString(param) {
  switch (param) {
    case /* Simplified */0 :
        return "(simplified)";
    case /* Instantiated */1 :
        return "(instantiated)";
    case /* Normalised */2 :
        return "(normalised)";
    
  }
}

var Normalization = {
  encode: encode,
  toString: toString
};

function encode$1(param) {
  switch (param) {
    case /* DefaultCompute */0 :
        return "DefaultCompute";
    case /* IgnoreAbstract */1 :
        return "IgnoreAbstract";
    case /* UseShowInstance */2 :
        return "UseShowInstance";
    
  }
}

function ignoreAbstract(param) {
  return param !== 0;
}

var ComputeMode = {
  encode: encode$1,
  ignoreAbstract: ignoreAbstract
};

function toString$1($$char) {
  if (typeof $$char === "number") {
    switch ($$char) {
      case /* Activate */0 :
          return "Activate";
      case /* Deactivate */1 :
          return "Deactivate";
      case /* MoveUp */2 :
          return "MoveUp";
      case /* MoveRight */3 :
          return "MoveRight";
      case /* MoveDown */4 :
          return "MoveDown";
      case /* MoveLeft */5 :
          return "MoveLeft";
      
    }
  } else {
    switch ($$char.tag | 0) {
      case /* Update */0 :
          return "Update";
      case /* InsertChar */1 :
          return "InsertChar '" + ($$char[0] + "'");
      case /* ChooseSymbol */2 :
          return "ChooseSymbol '" + ($$char[0] + "'");
      
    }
  }
}

var InputMethod = {
  toString: toString$1
};

var names = [
  /* tuple */[
    /* Load */0,
    "load"
  ],
  /* tuple */[
    /* Quit */1,
    "quit"
  ],
  /* tuple */[
    /* Restart */2,
    "restart"
  ],
  /* tuple */[
    /* Compile */3,
    "compile"
  ],
  /* tuple */[
    /* ToggleDisplayOfImplicitArguments */4,
    "toggle-display-of-implicit-arguments"
  ],
  /* tuple */[
    /* ShowConstraints */5,
    "show-constraints"
  ],
  /* tuple */[
    /* SolveConstraints */Caml_chrome_debugger.variant("SolveConstraints", 0, [/* Simplified */0]),
    "solve-constraints[Simplified]"
  ],
  /* tuple */[
    /* SolveConstraints */Caml_chrome_debugger.variant("SolveConstraints", 0, [/* Instantiated */1]),
    "solve-constraints[Instantiated]"
  ],
  /* tuple */[
    /* SolveConstraints */Caml_chrome_debugger.variant("SolveConstraints", 0, [/* Normalised */2]),
    "solve-constraints[Normalised]"
  ],
  /* tuple */[
    /* ShowGoals */6,
    "show-goals"
  ],
  /* tuple */[
    /* NextGoal */7,
    "next-goal"
  ],
  /* tuple */[
    /* PreviousGoal */8,
    "previous-goal"
  ],
  /* tuple */[
    /* SearchAbout */Caml_chrome_debugger.variant("SearchAbout", 1, [/* Simplified */0]),
    "search-about[Simplified]"
  ],
  /* tuple */[
    /* SearchAbout */Caml_chrome_debugger.variant("SearchAbout", 1, [/* Instantiated */1]),
    "search-about[Instantiated]"
  ],
  /* tuple */[
    /* SearchAbout */Caml_chrome_debugger.variant("SearchAbout", 1, [/* Normalised */2]),
    "search-about[Normalised]"
  ],
  /* tuple */[
    /* Give */9,
    "give"
  ],
  /* tuple */[
    /* Refine */10,
    "refine"
  ],
  /* tuple */[
    /* ElaborateAndGive */Caml_chrome_debugger.variant("ElaborateAndGive", 2, [/* Simplified */0]),
    "elaborate-and-give[Simplified]"
  ],
  /* tuple */[
    /* ElaborateAndGive */Caml_chrome_debugger.variant("ElaborateAndGive", 2, [/* Instantiated */1]),
    "elaborate-and-give[Instantiated]"
  ],
  /* tuple */[
    /* ElaborateAndGive */Caml_chrome_debugger.variant("ElaborateAndGive", 2, [/* Normalised */2]),
    "elaborate-and-give[Normalised]"
  ],
  /* tuple */[
    /* Auto */11,
    "auto"
  ],
  /* tuple */[
    /* Case */12,
    "case"
  ],
  /* tuple */[
    /* HelperFunctionType */Caml_chrome_debugger.variant("HelperFunctionType", 3, [/* Simplified */0]),
    "helper-function-type[Simplified]"
  ],
  /* tuple */[
    /* HelperFunctionType */Caml_chrome_debugger.variant("HelperFunctionType", 3, [/* Instantiated */1]),
    "helper-function-type[Instantiated]"
  ],
  /* tuple */[
    /* HelperFunctionType */Caml_chrome_debugger.variant("HelperFunctionType", 3, [/* Normalised */2]),
    "helper-function-type[Normalised]"
  ],
  /* tuple */[
    /* InferType */Caml_chrome_debugger.variant("InferType", 4, [/* Simplified */0]),
    "infer-type[Simplified]"
  ],
  /* tuple */[
    /* InferType */Caml_chrome_debugger.variant("InferType", 4, [/* Instantiated */1]),
    "infer-type[Instantiated]"
  ],
  /* tuple */[
    /* InferType */Caml_chrome_debugger.variant("InferType", 4, [/* Normalised */2]),
    "infer-type[Normalised]"
  ],
  /* tuple */[
    /* Context */Caml_chrome_debugger.variant("Context", 5, [/* Simplified */0]),
    "context[Simplified]"
  ],
  /* tuple */[
    /* Context */Caml_chrome_debugger.variant("Context", 5, [/* Instantiated */1]),
    "context[Instantiated]"
  ],
  /* tuple */[
    /* Context */Caml_chrome_debugger.variant("Context", 5, [/* Normalised */2]),
    "context[Normalised]"
  ],
  /* tuple */[
    /* GoalType */Caml_chrome_debugger.variant("GoalType", 6, [/* Simplified */0]),
    "goal-type[Simplified]"
  ],
  /* tuple */[
    /* GoalType */Caml_chrome_debugger.variant("GoalType", 6, [/* Instantiated */1]),
    "goal-type[Instantiated]"
  ],
  /* tuple */[
    /* GoalType */Caml_chrome_debugger.variant("GoalType", 6, [/* Normalised */2]),
    "goal-type[Normalised]"
  ],
  /* tuple */[
    /* GoalTypeAndContext */Caml_chrome_debugger.variant("GoalTypeAndContext", 7, [/* Simplified */0]),
    "goal-type-and-context[Simplified]"
  ],
  /* tuple */[
    /* GoalTypeAndContext */Caml_chrome_debugger.variant("GoalTypeAndContext", 7, [/* Instantiated */1]),
    "goal-type-and-context[Instantiated]"
  ],
  /* tuple */[
    /* GoalTypeAndContext */Caml_chrome_debugger.variant("GoalTypeAndContext", 7, [/* Normalised */2]),
    "goal-type-and-context[Normalised]"
  ],
  /* tuple */[
    /* GoalTypeContextAndInferredType */Caml_chrome_debugger.variant("GoalTypeContextAndInferredType", 9, [/* Simplified */0]),
    "goal-type-context-and-inferred-type[Simplified]"
  ],
  /* tuple */[
    /* GoalTypeContextAndInferredType */Caml_chrome_debugger.variant("GoalTypeContextAndInferredType", 9, [/* Instantiated */1]),
    "goal-type-context-and-inferred-type[Instantiated]"
  ],
  /* tuple */[
    /* GoalTypeContextAndInferredType */Caml_chrome_debugger.variant("GoalTypeContextAndInferredType", 9, [/* Normalised */2]),
    "goal-type-context-and-inferred-type[Normalised]"
  ],
  /* tuple */[
    /* GoalTypeContextAndCheckedType */Caml_chrome_debugger.variant("GoalTypeContextAndCheckedType", 10, [/* Simplified */0]),
    "goal-type-context-and-checked-type[Simplified]"
  ],
  /* tuple */[
    /* GoalTypeContextAndCheckedType */Caml_chrome_debugger.variant("GoalTypeContextAndCheckedType", 10, [/* Instantiated */1]),
    "goal-type-context-and-checked-type[Instantiated]"
  ],
  /* tuple */[
    /* GoalTypeContextAndCheckedType */Caml_chrome_debugger.variant("GoalTypeContextAndCheckedType", 10, [/* Normalised */2]),
    "goal-type-context-and-checked-type[Normalised]"
  ],
  /* tuple */[
    /* ModuleContents */Caml_chrome_debugger.variant("ModuleContents", 11, [/* Simplified */0]),
    "module-contents[Simplified]"
  ],
  /* tuple */[
    /* ModuleContents */Caml_chrome_debugger.variant("ModuleContents", 11, [/* Instantiated */1]),
    "module-contents[Instantiated]"
  ],
  /* tuple */[
    /* ModuleContents */Caml_chrome_debugger.variant("ModuleContents", 11, [/* Normalised */2]),
    "module-contents[Normalised]"
  ],
  /* tuple */[
    /* ComputeNormalForm */Caml_chrome_debugger.variant("ComputeNormalForm", 12, [/* DefaultCompute */0]),
    "compute-normal-form[DefaultCompute]"
  ],
  /* tuple */[
    /* ComputeNormalForm */Caml_chrome_debugger.variant("ComputeNormalForm", 12, [/* IgnoreAbstract */1]),
    "compute-normal-form[IgnoreAbstract]"
  ],
  /* tuple */[
    /* ComputeNormalForm */Caml_chrome_debugger.variant("ComputeNormalForm", 12, [/* UseShowInstance */2]),
    "compute-normal-form[UseShowInstance]"
  ],
  /* tuple */[
    /* WhyInScope */13,
    "why-in-scope"
  ],
  /* tuple */[
    /* Escape */14,
    "escape"
  ],
  /* tuple */[
    /* InputMethod */Caml_chrome_debugger.variant("InputMethod", 13, [/* Activate */0]),
    "input-symbol[Activate]"
  ],
  /* tuple */[
    /* InputMethod */Caml_chrome_debugger.variant("InputMethod", 13, [/* MoveUp */2]),
    "input-symbol[MoveUp]"
  ],
  /* tuple */[
    /* InputMethod */Caml_chrome_debugger.variant("InputMethod", 13, [/* MoveRight */3]),
    "input-symbol[MoveRight]"
  ],
  /* tuple */[
    /* InputMethod */Caml_chrome_debugger.variant("InputMethod", 13, [/* MoveDown */4]),
    "input-symbol[MoveDown]"
  ],
  /* tuple */[
    /* InputMethod */Caml_chrome_debugger.variant("InputMethod", 13, [/* MoveLeft */5]),
    "input-symbol[MoveLeft]"
  ],
  /* tuple */[
    /* InputMethod */Caml_chrome_debugger.variant("InputMethod", 13, [/* InsertChar */Caml_chrome_debugger.variant("InsertChar", 1, ["{"])]),
    "input-symbol[InsertOpenCurlyBraces]"
  ],
  /* tuple */[
    /* InputMethod */Caml_chrome_debugger.variant("InputMethod", 13, [/* InsertChar */Caml_chrome_debugger.variant("InsertChar", 1, ["("])]),
    "input-symbol[InsertOpenParenthesis]"
  ]
];

function toString$2(normalization) {
  if (typeof normalization === "number") {
    switch (normalization) {
      case /* Load */0 :
          return "Load";
      case /* Quit */1 :
          return "Quit";
      case /* Restart */2 :
          return "Restart";
      case /* Compile */3 :
          return "Compile";
      case /* ToggleDisplayOfImplicitArguments */4 :
          return "Toggle display of hidden arguments";
      case /* ShowConstraints */5 :
          return "Show constraints";
      case /* ShowGoals */6 :
          return "Show goals";
      case /* NextGoal */7 :
          return "Next goal";
      case /* PreviousGoal */8 :
          return "Previous goal";
      case /* Give */9 :
          return "Give";
      case /* Refine */10 :
          return "Refine";
      case /* Auto */11 :
          return "Auto";
      case /* Case */12 :
          return "Case";
      case /* WhyInScope */13 :
          return "Why in scope";
      case /* Escape */14 :
          return "Escape";
      
    }
  } else {
    switch (normalization.tag | 0) {
      case /* SolveConstraints */0 :
          return "Solve constraints " + toString(normalization[0]);
      case /* SearchAbout */1 :
          return "Search about " + toString(normalization[0]);
      case /* ElaborateAndGive */2 :
          return "Elaborate and give " + toString(normalization[0]);
      case /* HelperFunctionType */3 :
          return "Helper function type " + toString(normalization[0]);
      case /* InferType */4 :
          return "Infer type " + toString(normalization[0]);
      case /* Context */5 :
          return "Context " + toString(normalization[0]);
      case /* GoalType */6 :
          return "Goal type " + toString(normalization[0]);
      case /* GoalTypeAndContext */7 :
          return "Goal type and context " + toString(normalization[0]);
      case /* EventFromView */8 :
          return "Event from the view";
      case /* GoalTypeContextAndInferredType */9 :
          return "Goal type, context and inferred type " + toString(normalization[0]);
      case /* GoalTypeContextAndCheckedType */10 :
          return "Goal type, context and checked type " + toString(normalization[0]);
      case /* ModuleContents */11 :
          return "Module contents " + toString(normalization[0]);
      case /* ComputeNormalForm */12 :
          switch (normalization[0]) {
            case /* DefaultCompute */0 :
                return "Compute normal form (DefaultCompute)";
            case /* IgnoreAbstract */1 :
                return "Compute normal form (IgnoreAbstract)";
            case /* UseShowInstance */2 :
                return "Compute normal form (UseShowInstance)";
            
          }
      case /* InputMethod */13 :
          return "Input symbol " + toString$1(normalization[0]);
      
    }
  }
}

exports.Normalization = Normalization;
exports.ComputeMode = ComputeMode;
exports.InputMethod = InputMethod;
exports.names = names;
exports.toString = toString$2;
/* No side effect */
