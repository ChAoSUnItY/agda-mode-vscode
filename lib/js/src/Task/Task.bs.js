// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Vscode = require("vscode");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var View$AgdaModeVscode = require("../View.bs.js");
var State$AgdaModeVscode = require("../State.bs.js");
var Editor$AgdaModeVscode = require("../Editor.bs.js");
var Command$AgdaModeVscode = require("../Command.bs.js");
var View__Controller$AgdaModeVscode = require("../View__Controller.bs.js");

function toString(x) {
  if (typeof x === "number") {
    return "Destroy";
  }
  switch (x.TAG | 0) {
    case /* DispatchCommand */0 :
        return "Command[" + (Command$AgdaModeVscode.toString(x._0) + "]");
    case /* AgdaRequest */1 :
        return "AgdaRequest";
    case /* ViewRequest */2 :
        return "ViewRequest";
    case /* WithState */3 :
        return "WithState";
    case /* WithStateP */4 :
        return "WithStateP";
    case /* Debug */5 :
        return "Debug[" + (x._0 + "]");
    
  }
}

function viewEvent($$event) {
  return {
          TAG: 4,
          _0: (function (state) {
              return $$Promise.map(State$AgdaModeVscode.sendEventToView(state, $$event), (function (param) {
                            return /* [] */0;
                          }));
            }),
          [Symbol.for("name")]: "WithStateP"
        };
}

function display(header, body) {
  return viewEvent({
              TAG: 0,
              _0: header,
              _1: body,
              [Symbol.for("name")]: "Display"
            });
}

function displayEmacs(kind, header, body) {
  return viewEvent({
              TAG: 0,
              _0: header,
              _1: {
                TAG: 1,
                _0: kind,
                _1: View$AgdaModeVscode.Header.toString(header),
                _2: body,
                [Symbol.for("name")]: "Emacs"
              },
              [Symbol.for("name")]: "Display"
            });
}

var displayOutOfGoalError = viewEvent({
      TAG: 0,
      _0: {
        TAG: 3,
        _0: "Out of goal",
        [Symbol.for("name")]: "Error"
      },
      _1: {
        TAG: 0,
        _0: "Please place the cursor in a goal",
        [Symbol.for("name")]: "Plain"
      },
      [Symbol.for("name")]: "Display"
    });

function prompt(header, prompt$1, callbackOnPromptSuccess) {
  return {
          hd: {
            TAG: 3,
            _0: (function (state) {
                Vscode.commands.executeCommand("setContext", "agdaModePrompting", true);
                return View__Controller$AgdaModeVscode.focus(state.view);
              }),
            [Symbol.for("name")]: "WithState"
          },
          tl: {
            hd: {
              TAG: 2,
              _0: {
                _0: header,
                _1: prompt$1,
                [Symbol.for("name")]: "Prompt"
              },
              _1: (function (response) {
                  var tasks = response ? Curry._1(callbackOnPromptSuccess, response._0) : /* [] */0;
                  return Belt_List.concat(tasks, {
                              hd: {
                                TAG: 3,
                                _0: (function (state) {
                                    Vscode.commands.executeCommand("setContext", "agdaModePrompting", false);
                                    return Editor$AgdaModeVscode.focus(state.editor.document);
                                  }),
                                [Symbol.for("name")]: "WithState"
                              },
                              tl: /* [] */0
                            });
                }),
              [Symbol.for("name")]: "ViewRequest"
            },
            tl: /* [] */0
          }
        };
}

exports.toString = toString;
exports.viewEvent = viewEvent;
exports.display = display;
exports.displayEmacs = displayEmacs;
exports.displayOutOfGoalError = displayOutOfGoalError;
exports.prompt = prompt;
/* displayOutOfGoalError Not a pure module */
