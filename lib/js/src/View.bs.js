// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/lib/js/src/Json_encode.bs.js");
var Util$AgdaModeVscode = require("./Util/Util.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

var decode = Util$AgdaModeVscode.Decode.sum((function (tag) {
        switch (tag) {
          case "Hide" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [(function (param) {
                            return /* Hide */1;
                          })]);
          case "Plain" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (param) {
                                          return /* Plain */Caml_chrome_debugger.simpleVariant("Plain", [
                                                    param[0],
                                                    param[1]
                                                  ]);
                                        }), (function (param) {
                                          return Json_decode.pair(Json_decode.string, Json_decode.string, param);
                                        }), param);
                          })]);
          case "Show" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [(function (param) {
                            return /* Show */0;
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "[Request] Unknown constructor: " + tag
                ];
        }
      }));

function encode(param) {
  if (typeof param === "number") {
    if (param !== 0) {
      return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* tuple */[
                      "tag",
                      "Hide"
                    ],
                    /* [] */0
                  ]));
    } else {
      return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* tuple */[
                      "tag",
                      "Show"
                    ],
                    /* [] */0
                  ]));
    }
  } else {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "Plain"
                  ],
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "contents",
                        Json_encode.pair((function (prim) {
                                return prim;
                              }), (function (prim) {
                                return prim;
                              }), /* tuple */[
                              param[0],
                              param[1]
                            ])
                      ],
                      /* [] */0
                    ])
                ]));
  }
}

var $$Request = {
  decode: decode,
  encode: encode
};

var decode$1 = Util$AgdaModeVscode.Decode.sum((function (tag) {
        switch (tag) {
          case "Destroyed" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [(function (param) {
                            return /* Destroyed */1;
                          })]);
          case "Initialized" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [(function (param) {
                            return /* Initialized */0;
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "[Response] Unknown constructor: " + tag
                ];
        }
      }));

function encode$1(param) {
  if (param) {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "Destroyed"
                  ],
                  /* [] */0
                ]));
  } else {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "Initialized"
                  ],
                  /* [] */0
                ]));
  }
}

var $$Response = {
  decode: decode$1,
  encode: encode$1
};

exports.$$Request = $$Request;
exports.$$Response = $$Response;
/* decode Not a pure module */
