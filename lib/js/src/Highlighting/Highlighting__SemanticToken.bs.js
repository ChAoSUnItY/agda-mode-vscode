// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Vscode = require("vscode");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Util$AgdaModeVscode = require("../Util/Util.bs.js");
var Highlighting__Agda$AgdaModeVscode = require("./Highlighting__Agda.bs.js");

function toString(param) {
  var column = param.column;
  return String(param.line) + ":" + String(column[0]) + "-" + String(column[1]);
}

function toVsCodeRange(param) {
  var column = param.column;
  var line = param.line;
  return new Vscode.Range(new Vscode.Position(line, column[0]), new Vscode.Position(line, column[1]));
}

function splitRange(doc, range) {
  var startingLine = range.start.line;
  var endingLine = range.end.line;
  var ranges = [];
  for(var i = startingLine; i <= endingLine; ++i){
    var startingPoint = i === startingLine ? range.start : new Vscode.Position(i, 0);
    var endingPoint;
    if (i === endingLine) {
      endingPoint = range.end;
    } else {
      var offset = doc.offsetAt(new Vscode.Position(i + 1 | 0, 0)) - 1 | 0;
      endingPoint = doc.positionAt(offset);
    }
    ranges.push({
          line: startingPoint.line,
          column: [
            startingPoint.character,
            endingPoint.character
          ]
        });
  }
  return ranges;
}

var SingleLineRange = {
  toString: toString,
  toVsCodeRange: toVsCodeRange,
  splitRange: splitRange
};

function toString$1(token) {
  var tokenType = Curry._1(Highlighting__Agda$AgdaModeVscode.Aspect.TokenType.toString, token.type_);
  var modifiers = Util$AgdaModeVscode.Pretty.array(Belt_Option.mapWithDefault(token.modifiers, [], (function (xs) {
              return Belt_Array.map(xs, Highlighting__Agda$AgdaModeVscode.Aspect.TokenModifier.toString);
            })));
  return "(" + toString(token.range) + ") " + tokenType + " " + modifiers;
}

var Module = {
  SingleLineRange: SingleLineRange,
  toString: toString$1
};

exports.Module = Module;
exports.SingleLineRange = SingleLineRange;
exports.toString = toString$1;
/* vscode Not a pure module */
