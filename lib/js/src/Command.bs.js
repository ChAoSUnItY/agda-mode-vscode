// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function toString(param) {
  switch (param) {
    case /* Simplified */0 :
        return "Simplified";
    case /* Instantiated */1 :
        return "Instantiated";
    case /* Normalised */2 :
        return "Normalised";
    
  }
}

var Normalization = {
  toString: toString
};

var InputMethodAction = { };

var names = [
  /* tuple */[
    /* Load */0,
    "load"
  ],
  /* tuple */[
    /* Quit */1,
    "quit"
  ],
  /* tuple */[
    /* NextGoal */2,
    "next-goal"
  ],
  /* tuple */[
    /* PreviousGoal */3,
    "previous-goal"
  ],
  /* tuple */[
    /* Give */4,
    "give"
  ],
  /* tuple */[
    /* Refine */5,
    "refine"
  ],
  /* tuple */[
    /* Auto */6,
    "auto"
  ],
  /* tuple */[
    /* Case */7,
    "case"
  ],
  /* tuple */[
    /* InferType */Caml_chrome_debugger.variant("InferType", 0, [/* Simplified */0]),
    "infer-type[Simplified]"
  ],
  /* tuple */[
    /* InferType */Caml_chrome_debugger.variant("InferType", 0, [/* Instantiated */1]),
    "infer-type[Instantiated]"
  ],
  /* tuple */[
    /* InferType */Caml_chrome_debugger.variant("InferType", 0, [/* Normalised */2]),
    "infer-type[Normalised]"
  ],
  /* tuple */[
    /* GoalType */Caml_chrome_debugger.variant("GoalType", 1, [/* Simplified */0]),
    "goal-type[Simplified]"
  ],
  /* tuple */[
    /* GoalType */Caml_chrome_debugger.variant("GoalType", 1, [/* Instantiated */1]),
    "goal-type[Instantiated]"
  ],
  /* tuple */[
    /* GoalType */Caml_chrome_debugger.variant("GoalType", 1, [/* Normalised */2]),
    "goal-type[Normalised]"
  ],
  /* tuple */[
    /* GoalTypeAndContext */Caml_chrome_debugger.variant("GoalTypeAndContext", 2, [/* Simplified */0]),
    "goal-type-and-context[Simplified]"
  ],
  /* tuple */[
    /* GoalTypeAndContext */Caml_chrome_debugger.variant("GoalTypeAndContext", 2, [/* Instantiated */1]),
    "goal-type-and-context[Instantiated]"
  ],
  /* tuple */[
    /* GoalTypeAndContext */Caml_chrome_debugger.variant("GoalTypeAndContext", 2, [/* Normalised */2]),
    "goal-type-and-context[Normalised]"
  ],
  /* tuple */[
    /* Escape */8,
    "escape"
  ],
  /* tuple */[
    /* InputSymbol */Caml_chrome_debugger.variant("InputSymbol", 4, [/* Activate */0]),
    "input-symbol"
  ]
];

function toString$1(param) {
  if (typeof param === "number") {
    switch (param) {
      case /* Load */0 :
          return "Load";
      case /* Quit */1 :
          return "Quit";
      case /* NextGoal */2 :
          return "Next goal";
      case /* PreviousGoal */3 :
          return "Previous goal";
      case /* Give */4 :
          return "Give";
      case /* Refine */5 :
          return "Refine";
      case /* Auto */6 :
          return "Auto";
      case /* Case */7 :
          return "Case";
      case /* Escape */8 :
          return "Escape";
      
    }
  } else {
    switch (param.tag | 0) {
      case /* InferType */0 :
          switch (param[0]) {
            case /* Simplified */0 :
                return "Infer type (simplified)";
            case /* Instantiated */1 :
                return "Infer type (instantiated)";
            case /* Normalised */2 :
                return "Infer type (normalised)";
            
          }
      case /* GoalType */1 :
          switch (param[0]) {
            case /* Simplified */0 :
                return "Goal type (simplified)";
            case /* Instantiated */1 :
                return "Goal type (instantiated)";
            case /* Normalised */2 :
                return "Goal type (normalised)";
            
          }
      case /* GoalTypeAndContext */2 :
          switch (param[0]) {
            case /* Simplified */0 :
                return "Goal type and context (simplified)";
            case /* Instantiated */1 :
                return "Goal type and context (instantiated)";
            case /* Normalised */2 :
                return "Goal type and context (normalised)";
            
          }
      case /* ViewEvent */3 :
          return "View event";
      case /* InputSymbol */4 :
          if (param[0]) {
            return "Input symbol (deactivate)";
          } else {
            return "Input symbol (activate)";
          }
      
    }
  }
}

exports.Normalization = Normalization;
exports.InputMethodAction = InputMethodAction;
exports.names = names;
exports.toString = toString$1;
/* No side effect */
