// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Item$AgdaModeVscode = require("../View/Component/Item.bs.js");
var Editor$AgdaModeVscode = require("../Editor.bs.js");
var RichText$AgdaModeVscode = require("../View/Component/RichText.bs.js");
var State__Type$AgdaModeVscode = require("./State__Type.bs.js");
var WebviewPanel$AgdaModeVscode = require("../View/WebviewPanel.bs.js");
var Connection__Error$AgdaModeVscode = require("../Connection/Connection__Error.bs.js");

function sendEvent(state, $$event) {
  State__Type$AgdaModeVscode.ViewCache.cacheEvent(state.panelCache, $$event);
  return WebviewPanel$AgdaModeVscode.sendEvent(state.panel, $$event);
}

function restore(state) {
  return State__Type$AgdaModeVscode.ViewCache.restore(state.panelCache, state.panel);
}

function display(state, header, body) {
  return sendEvent(state, {
              TAG: 0,
              _0: header,
              _1: body,
              [Symbol.for("name")]: "Display"
            });
}

function displayInAppendMode(state, header, body) {
  return sendEvent(state, {
              TAG: 1,
              _0: header,
              _1: body,
              [Symbol.for("name")]: "Append"
            });
}

function displayOutOfGoalError(state) {
  return display(state, {
              TAG: 3,
              _0: "Out of goal",
              [Symbol.for("name")]: "Error"
            }, [Item$AgdaModeVscode.plainText("Please place the cursor in a goal")]);
}

function displayConnectionError(state, error) {
  var match = Connection__Error$AgdaModeVscode.toString(error);
  return display(state, {
              TAG: 3,
              _0: "Connection Error: " + match[0],
              [Symbol.for("name")]: "Error"
            }, [Item$AgdaModeVscode.plainText(match[1])]);
}

function displayConnectionStatus(state, status) {
  if (status.TAG === /* Emacs */0) {
    return sendEvent(state, {
                TAG: 2,
                _0: "Emacs",
                [Symbol.for("name")]: "SetStatus"
              });
  } else if (status._1.TAG === /* ViaStdIO */0) {
    return sendEvent(state, {
                TAG: 2,
                _0: "LSP",
                [Symbol.for("name")]: "SetStatus"
              });
  } else {
    return sendEvent(state, {
                TAG: 2,
                _0: "LSP (TCP)",
                [Symbol.for("name")]: "SetStatus"
              });
  }
}

function updateIM(state, $$event) {
  return sendEvent(state, {
              TAG: 4,
              _0: $$event,
              [Symbol.for("name")]: "InputMethod"
            });
}

function updatePromptIM(state, content) {
  return sendEvent(state, {
              TAG: 3,
              _0: content,
              [Symbol.for("name")]: "PromptIMUpdate"
            });
}

function prompt(state, header, prompt$1, callbackOnPromptSuccess) {
  State__Type$AgdaModeVscode.Context.setPrompt(true);
  WebviewPanel$AgdaModeVscode.focus(state.panel);
  var request = {
    _0: header,
    _1: prompt$1,
    [Symbol.for("name")]: "Prompt"
  };
  var callback = function (response) {
    if (response) {
      return $$Promise.map(Curry._1(callbackOnPromptSuccess, response._0), (function (param) {
                    State__Type$AgdaModeVscode.Context.setPrompt(false);
                    Editor$AgdaModeVscode.focus(state.document);
                    return State__Type$AgdaModeVscode.ViewCache.clearPrompt(state.panelCache);
                  }));
    } else {
      State__Type$AgdaModeVscode.Context.setPrompt(false);
      Editor$AgdaModeVscode.focus(state.document);
      State__Type$AgdaModeVscode.ViewCache.clearPrompt(state.panelCache);
      State__Type$AgdaModeVscode.ViewCache.restore(state.panelCache, state.panel);
      return $$Promise.resolved(undefined);
    }
  };
  State__Type$AgdaModeVscode.ViewCache.cacheRequest(state.panelCache, request, callback);
  return WebviewPanel$AgdaModeVscode.sendRequest(state.panel, request, callback);
}

function interruptPrompt(state) {
  return $$Promise.tap(sendEvent(state, /* PromptInterrupt */0), (function (param) {
                State__Type$AgdaModeVscode.Context.setPrompt(false);
                Editor$AgdaModeVscode.focus(state.document);
                State__Type$AgdaModeVscode.ViewCache.clearPrompt(state.panelCache);
                return State__Type$AgdaModeVscode.ViewCache.restore(state.panelCache, state.panel);
              }));
}

var Panel = {
  restore: restore,
  display: display,
  displayInAppendMode: displayInAppendMode,
  displayOutOfGoalError: displayOutOfGoalError,
  displayConnectionError: displayConnectionError,
  displayConnectionStatus: displayConnectionStatus,
  updateIM: updateIM,
  updatePromptIM: updatePromptIM,
  prompt: prompt,
  interruptPrompt: interruptPrompt
};

function start(state) {
  var match = state.debugBuffer;
  if (match !== undefined) {
    return ;
  }
  var debugBuffer = WebviewPanel$AgdaModeVscode.make("Agda Debug Buffer", state.extensionPath);
  $$Promise.get(WebviewPanel$AgdaModeVscode.onceDestroyed(debugBuffer), (function (param) {
          state.debugBuffer = undefined;
          
        }));
  state.debugBuffer = Caml_option.some(debugBuffer);
  
}

function destroy(state) {
  return Belt_Option.forEach(state.debugBuffer, WebviewPanel$AgdaModeVscode.destroy);
}

function sendEvent$1(state, $$event) {
  return Belt_Option.mapWithDefault(state.debugBuffer, $$Promise.resolved(undefined), (function (x) {
                return WebviewPanel$AgdaModeVscode.sendEvent(x, $$event);
              }));
}

function display$1(state, msgs) {
  var body = Belt_Array.map(msgs, (function (param) {
          var verbosity = String(param[0]);
          var body = RichText$AgdaModeVscode.string(param[1]);
          return {
                  TAG: 0,
                  _0: verbosity,
                  _1: "",
                  _2: body,
                  _3: undefined,
                  _4: undefined,
                  [Symbol.for("name")]: "Labeled"
                };
        }));
  return sendEvent$1(state, {
              TAG: 0,
              _0: {
                TAG: 0,
                _0: "Agda Debug Buffer",
                [Symbol.for("name")]: "Plain"
              },
              _1: body,
              [Symbol.for("name")]: "Display"
            });
}

function displayInAppendMode$1(state, msgs) {
  var body = Belt_Array.map(msgs, (function (param) {
          var verbosity = String(param[0]);
          var body = RichText$AgdaModeVscode.string(param[1]);
          return {
                  TAG: 0,
                  _0: verbosity,
                  _1: "",
                  _2: body,
                  _3: undefined,
                  _4: undefined,
                  [Symbol.for("name")]: "Labeled"
                };
        }));
  return sendEvent$1(state, {
              TAG: 1,
              _0: {
                TAG: 0,
                _0: "Agda Debug Buffer",
                [Symbol.for("name")]: "Plain"
              },
              _1: body,
              [Symbol.for("name")]: "Append"
            });
}

function reveal(state) {
  var debugBuffer = state.debugBuffer;
  if (debugBuffer !== undefined) {
    WebviewPanel$AgdaModeVscode.reveal(Caml_option.valFromOption(debugBuffer));
    return display$1(state, state.runningInfoLog);
  } else {
    return $$Promise.resolved(undefined);
  }
}

var DebugBuffer = {
  start: start,
  destroy: destroy,
  reveal: reveal,
  display: display$1,
  displayInAppendMode: displayInAppendMode$1
};

exports.Panel = Panel;
exports.DebugBuffer = DebugBuffer;
/* Promise Not a pure module */
