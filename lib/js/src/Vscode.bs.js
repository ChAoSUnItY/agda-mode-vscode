// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function onMessage(callback) {
  window.addEventListener("message", (function (_event) {
          return Curry._1(callback, _event.data);
        }));
  return /* () */0;
}

var Api = {
  onMessage: onMessage
};

var Disposable = { };

var Memento = { };

var ExtensionContext = { };

var simple = { };

function sized(v) {
  return v;
}

var Layout = {
  simple: simple,
  sized: sized
};

var Commands = {
  Layout: Layout
};

function makeChange(authority, fragment, path, query, scheme, param) {
  return {
          authority: authority,
          fragment: fragment,
          path: path,
          query: query,
          scheme: scheme
        };
}

var Uri = {
  makeChange: makeChange
};

var ViewColumn = { };

var WebviewOptions = { };

var Webview = { };

function single(uri) {
  return uri;
}

function both(dark, light) {
  return {
          dark: dark,
          light: light
        };
}

function classify(param) {
  if ((v.dark === undefined)) {
    return /* Single */Caml_chrome_debugger.variant("Single", 0, [param]);
  } else {
    return /* Both */Caml_chrome_debugger.variant("Both", 1, [
              param,
              param
            ]);
  }
}

var IconPath = {
  single: single,
  both: both,
  classify: classify
};

var Options = { };

var WebviewPanel = {
  IconPath: IconPath,
  Options: Options
};

var TextDocument = { };

var TextEditor = { };

var Terminal = { };

var WindowState = { };

var TextEditorOptionsChangeEvent = { };

var TextEditorSelectionChangeEvent = { };

var TextEditorSelectionChangeKind = { };

var TextEditorViewColumnChangeEvent = { };

var TextEditorVisibleRangesChangeEvent = { };

var InputBox = { };

var OutputChannel = { };

var QuickPickItem = { };

var QuickPick = { };

var StatusBarItem = { };

var TerminalOptions = { };

var ExtensionTerminalOptions = { };

var DecorationRenderOptions = { };

var TextEditorDecorationType = { };

var TreeViewOptions = { };

var TreeView = { };

function make(enableCommandUris, enableScripts, localResourceRoots, portMapping, enableFindWidget, retainContextWhenHidden, param) {
  return {
          enableCommandUris: enableCommandUris,
          enableScripts: enableScripts,
          localResourceRoots: localResourceRoots,
          portMapping: portMapping,
          enableFindWidget: enableFindWidget,
          retainContextWhenHidden: retainContextWhenHidden
        };
}

var WebviewAndWebviewPanelOptions = {
  make: make
};

var ViewColumnAndPreserveFocus = { };

var TreeDataProvider = { };

var UriHandler = { };

var WebviewPanelSerializer = { };

var MessageOptions = { };

var MessageItem = { };

var InputBoxOptions = { };

var CancellationToken = { };

var OpenDialogOptions = { };

var QuickPickOptions = { };

var SaveDialogOptions = { };

var WorkspaceFolderPickOptions = { };

var WorkspaceFolder = { };

var ProgressOptions = { };

var Progress = { };

var $$Window = { };

var Workspace = { };

exports.Api = Api;
exports.Disposable = Disposable;
exports.Memento = Memento;
exports.ExtensionContext = ExtensionContext;
exports.Commands = Commands;
exports.Uri = Uri;
exports.ViewColumn = ViewColumn;
exports.WebviewOptions = WebviewOptions;
exports.Webview = Webview;
exports.WebviewPanel = WebviewPanel;
exports.TextDocument = TextDocument;
exports.TextEditor = TextEditor;
exports.Terminal = Terminal;
exports.WindowState = WindowState;
exports.TextEditorOptionsChangeEvent = TextEditorOptionsChangeEvent;
exports.TextEditorSelectionChangeEvent = TextEditorSelectionChangeEvent;
exports.TextEditorSelectionChangeKind = TextEditorSelectionChangeKind;
exports.TextEditorViewColumnChangeEvent = TextEditorViewColumnChangeEvent;
exports.TextEditorVisibleRangesChangeEvent = TextEditorVisibleRangesChangeEvent;
exports.InputBox = InputBox;
exports.OutputChannel = OutputChannel;
exports.QuickPickItem = QuickPickItem;
exports.QuickPick = QuickPick;
exports.StatusBarItem = StatusBarItem;
exports.TerminalOptions = TerminalOptions;
exports.ExtensionTerminalOptions = ExtensionTerminalOptions;
exports.DecorationRenderOptions = DecorationRenderOptions;
exports.TextEditorDecorationType = TextEditorDecorationType;
exports.TreeViewOptions = TreeViewOptions;
exports.TreeView = TreeView;
exports.WebviewAndWebviewPanelOptions = WebviewAndWebviewPanelOptions;
exports.ViewColumnAndPreserveFocus = ViewColumnAndPreserveFocus;
exports.TreeDataProvider = TreeDataProvider;
exports.UriHandler = UriHandler;
exports.WebviewPanelSerializer = WebviewPanelSerializer;
exports.MessageOptions = MessageOptions;
exports.MessageItem = MessageItem;
exports.InputBoxOptions = InputBoxOptions;
exports.CancellationToken = CancellationToken;
exports.OpenDialogOptions = OpenDialogOptions;
exports.QuickPickOptions = QuickPickOptions;
exports.SaveDialogOptions = SaveDialogOptions;
exports.WorkspaceFolderPickOptions = WorkspaceFolderPickOptions;
exports.WorkspaceFolder = WorkspaceFolder;
exports.ProgressOptions = ProgressOptions;
exports.Progress = Progress;
exports.$$Window = $$Window;
exports.Workspace = Workspace;
/* No side effect */
