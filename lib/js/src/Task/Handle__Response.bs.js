// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Task$AgdaModeVscode = require("./Task.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function Impl(Editor) {
  var Task = Task$AgdaModeVscode.Impl(Editor);
  var handle = function (body) {
    if (typeof body === "number") {
      return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                Curry._2(Task.display, /* Success */Caml_chrome_debugger.variant("Success", 1, ["Compilation Done!"]), /* Nothing */0),
                /* [] */0
              ]);
    }
    switch (body.tag | 0) {
      case /* Constraints */0 :
          var body$1 = body[0];
          if (body$1 !== undefined) {
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      Curry._3(Task.displayEmacs, /* Outputs */0, /* Plain */Caml_chrome_debugger.variant("Plain", 0, ["Constraints"]), body$1),
                      /* [] */0
                    ]);
          } else {
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      Curry._2(Task.display, /* Plain */Caml_chrome_debugger.variant("Plain", 0, ["No Constraints"]), /* Nothing */0),
                      /* [] */0
                    ]);
          }
      case /* AllGoalsWarnings */1 :
          var body$2 = body[1];
          var header = body[0];
          if (body$2 === "nil") {
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      Curry._2(Task.display, /* Success */Caml_chrome_debugger.variant("Success", 1, [header]), /* Nothing */0),
                      /* [] */0
                    ]);
          } else {
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      Curry._3(Task.displayEmacs, /* AllGoalsWarnings */1, /* Plain */Caml_chrome_debugger.variant("Plain", 0, [header]), body$2),
                      /* [] */0
                    ]);
          }
      case /* Time */2 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._3(Task.displayEmacs, /* Text */5, /* Plain */Caml_chrome_debugger.variant("Plain", 0, ["Time"]), body[0]),
                    /* [] */0
                  ]);
      case /* Error */3 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._3(Task.displayEmacs, /* Error */4, /* Error */Caml_chrome_debugger.variant("Error", 3, ["Error!"]), body[0]),
                    /* [] */0
                  ]);
      case /* Intro */4 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._3(Task.displayEmacs, /* Text */5, /* Plain */Caml_chrome_debugger.variant("Plain", 0, ["Intro"]), body[0]),
                    /* [] */0
                  ]);
      case /* Auto */5 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._3(Task.displayEmacs, /* Text */5, /* Plain */Caml_chrome_debugger.variant("Plain", 0, ["Auto"]), body[0]),
                    /* [] */0
                  ]);
      case /* ModuleContents */6 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._3(Task.displayEmacs, /* Text */5, /* Plain */Caml_chrome_debugger.variant("Plain", 0, ["Module Contents"]), body[0]),
                    /* [] */0
                  ]);
      case /* SearchAbout */7 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._3(Task.displayEmacs, /* SearchAbout */3, /* Plain */Caml_chrome_debugger.variant("Plain", 0, ["Search About"]), body[0]),
                    /* [] */0
                  ]);
      case /* WhyInScope */8 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._3(Task.displayEmacs, /* Text */5, /* Plain */Caml_chrome_debugger.variant("Plain", 0, ["Scope info"]), body[0]),
                    /* [] */0
                  ]);
      case /* NormalForm */9 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._3(Task.displayEmacs, /* Text */5, /* Plain */Caml_chrome_debugger.variant("Plain", 0, ["Normal form"]), body[0]),
                    /* [] */0
                  ]);
      case /* GoalType */10 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._3(Task.displayEmacs, /* GoalType */2, /* Plain */Caml_chrome_debugger.variant("Plain", 0, ["Goal and Context"]), body[0]),
                    /* [] */0
                  ]);
      case /* CurrentGoal */11 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.display, /* Plain */Caml_chrome_debugger.variant("Plain", 0, ["Current goal"]), /* Plain */Caml_chrome_debugger.variant("Plain", 0, [body[0]])),
                    /* [] */0
                  ]);
      case /* InferredType */12 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.display, /* Plain */Caml_chrome_debugger.variant("Plain", 0, ["Inferred type"]), /* Plain */Caml_chrome_debugger.variant("Plain", 0, [body[0]])),
                    /* [] */0
                  ]);
      case /* Context */13 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._3(Task.displayEmacs, /* Outputs */0, /* Plain */Caml_chrome_debugger.variant("Plain", 0, ["Context"]), body[0]),
                    /* [] */0
                  ]);
      case /* HelperFunction */14 :
          var payload = body[0];
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* WithStateP */Caml_chrome_debugger.variant("WithStateP", 8, [(function (param) {
                            return $$Promise.map(Curry._1(Editor.copyToClipboard, payload), (function (param) {
                                          return /* [] */0;
                                        }));
                          })]),
                    /* :: */Caml_chrome_debugger.simpleVariant("::", [
                        Curry._2(Task.display, /* Plain */Caml_chrome_debugger.variant("Plain", 0, ["Helper function (copied to clipboard)"]), /* Plain */Caml_chrome_debugger.variant("Plain", 0, [payload])),
                        /* [] */0
                      ])
                  ]);
      case /* Version */15 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.display, /* Plain */Caml_chrome_debugger.variant("Plain", 0, ["Version"]), /* Plain */Caml_chrome_debugger.variant("Plain", 0, [body[0]])),
                    /* [] */0
                  ]);
      
    }
  };
  var DisplayInfo = {
    handle: handle
  };
  var handle$1 = function (response) {
    if (typeof response === "number") {
      if (response === /* ClearHighlighting */1) {
        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* Decoration */Caml_chrome_debugger.variant("Decoration", 4, [/* Clear */0]),
                  /* [] */0
                ]);
      } else {
        return /* [] */0;
      }
    }
    switch (response.tag | 0) {
      case /* HighlightingInfoDirect */0 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* Decoration */Caml_chrome_debugger.variant("Decoration", 4, [/* AddDirectly */Caml_chrome_debugger.variant("AddDirectly", 0, [response[1]])]),
                    /* [] */0
                  ]);
      case /* HighlightingInfoIndirect */1 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* Decoration */Caml_chrome_debugger.variant("Decoration", 4, [/* AddIndirectly */Caml_chrome_debugger.variant("AddIndirectly", 1, [response[0]])]),
                    /* [] */0
                  ]);
      case /* Status */2 :
          return /* [] */0;
      case /* JumpToError */3 :
          var offset = response[1];
          var filepath = response[0];
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* WithStateP */Caml_chrome_debugger.variant("WithStateP", 8, [(function (state) {
                            var path = Curry._1(Editor.getFileName, state.editor);
                            if (path !== undefined && path === filepath) {
                              return $$Promise.resolved(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                            /* Goal */Caml_chrome_debugger.variant("Goal", 6, [/* SetCursor */Caml_chrome_debugger.variant("SetCursor", 2, [offset - 1 | 0])]),
                                            /* [] */0
                                          ]));
                            } else {
                              return $$Promise.resolved(/* [] */0);
                            }
                          })]),
                    /* [] */0
                  ]);
      case /* InteractionPoints */4 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* BenchStart */Caml_chrome_debugger.variant("BenchStart", 9, ["$$$ Instantiating goals"]),
                    /* :: */Caml_chrome_debugger.simpleVariant("::", [
                        /* Goal */Caml_chrome_debugger.variant("Goal", 6, [/* Instantiate */Caml_chrome_debugger.variant("Instantiate", 0, [response[0]])]),
                        /* :: */Caml_chrome_debugger.simpleVariant("::", [
                            /* BenchEnd */Caml_chrome_debugger.variant("BenchEnd", 10, ["$$$ Instantiating goals"]),
                            /* [] */0
                          ])
                      ])
                  ]);
      case /* GiveAction */5 :
          var give = response[1];
          var index = response[0];
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* WithStateP */Caml_chrome_debugger.variant("WithStateP", 8, [(function (state) {
                            var found = Belt_Array.keep(state.goals, (function (goal) {
                                    return goal.index === index;
                                  }));
                            var goal = Belt_Array.get(found, 0);
                            if (goal === undefined) {
                              return $$Promise.resolved(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                            Curry._2(Task.display, /* Error */Caml_chrome_debugger.variant("Error", 3, ["Error: Give failed"]), /* Plain */Caml_chrome_debugger.variant("Plain", 0, ["Cannot find goal #" + String(index)])),
                                            /* [] */0
                                          ]));
                            }
                            var tmp;
                            if (typeof give === "number") {
                              tmp = give !== 0 ? /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                    /* Goal */Caml_chrome_debugger.variant("Goal", 6, [/* RemoveBoundaryAndDestroy */Caml_chrome_debugger.variant("RemoveBoundaryAndDestroy", 4, [goal])]),
                                    /* [] */0
                                  ]) : /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                    /* Goal */Caml_chrome_debugger.variant("Goal", 6, [/* Modify */Caml_chrome_debugger.variant("Modify", 1, [
                                            goal,
                                            (function (content) {
                                                return "(" + (content + ")");
                                              })
                                          ])]),
                                    /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                        /* Goal */Caml_chrome_debugger.variant("Goal", 6, [/* RemoveBoundaryAndDestroy */Caml_chrome_debugger.variant("RemoveBoundaryAndDestroy", 4, [goal])]),
                                        /* [] */0
                                      ])
                                  ]);
                            } else {
                              var content = give[0];
                              tmp = /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                  /* Goal */Caml_chrome_debugger.variant("Goal", 6, [/* Modify */Caml_chrome_debugger.variant("Modify", 1, [
                                          goal,
                                          (function (param) {
                                              return content.replace(/\\n/g, "\n");
                                            })
                                        ])]),
                                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                      /* Goal */Caml_chrome_debugger.variant("Goal", 6, [/* RemoveBoundaryAndDestroy */Caml_chrome_debugger.variant("RemoveBoundaryAndDestroy", 4, [goal])]),
                                      /* [] */0
                                    ])
                                ]);
                            }
                            return $$Promise.resolved(tmp);
                          })]),
                    /* [] */0
                  ]);
      case /* MakeCase */6 :
          var lines = response[1];
          var makeCaseType = response[0];
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* Goal */Caml_chrome_debugger.variant("Goal", 6, [/* LocalOrGlobal */Caml_chrome_debugger.variant("LocalOrGlobal", 7, [
                            (function (goal) {
                                if (makeCaseType) {
                                  return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                            /* Goal */Caml_chrome_debugger.variant("Goal", 6, [/* ReplaceWithLambda */Caml_chrome_debugger.variant("ReplaceWithLambda", 6, [
                                                    goal,
                                                    lines
                                                  ])]),
                                            /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                /* DispatchCommand */Caml_chrome_debugger.variant("DispatchCommand", 0, [/* Load */0]),
                                                /* [] */0
                                              ])
                                          ]);
                                } else {
                                  return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                            /* Goal */Caml_chrome_debugger.variant("Goal", 6, [/* ReplaceWithLines */Caml_chrome_debugger.variant("ReplaceWithLines", 5, [
                                                    goal,
                                                    lines
                                                  ])]),
                                            /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                /* DispatchCommand */Caml_chrome_debugger.variant("DispatchCommand", 0, [/* Load */0]),
                                                /* [] */0
                                              ])
                                          ]);
                                }
                              }),
                            /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                /* Error */Caml_chrome_debugger.variant("Error", 5, [/* OutOfGoal */0]),
                                /* [] */0
                              ])
                          ])]),
                    /* [] */0
                  ]);
      case /* SolveAll */7 :
          var solutions = response[0];
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* WithStateP */Caml_chrome_debugger.variant("WithStateP", 8, [(function (state) {
                            var solveOne = function (param) {
                              var solution = param[1];
                              var index = param[0];
                              var goals = Belt_Array.keep(state.goals, (function (goal) {
                                      return goal.index === index;
                                    }));
                              var goal = Belt_Array.get(goals, 0);
                              if (goal !== undefined) {
                                return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                          /* Goal */Caml_chrome_debugger.variant("Goal", 6, [/* Modify */Caml_chrome_debugger.variant("Modify", 1, [
                                                  goal,
                                                  (function (param) {
                                                      return solution;
                                                    })
                                                ])]),
                                          /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                              /* AgdaRequest */Caml_chrome_debugger.variant("AgdaRequest", 1, [/* Give */Caml_chrome_debugger.variant("Give", 3, [goal])]),
                                              /* [] */0
                                            ])
                                        ]);
                              } else {
                                return /* [] */0;
                              }
                            };
                            var tasks = Belt_List.concatMany(Belt_Array.map(solutions, solveOne));
                            var size = solutions.length;
                            var after = size === 0 ? /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                  Curry._2(Task.display, /* Error */Caml_chrome_debugger.variant("Error", 3, ["No solutions found"]), /* Nothing */0),
                                  /* [] */0
                                ]) : /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                  Curry._2(Task.display, /* Success */Caml_chrome_debugger.variant("Success", 1, [String(size) + " goals solved"]), /* Nothing */0),
                                  /* [] */0
                                ]);
                            return $$Promise.resolved(Belt_List.concat(tasks, after));
                          })]),
                    /* [] */0
                  ]);
      case /* DisplayInfo */8 :
          return handle(response[0]);
      case /* RunningInfo */9 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.display, /* Plain */Caml_chrome_debugger.variant("Plain", 0, ["Type-checking"]), /* Plain */Caml_chrome_debugger.variant("Plain", 0, [response[1]])),
                    /* [] */0
                  ]);
      
    }
  };
  return {
          Task: Task,
          DisplayInfo: DisplayInfo,
          handle: handle$1
        };
}

exports.Impl = Impl;
/* Promise Not a pure module */
