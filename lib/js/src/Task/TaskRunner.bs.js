// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Task$AgdaModeVscode = require("./Task.bs.js");
var Event$AgdaModeVscode = require("../Util/Event.bs.js");
var State$AgdaModeVscode = require("../State.bs.js");
var Task__Command$AgdaModeVscode = require("./Task__Command.bs.js");

function Impl(Editor) {
  var TaskCommand = Task__Command$AgdaModeVscode.Impl(Editor);
  var Task = Task$AgdaModeVscode.Impl(Editor);
  var State = State$AgdaModeVscode.Impl(Editor);
  var runTask = function (state, task) {
    if (typeof task === "number") {
      console.log("[ task ][ connect ]");
      return $$Promise.map($$Promise.tapError($$Promise.tapOk(Curry._1(State.connect, state), (function (param) {
                            console.log("OK", param);
                            
                          })), (function (param) {
                        console.log("Error", param);
                        
                      })), (function (param) {
                    return /* [] */0;
                  }));
    }
    switch (task.tag | 0) {
      case /* WithState */0 :
          return Curry._1(task[0], state);
      case /* DispatchCommand */1 :
          var command = task[0];
          console.log("[ task ][ dispatch command ]", command);
          return $$Promise.resolved(Curry._1(TaskCommand.dispatch, command));
      case /* SendRequest */2 :
          console.log("[ task ][ send request ]");
          return $$Promise.map($$Promise.map(Curry._2(State.sendRequest, state, task[0]), (function (ev) {
                            return /* [] */0;
                          })), (function (param) {
                        return /* [] */0;
                      }));
      
    }
  };
  var destroy = function (self) {
    Curry._1(self.emitter.destroy, undefined);
    return Curry._1(self.listener, undefined);
  };
  var make = function (state) {
    var emitter = Event$AgdaModeVscode.make(undefined);
    var queue = [];
    var busy = {
      contents: false
    };
    var runTasksInQueue = function (param) {
      busy.contents = true;
      var task = queue.shift();
      if (task !== undefined) {
        return $$Promise.get($$Promise.map(runTask(state, task), (function (tasks) {
                          return Belt_List.forEach(tasks, emitter.emit);
                        })), (function (param) {
                      return runTasksInQueue(undefined);
                    }));
      } else {
        busy.contents = false;
        return ;
      }
    };
    var listener = Curry._1(emitter.on, (function (task) {
            queue.push(task);
            if (!busy.contents) {
              return runTasksInQueue(undefined);
            }
            
          }));
    return {
            emitter: emitter,
            listener: listener
          };
  };
  var addTask = function (runner, task) {
    return Curry._1(runner.emitter.emit, task);
  };
  return {
          TaskCommand: TaskCommand,
          Task: Task,
          State: State,
          runTask: runTask,
          destroy: destroy,
          make: make,
          addTask: addTask
        };
}

exports.Impl = Impl;
/* Promise Not a pure module */
