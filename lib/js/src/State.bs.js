// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Vscode = require("vscode");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var IM$AgdaModeVscode = require("./InputMethod/IM.bs.js");
var Chan$AgdaModeVscode = require("./Util/Chan.bs.js");
var Goal$AgdaModeVscode = require("./Goal.bs.js");
var View$AgdaModeVscode = require("./View.bs.js");
var Config$AgdaModeVscode = require("./Config.bs.js");
var Editor$AgdaModeVscode = require("./Editor.bs.js");
var Connection$AgdaModeVscode = require("./Connection.bs.js");
var Decoration$AgdaModeVscode = require("./Decoration.bs.js");
var ViewController$AgdaModeVscode = require("./ViewController.bs.js");

function setLoaded(value) {
  Vscode.commands.executeCommand("setContext", "agdaMode", value);
  
}

var Context = {
  setLoaded: setLoaded
};

function onRemoveFromRegistry(state) {
  return Chan$AgdaModeVscode.once(state.onRemoveFromRegistry);
}

function emitRemoveFromRegistry(state) {
  return Chan$AgdaModeVscode.emit(state.onRemoveFromRegistry, undefined);
}

function connect(state) {
  var connection = state.connection;
  if (connection !== undefined) {
    return $$Promise.resolved({
                TAG: 0,
                _0: connection,
                [Symbol.for("name")]: "Ok"
              });
  } else {
    return $$Promise.tapOk(Connection$AgdaModeVscode.make(Config$AgdaModeVscode.getAgdaPath, Config$AgdaModeVscode.setAgdaPath), (function (conn) {
                  state.connection = conn;
                  
                }));
  }
}

function disconnect(state) {
  var connection = state.connection;
  if (connection !== undefined) {
    Connection$AgdaModeVscode.destroy(connection);
    return $$Promise.resolved(undefined);
  } else {
    return $$Promise.resolved(undefined);
  }
}

function addViaPipe(state, highlightings) {
  return Decoration$AgdaModeVscode.addDirectly(state.decorations, highlightings);
}

function addViaFile(state, filepath) {
  return Decoration$AgdaModeVscode.addIndirectly(state.decorations, filepath);
}

function clear(state) {
  return Decoration$AgdaModeVscode.removeAppliedDecorations(state.decorations);
}

function apply(state) {
  return $$Promise.map(Decoration$AgdaModeVscode.readTempFiles(state.decorations), (function (param) {
                return Decoration$AgdaModeVscode.applyHighlightings(state.decorations, state.editor);
              }));
}

function refresh(state) {
  Decoration$AgdaModeVscode.refresh(state.decorations, state.editor);
  return Belt_Array.forEach(state.goals, (function (goal) {
                return Goal$AgdaModeVscode.refreshDecoration(goal, state.editor);
              }));
}

function destroy(state) {
  return Decoration$AgdaModeVscode.destroy(state.decorations);
}

var Decoration = {
  make: Decoration$AgdaModeVscode.make,
  addViaPipe: addViaPipe,
  addViaFile: addViaFile,
  clear: clear,
  apply: apply,
  refresh: refresh,
  destroy: destroy
};

function show(state) {
  ViewController$AgdaModeVscode.show(state.view);
  Vscode.commands.executeCommand("setContext", "agdaMode", true);
  
}

function hide(state) {
  ViewController$AgdaModeVscode.hide(state.view);
  Vscode.commands.executeCommand("setContext", "agdaMode", false);
  
}

function display(state, header, body) {
  return ViewController$AgdaModeVscode.sendEvent(state.view, {
              TAG: 0,
              _0: header,
              _1: body,
              [Symbol.for("name")]: "Display"
            });
}

function displayEmacs(state, kind, header, body) {
  return ViewController$AgdaModeVscode.sendEvent(state.view, {
              TAG: 0,
              _0: header,
              _1: {
                TAG: 1,
                _0: kind,
                _1: View$AgdaModeVscode.Header.toString(header),
                _2: body,
                [Symbol.for("name")]: "Emacs"
              },
              [Symbol.for("name")]: "Display"
            });
}

function displayOutOfGoalError(state) {
  return display(state, {
              TAG: 3,
              _0: "Out of goal",
              [Symbol.for("name")]: "Error"
            }, {
              TAG: 0,
              _0: "Please place the cursor in a goal",
              [Symbol.for("name")]: "Plain"
            });
}

function updateIM(state, $$event) {
  return ViewController$AgdaModeVscode.sendEvent(state.view, {
              TAG: 2,
              _0: $$event,
              [Symbol.for("name")]: "InputMethod"
            });
}

function updatePromptIM(state, content) {
  return ViewController$AgdaModeVscode.sendEvent(state.view, {
              TAG: 1,
              _0: content,
              [Symbol.for("name")]: "PromptIMUpdate"
            });
}

function prompt(state, header, prompt$1, callbackOnPromptSuccess) {
  Vscode.commands.executeCommand("setContext", "agdaModePrompting", true);
  ViewController$AgdaModeVscode.focus(state.view);
  return ViewController$AgdaModeVscode.sendRequest(state.view, {
              _0: header,
              _1: prompt$1,
              [Symbol.for("name")]: "Prompt"
            }, (function (response) {
                if (response) {
                  return $$Promise.map(Curry._1(callbackOnPromptSuccess, response._0), (function (param) {
                                Vscode.commands.executeCommand("setContext", "agdaModePrompting", false);
                                return Editor$AgdaModeVscode.focus(state.document);
                              }));
                } else {
                  return $$Promise.resolved(undefined);
                }
              }));
}

function interruptPrompt(state) {
  return ViewController$AgdaModeVscode.sendEvent(state.view, /* PromptInterrupt */0);
}

var View = {
  show: show,
  hide: hide,
  display: display,
  displayEmacs: displayEmacs,
  displayOutOfGoalError: displayOutOfGoalError,
  updateIM: updateIM,
  updatePromptIM: updatePromptIM,
  prompt: prompt,
  interruptPrompt: interruptPrompt
};

function destroy$1(state) {
  ViewController$AgdaModeVscode.destroy(state.view);
  Chan$AgdaModeVscode.emit(state.onRemoveFromRegistry, undefined);
  Chan$AgdaModeVscode.destroy(state.onRemoveFromRegistry);
  Belt_Array.forEach(state.goals, Goal$AgdaModeVscode.destroy);
  Decoration$AgdaModeVscode.destroy(state.decorations);
  Vscode.commands.executeCommand("setContext", "agdaMode", false);
  Belt_Array.forEach(state.subscriptions, (function (prim) {
          return prim.dispose();
        }));
  return disconnect(state);
}

function make(extentionPath, chan, editor) {
  Vscode.commands.executeCommand("setContext", "agdaMode", true);
  var view = ViewController$AgdaModeVscode.make(extentionPath, editor);
  return {
          editor: editor,
          document: editor.document,
          view: view,
          connection: undefined,
          goals: [],
          decorations: Decoration$AgdaModeVscode.make(undefined),
          cursor: undefined,
          editorIM: IM$AgdaModeVscode.make(chan),
          promptIM: IM$AgdaModeVscode.make(chan),
          subscriptions: [],
          onRemoveFromRegistry: Chan$AgdaModeVscode.make(undefined)
        };
}

exports.Context = Context;
exports.onRemoveFromRegistry = onRemoveFromRegistry;
exports.emitRemoveFromRegistry = emitRemoveFromRegistry;
exports.connect = connect;
exports.disconnect = disconnect;
exports.Decoration = Decoration;
exports.View = View;
exports.destroy = destroy$1;
exports.make = make;
/* vscode Not a pure module */
