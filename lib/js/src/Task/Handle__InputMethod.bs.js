// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Vscode = require("vscode");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Util$AgdaModeVscode = require("../Util/Util.bs.js");
var Editor$AgdaModeVscode = require("../Editor.bs.js");
var EditorIM$AgdaModeVscode = require("../InputMethod/EditorIM.bs.js");

function deactivate(state) {
  if (EditorIM$AgdaModeVscode.isActivated(state.editorIM)) {
    EditorIM$AgdaModeVscode.deactivate(state.editorIM);
    return {
            hd: {
              TAG: 2,
              _0: {
                TAG: 2,
                _0: /* Deactivate */1,
                [Symbol.for("name")]: "InputMethod"
              },
              [Symbol.for("name")]: "ViewEvent"
            },
            tl: /* [] */0
          };
  } else if (EditorIM$AgdaModeVscode.isActivated(state.promptIM)) {
    EditorIM$AgdaModeVscode.deactivate(state.promptIM);
    return {
            hd: {
              TAG: 2,
              _0: {
                TAG: 2,
                _0: /* Deactivate */1,
                [Symbol.for("name")]: "InputMethod"
              },
              [Symbol.for("name")]: "ViewEvent"
            },
            tl: /* [] */0
          };
  } else {
    return /* [] */0;
  }
}

var IM = {
  deactivate: deactivate
};

function handleEditorIMOutput(state, output) {
  var handle = function (kind) {
    if (typeof kind === "number") {
      if (kind === /* Activate */0) {
        return $$Promise.resolved({
                    hd: {
                      TAG: 0,
                      _0: {
                        TAG: 13,
                        _0: /* Activate */0,
                        [Symbol.for("name")]: "InputMethod"
                      },
                      [Symbol.for("name")]: "DispatchCommand"
                    },
                    tl: /* [] */0
                  });
      } else {
        return $$Promise.resolved({
                    hd: {
                      TAG: 2,
                      _0: {
                        TAG: 2,
                        _0: /* Deactivate */1,
                        [Symbol.for("name")]: "InputMethod"
                      },
                      [Symbol.for("name")]: "ViewEvent"
                    },
                    tl: /* [] */0
                  });
      }
    }
    if (!kind.TAG) {
      return $$Promise.resolved({
                  hd: {
                    TAG: 2,
                    _0: {
                      TAG: 2,
                      _0: {
                        _0: kind._0,
                        _1: kind._1,
                        _2: kind._2,
                        [Symbol.for("name")]: "Update"
                      },
                      [Symbol.for("name")]: "InputMethod"
                    },
                    [Symbol.for("name")]: "ViewEvent"
                  },
                  tl: /* [] */0
                });
    }
    var resolve = kind._1;
    var $$document = state.editor.document;
    var replacements = Belt_Array.map(kind._0, (function (param) {
            var interval = param[0];
            var range = new Vscode.Range($$document.positionAt(interval[0]), $$document.positionAt(interval[1]));
            return [
                    range,
                    param[1]
                  ];
          }));
    return $$Promise.map(Editor$AgdaModeVscode.$$Text.batchReplace($$document, replacements), (function (param) {
                  Curry._1(resolve, undefined);
                  return /* [] */0;
                }));
  };
  return $$Promise.map(Util$AgdaModeVscode.oneByOne(Belt_Array.map(output, handle)), Belt_List.concatMany);
}

var previous = {
  contents: ""
};

var current = {
  contents: ""
};

function activate(self, input) {
  var cursorOffset = input.length;
  previous.contents = input.substring(0, cursorOffset);
  return EditorIM$AgdaModeVscode.activate(self, undefined, [[
                cursorOffset,
                cursorOffset
              ]]);
}

function change(self, input) {
  current.contents = input;
  var input$1 = EditorIM$AgdaModeVscode.deviseChange(self, previous.contents, input);
  if (input$1 !== undefined) {
    return EditorIM$AgdaModeVscode.run(self, undefined, input$1);
  } else {
    return $$Promise.resolved([/* Deactivate */1]);
  }
}

function insertChar(self, $$char) {
  return change(self, previous.contents + $$char);
}

function handle(state, output) {
  var handle$1 = function (kind) {
    if (typeof kind === "number") {
      if (kind === /* Activate */0) {
        return {
                hd: {
                  TAG: 0,
                  _0: {
                    TAG: 13,
                    _0: /* Activate */0,
                    [Symbol.for("name")]: "InputMethod"
                  },
                  [Symbol.for("name")]: "DispatchCommand"
                },
                tl: /* [] */0
              };
      } else {
        return deactivate(state);
      }
    }
    if (!kind.TAG) {
      return {
              hd: {
                TAG: 2,
                _0: {
                  TAG: 2,
                  _0: {
                    _0: kind._0,
                    _1: kind._1,
                    _2: kind._2,
                    [Symbol.for("name")]: "Update"
                  },
                  [Symbol.for("name")]: "InputMethod"
                },
                [Symbol.for("name")]: "ViewEvent"
              },
              tl: /* [] */0
            };
    }
    Curry._1(kind._1, undefined);
    var replaced = {
      contents: current.contents
    };
    var delta = {
      contents: 0
    };
    var replace = function (param) {
      var t = param[1];
      var match = param[0];
      var end_ = match[1];
      var start = match[0];
      replaced.contents = replaced.contents.slice(0, delta.contents + start | 0) + t + replaced.contents.slice(delta.contents + end_ | 0);
      delta.contents = (delta.contents + t.length | 0) - (end_ - start | 0) | 0;
      
    };
    Belt_Array.forEach(kind._0, replace);
    return {
            hd: {
              TAG: 2,
              _0: {
                TAG: 1,
                _0: replaced.contents,
                [Symbol.for("name")]: "PromptIMUpdate"
              },
              [Symbol.for("name")]: "ViewEvent"
            },
            tl: /* [] */0
          };
  };
  return Belt_List.concatMany(Belt_Array.map(output, handle$1));
}

var TempPromptIM = {
  previous: previous,
  current: current,
  activate: activate,
  change: change,
  insertChar: insertChar,
  handle: handle
};

function chooseSymbol(state, symbol) {
  if (EditorIM$AgdaModeVscode.isActivated(state.editorIM)) {
    return $$Promise.map($$Promise.flatMap(EditorIM$AgdaModeVscode.run(state.editorIM, Caml_option.some(state.editor), {
                        TAG: 2,
                        _0: {
                          _0: symbol,
                          [Symbol.for("name")]: "ChooseSymbol"
                        },
                        [Symbol.for("name")]: "Candidate"
                      }), (function (param) {
                      return handleEditorIMOutput(state, param);
                    })), (function (tasks) {
                  return Belt_List.concat(tasks, {
                              hd: {
                                TAG: 8,
                                _0: (function (state) {
                                    return $$Promise.resolved(deactivate(state));
                                  }),
                                [Symbol.for("name")]: "WithStateP"
                              },
                              tl: /* [] */0
                            });
                }));
  } else if (EditorIM$AgdaModeVscode.isActivated(state.promptIM)) {
    return $$Promise.map($$Promise.map(EditorIM$AgdaModeVscode.run(state.promptIM, undefined, {
                        TAG: 2,
                        _0: {
                          _0: symbol,
                          [Symbol.for("name")]: "ChooseSymbol"
                        },
                        [Symbol.for("name")]: "Candidate"
                      }), (function (param) {
                      return handle(state, param);
                    })), (function (tasks) {
                  return Belt_List.concat(tasks, {
                              hd: {
                                TAG: 8,
                                _0: (function (state) {
                                    return $$Promise.resolved(deactivate(state));
                                  }),
                                [Symbol.for("name")]: "WithStateP"
                              },
                              tl: /* [] */0
                            });
                }));
  } else {
    return $$Promise.resolved(/* [] */0);
  }
}

function promptChange(state, input) {
  var shouldActivate = input.endsWith("\\");
  var activatePromptIM = function (param) {
    var input$1 = input.substring(0, input.length - 1 | 0);
    activate(state.promptIM, input$1);
    return {
            hd: {
              TAG: 2,
              _0: {
                TAG: 2,
                _0: /* Activate */0,
                [Symbol.for("name")]: "InputMethod"
              },
              [Symbol.for("name")]: "ViewEvent"
            },
            tl: {
              hd: {
                TAG: 2,
                _0: {
                  TAG: 1,
                  _0: input$1,
                  [Symbol.for("name")]: "PromptIMUpdate"
                },
                [Symbol.for("name")]: "ViewEvent"
              },
              tl: /* [] */0
            }
          };
  };
  if (EditorIM$AgdaModeVscode.isActivated(state.editorIM)) {
    if (shouldActivate) {
      return $$Promise.resolved(Belt_List.concatMany([
                      deactivate(state),
                      activatePromptIM(undefined)
                    ]));
    } else {
      return $$Promise.resolved({
                  hd: {
                    TAG: 2,
                    _0: {
                      TAG: 1,
                      _0: input,
                      [Symbol.for("name")]: "PromptIMUpdate"
                    },
                    [Symbol.for("name")]: "ViewEvent"
                  },
                  tl: /* [] */0
                });
    }
  } else if (EditorIM$AgdaModeVscode.isActivated(state.promptIM)) {
    return $$Promise.map(change(state.promptIM, input), (function (param) {
                  return handle(state, param);
                }));
  } else if (shouldActivate) {
    return $$Promise.resolved(activatePromptIM(undefined));
  } else {
    return $$Promise.resolved({
                hd: {
                  TAG: 2,
                  _0: {
                    TAG: 1,
                    _0: input,
                    [Symbol.for("name")]: "PromptIMUpdate"
                  },
                  [Symbol.for("name")]: "ViewEvent"
                },
                tl: /* [] */0
              });
  }
}

function handle$1(x) {
  if (typeof x === "number") {
    switch (x) {
      case /* Activate */0 :
          return {
                  hd: {
                    TAG: 8,
                    _0: (function (state) {
                        if (EditorIM$AgdaModeVscode.isActivated(state.editorIM)) {
                          Belt_Array.forEach(Editor$AgdaModeVscode.Cursor.getMany(state.editor), (function (point) {
                                  Editor$AgdaModeVscode.$$Text.insert(state.editor.document, point, "\\");
                                  
                                }));
                          return $$Promise.resolved(deactivate(state));
                        }
                        var $$document = state.editor.document;
                        var startingRanges = Belt_Array.map(Editor$AgdaModeVscode.$$Selection.getMany(state.editor), (function (range) {
                                return [
                                        $$document.offsetAt(range.start),
                                        $$document.offsetAt(range.end)
                                      ];
                              }));
                        EditorIM$AgdaModeVscode.activate(state.editorIM, Caml_option.some(state.editor), startingRanges);
                        return $$Promise.resolved({
                                    hd: {
                                      TAG: 2,
                                      _0: {
                                        TAG: 2,
                                        _0: /* Activate */0,
                                        [Symbol.for("name")]: "InputMethod"
                                      },
                                      [Symbol.for("name")]: "ViewEvent"
                                    },
                                    tl: /* [] */0
                                  });
                      }),
                    [Symbol.for("name")]: "WithStateP"
                  },
                  tl: /* [] */0
                };
      case /* MoveUp */1 :
          return {
                  hd: {
                    TAG: 8,
                    _0: (function (state) {
                        return $$Promise.flatMap(EditorIM$AgdaModeVscode.run(state.editorIM, Caml_option.some(state.editor), {
                                        TAG: 2,
                                        _0: /* BrowseUp */0,
                                        [Symbol.for("name")]: "Candidate"
                                      }), (function (param) {
                                      return handleEditorIMOutput(state, param);
                                    }));
                      }),
                    [Symbol.for("name")]: "WithStateP"
                  },
                  tl: /* [] */0
                };
      case /* MoveRight */2 :
          return {
                  hd: {
                    TAG: 8,
                    _0: (function (state) {
                        return $$Promise.flatMap(EditorIM$AgdaModeVscode.run(state.editorIM, Caml_option.some(state.editor), {
                                        TAG: 2,
                                        _0: /* BrowseRight */3,
                                        [Symbol.for("name")]: "Candidate"
                                      }), (function (param) {
                                      return handleEditorIMOutput(state, param);
                                    }));
                      }),
                    [Symbol.for("name")]: "WithStateP"
                  },
                  tl: /* [] */0
                };
      case /* MoveDown */3 :
          return {
                  hd: {
                    TAG: 8,
                    _0: (function (state) {
                        return $$Promise.flatMap(EditorIM$AgdaModeVscode.run(state.editorIM, Caml_option.some(state.editor), {
                                        TAG: 2,
                                        _0: /* BrowseDown */1,
                                        [Symbol.for("name")]: "Candidate"
                                      }), (function (param) {
                                      return handleEditorIMOutput(state, param);
                                    }));
                      }),
                    [Symbol.for("name")]: "WithStateP"
                  },
                  tl: /* [] */0
                };
      case /* MoveLeft */4 :
          return {
                  hd: {
                    TAG: 8,
                    _0: (function (state) {
                        return $$Promise.flatMap(EditorIM$AgdaModeVscode.run(state.editorIM, Caml_option.some(state.editor), {
                                        TAG: 2,
                                        _0: /* BrowseLeft */2,
                                        [Symbol.for("name")]: "Candidate"
                                      }), (function (param) {
                                      return handleEditorIMOutput(state, param);
                                    }));
                      }),
                    [Symbol.for("name")]: "WithStateP"
                  },
                  tl: /* [] */0
                };
      
    }
  } else {
    var $$char = x._0;
    return {
            hd: {
              TAG: 8,
              _0: (function (state) {
                  if (!EditorIM$AgdaModeVscode.isActivated(state.editorIM)) {
                    if (EditorIM$AgdaModeVscode.isActivated(state.promptIM)) {
                      return $$Promise.map(insertChar(state.promptIM, $$char), (function (param) {
                                    return handle(state, param);
                                  }));
                    } else {
                      return $$Promise.resolved(/* [] */0);
                    }
                  }
                  var $$char$1 = $$char.charAt(0);
                  Belt_Array.forEach(Editor$AgdaModeVscode.Cursor.getMany(state.editor), (function (point) {
                          Editor$AgdaModeVscode.$$Text.insert(state.editor.document, point, $$char$1);
                          
                        }));
                  return $$Promise.resolved(/* [] */0);
                }),
              [Symbol.for("name")]: "WithStateP"
            },
            tl: /* [] */0
          };
  }
}

exports.IM = IM;
exports.handleEditorIMOutput = handleEditorIMOutput;
exports.TempPromptIM = TempPromptIM;
exports.chooseSymbol = chooseSymbol;
exports.promptChange = promptChange;
exports.handle = handle$1;
/* vscode Not a pure module */
