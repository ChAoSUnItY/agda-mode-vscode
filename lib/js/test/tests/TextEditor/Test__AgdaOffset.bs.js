// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Mocha$BsMocha = require("bs-mocha/lib/js/src/Mocha.bs.js");
var Assert$BsMocha = require("bs-mocha/lib/js/src/Assert.bs.js");
var Promise$BsMocha = require("bs-mocha/lib/js/src/Promise.bs.js");
var Sig$AgdaModeVscode = require("../../../src/Sig.bs.js");
var SigImpl$AgdaModeVscode = require("../../../src/SigImpl.bs.js");

function Impl(Editor) {
  Mocha$BsMocha.describe("Conversion between Agda Offsets and Editor Offsets")(undefined, undefined, undefined, (function (param) {
          Mocha$BsMocha.describe("Sig.characterWidth")(undefined, undefined, undefined, (function (param) {
                  Mocha$BsMocha.it("should calculate the width of some grapheme cluster")(undefined, undefined, undefined, (function (param) {
                          var actual = Sig$AgdaModeVscode.characterWidth("𝐀");
                          return Assert$BsMocha.deep_equal(undefined, actual, 1);
                        }));
                  return Mocha$BsMocha.it("should calculate the width of some ordinary ASCII character")(undefined, undefined, undefined, (function (param) {
                                var actual = Sig$AgdaModeVscode.characterWidth("a");
                                return Assert$BsMocha.deep_equal(undefined, actual, 1);
                              }));
                }));
          Mocha$BsMocha.describe("SigImpl.OffsetIntervals.computeUTF16SurrogatePairIndices")(undefined, undefined, undefined, (function (param) {
                  return Mocha$BsMocha.it("should work")(undefined, undefined, undefined, (function (param) {
                                Assert$BsMocha.deep_equal(undefined, SigImpl$AgdaModeVscode.OffsetIntervals.computeUTF16SurrogatePairIndices("𝐀𝐀𝐀𝐀\n𝐀𝐀𝐀𝐀"), [
                                      0,
                                      2,
                                      4,
                                      6,
                                      9,
                                      11,
                                      13,
                                      15
                                    ]);
                                return Assert$BsMocha.deep_equal(undefined, SigImpl$AgdaModeVscode.OffsetIntervals.computeUTF16SurrogatePairIndices("𝐀a𝐁bb𝐂c𝐃dd𝐄e𝐅𝐆𝐇\na"), [
                                            0,
                                            3,
                                            7,
                                            10,
                                            14,
                                            17,
                                            19,
                                            21
                                          ]);
                              }));
                }));
          Mocha$BsMocha.describe("Sig.OffsetIntervals.compile")(undefined, undefined, undefined, (function (param) {
                  return Mocha$BsMocha.it("should work")(undefined, undefined, undefined, (function (param) {
                                Assert$BsMocha.deep_equal(undefined, Curry._1(Editor.OffsetIntervals.compile, "𝐀𝐀𝐀𝐀\n𝐀𝐀𝐀𝐀"), {
                                      intervals: [
                                        /* tuple */[
                                          0,
                                          0
                                        ],
                                        /* tuple */[
                                          1,
                                          1
                                        ],
                                        /* tuple */[
                                          2,
                                          2
                                        ],
                                        /* tuple */[
                                          3,
                                          3
                                        ],
                                        /* tuple */[
                                          4,
                                          5
                                        ],
                                        /* tuple */[
                                          6,
                                          6
                                        ],
                                        /* tuple */[
                                          7,
                                          7
                                        ],
                                        /* tuple */[
                                          8,
                                          8
                                        ],
                                        /* tuple */[
                                          9,
                                          9
                                        ]
                                      ],
                                      cursor: 0
                                    });
                                return Assert$BsMocha.deep_equal(undefined, Curry._1(Editor.OffsetIntervals.compile, "𝐀a𝐁bb𝐂c𝐃dd𝐄e𝐅𝐆𝐇\na"), {
                                            intervals: [
                                              /* tuple */[
                                                0,
                                                0
                                              ],
                                              /* tuple */[
                                                1,
                                                2
                                              ],
                                              /* tuple */[
                                                3,
                                                5
                                              ],
                                              /* tuple */[
                                                6,
                                                7
                                              ],
                                              /* tuple */[
                                                8,
                                                10
                                              ],
                                              /* tuple */[
                                                11,
                                                12
                                              ],
                                              /* tuple */[
                                                13,
                                                13
                                              ],
                                              /* tuple */[
                                                14,
                                                14
                                              ],
                                              /* tuple */[
                                                15,
                                                17
                                              ]
                                            ],
                                            cursor: 0
                                          });
                              }));
                }));
          Mocha$BsMocha.describe("Sig.OffsetIntervals.fromUTF8Offset")(undefined, undefined, undefined, (function (param) {
                  return Mocha$BsMocha.it("should work")(undefined, undefined, undefined, (function (param) {
                                var a = Curry._1(Editor.OffsetIntervals.compile, "𝐀𝐀𝐀𝐀\n𝐀𝐀𝐀𝐀");
                                Assert$BsMocha.deep_equal(undefined, Curry._2(Editor.fromUTF8Offset, a, 0), 0);
                                Assert$BsMocha.deep_equal(undefined, a.cursor, 0);
                                Assert$BsMocha.deep_equal(undefined, Curry._2(Editor.fromUTF8Offset, a, 1), 2);
                                Assert$BsMocha.deep_equal(undefined, a.cursor, 1);
                                Assert$BsMocha.deep_equal(undefined, Curry._2(Editor.fromUTF8Offset, a, 2), 4);
                                Assert$BsMocha.deep_equal(undefined, a.cursor, 2);
                                Assert$BsMocha.deep_equal(undefined, Curry._2(Editor.fromUTF8Offset, a, 3), 6);
                                Assert$BsMocha.deep_equal(undefined, a.cursor, 3);
                                Assert$BsMocha.deep_equal(undefined, Curry._2(Editor.fromUTF8Offset, a, 0), 0);
                                Assert$BsMocha.deep_equal(undefined, a.cursor, 0);
                                Assert$BsMocha.deep_equal(undefined, Curry._2(Editor.fromUTF8Offset, a, 4), 8);
                                Assert$BsMocha.deep_equal(undefined, Curry._2(Editor.fromUTF8Offset, a, 5), 9);
                                Assert$BsMocha.deep_equal(undefined, Curry._2(Editor.fromUTF8Offset, a, 6), 11);
                                Assert$BsMocha.deep_equal(undefined, Curry._2(Editor.fromUTF8Offset, a, 7), 13);
                                Assert$BsMocha.deep_equal(undefined, Curry._2(Editor.fromUTF8Offset, a, 8), 15);
                                Assert$BsMocha.deep_equal(undefined, Curry._2(Editor.fromUTF8Offset, a, 9), 17);
                                return Assert$BsMocha.deep_equal(undefined, a.cursor, 8);
                              }));
                }));
          return Mocha$BsMocha.describe("Editor.toUTF8Offset")(undefined, undefined, undefined, (function (param) {
                        Promise$BsMocha.it("should do it right")(undefined, undefined, undefined, (function (param) {
                                return $$Promise.Js.toBsPromise($$Promise.map(Curry._1(Editor.openEditorWithContent, "𝐀a𝐁bb𝐂c\na"), (function (textEditor) {
                                                  Assert$BsMocha.equal(undefined, Curry._2(Editor.toUTF8Offset, textEditor, 0), 0);
                                                  Assert$BsMocha.equal(undefined, Curry._2(Editor.toUTF8Offset, textEditor, 1), 1);
                                                  Assert$BsMocha.equal(undefined, Curry._2(Editor.toUTF8Offset, textEditor, 2), 1);
                                                  Assert$BsMocha.equal(undefined, Curry._2(Editor.toUTF8Offset, textEditor, 3), 2);
                                                  Assert$BsMocha.equal(undefined, Curry._2(Editor.toUTF8Offset, textEditor, 5), 3);
                                                  Assert$BsMocha.equal(undefined, Curry._2(Editor.toUTF8Offset, textEditor, 6), 4);
                                                  Assert$BsMocha.equal(undefined, Curry._2(Editor.toUTF8Offset, textEditor, 7), 5);
                                                  Assert$BsMocha.equal(undefined, Curry._2(Editor.toUTF8Offset, textEditor, 9), 6);
                                                  Assert$BsMocha.equal(undefined, Curry._2(Editor.toUTF8Offset, textEditor, 10), 7);
                                                  Assert$BsMocha.equal(undefined, Curry._2(Editor.toUTF8Offset, textEditor, 11), 8);
                                                  return Assert$BsMocha.equal(undefined, Curry._2(Editor.toUTF8Offset, textEditor, 12), 9);
                                                })));
                              }));
                        Promise$BsMocha.it("should be a left inverse of Editor.fromUTF8Offset")(undefined, undefined, undefined, (function (param) {
                                return $$Promise.Js.toBsPromise($$Promise.map(Curry._1(Editor.openEditorWithContent, "𝐀a𝐁bb𝐂c\na"), (function (textEditor) {
                                                  var g = function (n) {
                                                    return Curry._2(Editor.fromUTF8Offset, Curry._1(Editor.OffsetIntervals.compile, "𝐀a𝐁bb𝐂c\na"), n);
                                                  };
                                                  var n = g(0);
                                                  Assert$BsMocha.equal(undefined, Curry._2(Editor.toUTF8Offset, textEditor, n), 0);
                                                  var n$1 = g(1);
                                                  Assert$BsMocha.equal(undefined, Curry._2(Editor.toUTF8Offset, textEditor, n$1), 1);
                                                  var n$2 = g(2);
                                                  Assert$BsMocha.equal(undefined, Curry._2(Editor.toUTF8Offset, textEditor, n$2), 2);
                                                  var n$3 = g(3);
                                                  Assert$BsMocha.equal(undefined, Curry._2(Editor.toUTF8Offset, textEditor, n$3), 3);
                                                  var n$4 = g(4);
                                                  Assert$BsMocha.equal(undefined, Curry._2(Editor.toUTF8Offset, textEditor, n$4), 4);
                                                  var n$5 = g(5);
                                                  Assert$BsMocha.equal(undefined, Curry._2(Editor.toUTF8Offset, textEditor, n$5), 5);
                                                  var n$6 = g(6);
                                                  Assert$BsMocha.equal(undefined, Curry._2(Editor.toUTF8Offset, textEditor, n$6), 6);
                                                  var n$7 = g(7);
                                                  Assert$BsMocha.equal(undefined, Curry._2(Editor.toUTF8Offset, textEditor, n$7), 7);
                                                  var n$8 = g(8);
                                                  Assert$BsMocha.equal(undefined, Curry._2(Editor.toUTF8Offset, textEditor, n$8), 8);
                                                  var n$9 = g(9);
                                                  return Assert$BsMocha.equal(undefined, Curry._2(Editor.toUTF8Offset, textEditor, n$9), 9);
                                                })));
                              }));
                        return Promise$BsMocha.it("should be a right inverse of Editor.fromUTF8Offset ()")(undefined, undefined, undefined, (function (param) {
                                      return $$Promise.Js.toBsPromise($$Promise.map(Curry._1(Editor.openEditorWithContent, "𝐀a𝐁bb𝐂c\na"), (function (textEditor) {
                                                        var f = function (n) {
                                                          return Curry._2(Editor.fromUTF8Offset, Curry._1(Editor.OffsetIntervals.compile, "𝐀a𝐁bb𝐂c\na"), n);
                                                        };
                                                        Assert$BsMocha.equal(undefined, f(Curry._2(Editor.toUTF8Offset, textEditor, 0)), 0);
                                                        Assert$BsMocha.equal(undefined, f(Curry._2(Editor.toUTF8Offset, textEditor, 2)), 2);
                                                        Assert$BsMocha.equal(undefined, f(Curry._2(Editor.toUTF8Offset, textEditor, 3)), 3);
                                                        Assert$BsMocha.equal(undefined, f(Curry._2(Editor.toUTF8Offset, textEditor, 5)), 5);
                                                        Assert$BsMocha.equal(undefined, f(Curry._2(Editor.toUTF8Offset, textEditor, 6)), 6);
                                                        Assert$BsMocha.equal(undefined, f(Curry._2(Editor.toUTF8Offset, textEditor, 7)), 7);
                                                        return Assert$BsMocha.equal(undefined, f(Curry._2(Editor.toUTF8Offset, textEditor, 9)), 9);
                                                      })));
                                    }));
                      }));
        }));
  return { };
}

var Editor_Point = {
  line: SigImpl$AgdaModeVscode.Point.line,
  column: SigImpl$AgdaModeVscode.Point.column,
  make: SigImpl$AgdaModeVscode.Point.make,
  translate: SigImpl$AgdaModeVscode.Point.translate,
  compare: SigImpl$AgdaModeVscode.Point.compare
};

var Editor_Config = {
  getAgdaPath: SigImpl$AgdaModeVscode.Config.getAgdaPath,
  setAgdaPath: SigImpl$AgdaModeVscode.Config.setAgdaPath,
  getLibraryPath: SigImpl$AgdaModeVscode.Config.getLibraryPath,
  getHighlightingMethod: SigImpl$AgdaModeVscode.Config.getHighlightingMethod,
  getBackend: SigImpl$AgdaModeVscode.Config.getBackend
};

var Editor_View = {
  make: SigImpl$AgdaModeVscode.View.make,
  destroy: SigImpl$AgdaModeVscode.View.destroy,
  show: SigImpl$AgdaModeVscode.View.show,
  hide: SigImpl$AgdaModeVscode.View.hide,
  focus: SigImpl$AgdaModeVscode.View.focus,
  send: SigImpl$AgdaModeVscode.View.send,
  onEvent: SigImpl$AgdaModeVscode.View.onEvent,
  fromPosition: SigImpl$AgdaModeVscode.View.fromPosition,
  fromInterval: SigImpl$AgdaModeVscode.View.fromInterval
};

var Editor_Decoration = {
  decorate: SigImpl$AgdaModeVscode.Decoration.decorate,
  highlightBackground: SigImpl$AgdaModeVscode.Decoration.highlightBackground,
  highlightBackgroundWithColor: SigImpl$AgdaModeVscode.Decoration.highlightBackgroundWithColor,
  decorateText: SigImpl$AgdaModeVscode.Decoration.decorateText,
  decorateTextWithColor: SigImpl$AgdaModeVscode.Decoration.decorateTextWithColor,
  overlayText: SigImpl$AgdaModeVscode.Decoration.overlayText,
  overlayTextWithColor: SigImpl$AgdaModeVscode.Decoration.overlayTextWithColor,
  underlineText: SigImpl$AgdaModeVscode.Decoration.underlineText,
  destroy: SigImpl$AgdaModeVscode.Decoration.destroy
};

var Editor_OffsetIntervals = {
  compile: SigImpl$AgdaModeVscode.OffsetIntervals.compile
};

Mocha$BsMocha.describe("Conversion between Agda Offsets and Editor Offsets")(undefined, undefined, undefined, (function (param) {
        Mocha$BsMocha.describe("Sig.characterWidth")(undefined, undefined, undefined, (function (param) {
                Mocha$BsMocha.it("should calculate the width of some grapheme cluster")(undefined, undefined, undefined, (function (param) {
                        var actual = Sig$AgdaModeVscode.characterWidth("𝐀");
                        return Assert$BsMocha.deep_equal(undefined, actual, 1);
                      }));
                return Mocha$BsMocha.it("should calculate the width of some ordinary ASCII character")(undefined, undefined, undefined, (function (param) {
                              var actual = Sig$AgdaModeVscode.characterWidth("a");
                              return Assert$BsMocha.deep_equal(undefined, actual, 1);
                            }));
              }));
        Mocha$BsMocha.describe("SigImpl.OffsetIntervals.computeUTF16SurrogatePairIndices")(undefined, undefined, undefined, (function (param) {
                return Mocha$BsMocha.it("should work")(undefined, undefined, undefined, (function (param) {
                              Assert$BsMocha.deep_equal(undefined, SigImpl$AgdaModeVscode.OffsetIntervals.computeUTF16SurrogatePairIndices("𝐀𝐀𝐀𝐀\n𝐀𝐀𝐀𝐀"), [
                                    0,
                                    2,
                                    4,
                                    6,
                                    9,
                                    11,
                                    13,
                                    15
                                  ]);
                              return Assert$BsMocha.deep_equal(undefined, SigImpl$AgdaModeVscode.OffsetIntervals.computeUTF16SurrogatePairIndices("𝐀a𝐁bb𝐂c𝐃dd𝐄e𝐅𝐆𝐇\na"), [
                                          0,
                                          3,
                                          7,
                                          10,
                                          14,
                                          17,
                                          19,
                                          21
                                        ]);
                            }));
              }));
        Mocha$BsMocha.describe("Sig.OffsetIntervals.compile")(undefined, undefined, undefined, (function (param) {
                return Mocha$BsMocha.it("should work")(undefined, undefined, undefined, (function (param) {
                              Assert$BsMocha.deep_equal(undefined, Curry._1(Editor_OffsetIntervals.compile, "𝐀𝐀𝐀𝐀\n𝐀𝐀𝐀𝐀"), {
                                    intervals: [
                                      /* tuple */[
                                        0,
                                        0
                                      ],
                                      /* tuple */[
                                        1,
                                        1
                                      ],
                                      /* tuple */[
                                        2,
                                        2
                                      ],
                                      /* tuple */[
                                        3,
                                        3
                                      ],
                                      /* tuple */[
                                        4,
                                        5
                                      ],
                                      /* tuple */[
                                        6,
                                        6
                                      ],
                                      /* tuple */[
                                        7,
                                        7
                                      ],
                                      /* tuple */[
                                        8,
                                        8
                                      ],
                                      /* tuple */[
                                        9,
                                        9
                                      ]
                                    ],
                                    cursor: 0
                                  });
                              return Assert$BsMocha.deep_equal(undefined, Curry._1(Editor_OffsetIntervals.compile, "𝐀a𝐁bb𝐂c𝐃dd𝐄e𝐅𝐆𝐇\na"), {
                                          intervals: [
                                            /* tuple */[
                                              0,
                                              0
                                            ],
                                            /* tuple */[
                                              1,
                                              2
                                            ],
                                            /* tuple */[
                                              3,
                                              5
                                            ],
                                            /* tuple */[
                                              6,
                                              7
                                            ],
                                            /* tuple */[
                                              8,
                                              10
                                            ],
                                            /* tuple */[
                                              11,
                                              12
                                            ],
                                            /* tuple */[
                                              13,
                                              13
                                            ],
                                            /* tuple */[
                                              14,
                                              14
                                            ],
                                            /* tuple */[
                                              15,
                                              17
                                            ]
                                          ],
                                          cursor: 0
                                        });
                            }));
              }));
        Mocha$BsMocha.describe("Sig.OffsetIntervals.fromUTF8Offset")(undefined, undefined, undefined, (function (param) {
                return Mocha$BsMocha.it("should work")(undefined, undefined, undefined, (function (param) {
                              var a = Curry._1(Editor_OffsetIntervals.compile, "𝐀𝐀𝐀𝐀\n𝐀𝐀𝐀𝐀");
                              Assert$BsMocha.deep_equal(undefined, SigImpl$AgdaModeVscode.fromUTF8Offset(a, 0), 0);
                              Assert$BsMocha.deep_equal(undefined, a.cursor, 0);
                              Assert$BsMocha.deep_equal(undefined, SigImpl$AgdaModeVscode.fromUTF8Offset(a, 1), 2);
                              Assert$BsMocha.deep_equal(undefined, a.cursor, 1);
                              Assert$BsMocha.deep_equal(undefined, SigImpl$AgdaModeVscode.fromUTF8Offset(a, 2), 4);
                              Assert$BsMocha.deep_equal(undefined, a.cursor, 2);
                              Assert$BsMocha.deep_equal(undefined, SigImpl$AgdaModeVscode.fromUTF8Offset(a, 3), 6);
                              Assert$BsMocha.deep_equal(undefined, a.cursor, 3);
                              Assert$BsMocha.deep_equal(undefined, SigImpl$AgdaModeVscode.fromUTF8Offset(a, 0), 0);
                              Assert$BsMocha.deep_equal(undefined, a.cursor, 0);
                              Assert$BsMocha.deep_equal(undefined, SigImpl$AgdaModeVscode.fromUTF8Offset(a, 4), 8);
                              Assert$BsMocha.deep_equal(undefined, SigImpl$AgdaModeVscode.fromUTF8Offset(a, 5), 9);
                              Assert$BsMocha.deep_equal(undefined, SigImpl$AgdaModeVscode.fromUTF8Offset(a, 6), 11);
                              Assert$BsMocha.deep_equal(undefined, SigImpl$AgdaModeVscode.fromUTF8Offset(a, 7), 13);
                              Assert$BsMocha.deep_equal(undefined, SigImpl$AgdaModeVscode.fromUTF8Offset(a, 8), 15);
                              Assert$BsMocha.deep_equal(undefined, SigImpl$AgdaModeVscode.fromUTF8Offset(a, 9), 17);
                              return Assert$BsMocha.deep_equal(undefined, a.cursor, 8);
                            }));
              }));
        return Mocha$BsMocha.describe("Editor.toUTF8Offset")(undefined, undefined, undefined, (function (param) {
                      Promise$BsMocha.it("should do it right")(undefined, undefined, undefined, (function (param) {
                              return $$Promise.Js.toBsPromise($$Promise.map(SigImpl$AgdaModeVscode.openEditorWithContent("𝐀a𝐁bb𝐂c\na"), (function (textEditor) {
                                                Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, 0), 0);
                                                Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, 1), 1);
                                                Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, 2), 1);
                                                Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, 3), 2);
                                                Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, 5), 3);
                                                Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, 6), 4);
                                                Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, 7), 5);
                                                Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, 9), 6);
                                                Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, 10), 7);
                                                Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, 11), 8);
                                                return Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, 12), 9);
                                              })));
                            }));
                      Promise$BsMocha.it("should be a left inverse of Editor.fromUTF8Offset")(undefined, undefined, undefined, (function (param) {
                              return $$Promise.Js.toBsPromise($$Promise.map(SigImpl$AgdaModeVscode.openEditorWithContent("𝐀a𝐁bb𝐂c\na"), (function (textEditor) {
                                                var g = function (n) {
                                                  return SigImpl$AgdaModeVscode.fromUTF8Offset(Curry._1(Editor_OffsetIntervals.compile, "𝐀a𝐁bb𝐂c\na"), n);
                                                };
                                                var n = g(0);
                                                Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, n), 0);
                                                var n$1 = g(1);
                                                Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, n$1), 1);
                                                var n$2 = g(2);
                                                Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, n$2), 2);
                                                var n$3 = g(3);
                                                Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, n$3), 3);
                                                var n$4 = g(4);
                                                Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, n$4), 4);
                                                var n$5 = g(5);
                                                Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, n$5), 5);
                                                var n$6 = g(6);
                                                Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, n$6), 6);
                                                var n$7 = g(7);
                                                Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, n$7), 7);
                                                var n$8 = g(8);
                                                Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, n$8), 8);
                                                var n$9 = g(9);
                                                return Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, n$9), 9);
                                              })));
                            }));
                      return Promise$BsMocha.it("should be a right inverse of Editor.fromUTF8Offset ()")(undefined, undefined, undefined, (function (param) {
                                    return $$Promise.Js.toBsPromise($$Promise.map(SigImpl$AgdaModeVscode.openEditorWithContent("𝐀a𝐁bb𝐂c\na"), (function (textEditor) {
                                                      var f = function (n) {
                                                        return SigImpl$AgdaModeVscode.fromUTF8Offset(Curry._1(Editor_OffsetIntervals.compile, "𝐀a𝐁bb𝐂c\na"), n);
                                                      };
                                                      Assert$BsMocha.equal(undefined, f(SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, 0)), 0);
                                                      Assert$BsMocha.equal(undefined, f(SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, 2)), 2);
                                                      Assert$BsMocha.equal(undefined, f(SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, 3)), 3);
                                                      Assert$BsMocha.equal(undefined, f(SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, 5)), 5);
                                                      Assert$BsMocha.equal(undefined, f(SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, 6)), 6);
                                                      Assert$BsMocha.equal(undefined, f(SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, 7)), 7);
                                                      return Assert$BsMocha.equal(undefined, f(SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, 9)), 9);
                                                    })));
                                  }));
                    }));
      }));

var Assert;

var P;

exports.Assert = Assert;
exports.P = P;
exports.Impl = Impl;
/*  Not a pure module */
