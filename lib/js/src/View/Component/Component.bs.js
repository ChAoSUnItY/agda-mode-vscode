// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var React = require("react");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/lib/js/src/Json_encode.bs.js");
var Util$AgdaModeVscode = require("../../Util/Util.bs.js");
var Common$AgdaModeVscode = require("../../Common.bs.js");
var RichText$AgdaModeVscode = require("../RichText.bs.js");
var Component__Link$AgdaModeVscode = require("./Component__Link.bs.js");

function plainText(s) {
  return {
          TAG: 1,
          _0: RichText$AgdaModeVscode.string(s),
          _1: undefined,
          _2: undefined,
          [Symbol.for("name")]: "Unlabeled"
        };
}

function error(s, raw) {
  return {
          TAG: 0,
          _0: "Error",
          _1: "error",
          _2: s,
          _3: raw,
          _4: undefined,
          [Symbol.for("name")]: "Labeled"
        };
}

function warning(s, raw) {
  return {
          TAG: 0,
          _0: "Warning",
          _1: "warning",
          _2: s,
          _3: raw,
          _4: undefined,
          [Symbol.for("name")]: "Labeled"
        };
}

function Component$Item(Props) {
  var item = Props.item;
  var match = React.useState(function () {
        return false;
      });
  var setRevealRaw = match[1];
  var revealRaw = match[0];
  var onClickRevealRaw = function (param) {
    return Curry._1(setRevealRaw, (function (state) {
                  return !state;
                }));
  };
  var content = function (value, raw) {
    if (raw !== undefined) {
      if (revealRaw) {
        return React.createElement(RichText$AgdaModeVscode.make, {
                    value: RichText$AgdaModeVscode.string(raw)
                  });
      } else {
        return React.createElement(RichText$AgdaModeVscode.make, {
                    value: value
                  });
      }
    } else {
      return React.createElement(RichText$AgdaModeVscode.make, {
                  value: value
                });
    }
  };
  var revealRawButton = function (raw) {
    if (raw !== undefined) {
      if (revealRaw) {
        return React.createElement("div", {
                    className: "item-raw-button active",
                    onClick: onClickRevealRaw
                  }, React.createElement("div", {
                        className: "codicon codicon-code"
                      }));
      } else {
        return React.createElement("div", {
                    className: "item-raw-button",
                    onClick: onClickRevealRaw
                  }, React.createElement("div", {
                        className: "codicon codicon-code"
                      }));
      }
    } else {
      return React.createElement(React.Fragment, undefined);
    }
  };
  var locationButton = function ($$location) {
    if ($$location !== undefined) {
      return React.createElement(Component__Link$AgdaModeVscode.make, {
                  target: {
                    TAG: 0,
                    _0: $$location,
                    [Symbol.for("name")]: "SrcLoc"
                  },
                  jump: true,
                  hover: false,
                  className: ["item-location-button"],
                  children: React.createElement("div", {
                        className: "codicon codicon-link"
                      })
                });
    } else {
      return React.createElement(React.Fragment, undefined);
    }
  };
  switch (item.TAG | 0) {
    case /* Labeled */0 :
        var raw = item._3;
        return React.createElement("li", {
                    className: "labeled-item " + item._1
                  }, React.createElement("div", {
                        className: "item-label"
                      }, item._0), React.createElement("div", {
                        className: "item-content"
                      }, content(item._2, raw)), revealRawButton(raw));
    case /* Unlabeled */1 :
        var raw$1 = item._1;
        return React.createElement("li", {
                    className: "unlabeled-item"
                  }, React.createElement("div", {
                        className: "item-content"
                      }, content(item._0, raw$1)), revealRawButton(raw$1), locationButton(item._2));
    case /* Header */2 :
        return React.createElement("li", {
                    className: "header-item"
                  }, React.createElement("h3", undefined, item._0));
    
  }
}

var decode = Util$AgdaModeVscode.Decode.sum(function (x) {
      switch (x) {
        case "Header" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (s) {
                                      return {
                                              TAG: 2,
                                              _0: s,
                                              [Symbol.for("name")]: "Header"
                                            };
                                    }), Json_decode.string, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "Labeled" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (param) {
                                      return {
                                              TAG: 0,
                                              _0: param[3],
                                              _1: param[4],
                                              _2: param[0],
                                              _3: param[1],
                                              _4: param[2],
                                              [Symbol.for("name")]: "Labeled"
                                            };
                                    }), (function (param) {
                                      return Util$AgdaModeVscode.Decode.tuple5(RichText$AgdaModeVscode.decode, (function (param) {
                                                    return Json_decode.optional(Json_decode.string, param);
                                                  }), (function (param) {
                                                    return Json_decode.optional(Common$AgdaModeVscode.AgdaRange.decode, param);
                                                  }), Json_decode.string, Json_decode.string, param);
                                    }), param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "Unlabeled" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (param) {
                                      return {
                                              TAG: 1,
                                              _0: param[0],
                                              _1: param[1],
                                              _2: param[2],
                                              [Symbol.for("name")]: "Unlabeled"
                                            };
                                    }), (function (param) {
                                      return Json_decode.tuple3(RichText$AgdaModeVscode.decode, (function (param) {
                                                    return Json_decode.optional(Json_decode.string, param);
                                                  }), (function (param) {
                                                    return Json_decode.optional(Common$AgdaModeVscode.AgdaRange.decode, param);
                                                  }), param);
                                    }), param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        default:
          throw {
                RE_EXN_ID: Json_decode.DecodeError,
                _1: "[Component.Item] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

function encode(x) {
  switch (x.TAG | 0) {
    case /* Labeled */0 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "Labeled"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        Util$AgdaModeVscode.Encode.tuple5(RichText$AgdaModeVscode.encode, (function (param) {
                                return Json_encode.nullable((function (prim) {
                                              return prim;
                                            }), param);
                              }), (function (param) {
                                return Json_encode.nullable(Common$AgdaModeVscode.AgdaRange.encode, param);
                              }), (function (prim) {
                                return prim;
                              }), (function (prim) {
                                return prim;
                              }), [
                              x._2,
                              x._3,
                              x._4,
                              x._0,
                              x._1
                            ])
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* Unlabeled */1 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "Unlabeled"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        Json_encode.tuple3(RichText$AgdaModeVscode.encode, (function (param) {
                                return Json_encode.nullable((function (prim) {
                                              return prim;
                                            }), param);
                              }), (function (param) {
                                return Json_encode.nullable(Common$AgdaModeVscode.AgdaRange.encode, param);
                              }), [
                              x._0,
                              x._1,
                              x._2
                            ])
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* Header */2 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "Header"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        x._0
                      ],
                      tl: /* [] */0
                    }
                  });
    
  }
}

var Item = {
  plainText: plainText,
  error: error,
  warning: warning,
  make: Component$Item,
  decode: decode,
  encode: encode
};

exports.Item = Item;
/* decode Not a pure module */
