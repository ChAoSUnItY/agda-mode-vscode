// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Vscode = require("vscode");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_splice_call = require("bs-platform/lib/js/caml_splice_call.js");
var IM$AgdaModeVscode = require("./InputMethod/IM.bs.js");
var Chan$AgdaModeVscode = require("./Util/Chan.bs.js");
var State$AgdaModeVscode = require("./State.bs.js");
var Editor$AgdaModeVscode = require("./Editor.bs.js");
var Parser$AgdaModeVscode = require("./Parser.bs.js");
var Command$AgdaModeVscode = require("./Command.bs.js");
var Registry$AgdaModeVscode = require("./Registry.bs.js");
var Decoration$AgdaModeVscode = require("./Decoration.bs.js");
var State__Command$AgdaModeVscode = require("./State/State__Command.bs.js");
var ViewController$AgdaModeVscode = require("./ViewController.bs.js");
var State__InputMethod$AgdaModeVscode = require("./State/State__InputMethod.bs.js");

function isAgda(fileName) {
  var fileName$1 = Parser$AgdaModeVscode.filepath(fileName);
  return /\.agda$|\.lagda/i.test(fileName$1);
}

function onOpenEditor(callback) {
  Belt_Option.forEach(Vscode.window.activeTextEditor, callback);
  return Vscode.window.onDidChangeActiveTextEditor(function (next) {
              return Belt_Option.forEach(next, callback);
            });
}

function onCloseDocument(callback) {
  return Vscode.workspace.onDidCloseTextDocument(callback);
}

function onTriggerCommand(callback) {
  return Belt_Array.map(Command$AgdaModeVscode.names, (function (param) {
                var command = param[0];
                return Vscode.commands.registerCommand("agda-mode." + param[1], (function (param) {
                              return Belt_Option.map(Vscode.window.activeTextEditor, (function (editor) {
                                            var fileName = Parser$AgdaModeVscode.filepath(editor.document.fileName);
                                            if (isAgda(fileName)) {
                                              return Curry._2(callback, command, editor);
                                            } else {
                                              return $$Promise.resolved(undefined);
                                            }
                                          }));
                            }));
              }));
}

var Inputs = {
  onOpenEditor: onOpenEditor,
  onCloseDocument: onCloseDocument,
  onTriggerCommand: onTriggerCommand
};

function makeAndAddToRegistry(debugChan, extensionPath, editor, fileName) {
  if (!ViewController$AgdaModeVscode.isActivated(undefined)) {
    ViewController$AgdaModeVscode.activate(extensionPath);
  }
  var state = State$AgdaModeVscode.make(debugChan, editor);
  $$Promise.get(Chan$AgdaModeVscode.once(state.onRemoveFromRegistry), (function (param) {
          return Registry$AgdaModeVscode.remove(fileName);
        }));
  var subscribe = function (disposable) {
    state.subscriptions.push(disposable);
    
  };
  subscribe(ViewController$AgdaModeVscode.onEvent(function ($$event) {
            State__Command$AgdaModeVscode.dispatchCommand(state, {
                  TAG: 8,
                  _0: $$event,
                  [Symbol.for("name")]: "EventFromView"
                });
            
          }));
  subscribe(Vscode.window.onDidChangeTextEditorSelection(function ($$event) {
            var $$document = editor.document;
            var intervals = Belt_Array.map($$event.selections, (function (selection) {
                    return [
                            Editor$AgdaModeVscode.Position.toOffset($$document, selection.start),
                            Editor$AgdaModeVscode.Position.toOffset($$document, selection.end)
                          ];
                  }));
            State__InputMethod$AgdaModeVscode.select(state, intervals);
            
          }));
  subscribe(Vscode.workspace.onDidChangeTextDocument(function ($$event) {
            var changes = IM$AgdaModeVscode.Input.fromTextDocumentChangeEvent(editor, $$event);
            State__InputMethod$AgdaModeVscode.keyUpdateEditorIM(state, changes);
            
          }));
  subscribe(Editor$AgdaModeVscode.Provider.registerDefinitionProvider(function (fileName, position) {
            var currentFileName = Parser$AgdaModeVscode.filepath(state.document.fileName);
            if (fileName === currentFileName) {
              return Decoration$AgdaModeVscode.lookupSrcLoc(state.decoration, position);
            }
            
          }));
  return Registry$AgdaModeVscode.add(fileName, state);
}

function activateWithoutContext(subscriptions, extensionPath) {
  var debugChan = Chan$AgdaModeVscode.make(undefined);
  var x = onOpenEditor(function (editor) {
        var fileName = editor.document.fileName;
        if (isAgda(fileName)) {
          return Belt_Option.forEach(Registry$AgdaModeVscode.get(fileName), (function (state) {
                        state.editor = editor;
                        state.document = editor.document;
                        State__Command$AgdaModeVscode.dispatchCommand(state, /* Refresh */3);
                        
                      }));
        }
        
      });
  subscriptions.push(x);
  var xs = onTriggerCommand(function (command, editor) {
        console.log("[ command ] " + Command$AgdaModeVscode.toString(command));
        var fileName = editor.document.fileName;
        var exit = 0;
        if (typeof command === "number") {
          switch (command) {
            case /* Load */0 :
                exit = 1;
                break;
            case /* Quit */1 :
                Registry$AgdaModeVscode.removeAndDestroy(fileName);
                break;
            case /* Restart */2 :
                Registry$AgdaModeVscode.removeAndDestroy(fileName);
                makeAndAddToRegistry(debugChan, extensionPath, editor, fileName);
                break;
            default:
              
          }
        } else if (command.TAG === /* InputMethod */13) {
          var match = command._0;
          if (typeof match === "number" && match === 0) {
            exit = 1;
          }
          
        }
        if (exit === 1) {
          var match$1 = Registry$AgdaModeVscode.get(fileName);
          if (match$1 !== undefined) {
            
          } else {
            makeAndAddToRegistry(debugChan, extensionPath, editor, fileName);
          }
        }
        var state = Registry$AgdaModeVscode.get(fileName);
        if (state !== undefined) {
          return State__Command$AgdaModeVscode.dispatchCommand(state, command);
        } else {
          return $$Promise.resolved(undefined);
        }
      });
  Caml_splice_call.spliceObjApply(subscriptions, "push", [xs]);
  return debugChan;
}

function activate(context) {
  var subscriptions = context.subscriptions;
  var extensionPath = context.extensionPath;
  return activateWithoutContext(subscriptions, extensionPath);
}

function deactivate(param) {
  
}

exports.isAgda = isAgda;
exports.Inputs = Inputs;
exports.makeAndAddToRegistry = makeAndAddToRegistry;
exports.activateWithoutContext = activateWithoutContext;
exports.activate = activate;
exports.deactivate = deactivate;
/* vscode Not a pure module */
