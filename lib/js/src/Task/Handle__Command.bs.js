// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Task$AgdaModeVscode = require("./Task.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function Impl(Editor) {
  var Task = Task$AgdaModeVscode.Impl(Editor);
  var handle = function (response) {
    if (typeof response !== "number") {
      return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                /* ViewRes */Caml_chrome_debugger.variant("ViewRes", 2, [response[0]]),
                /* [] */0
              ]);
    }
    switch (response) {
      case /* Load */0 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* WithState */Caml_chrome_debugger.variant("WithState", 3, [(function (state) {
                            return $$Promise.map(Curry._1(Editor.save, state.editor), (function (param) {
                                          return /* [] */0;
                                        }));
                          })]),
                    /* :: */Caml_chrome_debugger.simpleVariant("::", [
                        /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 0, [/* Load */0]),
                        /* [] */0
                      ])
                  ]);
      case /* Quit */1 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* Terminate */0,
                    /* [] */0
                  ]);
      case /* NextGoal */2 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* WithState */Caml_chrome_debugger.variant("WithState", 3, [(function (state) {
                            var nextGoal = {
                              contents: undefined
                            };
                            var cursor = Curry._1(Editor.getCursorPosition, state.editor);
                            var getPositions = function (param) {
                              return Belt_Array.map(Belt_Array.map(state.goals, (function (goal) {
                                                return goal.range;
                                              })), (function (range) {
                                            return Curry._3(Editor.Point.translate, Curry._1(Editor.$$Range.start, range), 0, 3);
                                          }));
                            };
                            var positions = getPositions(undefined);
                            Belt_Array.forEach(positions, (function (position) {
                                    if (Curry._2(Editor.Point.compare, cursor, position) === /* LT */2 && nextGoal.contents === undefined) {
                                      nextGoal.contents = Caml_option.some(position);
                                      return ;
                                    }
                                    
                                  }));
                            if (nextGoal.contents === undefined) {
                              nextGoal.contents = Belt_Array.get(positions, 0);
                            }
                            var point = nextGoal.contents;
                            if (point !== undefined) {
                              Curry._2(Editor.setCursorPosition, state.editor, Caml_option.valFromOption(point));
                            }
                            return $$Promise.resolved(/* [] */0);
                          })]),
                    /* [] */0
                  ]);
      case /* PreviousGoal */3 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* WithState */Caml_chrome_debugger.variant("WithState", 3, [(function (state) {
                            var previousGoal = {
                              contents: undefined
                            };
                            var cursor = Curry._1(Editor.getCursorPosition, state.editor);
                            var getPositions = function (param) {
                              return Belt_Array.map(Belt_Array.map(state.goals, (function (goal) {
                                                return goal.range;
                                              })), (function (range) {
                                            return Curry._3(Editor.Point.translate, Curry._1(Editor.$$Range.start, range), 0, 3);
                                          }));
                            };
                            var positions = getPositions(undefined);
                            Belt_Array.forEach(positions, (function (position) {
                                    if (Curry._2(Editor.Point.compare, cursor, position) === /* GT */0) {
                                      previousGoal.contents = Caml_option.some(position);
                                      return ;
                                    }
                                    
                                  }));
                            if (previousGoal.contents === undefined) {
                              previousGoal.contents = Belt_Array.get(positions, positions.length - 1 | 0);
                            }
                            var point = previousGoal.contents;
                            if (point !== undefined) {
                              Curry._2(Editor.setCursorPosition, state.editor, Caml_option.valFromOption(point));
                            }
                            return $$Promise.resolved(/* [] */0);
                          })]),
                    /* [] */0
                  ]);
      
    }
  };
  return {
          Task: Task,
          handle: handle
        };
}

exports.Impl = Impl;
/* Promise Not a pure module */
