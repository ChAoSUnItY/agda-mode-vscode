// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Util = require("util");
var Curry = require("bs-platform/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Parser$AgdaModeVscode = require("./Parser.bs.js");
var Highlighting$AgdaModeVscode = require("./Highlighting.bs.js");

function Impl(Editor) {
  var decorateHole = function (editor, param, index) {
    var end_ = param[1];
    var start = param[0];
    var backgroundRange = Curry._2(Editor.$$Range.make, Curry._2(Editor.pointAtOffset, editor, start), Curry._2(Editor.pointAtOffset, editor, end_));
    var background = Curry._3(Editor.Decoration.highlightBackground, editor, "editor.selectionHighlightBackground", backgroundRange);
    var indexText = String(index);
    var indexRange = Curry._2(Editor.$$Range.make, Curry._2(Editor.pointAtOffset, editor, start), Curry._2(Editor.pointAtOffset, editor, end_ - 2 | 0));
    var index$1 = Curry._4(Editor.Decoration.overlayText, editor, "editorLightBulb.foreground", indexText, indexRange);
    return /* tuple */[
            background,
            index$1
          ];
  };
  var decorateAspect = function (editor, range, aspect) {
    var style = Highlighting$AgdaModeVscode.Aspect.toStyle(aspect);
    var decorate = function (color) {
      if (color.tag) {
        return Curry._3(Editor.Decoration.decorateTextWithColor, editor, color[0], range);
      } else {
        return Curry._3(Editor.Decoration.highlightBackgroundWithColor, editor, color[0], range);
      }
    };
    if (style) {
      if (Curry._1(Editor.colorThemeIsDark, undefined)) {
        return [/* tuple */[
                  decorate(style[1]),
                  range
                ]];
      } else {
        return [/* tuple */[
                  decorate(style[0]),
                  range
                ]];
      }
    } else {
      return [];
    }
  };
  var decorateHighlighting = function (editor, highlighting) {
    var start = Curry._3(Editor.fromUTF8Offset, editor, undefined, highlighting.start);
    var end_ = Curry._3(Editor.fromUTF8Offset, editor, undefined, highlighting.end_);
    var start$1 = Curry._2(Editor.pointAtOffset, editor, start);
    var end_$1 = Curry._2(Editor.pointAtOffset, editor, end_);
    var normalize = function (point) {
      var useCRLF = Curry._1(Editor.lineEndingIsCRLF, editor);
      if (!useCRLF) {
        return point;
      }
      var skippedCRLF = Curry._1(Editor.Point.line, point);
      return Curry._3(Editor.Point.translate, point, 0, skippedCRLF);
    };
    var range = Curry._2(Editor.$$Range.make, normalize(start$1), normalize(end_$1));
    return Belt_Array.concatMany(Belt_Array.map(highlighting.aspects, (function (param) {
                      return decorateAspect(editor, range, param);
                    })));
  };
  var decorateHighlightings = function (editor, highlightings) {
    var initOffset = {
      utf8: 0,
      utf16: 0
    };
    return Belt_Array.concatMany(Belt_Array.map(highlightings, (function (highlighting) {
                      var start = Curry._3(Editor.fromUTF8Offset, editor, initOffset, highlighting.start);
                      var end_ = Curry._3(Editor.fromUTF8Offset, editor, initOffset, highlighting.end_);
                      var start$1 = Curry._2(Editor.pointAtOffset, editor, start);
                      var end_$1 = Curry._2(Editor.pointAtOffset, editor, end_);
                      var normalize = function (point) {
                        var useCRLF = Curry._1(Editor.lineEndingIsCRLF, editor);
                        if (!useCRLF) {
                          return point;
                        }
                        var skippedCRLF = Curry._1(Editor.Point.line, point);
                        return Curry._3(Editor.Point.translate, point, 0, skippedCRLF);
                      };
                      var range = Curry._2(Editor.$$Range.make, normalize(start$1), normalize(end_$1));
                      return Belt_Array.concatMany(Belt_Array.map(highlighting.aspects, (function (param) {
                                        return decorateAspect(editor, range, param);
                                      })));
                    })));
  };
  var make = function (param) {
    return {
            tempFilePaths: [],
            highlightings: [],
            decorations: []
          };
  };
  var destroy = function (self) {
    self.highlightings = [];
    Belt_Array.forEach(self.tempFilePaths, (function (filepath) {
            Fs.unlink(filepath, (function (param) {
                    
                  }));
            
          }));
    self.tempFilePaths = [];
    return Belt_Array.forEach(self.decorations, (function (param) {
                  return Curry._1(Editor.Decoration.destroy, param[0]);
                }));
  };
  var refresh = function (editor, self) {
    return Belt_Array.forEach(self.decorations, (function (param) {
                  return Curry._3(Editor.Decoration.decorate, editor, param[0], [param[1]]);
                }));
  };
  var addDirectly = function (self, highlightings) {
    self.highlightings = Belt_Array.concat(self.highlightings, highlightings);
    
  };
  var addIndirectly = function (self, filepath) {
    self.tempFilePaths.push(filepath);
    
  };
  var readFile = Util.promisify((function (prim, prim$1) {
          Fs.readFile(prim, prim$1);
          
        }));
  var readAndParse = function (filepath) {
    return $$Promise.map($$Promise.Js.toResult($$Promise.Js.fromBsPromise(readFile(filepath))), (function (content) {
                  if (content.tag) {
                    return [];
                  }
                  var expressions = Parser$AgdaModeVscode.SExpression.parse(content[0].toString());
                  Belt_Array.keepMap(expressions, (function (error) {
                          if (error.tag) {
                            return error[0];
                          }
                          
                        }));
                  return Belt_Array.concatMany(Belt_Array.keepMap(expressions, (function (param) {
                                    if (param.tag) {
                                      return ;
                                    }
                                    var xs = param[0];
                                    if (xs.tag) {
                                      return Highlighting$AgdaModeVscode.parseIndirectHighlightings(xs[0]);
                                    } else {
                                      return [];
                                    }
                                  })));
                }));
  };
  var readTempFiles = function (self) {
    return $$Promise.map($$Promise.map($$Promise.allArray(Belt_Array.map(self.tempFilePaths, readAndParse)), Belt_Array.concatMany), (function (highlightings) {
                  self.highlightings = Belt_Array.concat(self.highlightings, highlightings);
                  self.tempFilePaths = [];
                  
                }));
  };
  var applyHighlightings = function (self, editor) {
    var decorations = decorateHighlightings(editor, self.highlightings);
    self.highlightings = [];
    self.decorations = Belt_Array.concat(self.decorations, decorations);
    
  };
  return {
          decorateHole: decorateHole,
          decorateAspect: decorateAspect,
          decorateHighlighting: decorateHighlighting,
          decorateHighlightings: decorateHighlightings,
          make: make,
          destroy: destroy,
          refresh: refresh,
          addDirectly: addDirectly,
          addIndirectly: addIndirectly,
          readFile: readFile,
          readAndParse: readAndParse,
          readTempFiles: readTempFiles,
          applyHighlightings: applyHighlightings
        };
}

exports.Impl = Impl;
/* fs Not a pure module */
