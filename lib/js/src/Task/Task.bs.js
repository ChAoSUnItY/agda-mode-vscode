// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Goal$AgdaModeVscode = require("../Goal.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var State$AgdaModeVscode = require("../State.bs.js");
var Request$AgdaModeVscode = require("../Request.bs.js");

function Impl(Editor) {
  var State = State$AgdaModeVscode.Impl(Editor);
  var Goal = Goal$AgdaModeVscode.Impl(Editor);
  var $$Request = Request$AgdaModeVscode.Impl(Editor);
  var classify = function (req) {
    if (typeof req === "number") {
      return ;
    }
    switch (req.tag | 0) {
      case /* SendRequest */0 :
          return /* Agda */Caml_chrome_debugger.variant("Agda", 0, [req[0]]);
      case /* ViewReq */1 :
          return /* View */Caml_chrome_debugger.variant("View", 1, [
                    req[0],
                    req[1]
                  ]);
      default:
        return ;
    }
  };
  var display$prime = function (header, message) {
    if (message !== undefined) {
      return /* ViewReq */Caml_chrome_debugger.variant("ViewReq", 1, [
                /* Plain */Caml_chrome_debugger.simpleVariant("Plain", [
                    header,
                    /* Plain */Caml_chrome_debugger.variant("Plain", 0, [message])
                  ]),
                (function (param) {
                    return $$Promise.resolved(/* [] */0);
                  })
              ]);
    } else {
      return /* ViewReq */Caml_chrome_debugger.variant("ViewReq", 1, [
                /* Plain */Caml_chrome_debugger.simpleVariant("Plain", [
                    header,
                    /* Nothing */0
                  ]),
                (function (param) {
                    return $$Promise.resolved(/* [] */0);
                  })
              ]);
    }
  };
  var display = function (header) {
    var partial_arg = /* Plain */Caml_chrome_debugger.variant("Plain", 0, [header]);
    return (function (param) {
        return display$prime(partial_arg, param);
      });
  };
  var displayError = function (header) {
    var partial_arg = /* Error */Caml_chrome_debugger.variant("Error", 3, [header]);
    return (function (param) {
        return display$prime(partial_arg, param);
      });
  };
  var displayWarning = function (header) {
    var partial_arg = /* Warning */Caml_chrome_debugger.variant("Warning", 2, [header]);
    return (function (param) {
        return display$prime(partial_arg, param);
      });
  };
  var displaySuccess = function (header) {
    var partial_arg = /* Success */Caml_chrome_debugger.variant("Success", 1, [header]);
    return (function (param) {
        return display$prime(partial_arg, param);
      });
  };
  var query = function (header, placeholder, value, callback) {
    return /* :: */Caml_chrome_debugger.simpleVariant("::", [
              /* WithState */Caml_chrome_debugger.variant("WithState", 5, [(function (state) {
                      Curry._2(Editor.setContext, "agdaModeQuerying", true);
                      Curry._1(Editor.View.focus, state.view);
                      return $$Promise.resolved(/* [] */0);
                    })]),
              /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* ViewReq */Caml_chrome_debugger.variant("ViewReq", 1, [
                      /* Plain */Caml_chrome_debugger.simpleVariant("Plain", [
                          header,
                          /* Query */Caml_chrome_debugger.variant("Query", 1, [
                              placeholder,
                              value
                            ])
                        ]),
                      callback
                    ]),
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* WithState */Caml_chrome_debugger.variant("WithState", 5, [(function (state) {
                              Curry._2(Editor.setContext, "agdaModeQuerying", false);
                              Curry._1(Editor.focus, state.editor);
                              return $$Promise.resolved(/* [] */0);
                            })]),
                      /* [] */0
                    ])
                ])
            ]);
  };
  return {
          State: State,
          Goal: Goal,
          $$Request: $$Request,
          classify: classify,
          display$prime: display$prime,
          display: display,
          displayError: displayError,
          displayWarning: displayWarning,
          displaySuccess: displaySuccess,
          query: query
        };
}

exports.Impl = Impl;
/* Promise Not a pure module */
