// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");
var Chan$AgdaModeVscode = require("../Util/Chan.bs.js");
var Util$AgdaModeVscode = require("../Util/Util.bs.js");

function make(param) {
  return {
          tally: 0,
          allDone: Chan$AgdaModeVscode.make(undefined),
          deferredLastResponses: []
        };
}

function runNonLast(self, handler, response) {
  self.tally = self.tally + 1 | 0;
  return $$Promise.get(Curry._1(handler, response), (function (param) {
                self.tally = self.tally - 1 | 0;
                if (self.tally === 0) {
                  return Chan$AgdaModeVscode.emit(self.allDone, undefined);
                }
                
              }));
}

function addLast(self, priority, response) {
  self.deferredLastResponses.push([
        priority,
        response
      ]);
  
}

function onceDone(self) {
  if (self.tally === 0) {
    return $$Promise.resolved(undefined);
  } else {
    return Chan$AgdaModeVscode.once(self.allDone);
  }
}

function runLast(self, handler) {
  return $$Promise.get(onceDone(self), (function (param) {
                var deferredLastResponses = Belt_Array.map(self.deferredLastResponses.sort(function (x, y) {
                          return Caml_primitive.caml_int_compare(x[0], y[0]);
                        }), (function (prim) {
                        return prim[1];
                      }));
                deferredLastResponses.unshift(/* CompleteHighlightingAndMakePromptReappear */4);
                Util$AgdaModeVscode.oneByOne(Belt_Array.map(deferredLastResponses, Curry.__1(handler)));
                
              }));
}

var Module = {
  make: make,
  addLast: addLast,
  runNonLast: runNonLast,
  runLast: runLast
};

exports.Module = Module;
exports.make = make;
exports.addLast = addLast;
exports.runNonLast = runNonLast;
exports.runLast = runLast;
/* Promise Not a pure module */
