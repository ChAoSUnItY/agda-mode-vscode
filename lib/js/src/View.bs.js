// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/lib/js/src/Json_encode.bs.js");
var Util$AgdaModeVscode = require("./Util/Util.bs.js");
var Translator$AgdaModeVscode = require("./InputMethod/Translator.bs.js");
var Emacs__Parser$AgdaModeVscode = require("./View/Emacs/Emacs__Parser.bs.js");

function toString(x) {
  return x._0;
}

var decode = Util$AgdaModeVscode.Decode.sum(function (x) {
      switch (x) {
        case "Error" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (text) {
                                      return {
                                              TAG: 3,
                                              _0: text,
                                              [Symbol.for("name")]: "Error"
                                            };
                                    }), Json_decode.string, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "Plain" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (text) {
                                      return {
                                              TAG: 0,
                                              _0: text,
                                              [Symbol.for("name")]: "Plain"
                                            };
                                    }), Json_decode.string, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "Success" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (text) {
                                      return {
                                              TAG: 1,
                                              _0: text,
                                              [Symbol.for("name")]: "Success"
                                            };
                                    }), Json_decode.string, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "Warning" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (text) {
                                      return {
                                              TAG: 2,
                                              _0: text,
                                              [Symbol.for("name")]: "Warning"
                                            };
                                    }), Json_decode.string, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        default:
          throw {
                RE_EXN_ID: Json_decode.DecodeError,
                _1: "[Header] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

function encode(x) {
  switch (x.TAG | 0) {
    case /* Plain */0 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "Plain"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        x._0
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* Success */1 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "Success"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        x._0
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* Warning */2 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "Warning"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        x._0
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* Error */3 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "Error"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        x._0
                      ],
                      tl: /* [] */0
                    }
                  });
    
  }
}

var Header = {
  toString: toString,
  decode: decode,
  encode: encode
};

var decode$1 = Util$AgdaModeVscode.Decode.sum(function (x) {
      if (x === "Prompt") {
        return {
                TAG: 0,
                _0: (function (param) {
                    return Json_decode.map((function (param) {
                                  return {
                                          body: param[0],
                                          placeholder: param[1],
                                          value: param[2]
                                        };
                                }), (function (param) {
                                  return Json_decode.tuple3((function (param) {
                                                return Json_decode.optional(Json_decode.string, param);
                                              }), (function (param) {
                                                return Json_decode.optional(Json_decode.string, param);
                                              }), (function (param) {
                                                return Json_decode.optional(Json_decode.string, param);
                                              }), param);
                                }), param);
                  }),
                [Symbol.for("name")]: "Contents"
              };
      }
      throw {
            RE_EXN_ID: Json_decode.DecodeError,
            _1: "[Prompt] Unknown constructor: " + x,
            Error: new Error()
          };
    });

function encode$1(x) {
  return Json_encode.object_({
              hd: [
                "tag",
                "Prompt"
              ],
              tl: {
                hd: [
                  "contents",
                  Json_encode.tuple3((function (param) {
                          return Json_encode.nullable((function (prim) {
                                        return prim;
                                      }), param);
                        }), (function (param) {
                          return Json_encode.nullable((function (prim) {
                                        return prim;
                                      }), param);
                        }), (function (param) {
                          return Json_encode.nullable((function (prim) {
                                        return prim;
                                      }), param);
                        }), [
                        x.body,
                        x.placeholder,
                        x.value
                      ])
                ],
                tl: /* [] */0
              }
            });
}

var Prompt = {
  decode: decode$1,
  encode: encode$1
};

var decode$2 = Util$AgdaModeVscode.Decode.sum(function (x) {
      switch (x) {
        case "AllGoalsWarnings" :
            return {
                    TAG: 1,
                    _0: /* AllGoalsWarnings */1,
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "Error" :
            return {
                    TAG: 1,
                    _0: /* Error */4,
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "GoalType" :
            return {
                    TAG: 1,
                    _0: /* GoalType */2,
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "Outputs" :
            return {
                    TAG: 1,
                    _0: /* Outputs */0,
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "SearchAbout" :
            return {
                    TAG: 1,
                    _0: /* SearchAbout */3,
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "Text" :
            return {
                    TAG: 1,
                    _0: /* Text */5,
                    [Symbol.for("name")]: "TagOnly"
                  };
        default:
          throw {
                RE_EXN_ID: Json_decode.DecodeError,
                _1: "[Body.Emacs] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

function encode$2(x) {
  switch (x) {
    case /* Outputs */0 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "Outputs"
                    ],
                    tl: /* [] */0
                  });
    case /* AllGoalsWarnings */1 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "AllGoalsWarnings"
                    ],
                    tl: /* [] */0
                  });
    case /* GoalType */2 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "GoalType"
                    ],
                    tl: /* [] */0
                  });
    case /* SearchAbout */3 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "SearchAbout"
                    ],
                    tl: /* [] */0
                  });
    case /* Error */4 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "Error"
                    ],
                    tl: /* [] */0
                  });
    case /* Text */5 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "Text"
                    ],
                    tl: /* [] */0
                  });
    
  }
}

var Emacs = {
  decode: decode$2,
  encode: encode$2
};

var decode$3 = Util$AgdaModeVscode.Decode.sum(function (x) {
      switch (x) {
        case "Emacs" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (param) {
                                      return {
                                              TAG: 1,
                                              _0: param[0],
                                              _1: param[1],
                                              _2: param[2],
                                              [Symbol.for("name")]: "Emacs"
                                            };
                                    }), (function (param) {
                                      return Json_decode.tuple3(decode$2, Json_decode.string, Json_decode.string, param);
                                    }), param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "Nothing" :
            return {
                    TAG: 1,
                    _0: /* Nothing */0,
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "Plain" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (text) {
                                      return {
                                              TAG: 0,
                                              _0: text,
                                              [Symbol.for("name")]: "Plain"
                                            };
                                    }), Json_decode.string, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        default:
          throw {
                RE_EXN_ID: Json_decode.DecodeError,
                _1: "[Body] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

function encode$3(x) {
  if (typeof x === "number") {
    return Json_encode.object_({
                hd: [
                  "tag",
                  "Nothing"
                ],
                tl: /* [] */0
              });
  } else if (x.TAG) {
    return Json_encode.object_({
                hd: [
                  "tag",
                  "Emacs"
                ],
                tl: {
                  hd: [
                    "contents",
                    Json_encode.tuple3(encode$2, (function (prim) {
                            return prim;
                          }), (function (prim) {
                            return prim;
                          }), [
                          x._0,
                          x._1,
                          x._2
                        ])
                  ],
                  tl: /* [] */0
                }
              });
  } else {
    return Json_encode.object_({
                hd: [
                  "tag",
                  "Plain"
                ],
                tl: {
                  hd: [
                    "contents",
                    x._0
                  ],
                  tl: /* [] */0
                }
              });
  }
}

var Body = {
  Emacs: Emacs,
  decode: decode$3,
  encode: encode$3
};

var decode$4 = Util$AgdaModeVscode.Decode.sum(function (x) {
      if (x === "Position") {
        return {
                TAG: 0,
                _0: (function (param) {
                    return Json_decode.map((function (param) {
                                  return {
                                          pos: param[0],
                                          line: param[1],
                                          col: param[2]
                                        };
                                }), (function (param) {
                                  return Json_decode.tuple3((function (param) {
                                                return Json_decode.optional(Json_decode.$$int, param);
                                              }), Json_decode.$$int, Json_decode.$$int, param);
                                }), param);
                  }),
                [Symbol.for("name")]: "Contents"
              };
      }
      throw {
            RE_EXN_ID: Json_decode.DecodeError,
            _1: "[View.Position] Unknown constructor: " + x,
            Error: new Error()
          };
    });

function encode$4(x) {
  return Json_encode.object_({
              hd: [
                "tag",
                "Position"
              ],
              tl: {
                hd: [
                  "contents",
                  Json_encode.tuple3((function (param) {
                          return Json_encode.nullable((function (prim) {
                                        return prim;
                                      }), param);
                        }), (function (prim) {
                          return prim;
                        }), (function (prim) {
                          return prim;
                        }), [
                        x.pos,
                        x.line,
                        x.col
                      ])
                ],
                tl: /* [] */0
              }
            });
}

var Position = {
  decode: decode$4,
  encode: encode$4
};

function fuse(a, b) {
  var start = Caml_obj.caml_greaterthan(a.start.pos, b.start.pos) ? b.start : a.start;
  var end_ = Caml_obj.caml_greaterthan(a.end_.pos, b.end_.pos) ? a.end_ : b.end_;
  return {
          start: start,
          end_: end_
        };
}

function toString$1(self) {
  if (self.start.line === self.end_.line) {
    return String(self.start.line) + ("," + (String(self.start.col) + ("-" + String(self.end_.col))));
  } else {
    return String(self.start.line) + ("," + (String(self.start.col) + ("-" + (String(self.end_.line) + ("," + String(self.end_.col))))));
  }
}

var decode$5 = Util$AgdaModeVscode.Decode.sum(function (x) {
      if (x === "Interval") {
        return {
                TAG: 0,
                _0: (function (param) {
                    return Json_decode.map((function (param) {
                                  return {
                                          start: param[0],
                                          end_: param[1]
                                        };
                                }), (function (param) {
                                  return Json_decode.pair(decode$4, decode$4, param);
                                }), param);
                  }),
                [Symbol.for("name")]: "Contents"
              };
      }
      throw {
            RE_EXN_ID: Json_decode.DecodeError,
            _1: "[View.Interval] Unknown constructor: " + x,
            Error: new Error()
          };
    });

function encode$5(x) {
  return Json_encode.object_({
              hd: [
                "tag",
                "Interval"
              ],
              tl: {
                hd: [
                  "contents",
                  Json_encode.pair(encode$4, encode$4, [
                        x.start,
                        x.end_
                      ])
                ],
                tl: /* [] */0
              }
            });
}

var Interval = {
  fuse: fuse,
  toString: toString$1,
  decode: decode$5,
  encode: encode$5
};

var partial_arg = /^(\S+)\:(?:(\d+)\,(\d+)\-(\d+)\,(\d+)|(\d+)\,(\d+)\-(\d+))$/;

function parse(param) {
  return Emacs__Parser$AgdaModeVscode.captures(partial_arg, (function (captured) {
                var xs = Belt_Array.get(captured, 1);
                var srcFile = Belt_Option.flatMap(xs, (function (x) {
                        return x;
                      }));
                var xs$1 = Belt_Array.get(captured, 6);
                var sameRow = Belt_Option.isSome(Belt_Option.flatMap(xs$1, (function (x) {
                            return x;
                          })));
                if (sameRow) {
                  var xs$2 = Belt_Array.get(captured, 6);
                  return Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.flatMap(xs$2, (function (x) {
                                        return x;
                                      })), Pervasives.int_of_string_opt), (function (row) {
                                var xs = Belt_Array.get(captured, 7);
                                return Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.flatMap(xs, (function (x) {
                                                      return x;
                                                    })), Pervasives.int_of_string_opt), (function (colStart) {
                                              var xs = Belt_Array.get(captured, 8);
                                              return Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.flatMap(xs, (function (x) {
                                                                    return x;
                                                                  })), Pervasives.int_of_string_opt), (function (colEnd) {
                                                            return {
                                                                    _0: srcFile,
                                                                    _1: [{
                                                                        start: {
                                                                          pos: undefined,
                                                                          line: row,
                                                                          col: colStart
                                                                        },
                                                                        end_: {
                                                                          pos: undefined,
                                                                          line: row,
                                                                          col: colEnd
                                                                        }
                                                                      }],
                                                                    [Symbol.for("name")]: "Range"
                                                                  };
                                                          }));
                                            }));
                              }));
                }
                var xs$3 = Belt_Array.get(captured, 2);
                return Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.flatMap(xs$3, (function (x) {
                                      return x;
                                    })), Pervasives.int_of_string_opt), (function (rowStart) {
                              var xs = Belt_Array.get(captured, 3);
                              return Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.flatMap(xs, (function (x) {
                                                    return x;
                                                  })), Pervasives.int_of_string_opt), (function (colStart) {
                                            var xs = Belt_Array.get(captured, 4);
                                            return Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.flatMap(xs, (function (x) {
                                                                  return x;
                                                                })), Pervasives.int_of_string_opt), (function (rowEnd) {
                                                          var xs = Belt_Array.get(captured, 5);
                                                          return Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.flatMap(xs, (function (x) {
                                                                                return x;
                                                                              })), Pervasives.int_of_string_opt), (function (colEnd) {
                                                                        return {
                                                                                _0: srcFile,
                                                                                _1: [{
                                                                                    start: {
                                                                                      pos: undefined,
                                                                                      line: rowStart,
                                                                                      col: colStart
                                                                                    },
                                                                                    end_: {
                                                                                      pos: undefined,
                                                                                      line: rowEnd,
                                                                                      col: colEnd
                                                                                    }
                                                                                  }],
                                                                                [Symbol.for("name")]: "Range"
                                                                              };
                                                                      }));
                                                        }));
                                          }));
                            }));
              }), param);
}

function fuse$1(a, b) {
  var mergeTouching = function (l, e, s, r) {
    return Belt_List.concat(Belt_List.concat(l, {
                    hd: {
                      start: e.start,
                      end_: s.end_
                    },
                    tl: /* [] */0
                  }), r);
  };
  var fuseSome = function (s1, r1, s2, r2) {
    var r1$prime = Util$AgdaModeVscode.List.dropWhile((function (x) {
            return Caml_obj.caml_lessequal(x.end_.pos, s2.end_.pos);
          }), r1);
    return helpFuse(r1$prime, {
                hd: fuse(s1, s2),
                tl: r2
              });
  };
  var outputLeftPrefix = function (s1, r1, s2, is2) {
    var match = Util$AgdaModeVscode.List.span((function (s) {
            return Caml_obj.caml_lessthan(s.end_.pos, s2.start.pos);
          }), r1);
    return Belt_List.concat(Belt_List.concat({
                    hd: s1,
                    tl: /* [] */0
                  }, match[0]), helpFuse(match[1], is2));
  };
  var helpFuse = function (a, b) {
    var match = Belt_List.reverse(a);
    var match$1 = Belt_List.reverse(b);
    if (!a) {
      return a;
    }
    if (!match) {
      if (b) {
        return Pervasives.failwith("something wrong with Range::fuse");
      } else {
        return b;
      }
    }
    if (!b) {
      if (b) {
        return Pervasives.failwith("something wrong with Range::fuse");
      } else {
        return b;
      }
    }
    if (!match$1) {
      return Pervasives.failwith("something wrong with Range::fuse");
    }
    var e2 = match$1.hd;
    var r2 = b.tl;
    var s2 = b.hd;
    var e1 = match.hd;
    var r1 = a.tl;
    var s1 = a.hd;
    if (Caml_obj.caml_lessthan(e1.end_.pos, s2.start.pos)) {
      return Belt_List.concat(a, b);
    } else if (Caml_obj.caml_lessthan(e2.end_.pos, s1.start.pos)) {
      return Belt_List.concat(b, a);
    } else if (e1.end_.pos === s2.start.pos) {
      return mergeTouching(match.tl, e1, s2, r2);
    } else if (e2.end_.pos === s1.start.pos) {
      return mergeTouching(match$1.tl, e2, s1, r1);
    } else if (Caml_obj.caml_lessthan(s1.end_.pos, s2.start.pos)) {
      return outputLeftPrefix(s1, r1, s2, b);
    } else if (Caml_obj.caml_lessthan(s2.end_.pos, s1.start.pos)) {
      return outputLeftPrefix(s2, r2, s1, a);
    } else if (Caml_obj.caml_lessthan(s1.end_.pos, s2.end_.pos)) {
      return fuseSome(s1, r1, s2, r2);
    } else {
      return fuseSome(s2, r2, s1, r1);
    }
  };
  if (a) {
    if (b) {
      return {
              _0: a._0,
              _1: Belt_List.toArray(helpFuse(Belt_List.fromArray(a._1), Belt_List.fromArray(b._1))),
              [Symbol.for("name")]: "Range"
            };
    } else {
      return a;
    }
  } else {
    return b;
  }
}

function toString$2(self) {
  if (!self) {
    return "";
  }
  var filepath = self._0;
  if (filepath !== undefined) {
    var xs = self._1;
    if (xs.length === 0) {
      return filepath;
    }
    var match = Belt_Array.get(xs, 0);
    var match$1 = Belt_Array.get(xs, xs.length - 1 | 0);
    return filepath + (":" + (
              match !== undefined && match$1 !== undefined ? toString$1({
                      start: match.start,
                      end_: match$1.end_
                    }) : ""
            ));
  }
  var xs$1 = self._1;
  var match$2 = Belt_Array.get(xs$1, 0);
  var match$3 = Belt_Array.get(xs$1, xs$1.length - 1 | 0);
  if (match$2 !== undefined && match$3 !== undefined) {
    return toString$1({
                start: match$2.start,
                end_: match$3.end_
              });
  } else {
    return "";
  }
}

var decode$6 = Util$AgdaModeVscode.Decode.sum(function (x) {
      switch (x) {
        case "NoRange" :
            return {
                    TAG: 1,
                    _0: /* NoRange */0,
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "Range" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (param) {
                                      return {
                                              _0: param[0],
                                              _1: param[1],
                                              [Symbol.for("name")]: "Range"
                                            };
                                    }), (function (param) {
                                      return Json_decode.pair((function (param) {
                                                    return Json_decode.optional(Json_decode.string, param);
                                                  }), (function (param) {
                                                    return Json_decode.array(decode$5, param);
                                                  }), param);
                                    }), param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        default:
          throw {
                RE_EXN_ID: Json_decode.DecodeError,
                _1: "[View.Range] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

function encode$6(x) {
  if (x) {
    return Json_encode.object_({
                hd: [
                  "tag",
                  "Range"
                ],
                tl: {
                  hd: [
                    "contents",
                    Json_encode.pair((function (param) {
                            return Json_encode.nullable((function (prim) {
                                          return prim;
                                        }), param);
                          }), (function (param) {
                            return Json_encode.array(encode$5, param);
                          }), [
                          x._0,
                          x._1
                        ])
                  ],
                  tl: /* [] */0
                }
              });
  } else {
    return Json_encode.object_({
                hd: [
                  "tag",
                  "NoRange"
                ],
                tl: /* [] */0
              });
  }
}

var $$Range = {
  parse: parse,
  fuse: fuse$1,
  toString: toString$2,
  decode: decode$6,
  encode: encode$6
};

var decode$7 = Util$AgdaModeVscode.Decode.sum(function (x) {
      switch (x) {
        case "ToHole" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (index) {
                                      return {
                                              TAG: 1,
                                              _0: index,
                                              [Symbol.for("name")]: "ToHole"
                                            };
                                    }), Json_decode.$$int, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "ToRange" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (range) {
                                      return {
                                              TAG: 0,
                                              _0: range,
                                              [Symbol.for("name")]: "ToRange"
                                            };
                                    }), decode$6, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        default:
          throw {
                RE_EXN_ID: Json_decode.DecodeError,
                _1: "[View.Link] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

function encode$7(x) {
  if (x.TAG) {
    return Json_encode.object_({
                hd: [
                  "tag",
                  "ToHole"
                ],
                tl: {
                  hd: [
                    "contents",
                    x._0
                  ],
                  tl: /* [] */0
                }
              });
  } else {
    return Json_encode.object_({
                hd: [
                  "tag",
                  "ToRange"
                ],
                tl: {
                  hd: [
                    "contents",
                    encode$6(x._0)
                  ],
                  tl: /* [] */0
                }
              });
  }
}

var Link = {
  decode: decode$7,
  encode: encode$7
};

var decode$8 = Util$AgdaModeVscode.Decode.sum(function (x) {
      switch (x) {
        case "Activate" :
            return {
                    TAG: 1,
                    _0: /* Activate */0,
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "Deactivate" :
            return {
                    TAG: 1,
                    _0: /* Deactivate */1,
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "MoveDown" :
            return {
                    TAG: 1,
                    _0: /* MoveDown */4,
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "MoveLeft" :
            return {
                    TAG: 1,
                    _0: /* MoveLeft */5,
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "MoveRight" :
            return {
                    TAG: 1,
                    _0: /* MoveRight */3,
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "MoveUp" :
            return {
                    TAG: 1,
                    _0: /* MoveUp */2,
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "Update" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (param) {
                                      return {
                                              _0: param[0],
                                              _1: param[1],
                                              _2: param[2],
                                              [Symbol.for("name")]: "Update"
                                            };
                                    }), (function (param) {
                                      return Json_decode.tuple3(Json_decode.string, Translator$AgdaModeVscode.decode, Json_decode.$$int, param);
                                    }), param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        default:
          throw {
                RE_EXN_ID: Json_decode.DecodeError,
                _1: "[EventToView.InputMethod] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

function encode$8(x) {
  if (typeof x !== "number") {
    return Json_encode.object_({
                hd: [
                  "tag",
                  "Update"
                ],
                tl: {
                  hd: [
                    "contents",
                    Json_encode.tuple3((function (prim) {
                            return prim;
                          }), Translator$AgdaModeVscode.encode, (function (prim) {
                            return prim;
                          }), [
                          x._0,
                          x._1,
                          x._2
                        ])
                  ],
                  tl: /* [] */0
                }
              });
  }
  switch (x) {
    case /* Activate */0 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "Activate"
                    ],
                    tl: /* [] */0
                  });
    case /* Deactivate */1 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "Deactivate"
                    ],
                    tl: /* [] */0
                  });
    case /* MoveUp */2 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "MoveUp"
                    ],
                    tl: /* [] */0
                  });
    case /* MoveRight */3 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "MoveRight"
                    ],
                    tl: /* [] */0
                  });
    case /* MoveDown */4 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "MoveDown"
                    ],
                    tl: /* [] */0
                  });
    case /* MoveLeft */5 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "MoveLeft"
                    ],
                    tl: /* [] */0
                  });
    
  }
}

var InputMethod = {
  decode: decode$8,
  encode: encode$8
};

var decode$9 = Util$AgdaModeVscode.Decode.sum(function (x) {
      switch (x) {
        case "Display" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (param) {
                                      return {
                                              TAG: 0,
                                              _0: param[0],
                                              _1: param[1],
                                              [Symbol.for("name")]: "Display"
                                            };
                                    }), (function (param) {
                                      return Json_decode.pair(decode, decode$3, param);
                                    }), param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "InputMethod" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (x) {
                                      return {
                                              TAG: 2,
                                              _0: x,
                                              [Symbol.for("name")]: "InputMethod"
                                            };
                                    }), decode$8, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "PromptIMUpdate" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (text) {
                                      return {
                                              TAG: 1,
                                              _0: text,
                                              [Symbol.for("name")]: "PromptIMUpdate"
                                            };
                                    }), Json_decode.string, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "PromptInterrupt" :
            return {
                    TAG: 1,
                    _0: /* PromptInterrupt */0,
                    [Symbol.for("name")]: "TagOnly"
                  };
        default:
          throw {
                RE_EXN_ID: Json_decode.DecodeError,
                _1: "[EventToView] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

function encode$9(x) {
  if (typeof x === "number") {
    return Json_encode.object_({
                hd: [
                  "tag",
                  "PromptInterrupt"
                ],
                tl: /* [] */0
              });
  }
  switch (x.TAG | 0) {
    case /* Display */0 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "Display"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        Json_encode.pair(encode, encode$3, [
                              x._0,
                              x._1
                            ])
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* PromptIMUpdate */1 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "PromptIMUpdate"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        x._0
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* InputMethod */2 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "InputMethod"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        encode$8(x._0)
                      ],
                      tl: /* [] */0
                    }
                  });
    
  }
}

var EventToView = {
  InputMethod: InputMethod,
  decode: decode$9,
  encode: encode$9
};

var decode$10 = Util$AgdaModeVscode.Decode.sum(function (x) {
      if (x === "Prompt") {
        return {
                TAG: 0,
                _0: (function (param) {
                    return Json_decode.map((function (param) {
                                  return {
                                          _0: param[0],
                                          _1: param[1],
                                          [Symbol.for("name")]: "Prompt"
                                        };
                                }), (function (param) {
                                  return Json_decode.pair(decode, decode$1, param);
                                }), param);
                  }),
                [Symbol.for("name")]: "Contents"
              };
      }
      throw {
            RE_EXN_ID: Json_decode.DecodeError,
            _1: "[Request] Unknown constructor: " + x,
            Error: new Error()
          };
    });

function encode$10(x) {
  return Json_encode.object_({
              hd: [
                "tag",
                "Prompt"
              ],
              tl: {
                hd: [
                  "contents",
                  Json_encode.pair(encode, encode$1, [
                        x._0,
                        x._1
                      ])
                ],
                tl: /* [] */0
              }
            });
}

var $$Request = {
  decode: decode$10,
  encode: encode$10
};

var decode$11 = Util$AgdaModeVscode.Decode.sum(function (x) {
      switch (x) {
        case "Event" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (x) {
                                      return {
                                              TAG: 1,
                                              _0: x,
                                              [Symbol.for("name")]: "Event"
                                            };
                                    }), decode$9, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "Request" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (x) {
                                      return {
                                              TAG: 0,
                                              _0: x,
                                              [Symbol.for("name")]: "Request"
                                            };
                                    }), decode$10, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        default:
          throw {
                RE_EXN_ID: Json_decode.DecodeError,
                _1: "[RequestOrEventToView] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

function encode$11(x) {
  if (x.TAG) {
    return Json_encode.object_({
                hd: [
                  "tag",
                  "Event"
                ],
                tl: {
                  hd: [
                    "contents",
                    encode$9(x._0)
                  ],
                  tl: /* [] */0
                }
              });
  } else {
    return Json_encode.object_({
                hd: [
                  "tag",
                  "Request"
                ],
                tl: {
                  hd: [
                    "contents",
                    encode$10(x._0)
                  ],
                  tl: /* [] */0
                }
              });
  }
}

var RequestOrEventToView = {
  decode: decode$11,
  encode: encode$11
};

var decode$12 = Util$AgdaModeVscode.Decode.sum(function (x) {
      switch (x) {
        case "PromptInterrupted" :
            return {
                    TAG: 1,
                    _0: /* PromptInterrupted */0,
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "PromptSuccess" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (result) {
                                      return {
                                              _0: result,
                                              [Symbol.for("name")]: "PromptSuccess"
                                            };
                                    }), Json_decode.string, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        default:
          throw {
                RE_EXN_ID: Json_decode.DecodeError,
                _1: "[Response] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

function encode$12(x) {
  if (x) {
    return Json_encode.object_({
                hd: [
                  "tag",
                  "PromptSuccess"
                ],
                tl: {
                  hd: [
                    "contents",
                    x._0
                  ],
                  tl: /* [] */0
                }
              });
  } else {
    return Json_encode.object_({
                hd: [
                  "tag",
                  "PromptInterrupted"
                ],
                tl: /* [] */0
              });
  }
}

var $$Response = {
  decode: decode$12,
  encode: encode$12
};

var decode$13 = Util$AgdaModeVscode.Decode.sum(function (x) {
      switch (x) {
        case "ChooseSymbol" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function ($$char) {
                                      return {
                                              TAG: 1,
                                              _0: $$char,
                                              [Symbol.for("name")]: "ChooseSymbol"
                                            };
                                    }), Json_decode.string, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "InsertChar" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function ($$char) {
                                      return {
                                              TAG: 0,
                                              _0: $$char,
                                              [Symbol.for("name")]: "InsertChar"
                                            };
                                    }), Json_decode.string, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        default:
          throw {
                RE_EXN_ID: Json_decode.DecodeError,
                _1: "[Event.InputMethod] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

function encode$13(x) {
  if (x.TAG) {
    return Json_encode.object_({
                hd: [
                  "tag",
                  "ChooseSymbol"
                ],
                tl: {
                  hd: [
                    "contents",
                    x._0
                  ],
                  tl: /* [] */0
                }
              });
  } else {
    return Json_encode.object_({
                hd: [
                  "tag",
                  "InsertChar"
                ],
                tl: {
                  hd: [
                    "contents",
                    x._0
                  ],
                  tl: /* [] */0
                }
              });
  }
}

var InputMethod$1 = {
  decode: decode$13,
  encode: encode$13
};

var decode$14 = Util$AgdaModeVscode.Decode.sum(function (x) {
      switch (x) {
        case "Destroyed" :
            return {
                    TAG: 1,
                    _0: /* Destroyed */1,
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "Initialized" :
            return {
                    TAG: 1,
                    _0: /* Initialized */0,
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "InputMethod" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (action) {
                                      return {
                                              TAG: 0,
                                              _0: action,
                                              [Symbol.for("name")]: "InputMethod"
                                            };
                                    }), decode$13, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "JumpToTarget" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (link) {
                                      return {
                                              TAG: 2,
                                              _0: link,
                                              [Symbol.for("name")]: "JumpToTarget"
                                            };
                                    }), decode$7, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "MouseOut" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (link) {
                                      return {
                                              TAG: 4,
                                              _0: link,
                                              [Symbol.for("name")]: "MouseOut"
                                            };
                                    }), decode$7, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "MouseOver" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (link) {
                                      return {
                                              TAG: 3,
                                              _0: link,
                                              [Symbol.for("name")]: "MouseOver"
                                            };
                                    }), decode$7, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "PromptChange" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (text) {
                                      return {
                                              TAG: 1,
                                              _0: text,
                                              [Symbol.for("name")]: "PromptChange"
                                            };
                                    }), Json_decode.string, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        default:
          throw {
                RE_EXN_ID: Json_decode.DecodeError,
                _1: "[Response.EventFromView] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

function encode$14(x) {
  if (typeof x === "number") {
    if (x === /* Initialized */0) {
      return Json_encode.object_({
                  hd: [
                    "tag",
                    "Initialized"
                  ],
                  tl: /* [] */0
                });
    } else {
      return Json_encode.object_({
                  hd: [
                    "tag",
                    "Destroyed"
                  ],
                  tl: /* [] */0
                });
    }
  }
  switch (x.TAG | 0) {
    case /* InputMethod */0 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "InputMethod"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        encode$13(x._0)
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* PromptChange */1 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "PromptChange"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        x._0
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* JumpToTarget */2 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "JumpToTarget"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        encode$7(x._0)
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* MouseOver */3 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "MouseOver"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        encode$7(x._0)
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* MouseOut */4 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "MouseOut"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        encode$7(x._0)
                      ],
                      tl: /* [] */0
                    }
                  });
    
  }
}

var EventFromView = {
  InputMethod: InputMethod$1,
  decode: decode$14,
  encode: encode$14
};

var decode$15 = Util$AgdaModeVscode.Decode.sum(function (x) {
      switch (x) {
        case "Event" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (x) {
                                      return {
                                              TAG: 1,
                                              _0: x,
                                              [Symbol.for("name")]: "Event"
                                            };
                                    }), decode$14, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "Response" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (x) {
                                      return {
                                              TAG: 0,
                                              _0: x,
                                              [Symbol.for("name")]: "Response"
                                            };
                                    }), decode$12, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        default:
          throw {
                RE_EXN_ID: Json_decode.DecodeError,
                _1: "[ResponseOrEventFromView] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

function encode$15(x) {
  if (x.TAG) {
    return Json_encode.object_({
                hd: [
                  "tag",
                  "Event"
                ],
                tl: {
                  hd: [
                    "contents",
                    encode$14(x._0)
                  ],
                  tl: /* [] */0
                }
              });
  } else {
    return Json_encode.object_({
                hd: [
                  "tag",
                  "Response"
                ],
                tl: {
                  hd: [
                    "contents",
                    encode$12(x._0)
                  ],
                  tl: /* [] */0
                }
              });
  }
}

var ResponseOrEventFromView = {
  decode: decode$15,
  encode: encode$15
};

exports.Header = Header;
exports.Prompt = Prompt;
exports.Body = Body;
exports.Position = Position;
exports.Interval = Interval;
exports.$$Range = $$Range;
exports.Link = Link;
exports.EventToView = EventToView;
exports.$$Request = $$Request;
exports.RequestOrEventToView = RequestOrEventToView;
exports.$$Response = $$Response;
exports.EventFromView = EventFromView;
exports.ResponseOrEventFromView = ResponseOrEventFromView;
/* decode Not a pure module */
