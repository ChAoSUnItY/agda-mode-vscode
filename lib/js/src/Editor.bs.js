// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Vscode = require("vscode");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Parser$AgdaModeVscode = require("./Parser.bs.js");
var VSCode$AgdaModeVscode = require("./VSCode.bs.js");
var View__Controller$AgdaModeVscode = require("./View__Controller.bs.js");

function make(prim) {
  return new Vscode.Disposable(prim);
}

function dispose(prim) {
  return prim.dispose();
}

var Disposable = {
  make: make,
  dispose: dispose
};

function make$1(prim, prim$1) {
  return new Vscode.Position(prim, prim$1);
}

function line(prim) {
  return prim.line;
}

function column(prim) {
  return prim.character;
}

function translate(prim, prim$1, prim$2) {
  return prim.translate(prim$1, prim$2);
}

function compare(x, y) {
  var match = x.compareTo(y);
  switch (match) {
    case -1 :
        return /* LT */2;
    case 0 :
        return /* EQ */1;
    case 1 :
        return /* GT */0;
    default:
      return /* EQ */1;
  }
}

var Point = {
  make: make$1,
  line: line,
  column: column,
  translate: translate,
  compare: compare
};

function make$2(prim, prim$1) {
  return new Vscode.Range(prim, prim$1);
}

function start(prim) {
  return prim.start;
}

function end_(prim) {
  return prim.end;
}

function contains(prim, prim$1) {
  return prim.contains(prim$1);
}

function containsRange(prim, prim$1) {
  return prim.contains(prim$1);
}

var $$Range = {
  make: make$2,
  start: start,
  end_: end_,
  contains: contains,
  containsRange: containsRange
};

function getExtensionPath(context) {
  return context.extensionPath;
}

function getFileName(editor) {
  return Parser$AgdaModeVscode.filepath(editor.document.fileName);
}

function save(editor) {
  return editor.document.save();
}

function addToSubscriptions(disposable, context) {
  context.subscriptions.push(disposable);
  
}

function onDidCloseEditor(callback) {
  return Vscode.workspace.onDidCloseTextDocument((function (textDoc) {
                return Belt_Option.forEach(textDoc, (function (textDoc) {
                              return Curry._1(callback, textDoc.fileName);
                            }));
              }));
}

function onDidChangeFileName(callback) {
  return Vscode.workspace.onDidRenameFiles((function ($$event) {
                return Belt_Option.forEach(Belt_Option.map($$event, (function (prim) {
                                  return prim.files;
                                })), (function (files) {
                              return Belt_Array.forEach(files, (function (file) {
                                            return Curry._2(callback, file.oldUri.path, file.newUri.path);
                                          }));
                            }));
              }));
}

function onDidChangeActivation(callback) {
  var previous = {
    contents: Belt_Option.flatMap(Vscode.window.activeTextEditor, getFileName)
  };
  return Vscode.window.onDidChangeActiveTextEditor((function (next) {
                var next$1 = Belt_Option.flatMap(next, getFileName);
                if (Caml_obj.caml_notequal(next$1, previous.contents)) {
                  Curry._2(callback, previous.contents, next$1);
                  previous.contents = next$1;
                  return ;
                }
                
              }));
}

function isAgda(filepath) {
  var filepath$1 = Parser$AgdaModeVscode.filepath(filepath);
  return /\.agda$|\.lagda$/i.test(filepath$1);
}

function registerCommand(name, callback) {
  return Vscode.commands.registerCommand("agda-mode." + name, (function (param) {
                return Belt_Option.forEach(Vscode.window.activeTextEditor, (function (editor) {
                              return Belt_Option.forEach(getFileName(editor), (function (fileName) {
                                            if (isAgda(fileName)) {
                                              return Curry._1(callback, editor);
                                            }
                                            
                                          }));
                            }));
              }));
}

function setContext(prim, prim$1) {
  return Vscode.commands.executeCommand("setContext", prim, prim$1);
}

function setAgdaPath(path) {
  return Vscode.workspace.getConfiguration("agdaMode", undefined).update("agdaPath", path, 1, undefined);
}

function getAgdaPath(param) {
  return Vscode.workspace.getConfiguration("agdaMode", undefined).get("agdaPath");
}

function getLibraryPath(param) {
  var raw = Belt_Option.getWithDefault(Vscode.workspace.getConfiguration("agdaMode", undefined).get("libraryPath"), "");
  return Belt_Array.map(Belt_Array.keep(raw.split(","), (function (x) {
                    return x !== "";
                  })), Parser$AgdaModeVscode.filepath);
}

function getHighlightingMethod(param) {
  var raw = Vscode.workspace.getConfiguration("agdaMode", undefined).get("highlightingMethod");
  if (raw === "Direct") {
    return true;
  } else {
    return false;
  }
}

var Config = {
  setAgdaPath: setAgdaPath,
  getAgdaPath: getAgdaPath,
  getLibraryPath: getLibraryPath,
  getHighlightingMethod: getHighlightingMethod
};

function make$3(param, param$1) {
  return View__Controller$AgdaModeVscode.make(getExtensionPath, param, param$1);
}

var View = {
  send: View__Controller$AgdaModeVscode.send,
  on: View__Controller$AgdaModeVscode.on,
  destroy: View__Controller$AgdaModeVscode.destroy,
  show: View__Controller$AgdaModeVscode.show,
  focus: View__Controller$AgdaModeVscode.focus,
  hide: View__Controller$AgdaModeVscode.hide,
  make: make$3
};

function highlightBackgroundPrim(editor, backgroundColor, range) {
  var rangeBehavior = VSCode$AgdaModeVscode.DecorationRangeBehavior.toEnum(/* ClosedClosed */1);
  var options = {
    backgroundColor: backgroundColor,
    rangeBehavior: rangeBehavior
  };
  var handle = Vscode.window.createTextEditorDecorationType(options);
  editor.setDecorations(handle, [range]);
  return [handle];
}

function highlightBackground(editor, style, range) {
  return highlightBackgroundPrim(editor, VSCode$AgdaModeVscode.ThemeColor.themeColor(new Vscode.ThemeColor(style)), range);
}

function highlightBackgroundWithColor(editor, color, range) {
  return highlightBackgroundPrim(editor, VSCode$AgdaModeVscode.ThemeColor.string(color), range);
}

function decorateTextPrim(editor, color, range) {
  var rangeBehavior = VSCode$AgdaModeVscode.DecorationRangeBehavior.toEnum(/* ClosedClosed */1);
  var options = {
    color: color,
    rangeBehavior: rangeBehavior
  };
  var handle = Vscode.window.createTextEditorDecorationType(options);
  editor.setDecorations(handle, [range]);
  return [handle];
}

function decorateText(editor, style, range) {
  return highlightBackgroundPrim(editor, VSCode$AgdaModeVscode.ThemeColor.themeColor(new Vscode.ThemeColor(style)), range);
}

function decorateTextWithColor(editor, color, range) {
  return highlightBackgroundPrim(editor, VSCode$AgdaModeVscode.ThemeColor.string(color), range);
}

function overlayTextPrim(editor, color, text, range) {
  var after = {
    color: color,
    contentText: text
  };
  var options = {
    after: after
  };
  var handle = Vscode.window.createTextEditorDecorationType(options);
  editor.setDecorations(handle, [range]);
  return [handle];
}

function overlayText(editor, style, text, range) {
  return overlayTextPrim(editor, VSCode$AgdaModeVscode.ThemeColor.themeColor(new Vscode.ThemeColor(style)), text, range);
}

function overlayTextWithColor(editor, color, text, range) {
  return overlayTextPrim(editor, VSCode$AgdaModeVscode.ThemeColor.string(color), text, range);
}

function underlineText(editor, range) {
  var rangeBehavior = VSCode$AgdaModeVscode.DecorationRangeBehavior.toEnum(/* OpenOpen */0);
  var options = {
    rangeBehavior: rangeBehavior,
    textDecoration: "underline dotted"
  };
  var handle = Vscode.window.createTextEditorDecorationType(options);
  editor.setDecorations(handle, [range]);
  return [handle];
}

function destroy(prim) {
  prim.dispose();
  
}

var Decoration = {
  highlightBackgroundPrim: highlightBackgroundPrim,
  highlightBackground: highlightBackground,
  highlightBackgroundWithColor: highlightBackgroundWithColor,
  decorateTextPrim: decorateTextPrim,
  decorateText: decorateText,
  decorateTextWithColor: decorateTextWithColor,
  overlayTextPrim: overlayTextPrim,
  overlayText: overlayText,
  overlayTextWithColor: overlayTextWithColor,
  underlineText: underlineText,
  destroy: destroy
};

function focus(editor) {
  Vscode.window.showTextDocument(editor.document, /* Beside */1, undefined);
  
}

function getSelectionRange(editor) {
  var selection = editor.selection;
  return new Vscode.Range(selection.start, selection.end);
}

function getCursorPosition(editor) {
  return editor.selection.end;
}

function getCursorPositions(editor) {
  return Belt_Array.map(editor.selections, (function (prim) {
                return prim.end;
              }));
}

function setCursorPosition(editor, point) {
  editor.selection = new Vscode.Selection(point, point);
  
}

function onChangeCursorPosition(callback) {
  return Vscode.window.onDidChangeTextEditorSelection((function ($$event) {
                return Curry._1(callback, Belt_Array.map($$event.selections, (function (prim) {
                                  return prim.anchor;
                                })));
              }));
}

function rangeForLine(editor, line) {
  return editor.document.lineAt(line).range;
}

function pointAtOffset(editor, offset) {
  return editor.document.positionAt(offset);
}

function offsetAtPoint(editor, point) {
  return editor.document.offsetAt(point);
}

function getTextInRange(editor, range) {
  return editor.document.getText(Caml_option.some(range));
}

function getText(editor) {
  return editor.document.getText(undefined);
}

function selectText(editor, range) {
  var start = range.start;
  var end_ = range.end;
  var selection = new Vscode.Selection(start, end_);
  editor.selection = selection;
  
}

function setText(editor, range, text) {
  var editCallback = function (edit) {
    edit.replace(range, text);
    
  };
  return editor.edit(editCallback, undefined);
}

function insertText(editor, point, text) {
  var editCallback = function (edit) {
    edit.insert(point, text);
    
  };
  return editor.edit(editCallback, undefined);
}

function deleteText(editor, range) {
  var editCallback = function (edit) {
    edit.delete(range);
    
  };
  return editor.edit(editCallback, undefined);
}

function onChange(callback) {
  return Vscode.workspace.onDidChangeTextDocument((function ($$event) {
                if ($$event !== undefined) {
                  return Curry._1(callback, Belt_Array.map(Caml_option.valFromOption($$event).contentChanges, (function (change) {
                                    return {
                                            offset: change.rangeOffset,
                                            insertText: change.text,
                                            replaceLength: change.rangeLength
                                          };
                                  })));
                }
                
              }));
}

function copyToClipboard(text) {
  return Vscode.env.clipboard.writeText(text);
}

function colorThemeIsDark(param) {
  return VSCode$AgdaModeVscode.ColorTheme.kind(Vscode.window.activeColorTheme) === /* Dark */1;
}

var editorType = /* VsCode */1;

exports.Disposable = Disposable;
exports.Point = Point;
exports.$$Range = $$Range;
exports.editorType = editorType;
exports.getExtensionPath = getExtensionPath;
exports.getFileName = getFileName;
exports.save = save;
exports.addToSubscriptions = addToSubscriptions;
exports.onDidCloseEditor = onDidCloseEditor;
exports.onDidChangeFileName = onDidChangeFileName;
exports.onDidChangeActivation = onDidChangeActivation;
exports.isAgda = isAgda;
exports.registerCommand = registerCommand;
exports.setContext = setContext;
exports.Config = Config;
exports.View = View;
exports.Decoration = Decoration;
exports.focus = focus;
exports.getSelectionRange = getSelectionRange;
exports.getCursorPosition = getCursorPosition;
exports.getCursorPositions = getCursorPositions;
exports.setCursorPosition = setCursorPosition;
exports.onChangeCursorPosition = onChangeCursorPosition;
exports.rangeForLine = rangeForLine;
exports.pointAtOffset = pointAtOffset;
exports.offsetAtPoint = offsetAtPoint;
exports.getTextInRange = getTextInRange;
exports.getText = getText;
exports.selectText = selectText;
exports.setText = setText;
exports.insertText = insertText;
exports.deleteText = deleteText;
exports.onChange = onChange;
exports.copyToClipboard = copyToClipboard;
exports.colorThemeIsDark = colorThemeIsDark;
/* vscode Not a pure module */
