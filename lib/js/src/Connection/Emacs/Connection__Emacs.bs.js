// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Os = require("os");
var Curry = require("bs-platform/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Untildify = require("untildify");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Chan$AgdaModeVscode = require("../../Util/Chan.bs.js");
var Util$AgdaModeVscode = require("../../Util/Util.bs.js");
var Config$AgdaModeVscode = require("../../Config.bs.js");
var Parser$AgdaModeVscode = require("../../Parser/Parser.bs.js");
var Response$AgdaModeVscode = require("../../Response.bs.js");
var Connection__Process$AgdaModeVscode = require("../Connection__Process.bs.js");
var Connection__Scheduler$AgdaModeVscode = require("../Connection__Scheduler.bs.js");

function make(path, args) {
  var validator = function (output) {
    var match_ = output.match(/Agda version (.*)/);
    if (match_ === null) {
      return {
              TAG: 1,
              _0: "Cannot read Agda version",
              [Symbol.for("name")]: "Error"
            };
    }
    var version = Belt_Array.get(match_, 1);
    if (version !== undefined) {
      return {
              TAG: 0,
              _0: version,
              [Symbol.for("name")]: "Ok"
            };
    } else {
      return {
              TAG: 1,
              _0: "Cannot read Agda version",
              [Symbol.for("name")]: "Error"
            };
    }
  };
  var path$1 = Untildify(path);
  return $$Promise.mapError($$Promise.mapOk(Connection__Process$AgdaModeVscode.Validation.run("\"" + (path$1 + "\" -V"), validator), (function (version) {
                    return {
                            path: path$1,
                            args: args,
                            version: version
                          };
                  })), (function (e) {
                return {
                        TAG: 1,
                        _0: e,
                        [Symbol.for("name")]: "Validation"
                      };
              }));
}

function findPath(param) {
  var storedPath = Config$AgdaModeVscode.Connection.getAgdaPath(undefined);
  if (!(storedPath === "" || storedPath === ".")) {
    return $$Promise.resolved({
                TAG: 0,
                _0: storedPath,
                [Symbol.for("name")]: "Ok"
              });
  }
  var agdaVersion = Config$AgdaModeVscode.Connection.getAgdaVersion(undefined);
  return $$Promise.mapError($$Promise.mapOk(Connection__Process$AgdaModeVscode.PathSearch.run(agdaVersion, "If you know where the executable of Agda is located, please fill it in \"agdaMode.agdaPath\" in the Settings."), (function (prim) {
                    return prim.trim();
                  })), (function (e) {
                return {
                        TAG: 0,
                        _0: e,
                        [Symbol.for("name")]: "PathSearch"
                      };
              }));
}

function toString(self) {
  var path = "* path: " + self.path;
  var args = "* args: " + Util$AgdaModeVscode.Pretty.array(self.args);
  var version = "* version: " + self.version;
  var os = "* platform: " + Os.type();
  return "## Parse Log\n" + (path + ("\n" + (args + ("\n" + (version + ("\n" + (os + "\n")))))));
}

var ProcInfo = {
  make: make,
  findPath: findPath,
  toString: toString
};

function destroy(self) {
  Chan$AgdaModeVscode.destroy(self.chan);
  self.encountedFirstPrompt = false;
  return Connection__Process$AgdaModeVscode.destroy(self.process);
}

function wire(self) {
  var toResponse = Curry._1(Parser$AgdaModeVscode.Incr.Gen.flatMap, (function (x) {
          if (x.TAG !== /* Ok */0) {
            return {
                    _0: {
                      TAG: 1,
                      _0: x._0,
                      [Symbol.for("name")]: "Error"
                    },
                    [Symbol.for("name")]: "Yield"
                  };
          }
          var tokens = x._0;
          if (tokens.TAG === /* A */0 && tokens._0 === "Agda2>") {
            return /* Stop */0;
          } else {
            return {
                    _0: Response$AgdaModeVscode.Prioritized.parse(tokens),
                    [Symbol.for("name")]: "Yield"
                  };
          }
        }));
  var mapError = function (x) {
    return Curry._2(Parser$AgdaModeVscode.Incr.Gen.map, (function (x) {
                  if (x.TAG === /* Ok */0) {
                    return {
                            TAG: 0,
                            _0: x._0,
                            [Symbol.for("name")]: "Ok"
                          };
                  }
                  var match = x._0;
                  return {
                          TAG: 1,
                          _0: {
                            TAG: 0,
                            _0: match[0],
                            _1: match[1],
                            [Symbol.for("name")]: "SExpression"
                          },
                          [Symbol.for("name")]: "Error"
                        };
                }), x);
  };
  var pipeline = Parser$AgdaModeVscode.SExpression.makeIncr(function (x) {
        var res = Curry._1(toResponse, mapError(x));
        if (res) {
          return Chan$AgdaModeVscode.emit(self.chan, {
                      TAG: 0,
                      _0: {
                        _0: res._0,
                        [Symbol.for("name")]: "Yield"
                      },
                      [Symbol.for("name")]: "Ok"
                    });
        } else if (self.encountedFirstPrompt) {
          return Chan$AgdaModeVscode.emit(self.chan, {
                      TAG: 0,
                      _0: /* Stop */0,
                      [Symbol.for("name")]: "Ok"
                    });
        } else {
          self.encountedFirstPrompt = true;
          return ;
        }
      });
  Connection__Process$AgdaModeVscode.onOutput(self.process, (function (x) {
          if (x.TAG === /* Ok */0) {
            return Belt_Array.forEach(Parser$AgdaModeVscode.split(x._0), (function (param) {
                          return Parser$AgdaModeVscode.Incr.feed(pipeline, param);
                        }));
          } else {
            return Chan$AgdaModeVscode.emit(self.chan, {
                        TAG: 1,
                        _0: {
                          TAG: 2,
                          _0: x._0,
                          [Symbol.for("name")]: "Process"
                        },
                        [Symbol.for("name")]: "Error"
                      });
          }
        }));
  
}

function make$1(param) {
  var persistPathInConfig = function (procInfo) {
    return $$Promise.map(Config$AgdaModeVscode.Connection.setAgdaPath(procInfo.path), (function (param) {
                  return {
                          TAG: 0,
                          _0: procInfo,
                          [Symbol.for("name")]: "Ok"
                        };
                }));
  };
  var args = ["--interaction"].concat(Config$AgdaModeVscode.Connection.getCommandLineOptions(undefined));
  return $$Promise.tapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk(findPath(undefined), (function (path) {
                            return make(path, args);
                          })), persistPathInConfig), (function (procInfo) {
                    return $$Promise.mapError($$Promise.mapOk(Connection__Process$AgdaModeVscode.make(procInfo.path, procInfo.args), (function ($$process) {
                                      return {
                                              procInfo: procInfo,
                                              process: $$process,
                                              chan: Chan$AgdaModeVscode.make(undefined),
                                              encountedFirstPrompt: false
                                            };
                                    })), (function (e) {
                                  return {
                                          TAG: 2,
                                          _0: e,
                                          [Symbol.for("name")]: "Process"
                                        };
                                }));
                  })), wire);
}

function sendRequestPrim(conn, encoded) {
  Connection__Process$AgdaModeVscode.send(conn.process, encoded);
  
}

function onResponse(conn, callback) {
  var scheduler = Connection__Scheduler$AgdaModeVscode.make(undefined);
  var match = $$Promise.pending(undefined);
  var stopListener = match[1];
  var listener = function (x) {
    if (x.TAG === /* Ok */0) {
      var match = x._0;
      if (match) {
        var error = match._0;
        if (error.TAG === /* Ok */0) {
          var response = error._0;
          if (response.TAG === /* NonLast */0) {
            return Connection__Scheduler$AgdaModeVscode.runNonLast(scheduler, (function (response) {
                          return Curry._1(callback, {
                                      TAG: 0,
                                      _0: response,
                                      [Symbol.for("name")]: "Ok"
                                    });
                        }), response._0);
          } else {
            return Connection__Scheduler$AgdaModeVscode.addLast(scheduler, response._0, response._1);
          }
        }
        Curry._1(callback, {
              TAG: 1,
              _0: {
                TAG: 3,
                _0: error._0,
                [Symbol.for("name")]: "ResponseParseError"
              },
              [Symbol.for("name")]: "Error"
            });
        return ;
      }
      Curry._1(stopListener, undefined);
      return Connection__Scheduler$AgdaModeVscode.runLast(scheduler, (function (response) {
                    return Curry._1(callback, {
                                TAG: 0,
                                _0: response,
                                [Symbol.for("name")]: "Ok"
                              });
                  }));
    }
    Curry._1(callback, {
          TAG: 1,
          _0: x._0,
          [Symbol.for("name")]: "Error"
        });
    
  };
  var listenerHandle = {
    contents: undefined
  };
  listenerHandle.contents = Chan$AgdaModeVscode.on(conn.chan, listener);
  return $$Promise.tap(match[0], (function (param) {
                return Belt_Option.forEach(listenerHandle.contents, (function (destroyListener) {
                              return Curry._1(destroyListener, undefined);
                            }));
              }));
}

function sendRequest(conn, request, handler) {
  var promise = onResponse(conn, handler);
  sendRequestPrim(conn, request);
  return $$Promise.map(promise, (function (param) {
                return {
                        TAG: 0,
                        _0: undefined,
                        [Symbol.for("name")]: "Ok"
                      };
              }));
}

function getInfo(conn) {
  return [
          conn.procInfo.version,
          conn.procInfo.path
        ];
}

var Module = {
  make: make$1,
  destroy: destroy,
  sendRequest: sendRequest,
  getInfo: getInfo
};

var $$Error;

var Scheduler;

exports.$$Error = $$Error;
exports.Scheduler = Scheduler;
exports.ProcInfo = ProcInfo;
exports.Module = Module;
exports.make = make$1;
exports.destroy = destroy;
exports.sendRequest = sendRequest;
exports.getInfo = getInfo;
/* os Not a pure module */
