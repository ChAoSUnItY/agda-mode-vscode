// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Body$AgdaModeVscode = require("./Body.bs.js");
var Hook$AgdaModeVscode = require("./Hook.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Header$AgdaModeVscode = require("./Header.bs.js");

function Panel(Props) {
  var onRequest = Props.onRequest;
  var onResponse = Props.onResponse;
  var match = React.useState((function () {
          return /* Plain */Caml_chrome_debugger.variant("Plain", 0, ["Loading ..."]);
        }));
  var setHeader = match[1];
  var match$1 = React.useState((function () {
          return /* Nothing */0;
        }));
  var setBody = match$1[1];
  React.useEffect((function () {
          Curry._1(onResponse.emit, /* Event */Caml_chrome_debugger.variant("Event", 1, [/* Initialized */0]));
          
        }), []);
  var resolver = React.useRef(undefined);
  var onSubmit = function (result) {
    var resolve = resolver.current;
    if (resolve !== undefined) {
      Curry._1(resolve, result);
      resolver.current = undefined;
      return ;
    }
    
  };
  Hook$AgdaModeVscode.on(onRequest, (function (msg) {
          if (typeof msg === "number") {
            if (msg >= 2) {
              console.log("[ view ] >>> Interrupt Query");
              console.log("[ view ] <<< Query Interrupted");
              return onSubmit("yo");
            } else {
              return Curry._1(onResponse.emit, /* Success */0);
            }
          }
          var body = msg[1];
          var header = msg[0];
          if (typeof body !== "number" && body.tag) {
            var value = body[1];
            var placeholder = body[0];
            console.log("[ view ] >>> Query");
            var match = $$Promise.pending(undefined);
            resolver.current = match[1];
            Curry._1(setHeader, (function (param) {
                    return header;
                  }));
            Curry._1(setBody, (function (param) {
                    return /* Query */Caml_chrome_debugger.variant("Query", 1, [
                              placeholder,
                              value
                            ]);
                  }));
            return $$Promise.get(match[0], (function (result) {
                          console.log("[ view ] <<< QuerySuccess");
                          return Curry._1(onResponse.emit, /* QuerySuccess */Caml_chrome_debugger.variant("QuerySuccess", 0, [result]));
                        }));
          }
          Curry._1(setHeader, (function (param) {
                  return header;
                }));
          Curry._1(setBody, (function (param) {
                  return body;
                }));
          return Curry._1(onResponse.emit, /* Success */0);
        }));
  return React.createElement("section", {
              className: "agda-mode native-key-bindings",
              tabIndex: -1
            }, React.createElement(Header$AgdaModeVscode.make, {
                  header: match[0]
                }), React.createElement(Body$AgdaModeVscode.make, {
                  body: match$1[0],
                  onSubmit: onSubmit
                }));
}

var make = Panel;

exports.make = make;
/* react Not a pure module */
