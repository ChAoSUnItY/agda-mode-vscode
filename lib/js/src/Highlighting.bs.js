// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Util$AgdaModeVscode = require("./Util/Util.bs.js");
var Parser$AgdaModeVscode = require("./Parser.bs.js");

function parse(param) {
  switch (param) {
    case "argument" :
        return /* Argument */32;
    case "background" :
        return /* Background */7;
    case "bound" :
        return /* Bound */21;
    case "catchallclause" :
        return /* CatchallClause */19;
    case "coinductiveconstructor" :
        return /* ConstructorCoInductive */24;
    case "comment" :
        return /* Comment */0;
    case "confluenceproblem" :
        return /* ConfluenceProblem */20;
    case "coverageproblem" :
        return /* CoverageProblem */16;
    case "datatype" :
        return /* Datatype */25;
    case "deadcode" :
        return /* Deadcode */15;
    case "dottedpattern" :
        return /* DottedPattern */10;
    case "error" :
        return /* Error */9;
    case "field" :
        return /* Field */26;
    case "function" :
        return /* Function */27;
    case "generalizable" :
        return /* Generalizable */22;
    case "incompletepattern" :
        return /* IncompletePattern */17;
    case "inductiveconstructor" :
        return /* ConstructorInductive */23;
    case "keyword" :
        return /* Keyword */1;
    case "macro" :
        return /* Macro */33;
    case "markup" :
        return /* Markup */8;
    case "module" :
        return /* Module */28;
    case "number" :
        return /* Number */3;
    case "operator" :
        return /* Operator */34;
    case "positivityproblem" :
        return /* PositivityProblem */14;
    case "postulate" :
        return /* Postulate */29;
    case "pragma" :
        return /* Pragma */6;
    case "primitive" :
        return /* Primitive */30;
    case "primitivetype" :
        return /* PrimitiveType */5;
    case "record" :
        return /* Record */31;
    case "string" :
        return /* String */2;
    case "symbol" :
        return /* Symbol */4;
    case "terminationproblem" :
        return /* TerminationProblem */13;
    case "typechecks" :
        return /* TypeChecks */18;
    case "unsolpedmeta" :
        return /* UnsolvedMeta */11;
    case "unsolvedconstraint" :
        return /* UnsolvedConstraint */12;
    default:
      return /* Operator */34;
  }
}

function shouldHighlight(param) {
  if (param >= 14) {
    return param === 16;
  } else {
    return param >= 11;
  }
}

var Aspect = {
  parse: parse,
  shouldHighlight: shouldHighlight
};

function toString(self) {
  var match = self.source;
  return "Annotation " + (String(self.start) + (" " + (String(self.end_) + (" " + (Util$AgdaModeVscode.Pretty.list(Belt_List.fromArray(self.aspects)) + (
                    match !== undefined ? match[0] + (" " + String(match[1])) : ""
                  ))))));
}

function parse$1(xs) {
  if (!xs.tag) {
    return ;
  }
  var xs$1 = xs[0];
  var len = xs$1.length;
  if (len >= 7) {
    return ;
  }
  switch (len) {
    case 3 :
        var start$prime = xs$1[0];
        if (start$prime.tag) {
          return ;
        }
        var end_$prime = xs$1[1];
        if (end_$prime.tag) {
          return ;
        }
        var end_$prime$1 = end_$prime[0];
        var aspects = xs$1[2];
        return Belt_Option.flatMap(Parser$AgdaModeVscode.$$int(start$prime[0]), (function (start) {
                      return Belt_Option.map(Parser$AgdaModeVscode.$$int(end_$prime$1), (function (end_) {
                                    return {
                                            start: start,
                                            end_: end_,
                                            aspects: Belt_Array.map(Parser$AgdaModeVscode.SExpression.flatten(aspects), parse),
                                            source: undefined
                                          };
                                  }));
                    }));
    case 4 :
        var start$prime$1 = xs$1[0];
        if (start$prime$1.tag) {
          return ;
        }
        var end_$prime$2 = xs$1[1];
        if (end_$prime$2.tag) {
          return ;
        }
        var end_$prime$3 = end_$prime$2[0];
        var aspects$1 = xs$1[2];
        return Belt_Option.flatMap(Parser$AgdaModeVscode.$$int(start$prime$1[0]), (function (start) {
                      return Belt_Option.map(Parser$AgdaModeVscode.$$int(end_$prime$3), (function (end_) {
                                    return {
                                            start: start,
                                            end_: end_,
                                            aspects: Belt_Array.map(Parser$AgdaModeVscode.SExpression.flatten(aspects$1), parse),
                                            source: undefined
                                          };
                                  }));
                    }));
    case 0 :
    case 1 :
    case 2 :
    case 5 :
        return ;
    case 6 :
        var start$prime$2 = xs$1[0];
        if (start$prime$2.tag) {
          return ;
        }
        var end_$prime$4 = xs$1[1];
        if (end_$prime$4.tag) {
          return ;
        }
        var end_$prime$5 = end_$prime$4[0];
        var aspects$2 = xs$1[2];
        var match = xs$1[5];
        if (!match.tag) {
          return ;
        }
        var match$1 = match[0];
        if (match$1.length !== 3) {
          return ;
        }
        var filepath = match$1[0];
        if (filepath.tag) {
          return ;
        }
        var filepath$1 = filepath[0];
        var index$prime = match$1[2];
        if (index$prime.tag) {
          return ;
        }
        var index$prime$1 = index$prime[0];
        return Belt_Option.flatMap(Parser$AgdaModeVscode.$$int(start$prime$2[0]), (function (start) {
                      return Belt_Option.flatMap(Parser$AgdaModeVscode.$$int(end_$prime$5), (function (end_) {
                                    return Belt_Option.map(Parser$AgdaModeVscode.$$int(index$prime$1), (function (index) {
                                                  return {
                                                          start: start,
                                                          end_: end_,
                                                          aspects: Belt_Array.map(Parser$AgdaModeVscode.SExpression.flatten(aspects$2), parse),
                                                          source: /* tuple */[
                                                            filepath$1,
                                                            index
                                                          ]
                                                        };
                                                }));
                                  }));
                    }));
    
  }
}

function parseDirectHighlightings(tokens) {
  return Belt_Array.keepMap(Belt_Array.map(tokens.slice(2), parse$1), (function (x) {
                return x;
              }));
}

function parseIndirectHighlightings(tokens) {
  return Belt_Array.keepMap(Belt_Array.map(tokens.slice(1), parse$1), (function (x) {
                return x;
              }));
}

var Token;

exports.Aspect = Aspect;
exports.Token = Token;
exports.toString = toString;
exports.parse = parse$1;
exports.parseDirectHighlightings = parseDirectHighlightings;
exports.parseIndirectHighlightings = parseIndirectHighlightings;
/* Util-AgdaModeVscode Not a pure module */
