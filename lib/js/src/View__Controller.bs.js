// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Path = require("path");
var Curry = require("bs-platform/lib/js/curry.js");
var VSCode = require("bs-vscode/lib/js/src/VSCode.bs.js");
var Vscode = require("vscode");
var Js_math = require("bs-platform/lib/js/js_math.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var Chan$AgdaModeVscode = require("./Util/Chan.bs.js");
var View$AgdaModeVscode = require("./View.bs.js");

function send(view, requestOrEvent) {
  var match = view.status;
  if (match) {
    if (requestOrEvent.TAG) {
      match._1.push(requestOrEvent._0);
      return $$Promise.resolved(undefined);
    }
    var match$1 = $$Promise.pending(undefined);
    var resolve = match$1[1];
    match._0.push([
          requestOrEvent._0,
          (function (x) {
              if (x.TAG) {
                return Curry._1(resolve, undefined);
              } else {
                return Curry._1(resolve, x._0);
              }
            })
        ]);
    return match$1[0];
  }
  var stringified = JSON.stringify(View$AgdaModeVscode.RequestOrEventToView.encode(requestOrEvent));
  if (requestOrEvent.TAG) {
    return $$Promise.map(view.panel.webview.postMessage(stringified), (function (param) {
                  
                }));
  }
  var promise = Chan$AgdaModeVscode.once(view.onResponseFromView);
  return $$Promise.map($$Promise.flatMap(view.panel.webview.postMessage(stringified), (function (param) {
                    return promise;
                  })), (function (res) {
                return res;
              }));
}

function onEvent(view, callback) {
  return new Vscode.Disposable(Chan$AgdaModeVscode.on(view.onEventFromView, callback));
}

function make(extensionPath, editor) {
  var html = function (distPath, styleUri, scriptUri, codiconUri) {
    var text = "";
    var charaterSet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    var cardinality = charaterSet.length;
    for(var _for = 0; _for <= 32; ++_for){
      text = text + charaterSet.charAt(Js_math.floor(Math.random() * cardinality));
    }
    var nonce = text;
    var styleUri$1 = Vscode.Uri.file(Path.join(distPath, styleUri)).with(VSCode.Uri.makeChange(undefined, undefined, undefined, undefined, "vscode-resource", undefined));
    var scriptUri$1 = Vscode.Uri.file(Path.join(distPath, scriptUri)).with(VSCode.Uri.makeChange(undefined, undefined, undefined, undefined, "vscode-resource", undefined));
    var codiconUri$1 = Vscode.Uri.file(Path.join(distPath, codiconUri)).with(VSCode.Uri.makeChange(undefined, undefined, undefined, undefined, "vscode-resource", undefined));
    var metaContent = "font-src vscode-resource: ;default-src 'none'; img-src vscode-resource: https:; script-src 'nonce-" + (nonce + "';style-src vscode-resource: 'unsafe-inline' http: https: data:;");
    return "\n        <!DOCTYPE html>\n              <html lang=\"en\">\n              <head>\n                <meta charset=\"utf-8\">\n                <meta name=\"viewport\" content=\"width=device-width,initial-scale=1,shrink-to-fit=no\">\n                <meta name=\"theme-color\" content=\"#000000\">\n                <title>React App</title>\n                <link rel=\"stylesheet\" type=\"text/css\" href=\"" + styleUri$1 + "\">\n                <link rel=\"stylesheet\" type=\"text/css\" href=\"" + codiconUri$1 + "\">\n                <meta http-equiv=\"Content-Security-Policy\" content=\"" + metaContent + "\">\n              </head>\n              <body>\n                <noscript>You need to enable JavaScript to run this app.</noscript>\n                <div id=\"root\"></div>\n                <script nonce=\"" + nonce + "\" src=\"" + scriptUri$1 + "\"></script>\n              </body>\n              </html>\n        ";
  };
  var createPanel = function (editor) {
    var distPath = Path.join(extensionPath, "dist");
    var fileName = Path.basename(editor.document.fileName, ".agda");
    var panel = Vscode.window.createWebviewPanel("panel", "Agda [" + (fileName + "]"), {
          preserveFocus: true,
          viewColumn: 3
        }, VSCode.WebviewAndWebviewPanelOptions.make(undefined, true, [Vscode.Uri.file(distPath)], undefined, undefined, true, undefined));
    panel.webview.html = html(distPath, "style.css", "view.bundle.js", "codicon/codicon.css");
    return panel;
  };
  var moveToBottom = function (param) {
    return Vscode.commands.executeCommand((function () {
                    switch (({
                          NAME: "setEditorLayout",
                          VAL: {
                            orientation: 1,
                            groups: [
                              Curry._1(VSCode.Commands.Layout.sized, {
                                    groups: [VSCode.Commands.Layout.simple],
                                    size: 0.7
                                  }),
                              Curry._1(VSCode.Commands.Layout.sized, {
                                    groups: [VSCode.Commands.Layout.simple],
                                    size: 0.3
                                  })
                            ]
                          }
                        }).NAME) {
                      case "setEditorLayout" :
                          return "vscode.setEditorLayout";
                      case "setContext" :
                          return "setContext";
                      
                    }
                  })(), ({
                  NAME: "setEditorLayout",
                  VAL: {
                    orientation: 1,
                    groups: [
                      Curry._1(VSCode.Commands.Layout.sized, {
                            groups: [VSCode.Commands.Layout.simple],
                            size: 0.7
                          }),
                      Curry._1(VSCode.Commands.Layout.sized, {
                            groups: [VSCode.Commands.Layout.simple],
                            size: 0.3
                          })
                    ]
                  }
                }).VAL);
  };
  var panel = createPanel(editor);
  moveToBottom(undefined);
  var subscriptions = [];
  var onResponseFromView = Chan$AgdaModeVscode.make(undefined);
  var onEventFromView = Chan$AgdaModeVscode.make(undefined);
  subscriptions.push(panel.webview.onDidReceiveMessage(function (json) {
            var res;
            try {
              res = Curry._1(View$AgdaModeVscode.ResponseOrEventFromView.decode, json);
            }
            catch (raw_e){
              var e = Caml_js_exceptions.internalToOCamlException(raw_e);
              console.log("[ panic ][ Webview.onDidReceiveMessage JSON decode error ]", e);
              return ;
            }
            if (res.TAG) {
              return Chan$AgdaModeVscode.emit(onEventFromView, res._0);
            } else {
              return Chan$AgdaModeVscode.emit(onResponseFromView, res._0);
            }
          }));
  subscriptions.push(panel.onDidDispose(function (param) {
            return Chan$AgdaModeVscode.emit(onEventFromView, /* Destroyed */1);
          }));
  var view = {
    panel: panel,
    onResponseFromView: onResponseFromView,
    onEventFromView: onEventFromView,
    subscriptions: subscriptions,
    status: {
      _0: [],
      _1: [],
      [Symbol.for("name")]: "Uninitialized"
    }
  };
  view.subscriptions.push(new Vscode.Disposable(Chan$AgdaModeVscode.on(view.onEventFromView, (function (x) {
                  if (typeof x !== "number") {
                    return ;
                  }
                  if (x !== 0) {
                    return ;
                  }
                  var match = view.status;
                  if (match) {
                    view.status = /* Initialized */0;
                    Belt_Array.forEach(match._0, (function (param) {
                            var resolve = param[1];
                            return $$Promise.get(send(view, {
                                            TAG: 0,
                                            _0: param[0],
                                            [Symbol.for("name")]: "Request"
                                          }), (function (x) {
                                          if (x !== undefined) {
                                            return Curry._1(resolve, {
                                                        TAG: 0,
                                                        _0: x,
                                                        [Symbol.for("name")]: "Response"
                                                      });
                                          }
                                          
                                        }));
                          }));
                    return Belt_Array.forEach(match._1, (function ($$event) {
                                  send(view, {
                                        TAG: 1,
                                        _0: $$event,
                                        [Symbol.for("name")]: "Event"
                                      });
                                  
                                }));
                  }
                  
                }))));
  return view;
}

function destroy(view) {
  Chan$AgdaModeVscode.destroy(view.onResponseFromView);
  Chan$AgdaModeVscode.destroy(view.onEventFromView);
  view.panel.dispose();
  return Belt_Array.forEach(view.subscriptions, (function (prim) {
                return prim.dispose();
              }));
}

function show(view) {
  return VSCode.WebviewPanel.reveal(view.panel, undefined, true, undefined);
}

function focus(view) {
  return VSCode.WebviewPanel.reveal(view.panel, undefined, undefined, undefined);
}

function hide(_view) {
  
}

function fromPosition(position) {
  return new Vscode.Position(position.line - 1 | 0, position.col - 1 | 0);
}

function fromInterval(interval) {
  return new Vscode.Range(fromPosition(interval.start), fromPosition(interval.end_));
}

exports.send = send;
exports.onEvent = onEvent;
exports.make = make;
exports.destroy = destroy;
exports.show = show;
exports.focus = focus;
exports.hide = hide;
exports.fromPosition = fromPosition;
exports.fromInterval = fromInterval;
/* path Not a pure module */
