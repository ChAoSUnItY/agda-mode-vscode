// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Body$AgdaModeVscode = require("./Body.bs.js");
var Hook$AgdaModeVscode = require("./Hook.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Header$AgdaModeVscode = require("./Header.bs.js");
var Keyboard$AgdaModeVscode = require("./Keyboard.bs.js");
var Translator$AgdaModeVscode = require("../InputMethod/Translator.bs.js");

function Panel(Props) {
  var onRequest = Props.onRequest;
  var onResponse = Props.onResponse;
  var match = React.useState((function () {
          return /* Plain */Caml_chrome_debugger.variant("Plain", 0, ["Loading ..."]);
        }));
  var setHeader = match[1];
  var match$1 = React.useState((function () {
          return /* Nothing */0;
        }));
  var setBody = match$1[1];
  var match$2 = React.useReducer((function (_state, param) {
          if (typeof param !== "number") {
            return /* Activated */Caml_chrome_debugger.simpleVariant("Activated", [
                      param[0],
                      param[1],
                      param[2]
                    ]);
          }
          if (param !== 0) {
            return /* Deactivated */0;
          }
          var initTranslation = Translator$AgdaModeVscode.translate("");
          return /* Activated */Caml_chrome_debugger.simpleVariant("Activated", [
                    "",
                    initTranslation.keySuggestions,
                    initTranslation.candidateSymbols
                  ]);
        }), /* Deactivated */0);
  var runInputMethodAction = match$2[1];
  React.useEffect((function () {
          Curry._1(onResponse.emit, /* EventPiggyBack */Caml_chrome_debugger.variant("EventPiggyBack", 0, [/* Initialized */0]));
          
        }), []);
  var resolver = React.useRef(undefined);
  var onSubmit = function (result) {
    var resolve = resolver.current;
    if (resolve !== undefined) {
      Curry._1(resolve, result);
      resolver.current = undefined;
      return ;
    }
    
  };
  Hook$AgdaModeVscode.on(onRequest, onResponse, (function (msg) {
          if (typeof msg === "number") {
            switch (msg) {
              case /* Show */0 :
              case /* Hide */1 :
                  return $$Promise.resolved(/* Success */0);
              case /* InterruptQuery */2 :
                  onSubmit(undefined);
                  return $$Promise.resolved(/* QueryInterrupted */1);
              
            }
          } else {
            if (msg.tag) {
              Curry._1(runInputMethodAction, msg[0]);
              return $$Promise.resolved(/* Success */0);
            }
            var body = msg[1];
            var header = msg[0];
            if (typeof body !== "number" && body.tag) {
              var value = body[1];
              var placeholder = body[0];
              var match = $$Promise.pending(undefined);
              resolver.current = match[1];
              Curry._1(setHeader, (function (param) {
                      return header;
                    }));
              Curry._1(setBody, (function (param) {
                      return /* Query */Caml_chrome_debugger.variant("Query", 1, [
                                placeholder,
                                value
                              ]);
                    }));
              return $$Promise.map(match[0], (function (result) {
                            if (result !== undefined) {
                              return /* QuerySuccess */Caml_chrome_debugger.variant("QuerySuccess", 1, [result]);
                            } else {
                              return /* QueryInterrupted */1;
                            }
                          }));
            }
            Curry._1(setHeader, (function (param) {
                    return header;
                  }));
            Curry._1(setBody, (function (param) {
                    return body;
                  }));
            return $$Promise.resolved(/* Success */0);
          }
        }));
  return React.createElement("section", {
              className: "agda-mode native-key-bindings",
              tabIndex: -1
            }, React.createElement(Keyboard$AgdaModeVscode.make, {
                  state: match$2[0],
                  onInsertChar: (function ($$char) {
                      console.log("onInsertChar " + $$char);
                      return Curry._1(onResponse.emit, /* EventPiggyBack */Caml_chrome_debugger.variant("EventPiggyBack", 0, [/* InputMethod */Caml_chrome_debugger.simpleVariant("InputMethod", [/* InsertChar */Caml_chrome_debugger.simpleVariant("InsertChar", [$$char])])]));
                    })
                }), React.createElement(Header$AgdaModeVscode.make, {
                  header: match[0]
                }), React.createElement(Body$AgdaModeVscode.make, {
                  body: match$1[0],
                  onSubmit: onSubmit
                }));
}

var make = Panel;

exports.make = make;
/* react Not a pure module */
