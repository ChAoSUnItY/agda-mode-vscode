// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Task$AgdaModeVscode = require("./Task.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Event$AgdaModeVscode = require("../Util/Event.bs.js");
var State$AgdaModeVscode = require("../State.bs.js");
var Task__View$AgdaModeVscode = require("./Task__View.bs.js");
var Task__Error$AgdaModeVscode = require("./Task__Error.bs.js");
var Task__Command$AgdaModeVscode = require("./Task__Command.bs.js");
var Task__Response$AgdaModeVscode = require("./Task__Response.bs.js");

function Impl(Editor) {
  var ErrorHandler = Task__Error$AgdaModeVscode.Impl(Editor);
  var ViewHandler = Task__View$AgdaModeVscode.Impl(Editor);
  var CommandHandler = Task__Command$AgdaModeVscode.Impl(Editor);
  var ResponseHandler = Task__Response$AgdaModeVscode.Impl(Editor);
  var Task = Task$AgdaModeVscode.Impl(Editor);
  var State = State$AgdaModeVscode.Impl(Editor);
  var dispatchCommand = function (self, command) {
    return Curry._1(self.onAddCommand.emit, command);
  };
  var sendRequest = function (state, request) {
    var derivedRequests = {
      contents: []
    };
    var queue = {
      contents: []
    };
    var match = $$Promise.pending(undefined);
    var resolve = match[1];
    var promise = match[0];
    var stoppedResponding = {
      contents: undefined
    };
    var status = {
      contents: /* Idle */1
    };
    var runTasksInQueue = function (param) {
      var match = status.contents;
      if (!match) {
        return $$Promise.resolved(undefined);
      }
      var nextTasks = queue.contents.shift();
      return $$Promise.tap(nextTasks !== undefined ? (status.contents = /* Busy */0, $$Promise.tap($$Promise.flatMap(runTask(state, nextTasks), runTasksInQueue), (function (param) {
                            status.contents = /* Idle */1;
                            
                          }))) : $$Promise.resolved(undefined), (function (param) {
                    return Belt_Option.forEach(stoppedResponding.contents, (function (resolve) {
                                  return Curry._1(resolve, derivedRequests.contents);
                                }));
                  }));
    };
    var stop = function (param) {
      var match = status.contents;
      if (match) {
        return Curry._1(resolve, derivedRequests.contents);
      } else {
        stoppedResponding.contents = resolve;
        return ;
      }
    };
    var handle = {
      contents: undefined
    };
    var handler = function (error) {
      if (error.tag) {
        var tasks = Curry._1(ErrorHandler.handle, /* Connection */Caml_chrome_debugger.variant("Connection", 0, [error[0]]));
        queue.contents = Belt_List.toArray(tasks).concat(queue.contents);
        runTasksInQueue(undefined);
        return stop(undefined);
      }
      var match = error[0];
      if (!match) {
        return stop(undefined);
      }
      var error$1 = match[0];
      if (error$1.tag) {
        var tasks$1 = Curry._1(ErrorHandler.handle, /* Parser */Caml_chrome_debugger.variant("Parser", 1, [error$1[0]]));
        queue.contents = Belt_List.toArray(tasks$1).concat(queue.contents);
        runTasksInQueue(undefined);
        return stop(undefined);
      }
      var otherTasks = Belt_Array.keep(Belt_List.toArray(Curry._1(ResponseHandler.handle, error$1[0])), (function (req) {
              if (typeof req === "number") {
                return true;
              }
              if (req.tag) {
                return true;
              }
              derivedRequests.contents.push(req[0]);
              return false;
            }));
      queue.contents = otherTasks.concat(queue.contents);
      runTasksInQueue(undefined);
      
    };
    return $$Promise.flatMap(Curry._2(State.sendRequest, state, request), (function (connection) {
                  if (connection.tag) {
                    var tasks = Curry._1(ErrorHandler.handle, connection[0]);
                    Curry._1(resolve, []);
                    return $$Promise.flatMap(runTasks(state, tasks), (function (param) {
                                  return promise;
                                }));
                  }
                  handle.contents = Curry._1(connection[0].emitter.on, handler);
                  return promise;
                }));
  };
  var sendRequests = function (state, requests) {
    if (!requests) {
      return $$Promise.resolved(undefined);
    }
    var xs = requests[1];
    return $$Promise.flatMap(sendRequest(state, requests[0]), (function (xs$prime) {
                  return sendRequests(state, Belt_List.concat(Belt_List.fromArray(xs$prime), xs));
                }));
  };
  var runTask = function (state, task) {
    if (typeof task === "number") {
      console.log("[ task ][ terminate ] ");
      return Curry._1(State.destroy, state);
    }
    switch (task.tag | 0) {
      case /* SendRequest */0 :
          console.log("[ task ][ send request ]");
          return sendRequests(state, /* :: */Caml_chrome_debugger.simpleVariant("::", [
                        task[0],
                        /* [] */0
                      ]));
      case /* ViewReq */1 :
          console.log("< >");
          return Curry._2(State.sendRequestToView, state, task[0]);
      case /* ViewRes */2 :
          var tasks = Curry._1(ViewHandler.handle, task[0]);
          return runTasks(state, tasks);
      case /* WithState */3 :
          return $$Promise.flatMap(Curry._1(task[0], state), (function (param) {
                        return runTasks(state, param);
                      }));
      
    }
  };
  var runTasks = function (state, tasks) {
    if (!tasks) {
      return $$Promise.resolved(undefined);
    }
    var xs = tasks[1];
    return $$Promise.flatMap(runTask(state, tasks[0]), (function (param) {
                  return runTasks(state, xs);
                }));
  };
  var make = function (state) {
    var onAddCommand = Event$AgdaModeVscode.make(undefined);
    var onResponse = Event$AgdaModeVscode.make(undefined);
    var onChangeStatus = Event$AgdaModeVscode.make(undefined);
    var queue = [];
    var self = {
      onAddCommand: onAddCommand,
      onResponse: onResponse,
      onChangeStatus: onChangeStatus,
      status: /* Idle */1
    };
    var runCommandsInQueue = function (param) {
      var nextCommand = queue.shift();
      if (nextCommand !== undefined) {
        var tasks = Curry._1(CommandHandler.handle, nextCommand === undefined ? undefined : Caml_option.some(nextCommand));
        return $$Promise.get(runTasks(state, tasks), (function (param) {
                      return runCommandsInQueue(undefined);
                    }));
      }
      self.status = /* Idle */1;
      return Curry._1(self.onChangeStatus.emit, /* Idle */1);
    };
    Curry._1(onAddCommand.on, (function (command) {
            queue.push(command);
            if (self.status === /* Idle */1) {
              self.status = /* Busy */0;
              Curry._1(self.onChangeStatus.emit, /* Busy */0);
              return runCommandsInQueue(undefined);
            }
            
          }));
    return self;
  };
  var destroy = function (self) {
    var match = $$Promise.pending(undefined);
    var resolve = match[1];
    var destroy$prime = function (param) {
      Curry._1(self.onChangeStatus.destroy, undefined);
      Curry._1(self.onAddCommand.destroy, undefined);
      return Curry._1(resolve, undefined);
    };
    var match$1 = self.status;
    if (match$1) {
      destroy$prime(undefined);
    } else {
      Curry._1(self.onChangeStatus.on, (function (param) {
              if (param) {
                return destroy$prime(undefined);
              }
              
            }));
    }
    return match[0];
  };
  return {
          ErrorHandler: ErrorHandler,
          ViewHandler: ViewHandler,
          CommandHandler: CommandHandler,
          ResponseHandler: ResponseHandler,
          Task: Task,
          State: State,
          dispatchCommand: dispatchCommand,
          sendRequest: sendRequest,
          sendRequests: sendRequests,
          runTask: runTask,
          runTasks: runTasks,
          make: make,
          destroy: destroy
        };
}

exports.Impl = Impl;
/* Promise Not a pure module */
