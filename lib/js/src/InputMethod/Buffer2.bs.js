// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Translator$AgdaModeVscode = require("./Translator.bs.js");

function Impl(Editor) {
  var init = function (string) {
    return string.substring(0, string.length - 1 | 0);
  };
  var make = function (param) {
    return {
            symbol: undefined,
            tail: ""
          };
  };
  var isEmpty = function (self) {
    if (self.symbol === undefined) {
      return self.tail === "";
    } else {
      return false;
    }
  };
  var toSequence = function (self) {
    var match = self.symbol;
    if (match !== undefined) {
      return match[1] + self.tail;
    } else {
      return self.tail;
    }
  };
  var toSurface = function (self) {
    var match = self.symbol;
    if (match !== undefined) {
      return match[0] + self.tail;
    } else {
      return self.tail;
    }
  };
  var toString = function (self) {
    return "\"" + (toSurface(self) + ("\"[" + (toSequence(self) + "]")));
  };
  var update = function (param, self, change) {
    var start = param[0];
    var sequence = toSequence(self);
    if (!(change.insertText !== "" && change.replaceLength === 0)) {
      change.insertText === "" && change.replaceLength > 0;
      return /* Noop */0;
    }
    var newSequence = sequence + change.insertText;
    var translation = Translator$AgdaModeVscode.translate(newSequence);
    var symbol = translation.symbol;
    if (symbol !== undefined) {
      return /* UpdateAndReplaceText */Caml_chrome_debugger.variant("UpdateAndReplaceText", 1, [
                {
                  symbol: /* tuple */[
                    symbol,
                    newSequence
                  ],
                  tail: ""
                },
                /* tuple */[
                  start,
                  start + symbol.length | 0
                ],
                symbol
              ]);
    } else {
      return /* Update */Caml_chrome_debugger.variant("Update", 0, [
                {
                  symbol: self.symbol,
                  tail: self.tail + change.insertText
                },
                /* tuple */[
                  start,
                  param[1] + change.insertText.length | 0
                ]
              ]);
    }
  };
  return {
          init: init,
          make: make,
          isEmpty: isEmpty,
          toSequence: toSequence,
          toSurface: toSurface,
          toString: toString,
          update: update
        };
}

exports.Impl = Impl;
/* Translator-AgdaModeVscode Not a pure module */
