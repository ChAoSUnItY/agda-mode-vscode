// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var State$AgdaModeVscode = require("./State.bs.js");
var Editor$AgdaModeVscode = require("./Editor.bs.js");
var States$AgdaModeVscode = require("./States.bs.js");
var Command$AgdaModeVscode = require("./Command.bs.js");
var Dispatcher$AgdaModeVscode = require("./Task/Dispatcher.bs.js");

function Impl(Editor) {
  var StateDispatcherPair = States$AgdaModeVscode.StateDispatcherPair.Impl(Editor);
  var States = States$AgdaModeVscode.Dict.Impl(Editor);
  var State = State$AgdaModeVscode.Impl(Editor);
  var Dispatcher = Dispatcher$AgdaModeVscode.Impl(Editor);
  var activate = function (context) {
    console.log("[ states ] activate");
    Curry._2(Editor.addToSubscriptions, Curry._1(Editor.onDidCloseEditor, (function (fileName) {
                Curry._1(States.forceDestroy, fileName);
                
              })), context);
    Curry._2(Editor.addToSubscriptions, Curry._1(Editor.onDidChangeFileName, (function (oldName, newName) {
                return Belt_Option.forEach(oldName, (function (oldName) {
                              return Belt_Option.forEach(newName, (function (newName) {
                                            if (Curry._1(States.contains, oldName)) {
                                              if (Curry._1(Editor.isAgda, newName)) {
                                                return Curry._2(States.rename, oldName, newName);
                                              } else {
                                                Curry._1(States.forceDestroy, oldName);
                                                return ;
                                              }
                                            }
                                            
                                          }));
                            }));
              })), context);
    Curry._2(Editor.addToSubscriptions, Curry._1(Editor.onDidChangeActivation, (function (prev, next) {
                Belt_Option.forEach(Belt_Option.flatMap(prev, States.getByEditor), (function (param) {
                        return Curry._1(State.hide, param[0]);
                      }));
                return Belt_Option.forEach(Belt_Option.flatMap(next, States.getByEditor), (function (param) {
                              var dispatcher = param[1];
                              var state = param[0];
                              Belt_Option.forEach(next, (function (editor) {
                                      state.editor = editor;
                                      Curry._1(State.show, state);
                                      return Curry._2(Dispatcher.dispatchCommand, dispatcher, /* Refresh */3);
                                    }));
                              
                            }));
              })), context);
    console.log(Curry._1(Editor.getExtensionPath, context));
    return Belt_Array.forEach(Command$AgdaModeVscode.names, (function (param) {
                  var name = param[1];
                  var command = param[0];
                  return Curry._2(Editor.addToSubscriptions, Curry._2(Editor.registerCommand, name, (function (editor) {
                                    console.log("[ command ] " + name);
                                    var tmp;
                                    if (typeof command === "number" && command < 3) {
                                      switch (command) {
                                        case /* Load */0 :
                                            Belt_Option.forEach(Curry._1(Editor.getFileName, editor), (function (fileName) {
                                                    var _pair = Curry._1(States.get, fileName);
                                                    if (_pair !== undefined) {
                                                      return ;
                                                    }
                                                    var extentionPath = Curry._1(Editor.getExtensionPath, context);
                                                    console.log(extentionPath);
                                                    var pair = Curry._3(StateDispatcherPair.make, extentionPath, editor, (function (param) {
                                                            Curry._1(States.forceDestroy, fileName);
                                                            
                                                          }));
                                                    return Curry._2(States.add, fileName, pair);
                                                  }));
                                            tmp = $$Promise.resolved(undefined);
                                            break;
                                        case /* Quit */1 :
                                            tmp = Belt_Option.mapWithDefault(Curry._1(Editor.getFileName, editor), $$Promise.resolved(undefined), (function (fileName) {
                                                    return Curry._1(States.forceDestroy, fileName);
                                                  }));
                                            break;
                                        case /* Restart */2 :
                                            tmp = Belt_Option.mapWithDefault(Curry._1(Editor.getFileName, editor), $$Promise.resolved(undefined), (function (fileName) {
                                                    return $$Promise.map(Curry._1(States.destroy, fileName), (function (param) {
                                                                  var extentionPath = Curry._1(Editor.getExtensionPath, context);
                                                                  var pair = Curry._3(StateDispatcherPair.make, extentionPath, editor, (function (param) {
                                                                          Curry._1(States.forceDestroy, fileName);
                                                                          
                                                                        }));
                                                                  return Curry._2(States.add, fileName, pair);
                                                                }));
                                                  }));
                                            break;
                                        
                                      }
                                    } else {
                                      tmp = $$Promise.resolved(undefined);
                                    }
                                    return $$Promise.get(tmp, (function (param) {
                                                  return Belt_Option.forEach(Curry._1(States.getByEditor, editor), (function (param) {
                                                                Curry._2(Dispatcher.dispatchCommand, param[1], command);
                                                                
                                                              }));
                                                }));
                                  })), context);
                }));
  };
  var deactivate = function (param) {
    return Curry._1(States.destroyAll, undefined);
  };
  return {
          StateDispatcherPair: StateDispatcherPair,
          States: States,
          State: State,
          Dispatcher: Dispatcher,
          activate: activate,
          deactivate: deactivate
        };
}

var Editor_Point = {
  line: Editor$AgdaModeVscode.Point.line,
  column: Editor$AgdaModeVscode.Point.column,
  make: Editor$AgdaModeVscode.Point.make,
  translate: Editor$AgdaModeVscode.Point.translate,
  compare: Editor$AgdaModeVscode.Point.compare
};

var Editor_Config = {
  getAgdaPath: Editor$AgdaModeVscode.Config.getAgdaPath,
  setAgdaPath: Editor$AgdaModeVscode.Config.setAgdaPath,
  getLibraryPath: Editor$AgdaModeVscode.Config.getLibraryPath,
  getHighlightingMethod: Editor$AgdaModeVscode.Config.getHighlightingMethod,
  getBackend: Editor$AgdaModeVscode.Config.getBackend
};

var Editor_View = {
  make: Editor$AgdaModeVscode.View.make,
  destroy: Editor$AgdaModeVscode.View.destroy,
  show: Editor$AgdaModeVscode.View.show,
  hide: Editor$AgdaModeVscode.View.hide,
  focus: Editor$AgdaModeVscode.View.focus,
  send: Editor$AgdaModeVscode.View.send,
  on: Editor$AgdaModeVscode.View.on
};

var Editor_Decoration = {
  decorate: Editor$AgdaModeVscode.Decoration.decorate,
  highlightBackground: Editor$AgdaModeVscode.Decoration.highlightBackground,
  highlightBackgroundWithColor: Editor$AgdaModeVscode.Decoration.highlightBackgroundWithColor,
  decorateText: Editor$AgdaModeVscode.Decoration.decorateText,
  decorateTextWithColor: Editor$AgdaModeVscode.Decoration.decorateTextWithColor,
  overlayText: Editor$AgdaModeVscode.Decoration.overlayText,
  overlayTextWithColor: Editor$AgdaModeVscode.Decoration.overlayTextWithColor,
  underlineText: Editor$AgdaModeVscode.Decoration.underlineText,
  destroy: Editor$AgdaModeVscode.Decoration.destroy
};

var Editor = {
  Disposable: Editor$AgdaModeVscode.Disposable,
  Point: Editor_Point,
  $$Range: Editor$AgdaModeVscode.$$Range,
  editorType: Editor$AgdaModeVscode.editorType,
  getExtensionPath: Editor$AgdaModeVscode.getExtensionPath,
  getFileName: Editor$AgdaModeVscode.getFileName,
  save: Editor$AgdaModeVscode.save,
  isAgda: Editor$AgdaModeVscode.isAgda,
  onDidChangeFileName: Editor$AgdaModeVscode.onDidChangeFileName,
  onDidChangeActivation: Editor$AgdaModeVscode.onDidChangeActivation,
  onDidCloseEditor: Editor$AgdaModeVscode.onDidCloseEditor,
  registerCommand: Editor$AgdaModeVscode.registerCommand,
  setContext: Editor$AgdaModeVscode.setContext,
  addToSubscriptions: Editor$AgdaModeVscode.addToSubscriptions,
  Config: Editor_Config,
  View: Editor_View,
  Decoration: Editor_Decoration,
  focus: Editor$AgdaModeVscode.focus,
  getSelectionRange: Editor$AgdaModeVscode.getSelectionRange,
  getSelectionRanges: Editor$AgdaModeVscode.getSelectionRanges,
  getCursorPosition: Editor$AgdaModeVscode.getCursorPosition,
  getCursorPositions: Editor$AgdaModeVscode.getCursorPositions,
  setCursorPosition: Editor$AgdaModeVscode.setCursorPosition,
  onChangeCursorPosition: Editor$AgdaModeVscode.onChangeCursorPosition,
  rangeForLine: Editor$AgdaModeVscode.rangeForLine,
  pointAtOffset: Editor$AgdaModeVscode.pointAtOffset,
  offsetAtPoint: Editor$AgdaModeVscode.offsetAtPoint,
  fromAgdaOffset: Editor$AgdaModeVscode.fromAgdaOffset,
  toAgdaOffset: Editor$AgdaModeVscode.toAgdaOffset,
  getText: Editor$AgdaModeVscode.getText,
  getTextInRange: Editor$AgdaModeVscode.getTextInRange,
  selectText: Editor$AgdaModeVscode.selectText,
  setText: Editor$AgdaModeVscode.setText,
  insertText: Editor$AgdaModeVscode.insertText,
  deleteText: Editor$AgdaModeVscode.deleteText,
  onChange: Editor$AgdaModeVscode.onChange,
  copyToClipboard: Editor$AgdaModeVscode.copyToClipboard,
  colorThemeIsDark: Editor$AgdaModeVscode.colorThemeIsDark,
  lineEndingIsCRLF: Editor$AgdaModeVscode.lineEndingIsCRLF
};

var StateDispatcherPair = States$AgdaModeVscode.StateDispatcherPair.Impl(Editor);

var States = States$AgdaModeVscode.Dict.Impl(Editor);

var State = State$AgdaModeVscode.Impl(Editor);

var Dispatcher = Dispatcher$AgdaModeVscode.Impl(Editor);

function activate(context) {
  console.log("[ states ] activate");
  Editor$AgdaModeVscode.addToSubscriptions(Editor$AgdaModeVscode.onDidCloseEditor((function (fileName) {
              Curry._1(States.forceDestroy, fileName);
              
            })), context);
  Editor$AgdaModeVscode.addToSubscriptions(Editor$AgdaModeVscode.onDidChangeFileName((function (oldName, newName) {
              return Belt_Option.forEach(oldName, (function (oldName) {
                            return Belt_Option.forEach(newName, (function (newName) {
                                          if (Curry._1(States.contains, oldName)) {
                                            if (Editor$AgdaModeVscode.isAgda(newName)) {
                                              return Curry._2(States.rename, oldName, newName);
                                            } else {
                                              Curry._1(States.forceDestroy, oldName);
                                              return ;
                                            }
                                          }
                                          
                                        }));
                          }));
            })), context);
  Editor$AgdaModeVscode.addToSubscriptions(Editor$AgdaModeVscode.onDidChangeActivation((function (prev, next) {
              Belt_Option.forEach(Belt_Option.flatMap(prev, States.getByEditor), (function (param) {
                      return Curry._1(State.hide, param[0]);
                    }));
              return Belt_Option.forEach(Belt_Option.flatMap(next, States.getByEditor), (function (param) {
                            var dispatcher = param[1];
                            var state = param[0];
                            Belt_Option.forEach(next, (function (editor) {
                                    state.editor = editor;
                                    Curry._1(State.show, state);
                                    return Curry._2(Dispatcher.dispatchCommand, dispatcher, /* Refresh */3);
                                  }));
                            
                          }));
            })), context);
  console.log(Editor$AgdaModeVscode.getExtensionPath(context));
  return Belt_Array.forEach(Command$AgdaModeVscode.names, (function (param) {
                var name = param[1];
                var command = param[0];
                return Editor$AgdaModeVscode.addToSubscriptions(Editor$AgdaModeVscode.registerCommand(name, (function (editor) {
                                  console.log("[ command ] " + name);
                                  var tmp;
                                  if (typeof command === "number" && command < 3) {
                                    switch (command) {
                                      case /* Load */0 :
                                          Belt_Option.forEach(Editor$AgdaModeVscode.getFileName(editor), (function (fileName) {
                                                  var _pair = Curry._1(States.get, fileName);
                                                  if (_pair !== undefined) {
                                                    return ;
                                                  }
                                                  var extentionPath = Editor$AgdaModeVscode.getExtensionPath(context);
                                                  console.log(extentionPath);
                                                  var pair = Curry._3(StateDispatcherPair.make, extentionPath, editor, (function (param) {
                                                          Curry._1(States.forceDestroy, fileName);
                                                          
                                                        }));
                                                  return Curry._2(States.add, fileName, pair);
                                                }));
                                          tmp = $$Promise.resolved(undefined);
                                          break;
                                      case /* Quit */1 :
                                          tmp = Belt_Option.mapWithDefault(Editor$AgdaModeVscode.getFileName(editor), $$Promise.resolved(undefined), (function (fileName) {
                                                  return Curry._1(States.forceDestroy, fileName);
                                                }));
                                          break;
                                      case /* Restart */2 :
                                          tmp = Belt_Option.mapWithDefault(Editor$AgdaModeVscode.getFileName(editor), $$Promise.resolved(undefined), (function (fileName) {
                                                  return $$Promise.map(Curry._1(States.destroy, fileName), (function (param) {
                                                                var extentionPath = Editor$AgdaModeVscode.getExtensionPath(context);
                                                                var pair = Curry._3(StateDispatcherPair.make, extentionPath, editor, (function (param) {
                                                                        Curry._1(States.forceDestroy, fileName);
                                                                        
                                                                      }));
                                                                return Curry._2(States.add, fileName, pair);
                                                              }));
                                                }));
                                          break;
                                      
                                    }
                                  } else {
                                    tmp = $$Promise.resolved(undefined);
                                  }
                                  return $$Promise.get(tmp, (function (param) {
                                                return Belt_Option.forEach(Curry._1(States.getByEditor, editor), (function (param) {
                                                              Curry._2(Dispatcher.dispatchCommand, param[1], command);
                                                              
                                                            }));
                                              }));
                                })), context);
              }));
}

function deactivate(param) {
  return Curry._1(States.destroyAll, undefined);
}

exports.Impl = Impl;
exports.StateDispatcherPair = StateDispatcherPair;
exports.States = States;
exports.State = State;
exports.Dispatcher = Dispatcher;
exports.activate = activate;
exports.deactivate = deactivate;
/* StateDispatcherPair Not a pure module */
