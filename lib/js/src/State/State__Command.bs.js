// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var VSCode = require("bs-vscode/lib/js/src/VSCode.bs.js");
var Vscode = require("vscode");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var IM$AgdaModeVscode = require("../InputMethod/IM.bs.js");
var Goal$AgdaModeVscode = require("../Goal.bs.js");
var State$AgdaModeVscode = require("../State.bs.js");
var Editor$AgdaModeVscode = require("../Editor.bs.js");
var Parser$AgdaModeVscode = require("../Parser.bs.js");
var Command$AgdaModeVscode = require("../Command.bs.js");
var Decoration$AgdaModeVscode = require("../Decoration.bs.js");
var State__Goal$AgdaModeVscode = require("./State__Goal.bs.js");
var State__Response$AgdaModeVscode = require("./State__Response.bs.js");
var State__InputMethod$AgdaModeVscode = require("./State__InputMethod.bs.js");

function dispatchCommand(state, _command) {
  while(true) {
    var command = _command;
    var dispatchCommand$1 = function (param) {
      return dispatchCommand(state, param);
    };
    var sendAgdaRequest = function (param) {
      return State$AgdaModeVscode.Connection.sendRequest(state, (function (param) {
                    return State__Response$AgdaModeVscode.handle(state, dispatchCommand$1, param);
                  }), param);
    };
    var header = {
      TAG: 0,
      _0: Command$AgdaModeVscode.toString(command),
      [Symbol.for("name")]: "Plain"
    };
    if (typeof command === "number") {
      switch (command) {
        case /* Load */0 :
            return $$Promise.flatMap($$Promise.flatMap(State$AgdaModeVscode.View.display(state, {
                                TAG: 0,
                                _0: "Loading ...",
                                [Symbol.for("name")]: "Plain"
                              }, /* Nothing */0), (function (param) {
                              return state.document.save();
                            })), (function (param) {
                          var options = VSCode.TextDocumentShowOptions.make(undefined, false, undefined, undefined, undefined);
                          return $$Promise.flatMap(Vscode.window.showTextDocument(state.document, options), (function (param) {
                                        return sendAgdaRequest(/* Load */0);
                                      }));
                        }));
        case /* Quit */1 :
            return $$Promise.resolved(undefined);
        case /* Restart */2 :
            _command = /* Load */0;
            continue ;
        case /* Refresh */3 :
            Decoration$AgdaModeVscode.redecorate(state.decoration, state.editor);
            State$AgdaModeVscode.View.activate(state);
            State__Goal$AgdaModeVscode.redecorate(state);
            return $$Promise.resolved(undefined);
        case /* Compile */4 :
            return sendAgdaRequest(/* Compile */1);
        case /* ToggleDisplayOfImplicitArguments */5 :
            return sendAgdaRequest(/* ToggleDisplayOfImplicitArguments */2);
        case /* ShowConstraints */6 :
            return sendAgdaRequest(/* ShowConstraints */3);
        case /* ShowGoals */7 :
            return sendAgdaRequest(/* ShowGoals */4);
        case /* NextGoal */8 :
            return State__Goal$AgdaModeVscode.next(state);
        case /* PreviousGoal */9 :
            return State__Goal$AgdaModeVscode.previous(state);
        case /* Give */10 :
            var match = State__Goal$AgdaModeVscode.pointed(state);
            if (match === undefined) {
              return State$AgdaModeVscode.View.displayOutOfGoalError(state);
            }
            var goal = match[0];
            if (match[1] === "") {
              return State$AgdaModeVscode.View.prompt(state, header, {
                          body: undefined,
                          placeholder: "expression to give:",
                          value: undefined
                        }, (function(goal){
                        return function (expr) {
                          return $$Promise.flatMap(State__Goal$AgdaModeVscode.modify(state, goal, (function (param) {
                                            return expr;
                                          })), (function (param) {
                                        return sendAgdaRequest({
                                                    TAG: 3,
                                                    _0: goal,
                                                    [Symbol.for("name")]: "Give"
                                                  });
                                      }));
                        }
                        }(goal)));
            } else {
              return sendAgdaRequest({
                          TAG: 3,
                          _0: goal,
                          [Symbol.for("name")]: "Give"
                        });
            }
        case /* Refine */11 :
            var match$1 = State__Goal$AgdaModeVscode.pointed(state);
            if (match$1 !== undefined) {
              return sendAgdaRequest({
                          TAG: 4,
                          _0: match$1[0],
                          [Symbol.for("name")]: "Refine"
                        });
            } else {
              return State$AgdaModeVscode.View.displayOutOfGoalError(state);
            }
        case /* Auto */12 :
            var match$2 = State__Goal$AgdaModeVscode.pointed(state);
            if (match$2 !== undefined) {
              return sendAgdaRequest({
                          TAG: 6,
                          _0: match$2[0],
                          [Symbol.for("name")]: "Auto"
                        });
            } else {
              return State$AgdaModeVscode.View.displayOutOfGoalError(state);
            }
        case /* Case */13 :
            var match$3 = State__Goal$AgdaModeVscode.pointed(state);
            if (match$3 === undefined) {
              return State$AgdaModeVscode.View.displayOutOfGoalError(state);
            }
            var goal$1 = match$3[0];
            if (match$3[1] === "") {
              return State$AgdaModeVscode.View.prompt(state, header, {
                          body: "Please specify which variable you wish to split",
                          placeholder: "variable to case split:",
                          value: undefined
                        }, (function(goal$1){
                        return function (expr) {
                          if (expr === "") {
                            return sendAgdaRequest({
                                        TAG: 7,
                                        _0: goal$1,
                                        [Symbol.for("name")]: "Case"
                                      });
                          } else {
                            return $$Promise.flatMap(State__Goal$AgdaModeVscode.modify(state, goal$1, (function (param) {
                                              return expr;
                                            })), (function (param) {
                                          return sendAgdaRequest({
                                                      TAG: 7,
                                                      _0: goal$1,
                                                      [Symbol.for("name")]: "Case"
                                                    });
                                        }));
                          }
                        }
                        }(goal$1)));
            } else {
              return sendAgdaRequest({
                          TAG: 7,
                          _0: goal$1,
                          [Symbol.for("name")]: "Case"
                        });
            }
        case /* WhyInScope */14 :
            var placeholder = "name:";
            var match$4 = State__Goal$AgdaModeVscode.pointed(state);
            if (match$4 === undefined) {
              return State$AgdaModeVscode.View.prompt(state, header, {
                          body: undefined,
                          placeholder: placeholder,
                          value: undefined
                        }, (function (expr) {
                            return sendAgdaRequest({
                                        TAG: 21,
                                        _0: expr,
                                        [Symbol.for("name")]: "WhyInScopeGlobal"
                                      });
                          }));
            }
            var expr = match$4[1];
            var goal$2 = match$4[0];
            if (expr === "") {
              return State$AgdaModeVscode.View.prompt(state, header, {
                          body: undefined,
                          placeholder: placeholder,
                          value: undefined
                        }, (function(goal$2){
                        return function (expr) {
                          return sendAgdaRequest({
                                      TAG: 20,
                                      _0: expr,
                                      _1: goal$2,
                                      [Symbol.for("name")]: "WhyInScope"
                                    });
                        }
                        }(goal$2)));
            } else {
              return sendAgdaRequest({
                          TAG: 20,
                          _0: expr,
                          _1: goal$2,
                          [Symbol.for("name")]: "WhyInScope"
                        });
            }
        case /* Escape */15 :
            if (IM$AgdaModeVscode.isActivated(state.editorIM) || IM$AgdaModeVscode.isActivated(state.promptIM)) {
              return State__InputMethod$AgdaModeVscode.deactivate(state);
            } else {
              return State$AgdaModeVscode.View.interruptPrompt(state);
            }
        
      }
    } else {
      switch (command.TAG | 0) {
        case /* SolveConstraints */0 :
            var normalization = command._0;
            var match$5 = State__Goal$AgdaModeVscode.pointed(state);
            if (match$5 !== undefined) {
              return sendAgdaRequest({
                          TAG: 0,
                          _0: normalization,
                          _1: match$5[0],
                          [Symbol.for("name")]: "SolveConstraints"
                        });
            } else {
              return sendAgdaRequest({
                          TAG: 1,
                          _0: normalization,
                          [Symbol.for("name")]: "SolveConstraintsGlobal"
                        });
            }
        case /* SearchAbout */1 :
            var normalization$1 = command._0;
            return State$AgdaModeVscode.View.prompt(state, header, {
                        body: undefined,
                        placeholder: "name:",
                        value: undefined
                      }, (function(normalization$1){
                      return function (expr) {
                        return sendAgdaRequest({
                                    TAG: 2,
                                    _0: normalization$1,
                                    _1: expr,
                                    [Symbol.for("name")]: "SearchAbout"
                                  });
                      }
                      }(normalization$1)));
        case /* ElaborateAndGive */2 :
            var normalization$2 = command._0;
            var match$6 = State__Goal$AgdaModeVscode.pointed(state);
            if (match$6 === undefined) {
              return State$AgdaModeVscode.View.displayOutOfGoalError(state);
            }
            var expr$1 = match$6[1];
            var goal$3 = match$6[0];
            if (expr$1 === "") {
              return State$AgdaModeVscode.View.prompt(state, header, {
                          body: undefined,
                          placeholder: "expression to elaborate and give:",
                          value: undefined
                        }, (function(normalization$2,goal$3){
                        return function (expr) {
                          return sendAgdaRequest({
                                      TAG: 5,
                                      _0: normalization$2,
                                      _1: expr,
                                      _2: goal$3,
                                      [Symbol.for("name")]: "ElaborateAndGive"
                                    });
                        }
                        }(normalization$2,goal$3)));
            } else {
              return sendAgdaRequest({
                          TAG: 5,
                          _0: normalization$2,
                          _1: expr$1,
                          _2: goal$3,
                          [Symbol.for("name")]: "ElaborateAndGive"
                        });
            }
        case /* HelperFunctionType */3 :
            var normalization$3 = command._0;
            var match$7 = State__Goal$AgdaModeVscode.pointed(state);
            if (match$7 === undefined) {
              return State$AgdaModeVscode.View.displayOutOfGoalError(state);
            }
            var expr$2 = match$7[1];
            var goal$4 = match$7[0];
            if (expr$2 === "") {
              return State$AgdaModeVscode.View.prompt(state, header, {
                          body: undefined,
                          placeholder: "expression:",
                          value: undefined
                        }, (function(normalization$3,goal$4){
                        return function (expr) {
                          return sendAgdaRequest({
                                      TAG: 8,
                                      _0: normalization$3,
                                      _1: expr,
                                      _2: goal$4,
                                      [Symbol.for("name")]: "HelperFunctionType"
                                    });
                        }
                        }(normalization$3,goal$4)));
            } else {
              return sendAgdaRequest({
                          TAG: 8,
                          _0: normalization$3,
                          _1: expr$2,
                          _2: goal$4,
                          [Symbol.for("name")]: "HelperFunctionType"
                        });
            }
        case /* InferType */4 :
            var normalization$4 = command._0;
            var placeholder$1 = "expression to infer:";
            var match$8 = State__Goal$AgdaModeVscode.pointed(state);
            if (match$8 === undefined) {
              return State$AgdaModeVscode.View.prompt(state, header, {
                          body: undefined,
                          placeholder: placeholder$1,
                          value: undefined
                        }, (function(normalization$4){
                        return function (expr) {
                          return sendAgdaRequest({
                                      TAG: 10,
                                      _0: normalization$4,
                                      _1: expr,
                                      [Symbol.for("name")]: "InferTypeGlobal"
                                    });
                        }
                        }(normalization$4)));
            }
            var expr$3 = match$8[1];
            var goal$5 = match$8[0];
            if (expr$3 === "") {
              return State$AgdaModeVscode.View.prompt(state, header, {
                          body: undefined,
                          placeholder: placeholder$1,
                          value: undefined
                        }, (function(normalization$4,goal$5){
                        return function (expr) {
                          return sendAgdaRequest({
                                      TAG: 9,
                                      _0: normalization$4,
                                      _1: expr,
                                      _2: goal$5,
                                      [Symbol.for("name")]: "InferType"
                                    });
                        }
                        }(normalization$4,goal$5)));
            } else {
              return sendAgdaRequest({
                          TAG: 9,
                          _0: normalization$4,
                          _1: expr$3,
                          _2: goal$5,
                          [Symbol.for("name")]: "InferType"
                        });
            }
        case /* Context */5 :
            var match$9 = State__Goal$AgdaModeVscode.pointed(state);
            if (match$9 !== undefined) {
              return sendAgdaRequest({
                          TAG: 11,
                          _0: command._0,
                          _1: match$9[0],
                          [Symbol.for("name")]: "Context"
                        });
            } else {
              return State$AgdaModeVscode.View.displayOutOfGoalError(state);
            }
        case /* GoalType */6 :
            var match$10 = State__Goal$AgdaModeVscode.pointed(state);
            if (match$10 !== undefined) {
              return sendAgdaRequest({
                          TAG: 12,
                          _0: command._0,
                          _1: match$10[0],
                          [Symbol.for("name")]: "GoalType"
                        });
            } else {
              return State$AgdaModeVscode.View.displayOutOfGoalError(state);
            }
        case /* GoalTypeAndContext */7 :
            var match$11 = State__Goal$AgdaModeVscode.pointed(state);
            if (match$11 !== undefined) {
              return sendAgdaRequest({
                          TAG: 13,
                          _0: command._0,
                          _1: match$11[0],
                          [Symbol.for("name")]: "GoalTypeAndContext"
                        });
            } else {
              return State$AgdaModeVscode.View.displayOutOfGoalError(state);
            }
        case /* EventFromView */8 :
            var $$event = command._0;
            if (typeof $$event === "number") {
              if ($$event === /* Destroyed */1) {
                return State$AgdaModeVscode.destroy(state, true);
              } else {
                return $$Promise.resolved(undefined);
              }
            }
            switch ($$event.TAG | 0) {
              case /* InputMethod */0 :
                  var $$char = $$event._0;
                  if ($$char.TAG !== /* InsertChar */0) {
                    return State__InputMethod$AgdaModeVscode.chooseSymbol(state, $$char._0);
                  }
                  _command = {
                    TAG: 13,
                    _0: {
                      _0: $$char._0,
                      [Symbol.for("name")]: "InsertChar"
                    },
                    [Symbol.for("name")]: "InputMethod"
                  };
                  continue ;
              case /* PromptIMUpdate */1 :
                  var interval = $$event._0;
                  if (typeof interval !== "number") {
                    if (interval.TAG === /* MouseSelect */0) {
                      return State__InputMethod$AgdaModeVscode.select(state, [interval._0]);
                    } else {
                      return State__InputMethod$AgdaModeVscode.keyUpdatePromptIM(state, interval._0);
                    }
                  }
                  switch (interval) {
                    case /* BrowseUp */0 :
                        _command = {
                          TAG: 13,
                          _0: /* BrowseUp */1,
                          [Symbol.for("name")]: "InputMethod"
                        };
                        continue ;
                    case /* BrowseDown */1 :
                        _command = {
                          TAG: 13,
                          _0: /* BrowseDown */3,
                          [Symbol.for("name")]: "InputMethod"
                        };
                        continue ;
                    case /* BrowseLeft */2 :
                        _command = {
                          TAG: 13,
                          _0: /* BrowseLeft */4,
                          [Symbol.for("name")]: "InputMethod"
                        };
                        continue ;
                    case /* BrowseRight */3 :
                        _command = {
                          TAG: 13,
                          _0: /* BrowseRight */2,
                          [Symbol.for("name")]: "InputMethod"
                        };
                        continue ;
                    case /* Escape */4 :
                        if (IM$AgdaModeVscode.isActivated(state.editorIM) || IM$AgdaModeVscode.isActivated(state.promptIM)) {
                          return State__InputMethod$AgdaModeVscode.deactivate(state);
                        } else {
                          return State$AgdaModeVscode.View.interruptPrompt(state);
                        }
                    
                  }
              case /* JumpToTarget */2 :
                  var link = $$event._0;
                  Editor$AgdaModeVscode.focus(state.document);
                  var path = Parser$AgdaModeVscode.filepath(state.document.fileName);
                  if (link.TAG === /* ToLocation */0) {
                    var match$12 = link._0;
                    if (!match$12) {
                      return $$Promise.resolved(undefined);
                    }
                    var filePath = match$12._0;
                    if (filePath === undefined) {
                      return $$Promise.resolved(undefined);
                    }
                    if (path === filePath) {
                      var ranges = Belt_Array.map(match$12._1, Editor$AgdaModeVscode.$$Range.fromAgdaRange);
                      Editor$AgdaModeVscode.$$Selection.setMany(state.editor, ranges);
                    }
                    return $$Promise.resolved(undefined);
                  }
                  var index = link._0;
                  var goal$6 = state.goals.find((function(index){
                      return function (goal) {
                        return goal.index === index;
                      }
                      }(index)));
                  if (goal$6 !== undefined) {
                    Goal$AgdaModeVscode.setCursor(goal$6, state.editor);
                  }
                  return $$Promise.resolved(undefined);
              default:
                return $$Promise.resolved(undefined);
            }
        case /* GoalTypeContextAndInferredType */9 :
            var normalization$5 = command._0;
            var match$13 = State__Goal$AgdaModeVscode.pointed(state);
            if (match$13 === undefined) {
              return State$AgdaModeVscode.View.displayOutOfGoalError(state);
            }
            var expr$4 = match$13[1];
            var goal$7 = match$13[0];
            if (expr$4 === "") {
              return sendAgdaRequest({
                          TAG: 13,
                          _0: normalization$5,
                          _1: goal$7,
                          [Symbol.for("name")]: "GoalTypeAndContext"
                        });
            } else {
              return sendAgdaRequest({
                          TAG: 14,
                          _0: normalization$5,
                          _1: expr$4,
                          _2: goal$7,
                          [Symbol.for("name")]: "GoalTypeContextAndInferredType"
                        });
            }
        case /* GoalTypeContextAndCheckedType */10 :
            var normalization$6 = command._0;
            var match$14 = State__Goal$AgdaModeVscode.pointed(state);
            if (match$14 === undefined) {
              return State$AgdaModeVscode.View.displayOutOfGoalError(state);
            }
            var expr$5 = match$14[1];
            var goal$8 = match$14[0];
            if (expr$5 === "") {
              return State$AgdaModeVscode.View.prompt(state, header, {
                          body: undefined,
                          placeholder: "expression to type:",
                          value: undefined
                        }, (function(normalization$6,goal$8){
                        return function (expr) {
                          return sendAgdaRequest({
                                      TAG: 15,
                                      _0: normalization$6,
                                      _1: expr,
                                      _2: goal$8,
                                      [Symbol.for("name")]: "GoalTypeContextAndCheckedType"
                                    });
                        }
                        }(normalization$6,goal$8)));
            } else {
              return sendAgdaRequest({
                          TAG: 15,
                          _0: normalization$6,
                          _1: expr$5,
                          _2: goal$8,
                          [Symbol.for("name")]: "GoalTypeContextAndCheckedType"
                        });
            }
        case /* ModuleContents */11 :
            var normalization$7 = command._0;
            var placeholder$2 = "module name:";
            var match$15 = State__Goal$AgdaModeVscode.pointed(state);
            if (match$15 === undefined) {
              return State$AgdaModeVscode.View.prompt(state, header, {
                          body: undefined,
                          placeholder: placeholder$2,
                          value: undefined
                        }, (function(normalization$7){
                        return function (expr) {
                          return sendAgdaRequest({
                                      TAG: 17,
                                      _0: normalization$7,
                                      _1: expr,
                                      [Symbol.for("name")]: "ModuleContentsGlobal"
                                    });
                        }
                        }(normalization$7)));
            }
            var expr$6 = match$15[1];
            var goal$9 = match$15[0];
            if (expr$6 === "") {
              return State$AgdaModeVscode.View.prompt(state, header, {
                          body: undefined,
                          placeholder: placeholder$2,
                          value: undefined
                        }, (function(normalization$7,goal$9){
                        return function (expr) {
                          return sendAgdaRequest({
                                      TAG: 16,
                                      _0: normalization$7,
                                      _1: expr,
                                      _2: goal$9,
                                      [Symbol.for("name")]: "ModuleContents"
                                    });
                        }
                        }(normalization$7,goal$9)));
            } else {
              return sendAgdaRequest({
                          TAG: 16,
                          _0: normalization$7,
                          _1: expr$6,
                          _2: goal$9,
                          [Symbol.for("name")]: "ModuleContents"
                        });
            }
        case /* ComputeNormalForm */12 :
            var computeMode = command._0;
            var placeholder$3 = "expression to normalize:";
            var match$16 = State__Goal$AgdaModeVscode.pointed(state);
            if (match$16 === undefined) {
              return State$AgdaModeVscode.View.prompt(state, header, {
                          body: undefined,
                          placeholder: placeholder$3,
                          value: undefined
                        }, (function(computeMode){
                        return function (expr) {
                          return sendAgdaRequest({
                                      TAG: 19,
                                      _0: computeMode,
                                      _1: expr,
                                      [Symbol.for("name")]: "ComputeNormalFormGlobal"
                                    });
                        }
                        }(computeMode)));
            }
            var expr$7 = match$16[1];
            var goal$10 = match$16[0];
            if (expr$7 === "") {
              return State$AgdaModeVscode.View.prompt(state, header, {
                          body: undefined,
                          placeholder: placeholder$3,
                          value: undefined
                        }, (function(computeMode,goal$10){
                        return function (expr) {
                          return sendAgdaRequest({
                                      TAG: 18,
                                      _0: computeMode,
                                      _1: expr,
                                      _2: goal$10,
                                      [Symbol.for("name")]: "ComputeNormalForm"
                                    });
                        }
                        }(computeMode,goal$10)));
            } else {
              return sendAgdaRequest({
                          TAG: 18,
                          _0: computeMode,
                          _1: expr$7,
                          _2: goal$10,
                          [Symbol.for("name")]: "ComputeNormalForm"
                        });
            }
        case /* InputMethod */13 :
            var $$char$1 = command._0;
            if (typeof $$char$1 !== "number") {
              return State__InputMethod$AgdaModeVscode.insertChar(state, $$char$1._0);
            }
            switch ($$char$1) {
              case /* Activate */0 :
                  return State__InputMethod$AgdaModeVscode.activateEditorIM(state);
              case /* BrowseUp */1 :
                  return State__InputMethod$AgdaModeVscode.moveUp(state);
              case /* BrowseRight */2 :
                  return State__InputMethod$AgdaModeVscode.moveRight(state);
              case /* BrowseDown */3 :
                  return State__InputMethod$AgdaModeVscode.moveDown(state);
              case /* BrowseLeft */4 :
                  return State__InputMethod$AgdaModeVscode.moveLeft(state);
              
            }
        
      }
    }
  };
}

exports.dispatchCommand = dispatchCommand;
/* VSCode Not a pure module */
