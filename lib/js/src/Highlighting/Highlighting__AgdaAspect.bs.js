// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';


function toString(x) {
  switch (x) {
    case /* Hole */0 :
        return "Hole";
    case /* Comment */1 :
        return "Comment";
    case /* Keyword */2 :
        return "Keyword";
    case /* String */3 :
        return "String";
    case /* Number */4 :
        return "Number";
    case /* Symbol */5 :
        return "Symbol";
    case /* PrimitiveType */6 :
        return "PrimitiveType";
    case /* Pragma */7 :
        return "Pragma";
    case /* Background */8 :
        return "Background";
    case /* Markup */9 :
        return "Markup";
    case /* Error */10 :
        return "Error";
    case /* DottedPattern */11 :
        return "DottedPattern";
    case /* UnsolvedMeta */12 :
        return "UnsolvedMeta";
    case /* UnsolvedConstraint */13 :
        return "UnsolvedConstraint";
    case /* TerminationProblem */14 :
        return "TerminationProblem";
    case /* PositivityProblem */15 :
        return "PositivityProblem";
    case /* Deadcode */16 :
        return "Deadcode";
    case /* CoverageProblem */17 :
        return "CoverageProblem";
    case /* IncompletePattern */18 :
        return "IncompletePattern";
    case /* TypeChecks */19 :
        return "TypeChecks";
    case /* CatchallClause */20 :
        return "CatchallClause";
    case /* ConfluenceProblem */21 :
        return "ConfluenceProblem";
    case /* Bound */22 :
        return "Bound";
    case /* Generalizable */23 :
        return "Generalizable";
    case /* ConstructorInductive */24 :
        return "ConstructorInductive";
    case /* ConstructorCoInductive */25 :
        return "ConstructorCoInductive";
    case /* Datatype */26 :
        return "Datatype";
    case /* Field */27 :
        return "Field";
    case /* Function */28 :
        return "Function";
    case /* Module */29 :
        return "Module";
    case /* Postulate */30 :
        return "Postulate";
    case /* Primitive */31 :
        return "Primitive";
    case /* Record */32 :
        return "Record";
    case /* Argument */33 :
        return "Argument";
    case /* Macro */34 :
        return "Macro";
    case /* Operator */35 :
        return "Operator";
    
  }
}

function parse(x) {
  switch (x) {
    case "argument" :
        return /* Argument */33;
    case "background" :
        return /* Background */8;
    case "bound" :
        return /* Bound */22;
    case "catchallclause" :
        return /* CatchallClause */20;
    case "coinductiveconstructor" :
        return /* ConstructorCoInductive */25;
    case "comment" :
        return /* Comment */1;
    case "confluenceproblem" :
        return /* ConfluenceProblem */21;
    case "coverageproblem" :
        return /* CoverageProblem */17;
    case "datatype" :
        return /* Datatype */26;
    case "deadcode" :
        return /* Deadcode */16;
    case "dottedpattern" :
        return /* DottedPattern */11;
    case "error" :
        return /* Error */10;
    case "field" :
        return /* Field */27;
    case "function" :
        return /* Function */28;
    case "generalizable" :
        return /* Generalizable */23;
    case "hole" :
        return /* Hole */0;
    case "incompletepattern" :
        return /* IncompletePattern */18;
    case "inductiveconstructor" :
        return /* ConstructorInductive */24;
    case "keyword" :
        return /* Keyword */2;
    case "macro" :
        return /* Macro */34;
    case "markup" :
        return /* Markup */9;
    case "module" :
        return /* Module */29;
    case "number" :
        return /* Number */4;
    case "operator" :
        return /* Operator */35;
    case "positivityproblem" :
        return /* PositivityProblem */15;
    case "postulate" :
        return /* Postulate */30;
    case "pragma" :
        return /* Pragma */7;
    case "primitive" :
        return /* Primitive */31;
    case "primitivetype" :
        return /* PrimitiveType */6;
    case "record" :
        return /* Record */32;
    case "string" :
        return /* String */3;
    case "symbol" :
        return /* Symbol */5;
    case "terminationproblem" :
        return /* TerminationProblem */14;
    case "typechecks" :
        return /* TypeChecks */19;
    case "unsolvedconstraint" :
        return /* UnsolvedConstraint */13;
    case "unsolvedmeta" :
        return /* UnsolvedMeta */12;
    default:
      return /* Operator */35;
  }
}

function toDecoration(x) {
  switch (x) {
    case /* Comment */1 :
        return {
                light: {
                  TAG: 1,
                  _0: "#B0B0B0",
                  [Symbol.for("name")]: "Foreground"
                },
                dark: {
                  TAG: 1,
                  _0: "#505050",
                  [Symbol.for("name")]: "Foreground"
                }
              };
    case /* Keyword */2 :
        return {
                light: {
                  TAG: 1,
                  _0: "#CD6600",
                  [Symbol.for("name")]: "Foreground"
                },
                dark: {
                  TAG: 1,
                  _0: "#FF9932",
                  [Symbol.for("name")]: "Foreground"
                }
              };
    case /* String */3 :
        return {
                light: {
                  TAG: 1,
                  _0: "#B22222",
                  [Symbol.for("name")]: "Foreground"
                },
                dark: {
                  TAG: 1,
                  _0: "#DD4D4D",
                  [Symbol.for("name")]: "Foreground"
                }
              };
    case /* Number */4 :
        return {
                light: {
                  TAG: 1,
                  _0: "#800080",
                  [Symbol.for("name")]: "Foreground"
                },
                dark: {
                  TAG: 1,
                  _0: "#9010E0",
                  [Symbol.for("name")]: "Foreground"
                }
              };
    case /* Symbol */5 :
        return {
                light: {
                  TAG: 1,
                  _0: "#404040",
                  [Symbol.for("name")]: "Foreground"
                },
                dark: {
                  TAG: 1,
                  _0: "#BFBFBF",
                  [Symbol.for("name")]: "Foreground"
                }
              };
    case /* Error */10 :
        return {
                light: {
                  TAG: 1,
                  _0: "#FF0000",
                  [Symbol.for("name")]: "Foreground"
                },
                dark: {
                  TAG: 1,
                  _0: "#FF0000",
                  [Symbol.for("name")]: "Foreground"
                }
              };
    case /* UnsolvedMeta */12 :
    case /* UnsolvedConstraint */13 :
        return {
                light: {
                  TAG: 0,
                  _0: "#FFFF00",
                  [Symbol.for("name")]: "Background"
                },
                dark: {
                  TAG: 0,
                  _0: "#806B00",
                  [Symbol.for("name")]: "Background"
                }
              };
    case /* TerminationProblem */14 :
        return {
                light: {
                  TAG: 0,
                  _0: "#FFA07A",
                  [Symbol.for("name")]: "Background"
                },
                dark: {
                  TAG: 0,
                  _0: "#802400",
                  [Symbol.for("name")]: "Background"
                }
              };
    case /* PositivityProblem */15 :
        return {
                light: {
                  TAG: 0,
                  _0: "#CD853F",
                  [Symbol.for("name")]: "Background"
                },
                dark: {
                  TAG: 0,
                  _0: "#803F00",
                  [Symbol.for("name")]: "Background"
                }
              };
    case /* Deadcode */16 :
        return {
                light: {
                  TAG: 0,
                  _0: "#A9A9A9",
                  [Symbol.for("name")]: "Background"
                },
                dark: {
                  TAG: 0,
                  _0: "#808080",
                  [Symbol.for("name")]: "Background"
                }
              };
    case /* CoverageProblem */17 :
        return {
                light: {
                  TAG: 0,
                  _0: "#F5DEB3",
                  [Symbol.for("name")]: "Background"
                },
                dark: {
                  TAG: 0,
                  _0: "#805300",
                  [Symbol.for("name")]: "Background"
                }
              };
    case /* IncompletePattern */18 :
        return {
                light: {
                  TAG: 0,
                  _0: "#800080",
                  [Symbol.for("name")]: "Background"
                },
                dark: {
                  TAG: 0,
                  _0: "#800080",
                  [Symbol.for("name")]: "Background"
                }
              };
    case /* CatchallClause */20 :
        return {
                light: {
                  TAG: 0,
                  _0: "#F5F5F5",
                  [Symbol.for("name")]: "Background"
                },
                dark: {
                  TAG: 0,
                  _0: "#404040",
                  [Symbol.for("name")]: "Background"
                }
              };
    case /* ConfluenceProblem */21 :
        return {
                light: {
                  TAG: 0,
                  _0: "#FFC0CB",
                  [Symbol.for("name")]: "Background"
                },
                dark: {
                  TAG: 0,
                  _0: "#800080",
                  [Symbol.for("name")]: "Background"
                }
              };
    case /* ConstructorInductive */24 :
        return {
                light: {
                  TAG: 1,
                  _0: "#008B00",
                  [Symbol.for("name")]: "Foreground"
                },
                dark: {
                  TAG: 1,
                  _0: "#29CC29",
                  [Symbol.for("name")]: "Foreground"
                }
              };
    case /* ConstructorCoInductive */25 :
        return {
                light: {
                  TAG: 1,
                  _0: "#996600",
                  [Symbol.for("name")]: "Foreground"
                },
                dark: {
                  TAG: 1,
                  _0: "#FFEA75",
                  [Symbol.for("name")]: "Foreground"
                }
              };
    case /* Field */27 :
        return {
                light: {
                  TAG: 1,
                  _0: "#EE1289",
                  [Symbol.for("name")]: "Foreground"
                },
                dark: {
                  TAG: 1,
                  _0: "#F570B7",
                  [Symbol.for("name")]: "Foreground"
                }
              };
    case /* Module */29 :
        return {
                light: {
                  TAG: 1,
                  _0: "#800080",
                  [Symbol.for("name")]: "Foreground"
                },
                dark: {
                  TAG: 1,
                  _0: "#CD80FF",
                  [Symbol.for("name")]: "Foreground"
                }
              };
    case /* PrimitiveType */6 :
    case /* Datatype */26 :
    case /* Function */28 :
    case /* Postulate */30 :
    case /* Primitive */31 :
    case /* Record */32 :
        return {
                light: {
                  TAG: 1,
                  _0: "#0000CD",
                  [Symbol.for("name")]: "Foreground"
                },
                dark: {
                  TAG: 1,
                  _0: "#8080FF",
                  [Symbol.for("name")]: "Foreground"
                }
              };
    case /* Macro */34 :
        return {
                light: {
                  TAG: 1,
                  _0: "#458B74",
                  [Symbol.for("name")]: "Foreground"
                },
                dark: {
                  TAG: 1,
                  _0: "#73BAA2",
                  [Symbol.for("name")]: "Foreground"
                }
              };
    case /* Hole */0 :
    case /* Pragma */7 :
    case /* Background */8 :
    case /* Markup */9 :
    case /* DottedPattern */11 :
    case /* TypeChecks */19 :
    case /* Bound */22 :
    case /* Generalizable */23 :
    case /* Argument */33 :
    case /* Operator */35 :
        return ;
    
  }
}

function toTokenTypeAndModifiersAndDecoration(x) {
  var nothing_0 = [
    undefined,
    []
  ];
  var nothing = [
    nothing_0,
    undefined
  ];
  var backgroundOnly = function (light, dark) {
    return [
            [
              undefined,
              []
            ],
            {
              light: {
                TAG: 0,
                _0: light,
                [Symbol.for("name")]: "Background"
              },
              dark: {
                TAG: 0,
                _0: dark,
                [Symbol.for("name")]: "Background"
              }
            }
          ];
  };
  switch (x) {
    case /* Comment */1 :
        return [
                [
                  /* Comment */16,
                  []
                ],
                undefined
              ];
    case /* Keyword */2 :
        return [
                [
                  /* Keyword */18,
                  []
                ],
                undefined
              ];
    case /* Number */4 :
        return [
                [
                  /* Number */19,
                  []
                ],
                undefined
              ];
    case /* Error */10 :
        return [
                [
                  undefined,
                  [/* Deprecated */3]
                ],
                undefined
              ];
    case /* UnsolvedMeta */12 :
        return backgroundOnly("#FFFF00", "#806B00");
    case /* UnsolvedConstraint */13 :
    case /* TerminationProblem */14 :
        return backgroundOnly("#FFA07A", "#802400");
    case /* PositivityProblem */15 :
        return backgroundOnly("#CD853F", "#803F00");
    case /* Deadcode */16 :
        return backgroundOnly("#A9A9A9", "#808080");
    case /* CoverageProblem */17 :
        return backgroundOnly("#F5DEB3", "#805300");
    case /* IncompletePattern */18 :
        return backgroundOnly("#800080", "#800080");
    case /* Hole */0 :
    case /* Symbol */5 :
    case /* Pragma */7 :
    case /* Background */8 :
    case /* Markup */9 :
    case /* DottedPattern */11 :
    case /* TypeChecks */19 :
        return nothing;
    case /* CatchallClause */20 :
        return backgroundOnly("#F5F5F5", "#404040");
    case /* ConfluenceProblem */21 :
        return backgroundOnly("#FFC0CB", "#800080");
    case /* Bound */22 :
    case /* Generalizable */23 :
        return [
                [
                  /* Variable */8,
                  []
                ],
                undefined
              ];
    case /* ConstructorInductive */24 :
    case /* ConstructorCoInductive */25 :
        return [
                [
                  /* EnumMember */10,
                  []
                ],
                undefined
              ];
    case /* PrimitiveType */6 :
    case /* Datatype */26 :
        return [
                [
                  /* Type */1,
                  []
                ],
                undefined
              ];
    case /* Field */27 :
        return [
                [
                  /* Member */13,
                  []
                ],
                undefined
              ];
    case /* Module */29 :
        return [
                [
                  /* Namespace */0,
                  []
                ],
                undefined
              ];
    case /* Function */28 :
    case /* Postulate */30 :
        return [
                [
                  /* Function */12,
                  []
                ],
                undefined
              ];
    case /* String */3 :
    case /* Primitive */31 :
        return [
                [
                  /* String */17,
                  []
                ],
                undefined
              ];
    case /* Record */32 :
        return [
                [
                  /* Struct */5,
                  []
                ],
                undefined
              ];
    case /* Argument */33 :
        return [
                [
                  /* Parameter */7,
                  []
                ],
                undefined
              ];
    case /* Macro */34 :
        return [
                [
                  /* Macro */14,
                  []
                ],
                undefined
              ];
    case /* Operator */35 :
        return [
                [
                  /* Operator */21,
                  []
                ],
                undefined
              ];
    
  }
}

exports.toString = toString;
exports.parse = parse;
exports.toDecoration = toDecoration;
exports.toTokenTypeAndModifiersAndDecoration = toTokenTypeAndModifiersAndDecoration;
/* No side effect */
