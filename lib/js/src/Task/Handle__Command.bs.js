// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Task$AgdaModeVscode = require("./Task.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Command$AgdaModeVscode = require("../Command.bs.js");

function Impl(Editor) {
  var Task = Task$AgdaModeVscode.Impl(Editor);
  var handle = function (normalization) {
    if (typeof normalization === "number") {
      switch (normalization) {
        case /* Load */0 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* WithState */Caml_chrome_debugger.variant("WithState", 4, [(function (state) {
                              return $$Promise.map(Curry._1(Editor.save, state.editor), (function (param) {
                                            return /* [] */0;
                                          }));
                            })]),
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 0, [/* Load */0]),
                          /* [] */0
                        ])
                    ]);
        case /* Quit */1 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* Terminate */0,
                      /* [] */0
                    ]);
        case /* NextGoal */2 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* Goal */Caml_chrome_debugger.variant("Goal", 3, [/* Next */0]),
                      /* [] */0
                    ]);
        case /* PreviousGoal */3 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* Goal */Caml_chrome_debugger.variant("Goal", 3, [/* Previous */1]),
                      /* [] */0
                    ]);
        
      }
    } else {
      if (normalization.tag) {
        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* ViewRes */Caml_chrome_debugger.variant("ViewRes", 2, [normalization[0]]),
                  /* [] */0
                ]);
      }
      var normalization$1 = normalization[0];
      return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                /* WithState */Caml_chrome_debugger.variant("WithState", 4, [(function (state) {
                        console.log("GOALTYPE " + Command$AgdaModeVscode.Normalization.toString(normalization$1));
                        return $$Promise.resolved(/* [] */0);
                      })]),
                /* [] */0
              ]);
    }
  };
  return {
          Task: Task,
          handle: handle
        };
}

exports.Impl = Impl;
/* Promise Not a pure module */
