// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");
var Translator$AgdaModeVscode = require("../InputMethod/Translator.bs.js");
var CandidateSymbols$AgdaModeVscode = require("./CandidateSymbols.bs.js");

function reducer(state, action) {
  if (typeof action === "number") {
    if (action === 1) {
      return ;
    }
    if (action === 0) {
      var translation = Translator$AgdaModeVscode.translate("");
      return {
              sequence: "",
              translation: translation,
              candidateIndex: 0
            };
    }
    
  }
  if (state === undefined) {
    return ;
  }
  if (typeof action !== "number") {
    return {
            sequence: action[0],
            translation: action[1],
            candidateIndex: action[2]
          };
  }
  switch (action - 2 | 0) {
    case /* Activate */0 :
        return {
                sequence: state.sequence,
                translation: state.translation,
                candidateIndex: Caml_primitive.caml_int_max(0, state.candidateIndex - 10 | 0)
              };
    case /* Deactivate */1 :
        return {
                sequence: state.sequence,
                translation: state.translation,
                candidateIndex: Caml_primitive.caml_int_min(state.translation.candidateSymbols.length - 1 | 0, state.candidateIndex + 1 | 0)
              };
    case /* MoveUp */2 :
        return {
                sequence: state.sequence,
                translation: state.translation,
                candidateIndex: Caml_primitive.caml_int_min(state.translation.candidateSymbols.length - 1 | 0, state.candidateIndex + 10 | 0)
              };
    case /* MoveRight */3 :
        return {
                sequence: state.sequence,
                translation: state.translation,
                candidateIndex: Caml_primitive.caml_int_max(0, state.candidateIndex - 1 | 0)
              };
    
  }
}

function Keyboard(Props) {
  var state = Props.state;
  var onInsertChar = Props.onInsertChar;
  var onChooseSymbol = Props.onChooseSymbol;
  var prompting = Props.prompting;
  if (state === undefined) {
    return React.createElement("div", {
                className: "agda-mode-keyboard deactivated"
              });
  }
  var translation = state.translation;
  return React.createElement("div", {
              className: "agda-mode-keyboard" + (
                prompting ? " prompting" : ""
              )
            }, React.createElement("div", {
                  className: "agda-mode-keyboard-sequence-and-candidates"
                }, React.createElement("div", {
                      className: "agda-mode-keyboard-sequence"
                    }, state.sequence), React.createElement(CandidateSymbols$AgdaModeVscode.make, {
                      candidates: translation.candidateSymbols,
                      index: state.candidateIndex,
                      onChooseSymbol: onChooseSymbol
                    })), React.createElement("div", {
                  className: "agda-mode-keyboard-suggestions"
                }, Belt_Array.map(translation.keySuggestions, (function (key) {
                        return React.createElement("button", {
                                    key: key,
                                    className: "agda-mode-key",
                                    onClick: (function (param) {
                                        return Curry._1(onInsertChar, key);
                                      })
                                  }, key);
                      }))));
}

var make = Keyboard;

exports.reducer = reducer;
exports.make = make;
/* react Not a pure module */
