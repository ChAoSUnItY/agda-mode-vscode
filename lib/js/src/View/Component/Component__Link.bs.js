// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var React = require("react");
var $$String = require("bs-platform/lib/js/string.js");
var Chan$AgdaModeVscode = require("../../Util/Chan.bs.js");

var chan = Chan$AgdaModeVscode.make(undefined);

var eventContext = React.createContext(chan);

function makeProps(value, children, param) {
  return {
          value: value,
          children: children
        };
}

var make = eventContext.Provider;

var Provider = {
  makeProps: makeProps,
  make: make
};

function Component__Link(Props) {
  var targetOpt = Props.target;
  var jumpOpt = Props.jump;
  var hoverOpt = Props.hover;
  var classNameOpt = Props.className;
  var children = Props.children;
  var target = targetOpt !== undefined ? targetOpt : ({
        TAG: 0,
        _0: /* NoLocation */0,
        [Symbol.for("name")]: "ToLocation"
      });
  var jump = jumpOpt !== undefined ? jumpOpt : false;
  var hover = hoverOpt !== undefined ? hoverOpt : false;
  var className = classNameOpt !== undefined ? classNameOpt : /* [] */0;
  var sanitizedTarget;
  if (target.TAG === /* ToLocation */0) {
    var $$location = target._0;
    sanitizedTarget = $$location && $$location._1.length !== 0 ? ({
          TAG: 0,
          _0: $$location,
          [Symbol.for("name")]: "ToLocation"
        }) : undefined;
  } else {
    sanitizedTarget = {
      TAG: 1,
      _0: target._0,
      [Symbol.for("name")]: "ToHole"
    };
  }
  var link = React.useContext(eventContext);
  if (sanitizedTarget !== undefined) {
    return React.createElement("span", {
                className: $$String.concat(" ", {
                      hd: "component-link",
                      tl: className
                    }),
                onClick: (function (param) {
                    if (jump) {
                      return Chan$AgdaModeVscode.emit(link, {
                                  TAG: 2,
                                  _0: sanitizedTarget,
                                  [Symbol.for("name")]: "JumpToTarget"
                                });
                    }
                    
                  }),
                onMouseOut: (function (param) {
                    if (hover) {
                      return Chan$AgdaModeVscode.emit(link, {
                                  TAG: 4,
                                  _0: sanitizedTarget,
                                  [Symbol.for("name")]: "MouseOut"
                                });
                    }
                    
                  }),
                onMouseOver: (function (param) {
                    if (hover) {
                      return Chan$AgdaModeVscode.emit(link, {
                                  TAG: 3,
                                  _0: sanitizedTarget,
                                  [Symbol.for("name")]: "MouseOver"
                                });
                    }
                    
                  })
              }, children);
  } else {
    return React.createElement("span", {
                className: $$String.concat(" ", {
                      hd: "component-link",
                      tl: className
                    })
              }, children);
  }
}

var make$1 = Component__Link;

exports.chan = chan;
exports.eventContext = eventContext;
exports.Provider = Provider;
exports.make = make$1;
/* chan Not a pure module */
