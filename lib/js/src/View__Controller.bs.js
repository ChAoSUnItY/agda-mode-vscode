// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Path = require("path");
var Curry = require("bs-platform/lib/js/curry.js");
var Vscode = require("vscode");
var Js_math = require("bs-platform/lib/js/js_math.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var View$AgdaModeVscode = require("./View.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Event$AgdaModeVscode = require("./Util/Event.bs.js");
var VSCode$AgdaModeVscode = require("./VSCode.bs.js");

function send(view, requestOrEvent) {
  var match = view.status;
  if (match) {
    if (requestOrEvent.tag) {
      match[1].push(requestOrEvent[0]);
      return $$Promise.resolved(undefined);
    }
    var match$1 = $$Promise.pending(undefined);
    var resolve = match$1[1];
    match[0].push(/* tuple */[
          requestOrEvent[0],
          (function (res) {
              if (res.tag) {
                return Curry._1(resolve, undefined);
              } else {
                return Curry._1(resolve, res[0]);
              }
            })
        ]);
    return match$1[0];
  }
  var stringified = JSON.stringify(View$AgdaModeVscode.RequestOrEventToView.encode(requestOrEvent));
  if (requestOrEvent.tag) {
    return $$Promise.map(view.panel.webview.postMessage(stringified), (function (param) {
                  
                }));
  }
  var promise = Curry._1(view.onResponseOrEventFromView.once, undefined);
  return $$Promise.map($$Promise.flatMap(view.panel.webview.postMessage(stringified), (function (param) {
                    return promise;
                  })), (function (res) {
                if (res.tag) {
                  return ;
                } else {
                  return res[0];
                }
              }));
}

function on(view, callback) {
  return new Vscode.Disposable(Curry._1(view.onResponseOrEventFromView.on, callback));
}

function make(extensionPath, editor) {
  var html = function (distPath, styleUri, scriptUri) {
    var text = "";
    var charaterSet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    var cardinality = charaterSet.length;
    for(var _for = 0; _for <= 32; ++_for){
      text = text + charaterSet.charAt(Js_math.floor(Math.random() * cardinality));
    }
    var nonce = text;
    var styleUri$1 = Vscode.Uri.file(Path.join(distPath, styleUri)).with(VSCode$AgdaModeVscode.Uri.makeChange(undefined, undefined, undefined, undefined, "vscode-resource", undefined));
    var scriptUri$1 = Vscode.Uri.file(Path.join(distPath, scriptUri)).with(VSCode$AgdaModeVscode.Uri.makeChange(undefined, undefined, undefined, undefined, "vscode-resource", undefined));
    var metaContent = "default-src 'none'; img-src vscode-resource: https:; script-src 'nonce-" + (nonce + "';style-src vscode-resource: 'unsafe-inline' http: https: data:;");
    return "\n        <!DOCTYPE html>\n              <html lang=\"en\">\n              <head>\n                <meta charset=\"utf-8\">\n                <meta name=\"viewport\" content=\"width=device-width,initial-scale=1,shrink-to-fit=no\">\n                <meta name=\"theme-color\" content=\"#000000\">\n                <title>React App</title>\n                <link rel=\"stylesheet\" type=\"text/css\" href=\"" + (String(styleUri$1) + ("\">\n                <meta http-equiv=\"Content-Security-Policy\" content=\"" + (String(metaContent) + ("\">\n              </head>\n              <body>\n                <noscript>You need to enable JavaScript to run this app.</noscript>\n                <div id=\"root\"></div>\n                <script nonce=\"" + (String(nonce) + ("\" src=\"" + (String(scriptUri$1) + "\"></script>\n              </body>\n              </html>\n        ")))))));
  };
  var createPanel = function (editor) {
    var distPath = Path.join(extensionPath, "dist");
    var fileName = Path.basename(editor.document.fileName, ".agda");
    var panel = Vscode.window.createWebviewPanel("panel", "Agda [" + (fileName + "]"), {
          preserveFocus: true,
          viewColumn: 3
        }, VSCode$AgdaModeVscode.WebviewAndWebviewPanelOptions.make(undefined, true, [Vscode.Uri.file(distPath)], undefined, undefined, true, undefined));
    panel.webview.html = html(distPath, "style.css", "view.bundle.js");
    return panel;
  };
  var moveToBottom = function (param) {
    return Vscode.commands.executeCommand("vscode.setEditorLayout", {
                orientation: 1,
                groups: [
                  Curry._1(VSCode$AgdaModeVscode.Commands.Layout.sized, {
                        groups: [VSCode$AgdaModeVscode.Commands.Layout.simple],
                        size: 0.5
                      }),
                  Curry._1(VSCode$AgdaModeVscode.Commands.Layout.sized, {
                        groups: [VSCode$AgdaModeVscode.Commands.Layout.simple],
                        size: 0.5
                      })
                ]
              });
  };
  var panel = createPanel(editor);
  moveToBottom(undefined);
  var subscriptions = [];
  var onResponseOrEventFromView = Event$AgdaModeVscode.make(undefined);
  subscriptions.push(panel.webview.onDidReceiveMessage((function (json) {
              var result;
              try {
                result = Curry._1(View$AgdaModeVscode.ResponseOrEventFromView.decode, json);
              }
              catch (raw_e){
                var e = Caml_js_exceptions.internalToOCamlException(raw_e);
                console.log("[ panic ][ Webview.onDidReceiveMessage JSON decode error ]", e);
                return ;
              }
              return Curry._1(onResponseOrEventFromView.emit, result);
            })));
  subscriptions.push(panel.onDidDispose((function (param) {
              return Curry._1(onResponseOrEventFromView.emit, /* Event */Caml_chrome_debugger.variant("Event", 1, [/* Destroyed */1]));
            })));
  var view = {
    panel: panel,
    onResponseOrEventFromView: onResponseOrEventFromView,
    subscriptions: subscriptions,
    status: /* Uninitialized */Caml_chrome_debugger.simpleVariant("Uninitialized", [
        [],
        []
      ])
  };
  view.subscriptions.push(new Vscode.Disposable(Curry._1(view.onResponseOrEventFromView.on, (function (param) {
                  if (!param.tag) {
                    return ;
                  }
                  var match = param[0];
                  if (typeof match !== "number") {
                    return ;
                  }
                  if (match !== 0) {
                    return ;
                  }
                  var match$1 = view.status;
                  if (match$1) {
                    view.status = /* Initialized */0;
                    Belt_Array.forEach(match$1[0], (function (param) {
                            var resolve = param[1];
                            return $$Promise.get(send(view, /* Request */Caml_chrome_debugger.variant("Request", 0, [param[0]])), (function (res) {
                                          if (res !== undefined) {
                                            return Curry._1(resolve, /* Response */Caml_chrome_debugger.variant("Response", 0, [res]));
                                          }
                                          
                                        }));
                          }));
                    return Belt_Array.forEach(match$1[1], (function ($$event) {
                                  send(view, /* Event */Caml_chrome_debugger.variant("Event", 1, [$$event]));
                                  
                                }));
                  }
                  
                }))));
  return view;
}

function destroy(view) {
  Curry._1(view.onResponseOrEventFromView.destroy, undefined);
  view.panel.dispose();
  return Belt_Array.forEach(view.subscriptions, (function (prim) {
                return prim.dispose();
              }));
}

function show(view) {
  return VSCode$AgdaModeVscode.WebviewPanel.reveal(view.panel, undefined, true, undefined);
}

function focus(view) {
  return VSCode$AgdaModeVscode.WebviewPanel.reveal(view.panel, undefined, undefined, undefined);
}

function hide(_view) {
  
}

exports.send = send;
exports.on = on;
exports.make = make;
exports.destroy = destroy;
exports.show = show;
exports.focus = focus;
exports.hide = hide;
/* path Not a pure module */
