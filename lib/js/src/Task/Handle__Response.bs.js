// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Task$AgdaModeVscode = require("./Task.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function Impl(Editor) {
  var Task = Task$AgdaModeVscode.Impl(Editor);
  var handle = function (payload) {
    if (typeof payload === "number") {
      return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                Curry._2(Task.displaySuccess, "Compilation Done!", undefined),
                /* [] */0
              ]);
    }
    switch (payload.tag | 0) {
      case /* Constraints */0 :
          var payload$1 = payload[0];
          if (payload$1 !== undefined) {
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      Curry._2(Task.display, "Constraints", payload$1),
                      /* [] */0
                    ]);
          } else {
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      Curry._2(Task.display, "No Constraints", undefined),
                      /* [] */0
                    ]);
          }
      case /* AllGoalsWarnings */1 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.display, payload[0], payload[1]),
                    /* [] */0
                  ]);
      case /* Time */2 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.display, "Time", payload[0]),
                    /* [] */0
                  ]);
      case /* Error */3 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.displayError, "Error", payload[0]),
                    /* [] */0
                  ]);
      case /* Intro */4 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.display, "Intro", payload[0]),
                    /* [] */0
                  ]);
      case /* Auto */5 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.displaySuccess, "Auto", payload[0]),
                    /* [] */0
                  ]);
      case /* ModuleContents */6 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.display, "Module Contents", payload[0]),
                    /* [] */0
                  ]);
      case /* SearchAbout */7 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.display, "Searching about ...", payload[0]),
                    /* [] */0
                  ]);
      case /* WhyInScope */8 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.display, "Scope info", payload[0]),
                    /* [] */0
                  ]);
      case /* NormalForm */9 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.display, "Normal form", payload[0]),
                    /* [] */0
                  ]);
      case /* GoalType */10 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.display, "Goal Type", payload[0]),
                    /* [] */0
                  ]);
      case /* CurrentGoal */11 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.display, "Current goal", payload[0]),
                    /* [] */0
                  ]);
      case /* InferredType */12 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.display, "Inferred type", payload[0]),
                    /* [] */0
                  ]);
      case /* Context */13 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.display, "Context", payload[0]),
                    /* [] */0
                  ]);
      case /* HelperFunction */14 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.display, "Helper function", payload[0]),
                    /* [] */0
                  ]);
      case /* Version */15 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.display, "Version", payload[0]),
                    /* [] */0
                  ]);
      
    }
  };
  var DisplayInfo = {
    handle: handle
  };
  var handle$1 = function (indices) {
    if (typeof indices === "number") {
      return /* [] */0;
    }
    switch (indices.tag | 0) {
      case /* Status */1 :
          var checked = indices[1];
          var displayImplicit = indices[0];
          if (displayImplicit || checked) {
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      Curry._2(Task.display, "Status", "Typechecked: " + (Pervasives.string_of_bool(checked) + ("\nDisplay implicit arguments: " + Pervasives.string_of_bool(displayImplicit)))),
                      /* [] */0
                    ]);
          } else {
            return /* [] */0;
          }
      case /* InteractionPoints */3 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* Goal */Caml_chrome_debugger.variant("Goal", 6, [/* Instantiate */Caml_chrome_debugger.variant("Instantiate", 0, [indices[0]])]),
                    /* :: */Caml_chrome_debugger.simpleVariant("::", [
                        /* Goal */Caml_chrome_debugger.variant("Goal", 6, [/* RestoreCursor */4]),
                        /* [] */0
                      ])
                  ]);
      case /* GiveAction */4 :
          var give = indices[1];
          var index = indices[0];
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* Goal */Caml_chrome_debugger.variant("Goal", 6, [/* GetIndexedOr */Caml_chrome_debugger.variant("GetIndexedOr", 6, [
                            index,
                            (function (goal, param) {
                                var tasks;
                                if (typeof give === "number") {
                                  tasks = give !== 0 ? /* [] */0 : /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                        /* Goal */Caml_chrome_debugger.variant("Goal", 6, [/* Modify */Caml_chrome_debugger.variant("Modify", 1, [
                                                goal,
                                                (function (content) {
                                                    return "(" + (content + ")");
                                                  })
                                              ])]),
                                        /* [] */0
                                      ]);
                                } else {
                                  var content = give[0];
                                  tasks = /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                      /* Goal */Caml_chrome_debugger.variant("Goal", 6, [/* Modify */Caml_chrome_debugger.variant("Modify", 1, [
                                              goal,
                                              (function (param) {
                                                  return content.replace(/\\n/g, "\n");
                                                })
                                            ])]),
                                      /* [] */0
                                    ]);
                                }
                                return List.concat(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                              tasks,
                                              /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                      /* Goal */Caml_chrome_debugger.variant("Goal", 6, [/* RemoveBoundaryAndDestroy */Caml_chrome_debugger.variant("RemoveBoundaryAndDestroy", 2, [goal])]),
                                                      /* [] */0
                                                    ]),
                                                  /* [] */0
                                                ])
                                            ]));
                              }),
                            /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                Curry._2(Task.displayError, "Error: Give failed", "Cannot find goal #" + String(index)),
                                /* [] */0
                              ])
                          ])]),
                    /* [] */0
                  ]);
      case /* MakeCase */5 :
          var lines = indices[1];
          var makeCaseType = indices[0];
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* Goal */Caml_chrome_debugger.variant("Goal", 6, [/* GetPointedOr */Caml_chrome_debugger.variant("GetPointedOr", 5, [
                            (function (goal, param) {
                                if (makeCaseType) {
                                  return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                            /* Goal */Caml_chrome_debugger.variant("Goal", 6, [/* ReplaceWithLambda */Caml_chrome_debugger.variant("ReplaceWithLambda", 4, [
                                                    goal,
                                                    lines
                                                  ])]),
                                            /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                /* DispatchCommand */Caml_chrome_debugger.variant("DispatchCommand", 0, [/* Load */0]),
                                                /* [] */0
                                              ])
                                          ]);
                                } else {
                                  return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                            /* Goal */Caml_chrome_debugger.variant("Goal", 6, [/* ReplaceWithLines */Caml_chrome_debugger.variant("ReplaceWithLines", 3, [
                                                    goal,
                                                    lines
                                                  ])]),
                                            /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                /* DispatchCommand */Caml_chrome_debugger.variant("DispatchCommand", 0, [/* Load */0]),
                                                /* [] */0
                                              ])
                                          ]);
                                }
                              }),
                            /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                /* Error */Caml_chrome_debugger.variant("Error", 5, [/* OutOfGoal */1]),
                                /* [] */0
                              ])
                          ])]),
                    /* [] */0
                  ]);
      case /* DisplayInfo */7 :
          return handle(indices[0]);
      case /* RunningInfo */8 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    Curry._2(Task.display, "Type-checking", indices[1]),
                    /* [] */0
                  ]);
      default:
        return /* [] */0;
    }
  };
  return {
          Task: Task,
          DisplayInfo: DisplayInfo,
          handle: handle$1
        };
}

exports.Impl = Impl;
/* Task-AgdaModeVscode Not a pure module */
