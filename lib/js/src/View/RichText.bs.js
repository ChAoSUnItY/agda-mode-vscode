// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/lib/js/src/Json_encode.bs.js");
var Common$AgdaModeVscode = require("../Common.bs.js");
var Component$AgdaModeVscode = require("./Component/Component.bs.js");

function decode(json) {
  return {
          link: Json_decode.field("attrLink", (function (param) {
                  return Json_decode.optional(Common$AgdaModeVscode.Link.decode, param);
                }), json),
          icon: Json_decode.field("attrIcon", (function (param) {
                  return Json_decode.optional(Json_decode.string, param);
                }), json)
        };
}

function encode(x) {
  return Json_encode.object_({
              hd: [
                "attrLink",
                Json_encode.nullable(Common$AgdaModeVscode.Link.encode, x.link)
              ],
              tl: {
                hd: [
                  "attrIcon",
                  Json_encode.nullable((function (prim) {
                          return prim;
                        }), x.icon)
                ],
                tl: /* [] */0
              }
            });
}

var Attributes = {
  decode: decode,
  encode: encode
};

function toText(x) {
  var attrs = x._1;
  var text = x._0;
  var link = attrs.link;
  if (link !== undefined) {
    return {
            _0: [{
                TAG: 2,
                _0: text,
                _1: undefined,
                _2: true,
                _3: false,
                _4: link,
                [Symbol.for("name")]: "Link"
              }],
            [Symbol.for("name")]: "Text"
          };
  }
  var kind = attrs.icon;
  if (kind !== undefined) {
    return {
            _0: [{
                TAG: 1,
                _0: kind,
                [Symbol.for("name")]: "Icon"
              }],
            [Symbol.for("name")]: "Text"
          };
  } else {
    return Component$AgdaModeVscode.$$Text.plainText(undefined, text);
  }
}

function decode$1(param) {
  return Json_decode.map((function (param) {
                return {
                        _0: param[0],
                        _1: param[1],
                        [Symbol.for("name")]: "Elem"
                      };
              }), (function (param) {
                return Json_decode.pair(Json_decode.string, decode, param);
              }), param);
}

function encode$1(x) {
  return Json_encode.pair((function (prim) {
                return prim;
              }), encode, [
              x._0,
              x._1
            ]);
}

var $$Element = {
  toText: toText,
  decode: decode$1,
  encode: encode$1
};

function toText$1(x) {
  return Component$AgdaModeVscode.$$Text.concatMany(Belt_Array.map(x._0, toText));
}

function decode$2(param) {
  return Json_decode.map((function (elems) {
                return {
                        _0: elems,
                        [Symbol.for("name")]: "RichText"
                      };
              }), (function (param) {
                return Json_decode.array(decode$1, param);
              }), param);
}

function encode$2(x) {
  return Json_encode.array(encode$1, x._0);
}

var Module = {
  Attributes: Attributes,
  $$Element: $$Element,
  toText: toText$1,
  decode: decode$2,
  encode: encode$2
};

exports.Module = Module;
exports.Attributes = Attributes;
exports.$$Element = $$Element;
exports.toText = toText$1;
exports.decode = decode$2;
exports.encode = encode$2;
/* Common-AgdaModeVscode Not a pure module */
