// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Util$AgdaModeVscode = require("./Util/Util.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var State$AgdaModeVscode = require("./State.bs.js");
var Dispatcher$AgdaModeVscode = require("./Task/Dispatcher.bs.js");

function Impl(Editor) {
  var Dispatcher = Dispatcher$AgdaModeVscode.Impl(Editor);
  var State = State$AgdaModeVscode.Impl(Editor);
  var make = function (extentionPath, editor, onDestroy) {
    var state = Curry._2(State.make, extentionPath, editor);
    var dispatcher = Curry._1(Dispatcher.make, state);
    state.subscriptions.push(Curry._2(Editor.View.on, state.view, (function ($$event) {
                if (!$$event.tag) {
                  return ;
                }
                Curry._2(Dispatcher.dispatchCommand, dispatcher, /* EventFromView */Caml_chrome_debugger.variant("EventFromView", 8, [$$event[0]]));
                
              })));
    state.subscriptions.push(Curry._1(Editor.Disposable.make, Curry._1(state.inputMethod.onAction.on, (function (action) {
                    Curry._2(Dispatcher.dispatchCommand, dispatcher, /* InputMethod */Caml_chrome_debugger.variant("InputMethod", 13, [action]));
                    
                  }))));
    $$Promise.get(Curry._1(State.onKillMePlz, state), onDestroy);
    return /* tuple */[
            state,
            dispatcher
          ];
  };
  var destroy = function (param) {
    var state = param[0];
    return $$Promise.flatMap(Curry._1(Dispatcher.destroy, param[1]), (function (param) {
                  return Curry._1(State.destroy, state);
                }));
  };
  var forceDestroy = function (param) {
    var state = param[0];
    return $$Promise.flatMap(Curry._1(Dispatcher.forceDestroy, param[1]), (function (param) {
                  return Curry._1(State.destroy, state);
                }));
  };
  return {
          Dispatcher: Dispatcher,
          State: State,
          make: make,
          destroy: destroy,
          forceDestroy: forceDestroy
        };
}

var StateDispatcherPair = {
  Impl: Impl
};

function Impl$1(Editor) {
  var Dispatcher = Dispatcher$AgdaModeVscode.Impl(Editor);
  var State = State$AgdaModeVscode.Impl(Editor);
  var make = function (extentionPath, editor, onDestroy) {
    var state = Curry._2(State.make, extentionPath, editor);
    var dispatcher = Curry._1(Dispatcher.make, state);
    state.subscriptions.push(Curry._2(Editor.View.on, state.view, (function ($$event) {
                if (!$$event.tag) {
                  return ;
                }
                Curry._2(Dispatcher.dispatchCommand, dispatcher, /* EventFromView */Caml_chrome_debugger.variant("EventFromView", 8, [$$event[0]]));
                
              })));
    state.subscriptions.push(Curry._1(Editor.Disposable.make, Curry._1(state.inputMethod.onAction.on, (function (action) {
                    Curry._2(Dispatcher.dispatchCommand, dispatcher, /* InputMethod */Caml_chrome_debugger.variant("InputMethod", 13, [action]));
                    
                  }))));
    $$Promise.get(Curry._1(State.onKillMePlz, state), onDestroy);
    return /* tuple */[
            state,
            dispatcher
          ];
  };
  var destroy = function (param) {
    var state = param[0];
    return $$Promise.flatMap(Curry._1(Dispatcher.destroy, param[1]), (function (param) {
                  return Curry._1(State.destroy, state);
                }));
  };
  var forceDestroy = function (param) {
    var state = param[0];
    return $$Promise.flatMap(Curry._1(Dispatcher.forceDestroy, param[1]), (function (param) {
                  return Curry._1(State.destroy, state);
                }));
  };
  var StateDispatcherPair = {
    Dispatcher: Dispatcher,
    State: State,
    make: make,
    destroy: destroy,
    forceDestroy: forceDestroy
  };
  var dict = { };
  var get = function (fileName) {
    return Js_dict.get(dict, fileName);
  };
  var getByEditor = function (editor) {
    return Belt_Option.flatMap(Curry._1(Editor.getFileName, editor), get);
  };
  var add = function (fileName, state) {
    var match = Js_dict.get(dict, fileName);
    if (match !== undefined) {
      return ;
    } else {
      dict[fileName] = state;
      return ;
    }
  };
  var rename = function (oldName, newName) {
    var delete_ = (function (dict, key) {delete dict[key]});
    return Belt_Option.forEach(Js_dict.get(dict, oldName), (function (state) {
                  console.log("[ states ][ rename ]", oldName, newName);
                  delete_(dict, oldName);
                  return add(newName, state);
                }));
  };
  var remove = function (fileName) {
    var delete_ = (function (dict, key) {delete dict[key]});
    return delete_(dict, fileName);
  };
  var destroy$1 = function (fileName) {
    var pair = Js_dict.get(dict, fileName);
    if (pair !== undefined) {
      remove(fileName);
      return destroy(pair);
    } else {
      return $$Promise.resolved(undefined);
    }
  };
  var forceDestroy$1 = function (fileName) {
    var pair = Js_dict.get(dict, fileName);
    if (pair !== undefined) {
      remove(fileName);
      return forceDestroy(pair);
    } else {
      return $$Promise.resolved(undefined);
    }
  };
  var contains = function (fileName) {
    return Belt_Option.isSome(Js_dict.get(dict, fileName));
  };
  var destroyAll = function (param) {
    return Util$AgdaModeVscode.oneByOne(Belt_Array.map(Js_dict.entries(dict), (function (param, param$1) {
                      return destroy(param[1]);
                    })));
  };
  return {
          StateDispatcherPair: StateDispatcherPair,
          dict: dict,
          get: get,
          getByEditor: getByEditor,
          add: add,
          rename: rename,
          remove: remove,
          destroy: destroy$1,
          forceDestroy: forceDestroy$1,
          contains: contains,
          destroyAll: destroyAll
        };
}

var Dict = {
  Impl: Impl$1
};

exports.StateDispatcherPair = StateDispatcherPair;
exports.Dict = Dict;
/* Promise Not a pure module */
