// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Vscode = require("vscode");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var View$AgdaModeVscode = require("../View.bs.js");
var State$AgdaModeVscode = require("../State.bs.js");
var Editor$AgdaModeVscode = require("../Editor.bs.js");
var View__Controller$AgdaModeVscode = require("../View__Controller.bs.js");

function viewEvent(state, $$event) {
  return $$Promise.map(State$AgdaModeVscode.sendEventToView(state, $$event), (function (param) {
                
              }));
}

function display(state, header, body) {
  return viewEvent(state, {
              TAG: 0,
              _0: header,
              _1: body,
              [Symbol.for("name")]: "Display"
            });
}

function displayEmacs(state, kind, header, body) {
  return viewEvent(state, {
              TAG: 0,
              _0: header,
              _1: {
                TAG: 1,
                _0: kind,
                _1: View$AgdaModeVscode.Header.toString(header),
                _2: body,
                [Symbol.for("name")]: "Emacs"
              },
              [Symbol.for("name")]: "Display"
            });
}

function displayOutOfGoalError(state) {
  return display(state, {
              TAG: 3,
              _0: "Out of goal",
              [Symbol.for("name")]: "Error"
            }, {
              TAG: 0,
              _0: "Please place the cursor in a goal",
              [Symbol.for("name")]: "Plain"
            });
}

function sendViewRequest(state, request, callback) {
  return $$Promise.flatMap(State$AgdaModeVscode.sendRequestToView(state, request), (function (x) {
                if (x !== undefined) {
                  return Curry._1(callback, x);
                } else {
                  return $$Promise.resolved(undefined);
                }
              }));
}

function prompt(state, header, prompt$1, callbackOnPromptSuccess) {
  Vscode.commands.executeCommand("setContext", "agdaModePrompting", true);
  View__Controller$AgdaModeVscode.focus(state.view);
  return sendViewRequest(state, {
              _0: header,
              _1: prompt$1,
              [Symbol.for("name")]: "Prompt"
            }, (function (response) {
                if (response) {
                  return $$Promise.map(Curry._1(callbackOnPromptSuccess, response._0), (function (param) {
                                Vscode.commands.executeCommand("setContext", "agdaModePrompting", false);
                                return Editor$AgdaModeVscode.focus(state.document);
                              }));
                } else {
                  return $$Promise.resolved(undefined);
                }
              }));
}

exports.viewEvent = viewEvent;
exports.display = display;
exports.displayEmacs = displayEmacs;
exports.displayOutOfGoalError = displayOutOfGoalError;
exports.sendViewRequest = sendViewRequest;
exports.prompt = prompt;
/* vscode Not a pure module */
