// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Vscode = require("vscode");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Agda$AgdaModeVscode = require("../Agda.bs.js");
var Util$AgdaModeVscode = require("../Util/Util.bs.js");
var State$AgdaModeVscode = require("../State.bs.js");
var Editor$AgdaModeVscode = require("../Editor.bs.js");
var Parser$AgdaModeVscode = require("../Parser.bs.js");
var Component$AgdaModeVscode = require("../View/Component/Component.bs.js");
var Decoration$AgdaModeVscode = require("../Decoration.bs.js");
var State__Goal$AgdaModeVscode = require("./State__Goal.bs.js");
var Emacs__Parser2$AgdaModeVscode = require("../View/Emacs/Emacs__Parser2.bs.js");

function handle(state, x) {
  switch (x.TAG | 0) {
    case /* CompilationOk */0 :
        return State$AgdaModeVscode.View.display(state, {
                    TAG: 1,
                    _0: "Compilation result",
                    [Symbol.for("name")]: "Success"
                  }, [Component$AgdaModeVscode.Item.plainText(x._0)]);
    case /* CompilationOkLSP */1 :
        var message = [Component$AgdaModeVscode.Item.plainText("The module was successfully compiled.")];
        var errors = Belt_Array.map(x._1, (function (raw) {
                return Component$AgdaModeVscode.Item.error(Component$AgdaModeVscode.$$Text.plainText(undefined, raw), raw);
              }));
        var warnings = Belt_Array.map(x._0, (function (raw) {
                return Component$AgdaModeVscode.Item.warning(Component$AgdaModeVscode.$$Text.plainText(undefined, raw), raw);
              }));
        return State$AgdaModeVscode.View.display(state, {
                    TAG: 1,
                    _0: "Compilation result",
                    [Symbol.for("name")]: "Success"
                  }, Belt_Array.concatMany([
                        message,
                        errors,
                        warnings
                      ]));
    case /* Constraints */2 :
        var body = x._0;
        if (body === undefined) {
          return State$AgdaModeVscode.View.display(state, {
                      TAG: 0,
                      _0: "No Constraints",
                      [Symbol.for("name")]: "Plain"
                    }, []);
        }
        var items = Emacs__Parser2$AgdaModeVscode.parseOutputs(body);
        return State$AgdaModeVscode.View.display(state, {
                    TAG: 0,
                    _0: "Constraints",
                    [Symbol.for("name")]: "Plain"
                  }, items);
    case /* AllGoalsWarnings */3 :
        var body$1 = x._1;
        var header = x._0;
        if (body$1 === "nil") {
          return State$AgdaModeVscode.View.display(state, {
                      TAG: 1,
                      _0: header,
                      [Symbol.for("name")]: "Success"
                    }, []);
        }
        var items$1 = Emacs__Parser2$AgdaModeVscode.parseAllGoalsWarnings(header, body$1);
        return State$AgdaModeVscode.View.display(state, {
                    TAG: 0,
                    _0: header,
                    [Symbol.for("name")]: "Plain"
                  }, items$1);
    case /* AllGoalsWarningsLSP */4 :
        var goals = Belt_Array.concatMany(Belt_Array.map(x._1, (function (param) {
                    return [{
                              TAG: 1,
                              _0: Agda$AgdaModeVscode.OutputConstraint.toText(param[0], undefined),
                              _1: param[1],
                              [Symbol.for("name")]: "Unlabeled"
                            }];
                  })));
        var metas = Belt_Array.concatMany(Belt_Array.map(x._2, (function (param) {
                    return [{
                              TAG: 1,
                              _0: Agda$AgdaModeVscode.OutputConstraint.toText(param[0], undefined),
                              _1: param[1],
                              [Symbol.for("name")]: "Unlabeled"
                            }];
                  })));
        var errors$1 = Belt_Array.map(x._4, (function (raw) {
                return Component$AgdaModeVscode.Item.error(Component$AgdaModeVscode.$$Text.plainText(undefined, raw), raw);
              }));
        var warnings$1 = Belt_Array.map(x._3, (function (raw) {
                return Component$AgdaModeVscode.Item.warning(Component$AgdaModeVscode.$$Text.plainText(undefined, raw), raw);
              }));
        return State$AgdaModeVscode.View.display(state, {
                    TAG: 0,
                    _0: x._0,
                    [Symbol.for("name")]: "Plain"
                  }, Belt_Array.concatMany([
                        goals,
                        metas,
                        errors$1,
                        warnings$1
                      ]));
    case /* Time */5 :
        var items$2 = Emacs__Parser2$AgdaModeVscode.parseTextWithLocation(x._0);
        return State$AgdaModeVscode.View.display(state, {
                    TAG: 0,
                    _0: "Time",
                    [Symbol.for("name")]: "Plain"
                  }, items$2);
    case /* Error */6 :
        var items$3 = Emacs__Parser2$AgdaModeVscode.parseError(x._0);
        return State$AgdaModeVscode.View.display(state, {
                    TAG: 3,
                    _0: "Error",
                    [Symbol.for("name")]: "Error"
                  }, items$3);
    case /* Intro */7 :
        var items$4 = Emacs__Parser2$AgdaModeVscode.parseTextWithLocation(x._0);
        return State$AgdaModeVscode.View.display(state, {
                    TAG: 0,
                    _0: "Intro",
                    [Symbol.for("name")]: "Plain"
                  }, items$4);
    case /* Auto */8 :
        var items$5 = Emacs__Parser2$AgdaModeVscode.parseTextWithLocation(x._0);
        return State$AgdaModeVscode.View.display(state, {
                    TAG: 0,
                    _0: "Auto",
                    [Symbol.for("name")]: "Plain"
                  }, items$5);
    case /* ModuleContents */9 :
        var items$6 = Emacs__Parser2$AgdaModeVscode.parseTextWithLocation(x._0);
        return State$AgdaModeVscode.View.display(state, {
                    TAG: 0,
                    _0: "Module Contents",
                    [Symbol.for("name")]: "Plain"
                  }, items$6);
    case /* SearchAbout */10 :
        var items$7 = Emacs__Parser2$AgdaModeVscode.parseSearchAbout(x._0);
        return State$AgdaModeVscode.View.display(state, {
                    TAG: 0,
                    _0: "Search About",
                    [Symbol.for("name")]: "Plain"
                  }, items$7);
    case /* WhyInScope */11 :
        var items$8 = Emacs__Parser2$AgdaModeVscode.parseTextWithLocation(x._0);
        return State$AgdaModeVscode.View.display(state, {
                    TAG: 0,
                    _0: "Scope info",
                    [Symbol.for("name")]: "Plain"
                  }, items$8);
    case /* NormalForm */12 :
        var items$9 = Emacs__Parser2$AgdaModeVscode.parseTextWithLocation(x._0);
        return State$AgdaModeVscode.View.display(state, {
                    TAG: 0,
                    _0: "Normal form",
                    [Symbol.for("name")]: "Plain"
                  }, items$9);
    case /* GoalType */13 :
        var items$10 = Emacs__Parser2$AgdaModeVscode.parseGoalType(x._0);
        return State$AgdaModeVscode.View.display(state, {
                    TAG: 0,
                    _0: "Goal and Context",
                    [Symbol.for("name")]: "Plain"
                  }, items$10);
    case /* CurrentGoal */14 :
        return State$AgdaModeVscode.View.display(state, {
                    TAG: 0,
                    _0: "Current goal",
                    [Symbol.for("name")]: "Plain"
                  }, [Component$AgdaModeVscode.Item.plainText(x._0)]);
    case /* InferredType */15 :
        return State$AgdaModeVscode.View.display(state, {
                    TAG: 0,
                    _0: "Inferred type",
                    [Symbol.for("name")]: "Plain"
                  }, [Component$AgdaModeVscode.Item.plainText(x._0)]);
    case /* Context */16 :
        var items$11 = Emacs__Parser2$AgdaModeVscode.parseOutputs(x._0);
        return State$AgdaModeVscode.View.display(state, {
                    TAG: 0,
                    _0: "Context",
                    [Symbol.for("name")]: "Plain"
                  }, items$11);
    case /* HelperFunction */17 :
        var payload = x._0;
        return $$Promise.flatMap(Vscode.env.clipboard.writeText(payload), (function (param) {
                      return State$AgdaModeVscode.View.display(state, {
                                  TAG: 0,
                                  _0: "Helper function (copied to clipboard)",
                                  [Symbol.for("name")]: "Plain"
                                }, [Component$AgdaModeVscode.Item.plainText(payload)]);
                    }));
    case /* Version */18 :
        return State$AgdaModeVscode.View.display(state, {
                    TAG: 0,
                    _0: "Version",
                    [Symbol.for("name")]: "Plain"
                  }, [Component$AgdaModeVscode.Item.plainText(x._0)]);
    
  }
}

var DisplayInfo = {
  handle: handle
};

function handle$1(state, dispatchCommand, response) {
  if (typeof response === "number") {
    switch (response) {
      case /* ClearHighlighting */1 :
          Decoration$AgdaModeVscode.clear(state.decoration);
          return $$Promise.resolved(undefined);
      case /* CompleteHighlightingAndMakePromptReappear */4 :
          return Decoration$AgdaModeVscode.apply(state.decoration, state.editor);
      default:
        return $$Promise.resolved(undefined);
    }
  } else {
    switch (response.TAG | 0) {
      case /* HighlightingInfoDirect */0 :
          Decoration$AgdaModeVscode.addViaPipe(state.decoration, response._1);
          return $$Promise.resolved(undefined);
      case /* HighlightingInfoIndirect */1 :
          Decoration$AgdaModeVscode.addViaFile(state.decoration, response._0);
          return $$Promise.resolved(undefined);
      case /* HighlightingInfoIndirectJSON */2 :
          Decoration$AgdaModeVscode.addViaJSONFile(state.decoration, response._0);
          return $$Promise.resolved(undefined);
      case /* Status */3 :
          return $$Promise.resolved(undefined);
      case /* JumpToError */4 :
          var path = Parser$AgdaModeVscode.filepath(state.document.fileName);
          if (path === response._0) {
            var point = state.document.positionAt(response._1 - 1 | 0);
            Editor$AgdaModeVscode.Cursor.set(state.editor, point);
          }
          return $$Promise.resolved(undefined);
      case /* InteractionPoints */5 :
          return State__Goal$AgdaModeVscode.instantiate(state, response._0);
      case /* GiveAction */6 :
          var give = response._1;
          var index = response._0;
          var found = Belt_Array.keep(state.goals, (function (goal) {
                  return goal.index === index;
                }));
          var goal = Belt_Array.get(found, 0);
          if (goal === undefined) {
            return State$AgdaModeVscode.View.display(state, {
                        TAG: 3,
                        _0: "Error: Give failed",
                        [Symbol.for("name")]: "Error"
                      }, [Component$AgdaModeVscode.Item.plainText("Cannot find goal #" + String(index))]);
          }
          if (typeof give === "number") {
            if (give !== 0) {
              return State__Goal$AgdaModeVscode.removeBoundaryAndDestroy(state, goal);
            } else {
              return $$Promise.flatMap(State__Goal$AgdaModeVscode.modify(state, goal, (function (content) {
                                return "(" + (content + ")");
                              })), (function (param) {
                            return State__Goal$AgdaModeVscode.removeBoundaryAndDestroy(state, goal);
                          }));
            }
          }
          var content = give._0;
          return $$Promise.flatMap(State__Goal$AgdaModeVscode.modify(state, goal, (function (param) {
                            return content.replace(/\\n/g, "\n");
                          })), (function (param) {
                        return State__Goal$AgdaModeVscode.removeBoundaryAndDestroy(state, goal);
                      }));
      case /* MakeCase */7 :
          var lines = response._1;
          var match = State__Goal$AgdaModeVscode.pointed(state);
          if (match === undefined) {
            return State$AgdaModeVscode.View.displayOutOfGoalError(state);
          }
          var goal$1 = match[0];
          return $$Promise.flatMap(response._0 ? State__Goal$AgdaModeVscode.replaceWithLambda(state, goal$1, lines) : State__Goal$AgdaModeVscode.replaceWithLines(state, goal$1, lines), (function (param) {
                        return Curry._1(dispatchCommand, /* Load */0);
                      }));
      case /* SolveAll */8 :
          var solutions = response._0;
          var solveOne = function (param) {
            var solution = param[1];
            var index = param[0];
            var goals = Belt_Array.keep(state.goals, (function (goal) {
                    return goal.index === index;
                  }));
            var goal = Belt_Array.get(goals, 0);
            if (goal !== undefined) {
              return $$Promise.flatMap(State__Goal$AgdaModeVscode.modify(state, goal, (function (param) {
                                return solution;
                              })), (function (param) {
                            var param$1 = {
                              TAG: 3,
                              _0: goal,
                              [Symbol.for("name")]: "Give"
                            };
                            return State$AgdaModeVscode.Connection.sendRequest(state, (function (param) {
                                          return handle$1(state, dispatchCommand, param);
                                        }), param$1);
                          }));
            } else {
              return $$Promise.resolved(undefined);
            }
          };
          return $$Promise.flatMap(Util$AgdaModeVscode.oneByOne(Belt_Array.map(solutions, solveOne)), (function (param) {
                        var size = solutions.length;
                        if (size === 0) {
                          return State$AgdaModeVscode.View.display(state, {
                                      TAG: 3,
                                      _0: "No solutions found",
                                      [Symbol.for("name")]: "Error"
                                    }, []);
                        } else {
                          return State$AgdaModeVscode.View.display(state, {
                                      TAG: 1,
                                      _0: String(size) + " goals solved",
                                      [Symbol.for("name")]: "Success"
                                    }, []);
                        }
                      }));
      case /* DisplayInfo */9 :
          return handle(state, response._0);
      case /* RunningInfo */10 :
          return State$AgdaModeVscode.View.display(state, {
                      TAG: 0,
                      _0: "Type-checking",
                      [Symbol.for("name")]: "Plain"
                    }, [Component$AgdaModeVscode.Item.plainText(response._1)]);
      
    }
  }
}

exports.DisplayInfo = DisplayInfo;
exports.handle = handle$1;
/* vscode Not a pure module */
