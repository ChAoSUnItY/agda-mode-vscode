// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Task$AgdaModeVscode = require("./Task.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Handle__Goal$AgdaModeVscode = require("./Handle__Goal.bs.js");
var Handle__Error$AgdaModeVscode = require("./Handle__Error.bs.js");
var Handle__Command$AgdaModeVscode = require("./Handle__Command.bs.js");
var Handle__Response$AgdaModeVscode = require("./Handle__Response.bs.js");

function Impl(Editor) {
  var ErrorHandler = Handle__Error$AgdaModeVscode.Impl(Editor);
  var GoalHandler = Handle__Goal$AgdaModeVscode.Impl(Editor);
  var CommandHandler = Handle__Command$AgdaModeVscode.Impl(Editor);
  var ResponseHandler = Handle__Response$AgdaModeVscode.Impl(Editor);
  var Task = Task$AgdaModeVscode.Impl(Editor);
  var getNextTask = function (self) {
    var match = self.queues;
    if (!match) {
      return ;
    }
    var match$1 = match[0];
    var match$2 = match$1[1];
    if (match$2) {
      return /* tuple */[
              match$2[0],
              /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    match$1[0],
                    match$2[1]
                  ],
                  match[1]
                ])
            ];
    }
    
  };
  var executeTask = function (self, task) {
    return $$Promise.resolved(undefined);
  };
  var kickStart = function (self) {
    var match = self.status;
    if (!match) {
      return ;
    }
    var match$1 = getNextTask(self);
    if (match$1 !== undefined) {
      self.status = /* Busy */0;
      self.queues = match$1[1];
      return $$Promise.get($$Promise.resolved(undefined), (function (param) {
                    self.status = /* Idle */1;
                    return kickStart(self);
                  }));
    }
    
  };
  return {
          ErrorHandler: ErrorHandler,
          GoalHandler: GoalHandler,
          CommandHandler: CommandHandler,
          ResponseHandler: ResponseHandler,
          Task: Task,
          getNextTask: getNextTask,
          executeTask: executeTask,
          kickStart: kickStart
        };
}

exports.Impl = Impl;
/* Promise Not a pure module */
