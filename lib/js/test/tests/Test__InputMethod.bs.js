// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Vscode = require("vscode");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Mocha$BsMocha = require("bs-mocha/lib/js/src/Mocha.bs.js");
var Goal$AgdaModeVscode = require("../../src/Goal.bs.js");
var Main$AgdaModeVscode = require("../../src/Main.bs.js");
var Task$AgdaModeVscode = require("../../src/Task/Task.bs.js");
var Util$AgdaModeVscode = require("../../src/Util/Util.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Editor$AgdaModeVscode = require("../../src/Editor.bs.js");
var EditorIM$AgdaModeVscode = require("../../src/InputMethod/EditorIM.bs.js");
var Test__Util$AgdaModeVscode = require("./Test__Util.bs.js");
var Handle__Goal$AgdaModeVscode = require("../../src/Task/Handle__Goal.bs.js");

var Goal = Goal$AgdaModeVscode.Impl({
      Disposable: Editor$AgdaModeVscode.Disposable,
      Point: {
        line: Editor$AgdaModeVscode.Point.line,
        column: Editor$AgdaModeVscode.Point.column,
        make: Editor$AgdaModeVscode.Point.make,
        translate: Editor$AgdaModeVscode.Point.translate,
        compare: Editor$AgdaModeVscode.Point.compare
      },
      pointAtOffset: Editor$AgdaModeVscode.pointAtOffset,
      offsetAtPoint: Editor$AgdaModeVscode.offsetAtPoint,
      $$Range: Editor$AgdaModeVscode.$$Range,
      editorType: Editor$AgdaModeVscode.editorType,
      getExtensionPath: Editor$AgdaModeVscode.getExtensionPath,
      getFileName: Editor$AgdaModeVscode.getFileName,
      save: Editor$AgdaModeVscode.save,
      onDidChangeFileName: Editor$AgdaModeVscode.onDidChangeFileName,
      onDidChangeActivation: Editor$AgdaModeVscode.onDidChangeActivation,
      onDidCloseEditor: Editor$AgdaModeVscode.onDidCloseEditor,
      registerCommand: Editor$AgdaModeVscode.registerCommand,
      setContext: Editor$AgdaModeVscode.setContext,
      getDisposables: Editor$AgdaModeVscode.getDisposables,
      Config: {
        getAgdaPath: Editor$AgdaModeVscode.Config.getAgdaPath,
        setAgdaPath: Editor$AgdaModeVscode.Config.setAgdaPath,
        getLibraryPath: Editor$AgdaModeVscode.Config.getLibraryPath,
        getHighlightingMethod: Editor$AgdaModeVscode.Config.getHighlightingMethod,
        getBackend: Editor$AgdaModeVscode.Config.getBackend
      },
      View: {
        make: Editor$AgdaModeVscode.View.make,
        destroy: Editor$AgdaModeVscode.View.destroy,
        show: Editor$AgdaModeVscode.View.show,
        hide: Editor$AgdaModeVscode.View.hide,
        focus: Editor$AgdaModeVscode.View.focus,
        send: Editor$AgdaModeVscode.View.send,
        onEvent: Editor$AgdaModeVscode.View.onEvent
      },
      Decoration: {
        decorate: Editor$AgdaModeVscode.Decoration.decorate,
        highlightBackground: Editor$AgdaModeVscode.Decoration.highlightBackground,
        highlightBackgroundWithColor: Editor$AgdaModeVscode.Decoration.highlightBackgroundWithColor,
        decorateText: Editor$AgdaModeVscode.Decoration.decorateText,
        decorateTextWithColor: Editor$AgdaModeVscode.Decoration.decorateTextWithColor,
        overlayText: Editor$AgdaModeVscode.Decoration.overlayText,
        overlayTextWithColor: Editor$AgdaModeVscode.Decoration.overlayTextWithColor,
        underlineText: Editor$AgdaModeVscode.Decoration.underlineText,
        destroy: Editor$AgdaModeVscode.Decoration.destroy
      },
      focus: Editor$AgdaModeVscode.focus,
      getSelectionRange: Editor$AgdaModeVscode.getSelectionRange,
      getSelectionRanges: Editor$AgdaModeVscode.getSelectionRanges,
      getCursorPosition: Editor$AgdaModeVscode.getCursorPosition,
      getCursorPositions: Editor$AgdaModeVscode.getCursorPositions,
      setCursorPosition: Editor$AgdaModeVscode.setCursorPosition,
      setCursorPositions: Editor$AgdaModeVscode.setCursorPositions,
      onChangeCursorPosition: Editor$AgdaModeVscode.onChangeCursorPosition,
      rangeForLine: Editor$AgdaModeVscode.rangeForLine,
      fromAgdaOffset: Editor$AgdaModeVscode.fromAgdaOffset,
      toAgdaOffset: Editor$AgdaModeVscode.toAgdaOffset,
      getText: Editor$AgdaModeVscode.getText,
      getTextInRange: Editor$AgdaModeVscode.getTextInRange,
      selectText: Editor$AgdaModeVscode.selectText,
      replaceText: Editor$AgdaModeVscode.replaceText,
      insertText: Editor$AgdaModeVscode.insertText,
      insertTexts: Editor$AgdaModeVscode.insertTexts,
      deleteText: Editor$AgdaModeVscode.deleteText,
      onChange: Editor$AgdaModeVscode.onChange,
      copyToClipboard: Editor$AgdaModeVscode.copyToClipboard,
      colorThemeIsDark: Editor$AgdaModeVscode.colorThemeIsDark,
      lineEndingIsCRLF: Editor$AgdaModeVscode.lineEndingIsCRLF
    });

var Task = Task$AgdaModeVscode.Impl({
      Disposable: Editor$AgdaModeVscode.Disposable,
      Point: {
        line: Editor$AgdaModeVscode.Point.line,
        column: Editor$AgdaModeVscode.Point.column,
        make: Editor$AgdaModeVscode.Point.make,
        translate: Editor$AgdaModeVscode.Point.translate,
        compare: Editor$AgdaModeVscode.Point.compare
      },
      pointAtOffset: Editor$AgdaModeVscode.pointAtOffset,
      offsetAtPoint: Editor$AgdaModeVscode.offsetAtPoint,
      $$Range: Editor$AgdaModeVscode.$$Range,
      editorType: Editor$AgdaModeVscode.editorType,
      getExtensionPath: Editor$AgdaModeVscode.getExtensionPath,
      getFileName: Editor$AgdaModeVscode.getFileName,
      save: Editor$AgdaModeVscode.save,
      onDidChangeFileName: Editor$AgdaModeVscode.onDidChangeFileName,
      onDidChangeActivation: Editor$AgdaModeVscode.onDidChangeActivation,
      onDidCloseEditor: Editor$AgdaModeVscode.onDidCloseEditor,
      registerCommand: Editor$AgdaModeVscode.registerCommand,
      setContext: Editor$AgdaModeVscode.setContext,
      getDisposables: Editor$AgdaModeVscode.getDisposables,
      Config: {
        getAgdaPath: Editor$AgdaModeVscode.Config.getAgdaPath,
        setAgdaPath: Editor$AgdaModeVscode.Config.setAgdaPath,
        getLibraryPath: Editor$AgdaModeVscode.Config.getLibraryPath,
        getHighlightingMethod: Editor$AgdaModeVscode.Config.getHighlightingMethod,
        getBackend: Editor$AgdaModeVscode.Config.getBackend
      },
      View: {
        make: Editor$AgdaModeVscode.View.make,
        destroy: Editor$AgdaModeVscode.View.destroy,
        show: Editor$AgdaModeVscode.View.show,
        hide: Editor$AgdaModeVscode.View.hide,
        focus: Editor$AgdaModeVscode.View.focus,
        send: Editor$AgdaModeVscode.View.send,
        onEvent: Editor$AgdaModeVscode.View.onEvent
      },
      Decoration: {
        decorate: Editor$AgdaModeVscode.Decoration.decorate,
        highlightBackground: Editor$AgdaModeVscode.Decoration.highlightBackground,
        highlightBackgroundWithColor: Editor$AgdaModeVscode.Decoration.highlightBackgroundWithColor,
        decorateText: Editor$AgdaModeVscode.Decoration.decorateText,
        decorateTextWithColor: Editor$AgdaModeVscode.Decoration.decorateTextWithColor,
        overlayText: Editor$AgdaModeVscode.Decoration.overlayText,
        overlayTextWithColor: Editor$AgdaModeVscode.Decoration.overlayTextWithColor,
        underlineText: Editor$AgdaModeVscode.Decoration.underlineText,
        destroy: Editor$AgdaModeVscode.Decoration.destroy
      },
      focus: Editor$AgdaModeVscode.focus,
      getSelectionRange: Editor$AgdaModeVscode.getSelectionRange,
      getSelectionRanges: Editor$AgdaModeVscode.getSelectionRanges,
      getCursorPosition: Editor$AgdaModeVscode.getCursorPosition,
      getCursorPositions: Editor$AgdaModeVscode.getCursorPositions,
      setCursorPosition: Editor$AgdaModeVscode.setCursorPosition,
      setCursorPositions: Editor$AgdaModeVscode.setCursorPositions,
      onChangeCursorPosition: Editor$AgdaModeVscode.onChangeCursorPosition,
      rangeForLine: Editor$AgdaModeVscode.rangeForLine,
      fromAgdaOffset: Editor$AgdaModeVscode.fromAgdaOffset,
      toAgdaOffset: Editor$AgdaModeVscode.toAgdaOffset,
      getText: Editor$AgdaModeVscode.getText,
      getTextInRange: Editor$AgdaModeVscode.getTextInRange,
      selectText: Editor$AgdaModeVscode.selectText,
      replaceText: Editor$AgdaModeVscode.replaceText,
      insertText: Editor$AgdaModeVscode.insertText,
      insertTexts: Editor$AgdaModeVscode.insertTexts,
      deleteText: Editor$AgdaModeVscode.deleteText,
      onChange: Editor$AgdaModeVscode.onChange,
      copyToClipboard: Editor$AgdaModeVscode.copyToClipboard,
      colorThemeIsDark: Editor$AgdaModeVscode.colorThemeIsDark,
      lineEndingIsCRLF: Editor$AgdaModeVscode.lineEndingIsCRLF
    });

var EditorIM = EditorIM$AgdaModeVscode.Impl({
      Disposable: Editor$AgdaModeVscode.Disposable,
      Point: {
        line: Editor$AgdaModeVscode.Point.line,
        column: Editor$AgdaModeVscode.Point.column,
        make: Editor$AgdaModeVscode.Point.make,
        translate: Editor$AgdaModeVscode.Point.translate,
        compare: Editor$AgdaModeVscode.Point.compare
      },
      pointAtOffset: Editor$AgdaModeVscode.pointAtOffset,
      offsetAtPoint: Editor$AgdaModeVscode.offsetAtPoint,
      $$Range: Editor$AgdaModeVscode.$$Range,
      editorType: Editor$AgdaModeVscode.editorType,
      getExtensionPath: Editor$AgdaModeVscode.getExtensionPath,
      getFileName: Editor$AgdaModeVscode.getFileName,
      save: Editor$AgdaModeVscode.save,
      onDidChangeFileName: Editor$AgdaModeVscode.onDidChangeFileName,
      onDidChangeActivation: Editor$AgdaModeVscode.onDidChangeActivation,
      onDidCloseEditor: Editor$AgdaModeVscode.onDidCloseEditor,
      registerCommand: Editor$AgdaModeVscode.registerCommand,
      setContext: Editor$AgdaModeVscode.setContext,
      getDisposables: Editor$AgdaModeVscode.getDisposables,
      Config: {
        getAgdaPath: Editor$AgdaModeVscode.Config.getAgdaPath,
        setAgdaPath: Editor$AgdaModeVscode.Config.setAgdaPath,
        getLibraryPath: Editor$AgdaModeVscode.Config.getLibraryPath,
        getHighlightingMethod: Editor$AgdaModeVscode.Config.getHighlightingMethod,
        getBackend: Editor$AgdaModeVscode.Config.getBackend
      },
      View: {
        make: Editor$AgdaModeVscode.View.make,
        destroy: Editor$AgdaModeVscode.View.destroy,
        show: Editor$AgdaModeVscode.View.show,
        hide: Editor$AgdaModeVscode.View.hide,
        focus: Editor$AgdaModeVscode.View.focus,
        send: Editor$AgdaModeVscode.View.send,
        onEvent: Editor$AgdaModeVscode.View.onEvent
      },
      Decoration: {
        decorate: Editor$AgdaModeVscode.Decoration.decorate,
        highlightBackground: Editor$AgdaModeVscode.Decoration.highlightBackground,
        highlightBackgroundWithColor: Editor$AgdaModeVscode.Decoration.highlightBackgroundWithColor,
        decorateText: Editor$AgdaModeVscode.Decoration.decorateText,
        decorateTextWithColor: Editor$AgdaModeVscode.Decoration.decorateTextWithColor,
        overlayText: Editor$AgdaModeVscode.Decoration.overlayText,
        overlayTextWithColor: Editor$AgdaModeVscode.Decoration.overlayTextWithColor,
        underlineText: Editor$AgdaModeVscode.Decoration.underlineText,
        destroy: Editor$AgdaModeVscode.Decoration.destroy
      },
      focus: Editor$AgdaModeVscode.focus,
      getSelectionRange: Editor$AgdaModeVscode.getSelectionRange,
      getSelectionRanges: Editor$AgdaModeVscode.getSelectionRanges,
      getCursorPosition: Editor$AgdaModeVscode.getCursorPosition,
      getCursorPositions: Editor$AgdaModeVscode.getCursorPositions,
      setCursorPosition: Editor$AgdaModeVscode.setCursorPosition,
      setCursorPositions: Editor$AgdaModeVscode.setCursorPositions,
      onChangeCursorPosition: Editor$AgdaModeVscode.onChangeCursorPosition,
      rangeForLine: Editor$AgdaModeVscode.rangeForLine,
      fromAgdaOffset: Editor$AgdaModeVscode.fromAgdaOffset,
      toAgdaOffset: Editor$AgdaModeVscode.toAgdaOffset,
      getText: Editor$AgdaModeVscode.getText,
      getTextInRange: Editor$AgdaModeVscode.getTextInRange,
      selectText: Editor$AgdaModeVscode.selectText,
      replaceText: Editor$AgdaModeVscode.replaceText,
      insertText: Editor$AgdaModeVscode.insertText,
      insertTexts: Editor$AgdaModeVscode.insertTexts,
      deleteText: Editor$AgdaModeVscode.deleteText,
      onChange: Editor$AgdaModeVscode.onChange,
      copyToClipboard: Editor$AgdaModeVscode.copyToClipboard,
      colorThemeIsDark: Editor$AgdaModeVscode.colorThemeIsDark,
      lineEndingIsCRLF: Editor$AgdaModeVscode.lineEndingIsCRLF
    });

var GoalHandler = Handle__Goal$AgdaModeVscode.Impl({
      Disposable: Editor$AgdaModeVscode.Disposable,
      Point: {
        line: Editor$AgdaModeVscode.Point.line,
        column: Editor$AgdaModeVscode.Point.column,
        make: Editor$AgdaModeVscode.Point.make,
        translate: Editor$AgdaModeVscode.Point.translate,
        compare: Editor$AgdaModeVscode.Point.compare
      },
      pointAtOffset: Editor$AgdaModeVscode.pointAtOffset,
      offsetAtPoint: Editor$AgdaModeVscode.offsetAtPoint,
      $$Range: Editor$AgdaModeVscode.$$Range,
      editorType: Editor$AgdaModeVscode.editorType,
      getExtensionPath: Editor$AgdaModeVscode.getExtensionPath,
      getFileName: Editor$AgdaModeVscode.getFileName,
      save: Editor$AgdaModeVscode.save,
      onDidChangeFileName: Editor$AgdaModeVscode.onDidChangeFileName,
      onDidChangeActivation: Editor$AgdaModeVscode.onDidChangeActivation,
      onDidCloseEditor: Editor$AgdaModeVscode.onDidCloseEditor,
      registerCommand: Editor$AgdaModeVscode.registerCommand,
      setContext: Editor$AgdaModeVscode.setContext,
      getDisposables: Editor$AgdaModeVscode.getDisposables,
      Config: {
        getAgdaPath: Editor$AgdaModeVscode.Config.getAgdaPath,
        setAgdaPath: Editor$AgdaModeVscode.Config.setAgdaPath,
        getLibraryPath: Editor$AgdaModeVscode.Config.getLibraryPath,
        getHighlightingMethod: Editor$AgdaModeVscode.Config.getHighlightingMethod,
        getBackend: Editor$AgdaModeVscode.Config.getBackend
      },
      View: {
        make: Editor$AgdaModeVscode.View.make,
        destroy: Editor$AgdaModeVscode.View.destroy,
        show: Editor$AgdaModeVscode.View.show,
        hide: Editor$AgdaModeVscode.View.hide,
        focus: Editor$AgdaModeVscode.View.focus,
        send: Editor$AgdaModeVscode.View.send,
        onEvent: Editor$AgdaModeVscode.View.onEvent
      },
      Decoration: {
        decorate: Editor$AgdaModeVscode.Decoration.decorate,
        highlightBackground: Editor$AgdaModeVscode.Decoration.highlightBackground,
        highlightBackgroundWithColor: Editor$AgdaModeVscode.Decoration.highlightBackgroundWithColor,
        decorateText: Editor$AgdaModeVscode.Decoration.decorateText,
        decorateTextWithColor: Editor$AgdaModeVscode.Decoration.decorateTextWithColor,
        overlayText: Editor$AgdaModeVscode.Decoration.overlayText,
        overlayTextWithColor: Editor$AgdaModeVscode.Decoration.overlayTextWithColor,
        underlineText: Editor$AgdaModeVscode.Decoration.underlineText,
        destroy: Editor$AgdaModeVscode.Decoration.destroy
      },
      focus: Editor$AgdaModeVscode.focus,
      getSelectionRange: Editor$AgdaModeVscode.getSelectionRange,
      getSelectionRanges: Editor$AgdaModeVscode.getSelectionRanges,
      getCursorPosition: Editor$AgdaModeVscode.getCursorPosition,
      getCursorPositions: Editor$AgdaModeVscode.getCursorPositions,
      setCursorPosition: Editor$AgdaModeVscode.setCursorPosition,
      setCursorPositions: Editor$AgdaModeVscode.setCursorPositions,
      onChangeCursorPosition: Editor$AgdaModeVscode.onChangeCursorPosition,
      rangeForLine: Editor$AgdaModeVscode.rangeForLine,
      fromAgdaOffset: Editor$AgdaModeVscode.fromAgdaOffset,
      toAgdaOffset: Editor$AgdaModeVscode.toAgdaOffset,
      getText: Editor$AgdaModeVscode.getText,
      getTextInRange: Editor$AgdaModeVscode.getTextInRange,
      selectText: Editor$AgdaModeVscode.selectText,
      replaceText: Editor$AgdaModeVscode.replaceText,
      insertText: Editor$AgdaModeVscode.insertText,
      insertTexts: Editor$AgdaModeVscode.insertTexts,
      deleteText: Editor$AgdaModeVscode.deleteText,
      onChange: Editor$AgdaModeVscode.onChange,
      copyToClipboard: Editor$AgdaModeVscode.copyToClipboard,
      colorThemeIsDark: Editor$AgdaModeVscode.colorThemeIsDark,
      lineEndingIsCRLF: Editor$AgdaModeVscode.lineEndingIsCRLF
    });

function activateExtension(fileName) {
  var Main = Main$AgdaModeVscode.Impl({
        Disposable: Editor$AgdaModeVscode.Disposable,
        Point: {
          line: Editor$AgdaModeVscode.Point.line,
          column: Editor$AgdaModeVscode.Point.column,
          make: Editor$AgdaModeVscode.Point.make,
          translate: Editor$AgdaModeVscode.Point.translate,
          compare: Editor$AgdaModeVscode.Point.compare
        },
        pointAtOffset: Editor$AgdaModeVscode.pointAtOffset,
        offsetAtPoint: Editor$AgdaModeVscode.offsetAtPoint,
        $$Range: Editor$AgdaModeVscode.$$Range,
        editorType: Editor$AgdaModeVscode.editorType,
        getExtensionPath: Editor$AgdaModeVscode.getExtensionPath,
        getFileName: Editor$AgdaModeVscode.getFileName,
        save: Editor$AgdaModeVscode.save,
        onDidChangeFileName: Editor$AgdaModeVscode.onDidChangeFileName,
        onDidChangeActivation: Editor$AgdaModeVscode.onDidChangeActivation,
        onDidCloseEditor: Editor$AgdaModeVscode.onDidCloseEditor,
        registerCommand: Editor$AgdaModeVscode.registerCommand,
        setContext: Editor$AgdaModeVscode.setContext,
        getDisposables: Editor$AgdaModeVscode.getDisposables,
        Config: {
          getAgdaPath: Editor$AgdaModeVscode.Config.getAgdaPath,
          setAgdaPath: Editor$AgdaModeVscode.Config.setAgdaPath,
          getLibraryPath: Editor$AgdaModeVscode.Config.getLibraryPath,
          getHighlightingMethod: Editor$AgdaModeVscode.Config.getHighlightingMethod,
          getBackend: Editor$AgdaModeVscode.Config.getBackend
        },
        View: {
          make: Editor$AgdaModeVscode.View.make,
          destroy: Editor$AgdaModeVscode.View.destroy,
          show: Editor$AgdaModeVscode.View.show,
          hide: Editor$AgdaModeVscode.View.hide,
          focus: Editor$AgdaModeVscode.View.focus,
          send: Editor$AgdaModeVscode.View.send,
          onEvent: Editor$AgdaModeVscode.View.onEvent
        },
        Decoration: {
          decorate: Editor$AgdaModeVscode.Decoration.decorate,
          highlightBackground: Editor$AgdaModeVscode.Decoration.highlightBackground,
          highlightBackgroundWithColor: Editor$AgdaModeVscode.Decoration.highlightBackgroundWithColor,
          decorateText: Editor$AgdaModeVscode.Decoration.decorateText,
          decorateTextWithColor: Editor$AgdaModeVscode.Decoration.decorateTextWithColor,
          overlayText: Editor$AgdaModeVscode.Decoration.overlayText,
          overlayTextWithColor: Editor$AgdaModeVscode.Decoration.overlayTextWithColor,
          underlineText: Editor$AgdaModeVscode.Decoration.underlineText,
          destroy: Editor$AgdaModeVscode.Decoration.destroy
        },
        focus: Editor$AgdaModeVscode.focus,
        getSelectionRange: Editor$AgdaModeVscode.getSelectionRange,
        getSelectionRanges: Editor$AgdaModeVscode.getSelectionRanges,
        getCursorPosition: Editor$AgdaModeVscode.getCursorPosition,
        getCursorPositions: Editor$AgdaModeVscode.getCursorPositions,
        setCursorPosition: Editor$AgdaModeVscode.setCursorPosition,
        setCursorPositions: Editor$AgdaModeVscode.setCursorPositions,
        onChangeCursorPosition: Editor$AgdaModeVscode.onChangeCursorPosition,
        rangeForLine: Editor$AgdaModeVscode.rangeForLine,
        fromAgdaOffset: Editor$AgdaModeVscode.fromAgdaOffset,
        toAgdaOffset: Editor$AgdaModeVscode.toAgdaOffset,
        getText: Editor$AgdaModeVscode.getText,
        getTextInRange: Editor$AgdaModeVscode.getTextInRange,
        selectText: Editor$AgdaModeVscode.selectText,
        replaceText: Editor$AgdaModeVscode.replaceText,
        insertText: Editor$AgdaModeVscode.insertText,
        insertTexts: Editor$AgdaModeVscode.insertTexts,
        deleteText: Editor$AgdaModeVscode.deleteText,
        onChange: Editor$AgdaModeVscode.onChange,
        copyToClipboard: Editor$AgdaModeVscode.copyToClipboard,
        colorThemeIsDark: Editor$AgdaModeVscode.colorThemeIsDark,
        lineEndingIsCRLF: Editor$AgdaModeVscode.lineEndingIsCRLF
      });
  var disposables = [];
  var extensionPath = Test__Util$AgdaModeVscode.Path.extensionPath(undefined);
  var emitter = Curry._2(Main.activateWithoutContext, disposables, extensionPath);
  return $$Promise.map(Test__Util$AgdaModeVscode.openTextEditor(fileName), (function (editor) {
                return {
                        editor: editor,
                        emitter: emitter
                      };
              }));
}

function acquire(setup) {
  var setup$1 = setup.contents;
  if (setup$1 !== undefined) {
    return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [Caml_option.valFromOption(setup$1)]));
  } else {
    return $$Promise.resolved(/* Error */Caml_chrome_debugger.variant("Error", 1, [[
                    Util$AgdaModeVscode.$$Error,
                    "Cannot acquire the setup"
                  ]]));
  }
}

function cleanup(setup) {
  var range = Editor$AgdaModeVscode.$$Range.make(Editor$AgdaModeVscode.Point.make(0, 0), Editor$AgdaModeVscode.Point.make(100, 0));
  return $$Promise.map(Editor$AgdaModeVscode.replaceText(setup.editor, range, ""), (function (param) {
                return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [undefined]);
              }));
}

function insertChar(setup, $$char) {
  var promise = Curry._1(setup.emitter.once, undefined);
  var positions = Editor$AgdaModeVscode.getCursorPositions(setup.editor);
  return $$Promise.map($$Promise.flatMap(Editor$AgdaModeVscode.insertTexts(setup.editor, positions, $$char), (function (param) {
                    return promise;
                  })), (function (x) {
                return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [x]);
              }));
}

function backspace(setup) {
  var promise = Curry._1(setup.emitter.once, undefined);
  var end_ = Editor$AgdaModeVscode.getCursorPosition(setup.editor);
  var start = Editor$AgdaModeVscode.Point.translate(end_, 0, -1);
  var range = Editor$AgdaModeVscode.$$Range.make(start, end_);
  return $$Promise.map($$Promise.flatMap(Editor$AgdaModeVscode.deleteText(setup.editor, range), (function (param) {
                    return promise;
                  })), (function (x) {
                return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [x]);
              }));
}

function activate(setup, positions, param) {
  var promise = Curry._1(setup.emitter.once, undefined);
  var positions$1 = Belt_Option.getWithDefault(positions, [Editor$AgdaModeVscode.getCursorPosition(setup.editor)]);
  Editor$AgdaModeVscode.setCursorPositions(setup.editor, positions$1);
  return $$Promise.map($$Promise.flatMap($$Promise.flatMap(Vscode.commands.executeCommand("agda-mode.input-symbol[Activate]"), (function (result) {
                        return result;
                      })), (function (param) {
                    return promise;
                  })), (function (x) {
                return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [x]);
              }));
}

function deactivate(setup) {
  var promise = Curry._1(setup.emitter.once, undefined);
  return $$Promise.map($$Promise.flatMap($$Promise.flatMap(Vscode.commands.executeCommand("agda-mode.escape"), (function (result) {
                        return result;
                      })), (function (param) {
                    return promise;
                  })), (function (x) {
                return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [x]);
              }));
}

var IM = {
  activate: activate,
  deactivate: deactivate
};

Mocha$BsMocha.describe("Input Method (Editor)")(undefined, undefined, undefined, (function (param) {
        var setup = {
          contents: undefined
        };
        Test__Util$AgdaModeVscode.Q.before((function (param) {
                return $$Promise.map(activateExtension(Test__Util$AgdaModeVscode.Path.asset("InputMethod.agda")), (function (value) {
                              setup.contents = value;
                              return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [undefined]);
                            }));
              }));
        Test__Util$AgdaModeVscode.Q.after_each((function (param) {
                return $$Promise.mapOk(acquire(setup), cleanup);
              }));
        Mocha$BsMocha.describe("Insertion")(undefined, undefined, undefined, (function (param) {
                Test__Util$AgdaModeVscode.Q.it("should translate \"lambdabar\" to \"λ\"", (function (param) {
                        return $$Promise.flatMapOk(acquire(setup), (function (setup) {
                                      return $$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk(activate(setup, undefined, undefined), (function (param) {
                                                                                                                                                                return Test__Util$AgdaModeVscode.A.equal(/* Activate */1, param);
                                                                                                                                                              })), (function (param) {
                                                                                                                                                            return insertChar(setup, "l");
                                                                                                                                                          })), (function (param) {
                                                                                                                                                        return Test__Util$AgdaModeVscode.A.equal(/* Change */0, param);
                                                                                                                                                      })), (function (param) {
                                                                                                                                                    return Test__Util$AgdaModeVscode.A.equal("←", Editor$AgdaModeVscode.getText(setup.editor));
                                                                                                                                                  })), (function (param) {
                                                                                                                                                return insertChar(setup, "a");
                                                                                                                                              })), (function (param) {
                                                                                                                                            return Test__Util$AgdaModeVscode.A.equal(/* Change */0, param);
                                                                                                                                          })), (function (param) {
                                                                                                                                        return Test__Util$AgdaModeVscode.A.equal("←a", Editor$AgdaModeVscode.getText(setup.editor));
                                                                                                                                      })), (function (param) {
                                                                                                                                    return insertChar(setup, "m");
                                                                                                                                  })), (function (param) {
                                                                                                                                return Test__Util$AgdaModeVscode.A.equal(/* Change */0, param);
                                                                                                                              })), (function (param) {
                                                                                                                            return Test__Util$AgdaModeVscode.A.equal("←am", Editor$AgdaModeVscode.getText(setup.editor));
                                                                                                                          })), (function (param) {
                                                                                                                        return insertChar(setup, "b");
                                                                                                                      })), (function (param) {
                                                                                                                    return Test__Util$AgdaModeVscode.A.equal(/* Change */0, param);
                                                                                                                  })), (function (param) {
                                                                                                                return Test__Util$AgdaModeVscode.A.equal("←amb", Editor$AgdaModeVscode.getText(setup.editor));
                                                                                                              })), (function (param) {
                                                                                                            return insertChar(setup, "d");
                                                                                                          })), (function (param) {
                                                                                                        return Test__Util$AgdaModeVscode.A.equal(/* Change */0, param);
                                                                                                      })), (function (param) {
                                                                                                    return Test__Util$AgdaModeVscode.A.equal("←ambd", Editor$AgdaModeVscode.getText(setup.editor));
                                                                                                  })), (function (param) {
                                                                                                return insertChar(setup, "a");
                                                                                              })), (function (param) {
                                                                                            return Test__Util$AgdaModeVscode.A.equal(/* Change */0, param);
                                                                                          })), (function (param) {
                                                                                        return Test__Util$AgdaModeVscode.A.equal("λ", Editor$AgdaModeVscode.getText(setup.editor));
                                                                                      })), (function (param) {
                                                                                    return insertChar(setup, "b");
                                                                                  })), (function (param) {
                                                                                return Test__Util$AgdaModeVscode.A.equal(/* Change */0, param);
                                                                              })), (function (param) {
                                                                            return Test__Util$AgdaModeVscode.A.equal("λb", Editor$AgdaModeVscode.getText(setup.editor));
                                                                          })), (function (param) {
                                                                        return insertChar(setup, "a");
                                                                      })), (function (param) {
                                                                    return Test__Util$AgdaModeVscode.A.equal(/* Change */0, param);
                                                                  })), (function (param) {
                                                                return Test__Util$AgdaModeVscode.A.equal("λba", Editor$AgdaModeVscode.getText(setup.editor));
                                                              })), (function (param) {
                                                            return insertChar(setup, "r");
                                                          })), (function (param) {
                                                        return Test__Util$AgdaModeVscode.A.equal(/* Change */0, param);
                                                      })), (function (param) {
                                                    return Test__Util$AgdaModeVscode.A.equal("ƛ", Editor$AgdaModeVscode.getText(setup.editor));
                                                  }));
                                    }));
                      }));
                return Test__Util$AgdaModeVscode.Q.it("should translate \"bn\" to \"𝕟\"", (function (param) {
                              return $$Promise.flatMapOk(acquire(setup), (function (setup) {
                                            return $$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk(activate(setup, undefined, undefined), (function (param) {
                                                                                  return Test__Util$AgdaModeVscode.A.equal(/* Activate */1, param);
                                                                                })), (function (param) {
                                                                              return insertChar(setup, "b");
                                                                            })), (function (param) {
                                                                          return Test__Util$AgdaModeVscode.A.equal(/* Change */0, param);
                                                                        })), (function (param) {
                                                                      return Test__Util$AgdaModeVscode.A.equal("♭", Editor$AgdaModeVscode.getText(setup.editor));
                                                                    })), (function (param) {
                                                                  return insertChar(setup, "n");
                                                                })), (function (param) {
                                                              return Test__Util$AgdaModeVscode.A.equal(/* Change */0, param);
                                                            })), (function (param) {
                                                          return Test__Util$AgdaModeVscode.A.equal("𝕟", Editor$AgdaModeVscode.getText(setup.editor));
                                                        }));
                                          }));
                            }));
              }));
        Mocha$BsMocha.describe("Backspacing")(undefined, undefined, undefined, (function (param) {
                return Test__Util$AgdaModeVscode.Q.it("should work just fine", (function (param) {
                              return $$Promise.flatMapOk(acquire(setup), (function (setup) {
                                            return $$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk(activate(setup, undefined, undefined), (function (param) {
                                                                                                                                                      return Test__Util$AgdaModeVscode.A.equal(/* Activate */1, param);
                                                                                                                                                    })), (function (param) {
                                                                                                                                                  return insertChar(setup, "l");
                                                                                                                                                })), (function (param) {
                                                                                                                                              return Test__Util$AgdaModeVscode.A.equal(/* Change */0, param);
                                                                                                                                            })), (function (param) {
                                                                                                                                          return Test__Util$AgdaModeVscode.A.equal("←", Editor$AgdaModeVscode.getText(setup.editor));
                                                                                                                                        })), (function (param) {
                                                                                                                                      return insertChar(setup, "a");
                                                                                                                                    })), (function (param) {
                                                                                                                                  return Test__Util$AgdaModeVscode.A.equal(/* Change */0, param);
                                                                                                                                })), (function (param) {
                                                                                                                              return Test__Util$AgdaModeVscode.A.equal("←a", Editor$AgdaModeVscode.getText(setup.editor));
                                                                                                                            })), (function (param) {
                                                                                                                          return insertChar(setup, "m");
                                                                                                                        })), (function (param) {
                                                                                                                      return Test__Util$AgdaModeVscode.A.equal(/* Change */0, param);
                                                                                                                    })), (function (param) {
                                                                                                                  return Test__Util$AgdaModeVscode.A.equal("←am", Editor$AgdaModeVscode.getText(setup.editor));
                                                                                                                })), (function (param) {
                                                                                                              return insertChar(setup, "b");
                                                                                                            })), (function (param) {
                                                                                                          return Test__Util$AgdaModeVscode.A.equal(/* Change */0, param);
                                                                                                        })), (function (param) {
                                                                                                      return Test__Util$AgdaModeVscode.A.equal("←amb", Editor$AgdaModeVscode.getText(setup.editor));
                                                                                                    })), (function (param) {
                                                                                                  return insertChar(setup, "d");
                                                                                                })), (function (param) {
                                                                                              return Test__Util$AgdaModeVscode.A.equal(/* Change */0, param);
                                                                                            })), (function (param) {
                                                                                          return Test__Util$AgdaModeVscode.A.equal("←ambd", Editor$AgdaModeVscode.getText(setup.editor));
                                                                                        })), (function (param) {
                                                                                      return insertChar(setup, "a");
                                                                                    })), (function (param) {
                                                                                  return Test__Util$AgdaModeVscode.A.equal(/* Change */0, param);
                                                                                })), (function (param) {
                                                                              return Test__Util$AgdaModeVscode.A.equal("λ", Editor$AgdaModeVscode.getText(setup.editor));
                                                                            })), (function (param) {
                                                                          return backspace(setup);
                                                                        })), (function (param) {
                                                                      return Test__Util$AgdaModeVscode.A.equal(/* Change */0, param);
                                                                    })), (function (param) {
                                                                  return Test__Util$AgdaModeVscode.A.equal("lambd", Editor$AgdaModeVscode.getText(setup.editor));
                                                                })), (function (param) {
                                                              return deactivate(setup);
                                                            })), (function (param) {
                                                          return Test__Util$AgdaModeVscode.A.equal(/* Deactivate */2, param);
                                                        }));
                                          }));
                            }));
              }));
        return Mocha$BsMocha.describe("Multiple cursors at once")(undefined, undefined, undefined, (function (param) {
                      var positions = [
                        Editor$AgdaModeVscode.Point.make(0, 0),
                        Editor$AgdaModeVscode.Point.make(1, 0),
                        Editor$AgdaModeVscode.Point.make(2, 0),
                        Editor$AgdaModeVscode.Point.make(3, 0)
                      ];
                      return Test__Util$AgdaModeVscode.Q.it("should work just fine", (function (param) {
                                    return $$Promise.flatMapOk(acquire(setup), (function (setup) {
                                                  return $$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMap(Editor$AgdaModeVscode.insertText(setup.editor, Editor$AgdaModeVscode.Point.make(0, 0), "\n\n\n"), (function (param) {
                                                                                            return activate(setup, positions, undefined);
                                                                                          })), (function (param) {
                                                                                        return Test__Util$AgdaModeVscode.A.equal(/* Activate */1, param);
                                                                                      })), (function (param) {
                                                                                    return insertChar(setup, "b");
                                                                                  })), (function (param) {
                                                                                return Test__Util$AgdaModeVscode.A.equal(/* Change */0, param);
                                                                              })), (function (param) {
                                                                            return Test__Util$AgdaModeVscode.A.equal("♭\n♭\n♭\n♭", Editor$AgdaModeVscode.getText(setup.editor));
                                                                          })), (function (param) {
                                                                        return insertChar(setup, "n");
                                                                      })), (function (param) {
                                                                    return Test__Util$AgdaModeVscode.A.equal(/* Change */0, param);
                                                                  })), (function (param) {
                                                                return Test__Util$AgdaModeVscode.A.equal("𝕟\n𝕟\n𝕟\n𝕟", Editor$AgdaModeVscode.getText(setup.editor));
                                                              }));
                                                }));
                                  }));
                    }));
      }));

var Console;

var Exn;

var JsPromise;

exports.Goal = Goal;
exports.Task = Task;
exports.EditorIM = EditorIM;
exports.GoalHandler = GoalHandler;
exports.Console = Console;
exports.Exn = Exn;
exports.JsPromise = JsPromise;
exports.activateExtension = activateExtension;
exports.acquire = acquire;
exports.cleanup = cleanup;
exports.insertChar = insertChar;
exports.backspace = backspace;
exports.IM = IM;
/* Goal Not a pure module */
