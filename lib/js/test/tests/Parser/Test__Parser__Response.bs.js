// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Js_promise = require("rescript/lib/js/js_promise.js");
var Mocha$BsMocha = require("bs-mocha/lib/js/src/Mocha.bs.js");
var Assert$BsMocha = require("bs-mocha/lib/js/src/Assert.bs.js");
var Promise$BsMocha = require("bs-mocha/lib/js/src/Promise.bs.js");
var Parser$AgdaModeVscode = require("../../../src/Parser/Parser.bs.js");
var Response$AgdaModeVscode = require("../../../src/Response.bs.js");
var Test__Util$AgdaModeVscode = require("../Test__Util.bs.js");
var Test__Parser__SExpression$AgdaModeVscode = require("./Test__Parser__SExpression.bs.js");

function toPrioritizedResponses(exprs) {
  return Belt_Array.concatMany(Belt_Array.map(Belt_Array.map(exprs, Response$AgdaModeVscode.Prioritized.parse), (function (x) {
                    if (x.TAG === /* Ok */0) {
                      return [x._0];
                    }
                    Assert$BsMocha.fail(Parser$AgdaModeVscode.$$Error.toString(x._0));
                    return [];
                  })));
}

Mocha$BsMocha.describe("when parsing responses")(undefined, undefined, undefined, (function (param) {
        Belt_Array.forEach(Test__Util$AgdaModeVscode.Golden.getGoldenFilepathsSync("../../../../test/tests/Parser/Response"), (function (filepath) {
                Promise$BsMocha.it("should golden test " + filepath)(undefined, undefined, undefined, (function (param) {
                        return Js_promise.then_((function (raw) {
                                      var partial_arg = [];
                                      return Test__Util$AgdaModeVscode.Golden.compare(Test__Util$AgdaModeVscode.Golden.map(Test__Util$AgdaModeVscode.Golden.map(Test__Util$AgdaModeVscode.Golden.map(raw, (function (param) {
                                                                return Test__Parser__SExpression$AgdaModeVscode.parseSExpression(partial_arg, param);
                                                              })), toPrioritizedResponses), (function (param) {
                                                        return Test__Util$AgdaModeVscode.Strings.serializeWith(Response$AgdaModeVscode.Prioritized.toString, param);
                                                      })));
                                    }), Test__Util$AgdaModeVscode.Golden.readFile(filepath));
                      }));
              }));
      }));

exports.toPrioritizedResponses = toPrioritizedResponses;
/*  Not a pure module */
