// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function toString(param) {
  switch (param) {
    case /* Simplified */0 :
        return "Simplified";
    case /* Instantiated */1 :
        return "Instantiated";
    case /* Normalised */2 :
        return "Normalised";
    
  }
}

var Normalization = {
  toString: toString
};

var names = [
  /* tuple */[
    /* Load */0,
    "load"
  ],
  /* tuple */[
    /* Quit */1,
    "quit"
  ],
  /* tuple */[
    /* NextGoal */2,
    "next-goal"
  ],
  /* tuple */[
    /* PreviousGoal */3,
    "previous-goal"
  ],
  /* tuple */[
    /* GoalType */Caml_chrome_debugger.variant("GoalType", 0, [/* Simplified */0]),
    "goal-type[Simplified]"
  ],
  /* tuple */[
    /* GoalType */Caml_chrome_debugger.variant("GoalType", 0, [/* Instantiated */1]),
    "goal-type[Instantiated]"
  ],
  /* tuple */[
    /* GoalType */Caml_chrome_debugger.variant("GoalType", 0, [/* Normalised */2]),
    "goal-type[Normalised]"
  ]
];

function toString$1(param) {
  if (typeof param === "number") {
    switch (param) {
      case /* Load */0 :
          return "Load";
      case /* Quit */1 :
          return "Quit";
      case /* NextGoal */2 :
          return "NextGoal";
      case /* PreviousGoal */3 :
          return "PreviousGoal";
      
    }
  } else {
    if (param.tag) {
      return "ViewResponse";
    }
    switch (param[0]) {
      case /* Simplified */0 :
          return "goal-type[Simplified]";
      case /* Instantiated */1 :
          return "goal-type[Instantiated]";
      case /* Normalised */2 :
          return "goal-type[Normalised]";
      
    }
  }
}

exports.Normalization = Normalization;
exports.names = names;
exports.toString = toString$1;
/* No side effect */
