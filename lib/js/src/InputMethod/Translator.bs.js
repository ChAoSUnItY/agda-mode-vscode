// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var QueryJs = require("./../../../../asset/query.js");
var KeymapJs = require("./../../../../asset/keymap.js");

var rawTable = QueryJs.default;

var rawKeymapObject = KeymapJs.default;

function fromObject(obj) {
  var symbol = (obj[">>"] || []);
  var subTrie = Js_dict.fromArray(Belt_Array.map(Belt_Array.keep(Object.keys(obj), (function (key) {
                  return key !== ">>";
                })), (function (key) {
              return /* tuple */[
                      key,
                      fromObject((obj[key]))
                    ];
            })));
  return {
          symbol: symbol,
          subTrie: subTrie
        };
}

var keymap = fromObject(rawKeymapObject);

function toKeySuggestions(trie) {
  return Object.keys(trie.subTrie);
}

function toCandidateSymbols(trie) {
  return trie.symbol;
}

function isInKeymap(input) {
  var _input = input;
  var _trie = keymap;
  while(true) {
    var trie = _trie;
    var input$1 = _input;
    var n = input$1.length;
    if (n === 0) {
      return trie;
    }
    var key = input$1.substr(0, 1);
    var rest = input$1.substr(1, n - 1 | 0);
    var trie$prime = Js_dict.get(trie.subTrie, key);
    if (trie$prime === undefined) {
      return ;
    }
    _trie = trie$prime;
    _input = rest;
    continue ;
  };
}

function translate(input) {
  var trie = isInKeymap(input);
  var keySuggestions = Belt_Option.mapWithDefault(trie, [], toKeySuggestions);
  var candidateSymbols = Belt_Option.mapWithDefault(trie, [], toCandidateSymbols);
  return {
          symbol: Belt_Array.get(candidateSymbols, 0),
          further: keySuggestions.length !== 0,
          keySuggestions: keySuggestions,
          candidateSymbols: candidateSymbols
        };
}

var initialTranslation = translate("");

function lookup(symbol) {
  return Belt_Option.flatMap(Belt_Option.map(symbol.codePointAt(0), (function (prim) {
                    return String(prim);
                  })), (function (param) {
                return Js_dict.get(rawTable, param);
              }));
}

exports.rawTable = rawTable;
exports.rawKeymapObject = rawKeymapObject;
exports.fromObject = fromObject;
exports.keymap = keymap;
exports.toKeySuggestions = toKeySuggestions;
exports.toCandidateSymbols = toCandidateSymbols;
exports.isInKeymap = isInKeymap;
exports.translate = translate;
exports.initialTranslation = initialTranslation;
exports.lookup = lookup;
/* rawTable Not a pure module */
