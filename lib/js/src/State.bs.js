// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Vscode = require("vscode");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Goal$AgdaModeVscode = require("./Goal.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Event$AgdaModeVscode = require("./Util/Event.bs.js");
var Config$AgdaModeVscode = require("./Config.bs.js");
var EditorIM$AgdaModeVscode = require("./InputMethod/EditorIM.bs.js");
var PromptIM$AgdaModeVscode = require("./InputMethod/PromptIM.bs.js");
var Connection$AgdaModeVscode = require("./Connection.bs.js");
var Decoration$AgdaModeVscode = require("./Decoration.bs.js");
var View__Controller$AgdaModeVscode = require("./View__Controller.bs.js");

function getEditor(state) {
  return state.editor;
}

function onRemoveFromRegistry(state) {
  return Curry._1(state.onRemoveFromRegistry.once, undefined);
}

function emitRemoveFromRegistry(state) {
  return Curry._1(state.onRemoveFromRegistry.emit, undefined);
}

function connect(state) {
  var connection = state.connection;
  if (connection !== undefined) {
    return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [connection]));
  } else {
    return $$Promise.tapOk($$Promise.mapError(Connection$AgdaModeVscode.make(Config$AgdaModeVscode.getAgdaPath, Config$AgdaModeVscode.setAgdaPath), (function (e) {
                      return /* Connection */Caml_chrome_debugger.variant("Connection", 0, [e]);
                    })), (function (conn) {
                  state.connection = conn;
                  
                }));
  }
}

function disconnect(state) {
  var connection = state.connection;
  if (connection !== undefined) {
    Connection$AgdaModeVscode.destroy(connection);
    return $$Promise.resolved(undefined);
  } else {
    return $$Promise.resolved(undefined);
  }
}

function setLoaded(value) {
  Vscode.commands.executeCommand("setContext", "agdaMode", value);
  
}

function destroy(state) {
  View__Controller$AgdaModeVscode.destroy(state.view);
  Curry._1(state.onRemoveFromRegistry.destroy, undefined);
  Belt_Array.forEach(state.goals, Goal$AgdaModeVscode.destroy);
  Decoration$AgdaModeVscode.destroy(state.decorations);
  Vscode.commands.executeCommand("setContext", "agdaMode", false);
  Belt_Array.forEach(state.subscriptions, (function (prim) {
          return prim.dispose();
        }));
  return disconnect(state);
}

function make(extentionPath, eventEmitter, editor) {
  Vscode.commands.executeCommand("setContext", "agdaMode", true);
  var view = View__Controller$AgdaModeVscode.make(extentionPath, editor);
  return {
          editor: editor,
          view: view,
          connection: undefined,
          goals: [],
          decorations: Decoration$AgdaModeVscode.make(undefined),
          cursor: undefined,
          editorIM: EditorIM$AgdaModeVscode.make(eventEmitter),
          promptIM: PromptIM$AgdaModeVscode.make(undefined),
          subscriptions: [],
          onRemoveFromRegistry: Event$AgdaModeVscode.make(undefined)
        };
}

function show(state) {
  View__Controller$AgdaModeVscode.show(state.view);
  Vscode.commands.executeCommand("setContext", "agdaMode", true);
  
}

function hide(state) {
  View__Controller$AgdaModeVscode.hide(state.view);
  Vscode.commands.executeCommand("setContext", "agdaMode", false);
  
}

function sendRequestToView(state, request) {
  return View__Controller$AgdaModeVscode.send(state.view, /* Request */Caml_chrome_debugger.variant("Request", 0, [request]));
}

function sendEventToView(state, $$event) {
  return View__Controller$AgdaModeVscode.send(state.view, /* Event */Caml_chrome_debugger.variant("Event", 1, [$$event]));
}

var VSRange;

exports.VSRange = VSRange;
exports.getEditor = getEditor;
exports.onRemoveFromRegistry = onRemoveFromRegistry;
exports.emitRemoveFromRegistry = emitRemoveFromRegistry;
exports.connect = connect;
exports.disconnect = disconnect;
exports.setLoaded = setLoaded;
exports.destroy = destroy;
exports.make = make;
exports.show = show;
exports.hide = hide;
exports.sendRequestToView = sendRequestToView;
exports.sendEventToView = sendEventToView;
/* vscode Not a pure module */
