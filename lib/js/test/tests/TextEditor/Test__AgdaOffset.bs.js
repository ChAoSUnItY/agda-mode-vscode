// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Vscode = require("vscode");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Mocha$BsMocha = require("bs-mocha/lib/js/src/Mocha.bs.js");
var Assert$BsMocha = require("bs-mocha/lib/js/src/Assert.bs.js");
var Promise$BsMocha = require("bs-mocha/lib/js/src/Promise.bs.js");
var Agda$AgdaModeVscode = require("../../../src/Agda.bs.js");
var Editor$AgdaModeVscode = require("../../../src/Editor.bs.js");

var issue7 = "module Issue7 where\n-- 𝕁\na = {!   !}";

function openEditorWithContent(content) {
  return $$Promise.flatMap(Vscode.workspace.openTextDocument({
                  content: content,
                  language: "agda"
                }), (function (textDocument) {
                return Vscode.window.showTextDocument(textDocument, undefined);
              }));
}

Mocha$BsMocha.describe("Conversion between Agda Offsets and Editor Offsets")(undefined, undefined, undefined, (function (param) {
        Mocha$BsMocha.describe("Agda.OffsetConverter.characterWidth")(undefined, undefined, undefined, (function (param) {
                Mocha$BsMocha.it("should calculate the width of some grapheme cluster")(undefined, undefined, undefined, (function (param) {
                        var actual = Agda$AgdaModeVscode.OffsetConverter.characterWidth("𝐀");
                        return Assert$BsMocha.deep_equal(undefined, actual, 1);
                      }));
                return Mocha$BsMocha.it("should calculate the width of some ordinary ASCII character")(undefined, undefined, undefined, (function (param) {
                              var actual = Agda$AgdaModeVscode.OffsetConverter.characterWidth("a");
                              return Assert$BsMocha.deep_equal(undefined, actual, 1);
                            }));
              }));
        Mocha$BsMocha.describe("Agda.OffsetConverter.computeUTF16SurrogatePairIndices")(undefined, undefined, undefined, (function (param) {
                return Mocha$BsMocha.it("should work")(undefined, undefined, undefined, (function (param) {
                              Assert$BsMocha.deep_equal(undefined, Agda$AgdaModeVscode.OffsetConverter.computeUTF16SurrogatePairIndices("𝐀𝐀𝐀𝐀\n𝐀𝐀𝐀𝐀"), [
                                    0,
                                    2,
                                    4,
                                    6,
                                    9,
                                    11,
                                    13,
                                    15
                                  ]);
                              Assert$BsMocha.deep_equal(undefined, Agda$AgdaModeVscode.OffsetConverter.computeUTF16SurrogatePairIndices("𝐀a𝐁bb𝐂c𝐃dd𝐄e𝐅𝐆𝐇\na"), [
                                    0,
                                    3,
                                    7,
                                    10,
                                    14,
                                    17,
                                    19,
                                    21
                                  ]);
                              return Assert$BsMocha.deep_equal(undefined, Agda$AgdaModeVscode.OffsetConverter.computeUTF16SurrogatePairIndices(issue7), [23]);
                            }));
              }));
        Mocha$BsMocha.describe("Common.Indices.make")(undefined, undefined, undefined, (function (param) {
                return Mocha$BsMocha.it("should work")(undefined, undefined, undefined, (function (param) {
                              Assert$BsMocha.deep_equal(undefined, Agda$AgdaModeVscode.Indices.expose(Agda$AgdaModeVscode.Indices.make(Agda$AgdaModeVscode.OffsetConverter.computeUTF16SurrogatePairIndices("𝐀𝐀𝐀𝐀\n𝐀𝐀𝐀𝐀")))[0], [
                                    [
                                      0,
                                      0
                                    ],
                                    [
                                      1,
                                      1
                                    ],
                                    [
                                      2,
                                      2
                                    ],
                                    [
                                      3,
                                      3
                                    ],
                                    [
                                      4,
                                      5
                                    ],
                                    [
                                      6,
                                      6
                                    ],
                                    [
                                      7,
                                      7
                                    ],
                                    [
                                      8,
                                      8
                                    ]
                                  ]);
                              return Assert$BsMocha.deep_equal(undefined, Agda$AgdaModeVscode.Indices.expose(Agda$AgdaModeVscode.Indices.make(Agda$AgdaModeVscode.OffsetConverter.computeUTF16SurrogatePairIndices("𝐀a𝐁bb𝐂c𝐃dd𝐄e𝐅𝐆𝐇\na")))[0], [
                                          [
                                            0,
                                            0
                                          ],
                                          [
                                            1,
                                            2
                                          ],
                                          [
                                            3,
                                            5
                                          ],
                                          [
                                            6,
                                            7
                                          ],
                                          [
                                            8,
                                            10
                                          ],
                                          [
                                            11,
                                            12
                                          ],
                                          [
                                            13,
                                            13
                                          ],
                                          [
                                            14,
                                            14
                                          ]
                                        ]);
                            }));
              }));
        Mocha$BsMocha.describe("Common.Indices.convert")(undefined, undefined, undefined, (function (param) {
                Mocha$BsMocha.it("should work")(undefined, undefined, undefined, (function (param) {
                        var a = Agda$AgdaModeVscode.Indices.make(Agda$AgdaModeVscode.OffsetConverter.computeUTF16SurrogatePairIndices("𝐀𝐀𝐀𝐀\n𝐀𝐀𝐀𝐀"));
                        Assert$BsMocha.deep_equal(undefined, Agda$AgdaModeVscode.Indices.convert(a, 0), 0);
                        Assert$BsMocha.deep_equal(undefined, Agda$AgdaModeVscode.Indices.expose(a)[1], 0);
                        Assert$BsMocha.deep_equal(undefined, Agda$AgdaModeVscode.Indices.convert(a, 1), 2);
                        Assert$BsMocha.deep_equal(undefined, Agda$AgdaModeVscode.Indices.expose(a)[1], 1);
                        Assert$BsMocha.deep_equal(undefined, Agda$AgdaModeVscode.Indices.convert(a, 2), 4);
                        Assert$BsMocha.deep_equal(undefined, Agda$AgdaModeVscode.Indices.expose(a)[1], 2);
                        Assert$BsMocha.deep_equal(undefined, Agda$AgdaModeVscode.Indices.convert(a, 3), 6);
                        Assert$BsMocha.deep_equal(undefined, Agda$AgdaModeVscode.Indices.expose(a)[1], 3);
                        Assert$BsMocha.deep_equal(undefined, Agda$AgdaModeVscode.Indices.convert(a, 0), 0);
                        Assert$BsMocha.deep_equal(undefined, Agda$AgdaModeVscode.Indices.expose(a)[1], 0);
                        Assert$BsMocha.deep_equal(undefined, Agda$AgdaModeVscode.Indices.convert(a, 4), 8);
                        Assert$BsMocha.deep_equal(undefined, Agda$AgdaModeVscode.Indices.convert(a, 5), 9);
                        Assert$BsMocha.deep_equal(undefined, Agda$AgdaModeVscode.Indices.convert(a, 6), 11);
                        Assert$BsMocha.deep_equal(undefined, Agda$AgdaModeVscode.Indices.convert(a, 7), 13);
                        Assert$BsMocha.deep_equal(undefined, Agda$AgdaModeVscode.Indices.convert(a, 8), 15);
                        Assert$BsMocha.deep_equal(undefined, Agda$AgdaModeVscode.Indices.convert(a, 9), 17);
                        return Assert$BsMocha.deep_equal(undefined, Agda$AgdaModeVscode.Indices.expose(a)[1], 8);
                      }));
                return Mocha$BsMocha.it("issue #7")(undefined, undefined, undefined, (function (param) {
                              var a = Agda$AgdaModeVscode.Indices.make(Agda$AgdaModeVscode.OffsetConverter.computeUTF16SurrogatePairIndices(issue7));
                              Assert$BsMocha.deep_equal(undefined, Agda$AgdaModeVscode.Indices.convert(a, 0), 0);
                              Assert$BsMocha.deep_equal(undefined, Agda$AgdaModeVscode.Indices.convert(a, 6), 6);
                              Assert$BsMocha.deep_equal(undefined, Agda$AgdaModeVscode.Indices.convert(a, 14), 14);
                              Assert$BsMocha.deep_equal(undefined, Agda$AgdaModeVscode.Indices.convert(a, 19), 19);
                              Assert$BsMocha.deep_equal(undefined, Agda$AgdaModeVscode.Indices.convert(a, 20), 20);
                              Assert$BsMocha.deep_equal(undefined, Agda$AgdaModeVscode.Indices.expose(a)[1], 0);
                              Assert$BsMocha.deep_equal(undefined, Agda$AgdaModeVscode.Indices.convert(a, 24), 25);
                              Assert$BsMocha.deep_equal(undefined, Agda$AgdaModeVscode.Indices.expose(a)[1], 1);
                              Assert$BsMocha.deep_equal(undefined, Agda$AgdaModeVscode.Indices.convert(a, 27), 28);
                              Assert$BsMocha.deep_equal(undefined, Agda$AgdaModeVscode.Indices.convert(a, 28), 29);
                              Assert$BsMocha.deep_equal(undefined, Agda$AgdaModeVscode.Indices.convert(a, 29), 30);
                              Assert$BsMocha.deep_equal(undefined, Agda$AgdaModeVscode.Indices.convert(a, 36), 37);
                              Assert$BsMocha.deep_equal(undefined, Agda$AgdaModeVscode.Indices.expose(a)[1], 1);
                              Assert$BsMocha.deep_equal(undefined, Agda$AgdaModeVscode.Indices.convert(a, 0), 0);
                              Assert$BsMocha.deep_equal(undefined, Agda$AgdaModeVscode.Indices.expose(a)[1], 0);
                              Assert$BsMocha.deep_equal(undefined, Agda$AgdaModeVscode.Indices.convert(a, 6), 6);
                              Assert$BsMocha.deep_equal(undefined, Agda$AgdaModeVscode.Indices.convert(a, 7), 7);
                              Assert$BsMocha.deep_equal(undefined, Agda$AgdaModeVscode.Indices.convert(a, 14), 14);
                              Assert$BsMocha.deep_equal(undefined, Agda$AgdaModeVscode.Indices.convert(a, 19), 19);
                              Assert$BsMocha.deep_equal(undefined, Agda$AgdaModeVscode.Indices.convert(a, 20), 20);
                              Assert$BsMocha.deep_equal(undefined, Agda$AgdaModeVscode.Indices.expose(a)[1], 0);
                              Assert$BsMocha.deep_equal(undefined, Agda$AgdaModeVscode.Indices.convert(a, 24), 25);
                              Assert$BsMocha.deep_equal(undefined, Agda$AgdaModeVscode.Indices.expose(a)[1], 1);
                              Assert$BsMocha.deep_equal(undefined, Agda$AgdaModeVscode.Indices.convert(a, 0), 0);
                              return Assert$BsMocha.deep_equal(undefined, Agda$AgdaModeVscode.Indices.expose(a)[1], 0);
                            }));
              }));
        return Mocha$BsMocha.describe("Editor.toUTF8Offset")(undefined, undefined, undefined, (function (param) {
                      Promise$BsMocha.it("should do it right")(undefined, undefined, undefined, (function (param) {
                              return $$Promise.Js.toBsPromise($$Promise.map(openEditorWithContent("𝐀a𝐁bb𝐂c\na"), (function (textEditor) {
                                                Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.toUTF8Offset(textEditor.document, 0), 0);
                                                Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.toUTF8Offset(textEditor.document, 1), 1);
                                                Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.toUTF8Offset(textEditor.document, 2), 1);
                                                Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.toUTF8Offset(textEditor.document, 3), 2);
                                                Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.toUTF8Offset(textEditor.document, 5), 3);
                                                Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.toUTF8Offset(textEditor.document, 6), 4);
                                                Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.toUTF8Offset(textEditor.document, 7), 5);
                                                Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.toUTF8Offset(textEditor.document, 9), 6);
                                                Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.toUTF8Offset(textEditor.document, 10), 7);
                                                Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.toUTF8Offset(textEditor.document, 11), 8);
                                                return Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.toUTF8Offset(textEditor.document, 12), 9);
                                              })));
                            }));
                      Promise$BsMocha.it("should be a left inverse of Editor.fromUTF8Offset")(undefined, undefined, undefined, (function (param) {
                              return $$Promise.Js.toBsPromise($$Promise.map(openEditorWithContent("𝐀a𝐁bb𝐂c\na"), (function (textEditor) {
                                                var g = function (n) {
                                                  return Agda$AgdaModeVscode.Indices.convert(Agda$AgdaModeVscode.Indices.make(Agda$AgdaModeVscode.OffsetConverter.computeUTF16SurrogatePairIndices("𝐀a𝐁bb𝐂c\na")), n);
                                                };
                                                var n = g(0);
                                                Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.toUTF8Offset(textEditor.document, n), 0);
                                                var n$1 = g(1);
                                                Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.toUTF8Offset(textEditor.document, n$1), 1);
                                                var n$2 = g(2);
                                                Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.toUTF8Offset(textEditor.document, n$2), 2);
                                                var n$3 = g(3);
                                                Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.toUTF8Offset(textEditor.document, n$3), 3);
                                                var n$4 = g(4);
                                                Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.toUTF8Offset(textEditor.document, n$4), 4);
                                                var n$5 = g(5);
                                                Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.toUTF8Offset(textEditor.document, n$5), 5);
                                                var n$6 = g(6);
                                                Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.toUTF8Offset(textEditor.document, n$6), 6);
                                                var n$7 = g(7);
                                                Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.toUTF8Offset(textEditor.document, n$7), 7);
                                                var n$8 = g(8);
                                                Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.toUTF8Offset(textEditor.document, n$8), 8);
                                                var n$9 = g(9);
                                                return Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.toUTF8Offset(textEditor.document, n$9), 9);
                                              })));
                            }));
                      return Promise$BsMocha.it("should be a right inverse of Editor.fromUTF8Offset ()")(undefined, undefined, undefined, (function (param) {
                                    return $$Promise.Js.toBsPromise($$Promise.map(openEditorWithContent("𝐀a𝐁bb𝐂c\na"), (function (textEditor) {
                                                      var f = function (n) {
                                                        return Agda$AgdaModeVscode.Indices.convert(Agda$AgdaModeVscode.Indices.make(Agda$AgdaModeVscode.OffsetConverter.computeUTF16SurrogatePairIndices("𝐀a𝐁bb𝐂c\na")), n);
                                                      };
                                                      Assert$BsMocha.equal(undefined, f(Editor$AgdaModeVscode.toUTF8Offset(textEditor.document, 0)), 0);
                                                      Assert$BsMocha.equal(undefined, f(Editor$AgdaModeVscode.toUTF8Offset(textEditor.document, 2)), 2);
                                                      Assert$BsMocha.equal(undefined, f(Editor$AgdaModeVscode.toUTF8Offset(textEditor.document, 3)), 3);
                                                      Assert$BsMocha.equal(undefined, f(Editor$AgdaModeVscode.toUTF8Offset(textEditor.document, 5)), 5);
                                                      Assert$BsMocha.equal(undefined, f(Editor$AgdaModeVscode.toUTF8Offset(textEditor.document, 6)), 6);
                                                      Assert$BsMocha.equal(undefined, f(Editor$AgdaModeVscode.toUTF8Offset(textEditor.document, 7)), 7);
                                                      return Assert$BsMocha.equal(undefined, f(Editor$AgdaModeVscode.toUTF8Offset(textEditor.document, 9)), 9);
                                                    })));
                                  }));
                    }));
      }));

var Assert;

var P;

exports.Assert = Assert;
exports.P = P;
exports.issue7 = issue7;
exports.openEditorWithContent = openEditorWithContent;
/*  Not a pure module */
