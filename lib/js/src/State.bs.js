// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Event$AgdaModeVscode = require("./Util/Event.bs.js");
var Request$AgdaModeVscode = require("./Request.bs.js");
var Connection$AgdaModeVscode = require("./Connection.bs.js");

function Impl(Editor) {
  var getEditor = function (state) {
    return state.editor;
  };
  var onDestroy = function (state, callback) {
    return Curry._1(Editor.Disposable.make, Curry._1(state.onDestroyEventEmitter.on, callback));
  };
  var connect = function (state) {
    var connection = state.connection;
    if (connection !== undefined) {
      return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [connection]));
    } else {
      return $$Promise.tapOk($$Promise.mapError(Connection$AgdaModeVscode.make(Editor.Config.getAgdaPath, Editor.Config.setAgdaPath), (function (e) {
                        return /* Connection */Caml_chrome_debugger.variant("Connection", 0, [e]);
                      })), (function (conn) {
                    state.connection = conn;
                    
                  }));
    }
  };
  var disconnect = function (state) {
    var connection = state.connection;
    if (connection !== undefined) {
      Connection$AgdaModeVscode.destroy(connection);
      return $$Promise.resolved(undefined);
    } else {
      return $$Promise.resolved(undefined);
    }
  };
  var sendRequest = function (state, request) {
    var filepath = Belt_Option.getWithDefault(Curry._1(Editor.getFileName, state.editor), "");
    var libraryPath = Curry._1(Editor.Config.getLibraryPath, undefined);
    var highlightingMethod = Curry._1(Editor.Config.getHighlightingMethod, undefined);
    var encoded = Request$AgdaModeVscode.encode("2.6.1", filepath, libraryPath, highlightingMethod, request);
    console.log("<<<", encoded);
    return $$Promise.mapOk(connect(state), (function (connection) {
                  Connection$AgdaModeVscode.send(encoded, connection);
                  return connection;
                }));
  };
  var destroy = function (state) {
    Curry._1(Editor.View.destroy, state.view);
    Curry._1(state.onDestroyEventEmitter.emit, undefined);
    Curry._1(state.onDestroyEventEmitter.destroy, undefined);
    return disconnect(state);
  };
  var make = function (context, editor) {
    var view = Curry._2(Editor.View.make, context, editor);
    return {
            editor: editor,
            context: context,
            view: view,
            connection: undefined,
            onDestroyEventEmitter: Event$AgdaModeVscode.make(undefined)
          };
  };
  var sendRequestToView = function (state, request) {
    return $$Promise.map(Curry._2(Editor.View.send, state.view, request), (function (param) {
                  
                }));
  };
  return {
          getEditor: getEditor,
          onDestroy: onDestroy,
          connect: connect,
          disconnect: disconnect,
          sendRequest: sendRequest,
          destroy: destroy,
          make: make,
          sendRequestToView: sendRequestToView
        };
}

exports.Impl = Impl;
/* Promise Not a pure module */
