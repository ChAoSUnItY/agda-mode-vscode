// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_splice_call = require("bs-platform/lib/js/caml_splice_call.js");
var View$AgdaModeVscode = require("../../View.bs.js");
var Emacs__Parser$AgdaModeVscode = require("../Emacs/Emacs__Parser.bs.js");
var Component__Link$AgdaModeVscode = require("./Component__Link.bs.js");
var Component__Range$AgdaModeVscode = require("./Component__Range.bs.js");

function toString(x) {
  switch (x.TAG | 0) {
    case /* Plain */0 :
        return x._0;
    case /* QuestionMark */1 :
        return "?" + String(x._0);
    case /* Underscore */2 :
        return "_" + x._0;
    
  }
}

function Component$Term(Props) {
  var term = Props.term;
  switch (term.TAG | 0) {
    case /* Plain */0 :
        return React.createElement("span", {
                    className: "expr"
                  }, term._0);
    case /* QuestionMark */1 :
        var i = term._0;
        return React.createElement(Component__Link$AgdaModeVscode.make, {
                    target: {
                      TAG: 1,
                      _0: i,
                      [Symbol.for("name")]: "ToHole"
                    },
                    jump: true,
                    hover: true,
                    className: {
                      hd: "expr",
                      tl: {
                        hd: "question-mark",
                        tl: /* [] */0
                      }
                    },
                    children: "?" + String(i)
                  });
    case /* Underscore */2 :
        return React.createElement("span", {
                    className: "expr underscore"
                  }, term._0);
    
  }
}

var Term = {
  toString: toString,
  jump: true,
  hover: true,
  make: Component$Term
};

function toString$1(xs) {
  return Caml_splice_call.spliceObjApply(" ", "concat", [Belt_Array.map(xs, toString)]);
}

function parse(raw) {
  var __x = raw.trim();
  return Belt_Array.keepMap(Belt_Array.mapWithIndex(__x.split(/(\?\d+)|(\_\d+[^\}\)\s]*)/), (function (i, token) {
                    var match = i % 3;
                    if (match !== 1) {
                      if (match !== 2) {
                        return Belt_Option.map(token, (function (x) {
                                      return {
                                              TAG: 0,
                                              _0: x,
                                              [Symbol.for("name")]: "Plain"
                                            };
                                    }));
                      } else {
                        return Belt_Option.map(token, (function (x) {
                                      return {
                                              TAG: 2,
                                              _0: x,
                                              [Symbol.for("name")]: "Underscore"
                                            };
                                    }));
                      }
                    } else {
                      return Belt_Option.map(Belt_Option.flatMap(Belt_Option.map(token, (function (param) {
                                            return param.slice(1);
                                          })), Pervasives.int_of_string_opt), (function (x) {
                                    return {
                                            TAG: 1,
                                            _0: x,
                                            [Symbol.for("name")]: "QuestionMark"
                                          };
                                  }));
                    }
                  })), (function (x) {
                return x;
              }));
}

function Component$Expr(Props) {
  var expr = Props.expr;
  return React.createElement("span", undefined, Belt_Array.mapWithIndex(expr, (function (i, term) {
                    return React.createElement(Component$Term, {
                                term: term,
                                key: String(i)
                              });
                  })));
}

var Expr = {
  toString: toString$1,
  parse: parse,
  make: Component$Expr
};

function toString$2(x) {
  if (x.TAG === /* OfType */0) {
    return toString$1(x._0) + (" : " + toString$1(x._1));
  } else {
    return toString$1(x._0);
  }
}

var partial_arg = /^([^\:]*) \: ((?:\n|.)+)/;

function parseOfType(param) {
  return Emacs__Parser$AgdaModeVscode.captures(partial_arg, (function (captured) {
                return Belt_Option.flatMap(Emacs__Parser$AgdaModeVscode.at(captured, 2, parse), (function (type_) {
                              return Belt_Option.flatMap(Emacs__Parser$AgdaModeVscode.at(captured, 1, parse), (function (term) {
                                            return {
                                                    TAG: 0,
                                                    _0: term,
                                                    _1: type_,
                                                    [Symbol.for("name")]: "OfType"
                                                  };
                                          }));
                            }));
              }), param);
}

var partial_arg$1 = /^Type ((?:\n|.)+)/;

function parseJustType(param) {
  return Emacs__Parser$AgdaModeVscode.captures(partial_arg$1, (function (captured) {
                return Belt_Option.map(Emacs__Parser$AgdaModeVscode.at(captured, 1, parse), (function (type_) {
                              return {
                                      TAG: 1,
                                      _0: type_,
                                      [Symbol.for("name")]: "JustType"
                                    };
                            }));
              }), param);
}

var partial_arg$2 = /^Sort ((?:\n|.)+)/;

function parseJustSort(param) {
  return Emacs__Parser$AgdaModeVscode.captures(partial_arg$2, (function (captured) {
                return Belt_Option.map(Emacs__Parser$AgdaModeVscode.at(captured, 1, parse), (function (sort) {
                              return {
                                      TAG: 2,
                                      _0: sort,
                                      [Symbol.for("name")]: "JustSort"
                                    };
                            }));
              }), param);
}

function parseOthers(raw) {
  return Belt_Option.map(parse(raw), (function (raw$prime) {
                return {
                        TAG: 3,
                        _0: raw$prime,
                        [Symbol.for("name")]: "Others"
                      };
              }));
}

var partial_arg$3 = [
  parseOfType,
  parseJustType,
  parseJustSort,
  parseOthers
];

function parse$1(param) {
  return Emacs__Parser$AgdaModeVscode.choice(partial_arg$3, param);
}

function Component$OutputConstraint(Props) {
  var value = Props.value;
  var range = Props.range;
  var range$1 = Belt_Option.mapWithDefault(range, null, (function (range) {
          return React.createElement(Component__Range$AgdaModeVscode.make, {
                      range: range,
                      abbr: true
                    });
        }));
  switch (value.TAG | 0) {
    case /* OfType */0 :
        return React.createElement("li", {
                    className: "unlabeled-item"
                  }, React.createElement("div", {
                        className: "item-content"
                      }, React.createElement(Component$Expr, {
                            expr: value._0
                          }), " : ", React.createElement(Component$Expr, {
                            expr: value._1
                          }), range$1));
    case /* JustType */1 :
        return React.createElement("li", {
                    className: "unlabeled-item"
                  }, React.createElement("div", {
                        className: "item-content"
                      }, "Type ", React.createElement(Component$Expr, {
                            expr: value._0
                          }), range$1));
    case /* JustSort */2 :
        return React.createElement("li", {
                    className: "unlabeled-item"
                  }, React.createElement("div", {
                        className: "item-content"
                      }, "Sort ", React.createElement(Component$Expr, {
                            expr: value._0
                          }), range$1));
    case /* Others */3 :
        return React.createElement("li", {
                    className: "unlabeled-item"
                  }, React.createElement("div", {
                        className: "item-content"
                      }, React.createElement(Component$Expr, {
                            expr: value._0
                          }), range$1));
    
  }
}

var OutputConstraint = {
  toString: toString$2,
  parseOfType: parseOfType,
  parseJustType: parseJustType,
  parseJustSort: parseJustSort,
  parseOthers: parseOthers,
  parse: parse$1,
  make: Component$OutputConstraint
};

function toString$3(x) {
  var range = x._1;
  var c = x._0;
  if (range !== undefined) {
    return "Output " + (toString$2(c) + (" " + View$AgdaModeVscode.AgdaRange.toString(range)));
  } else {
    return "Output " + toString$2(c);
  }
}

function parseOutputWithoutRange(raw) {
  return Belt_Option.map(Curry._1(parse$1, raw), (function (x) {
                return {
                        _0: x,
                        _1: undefined,
                        [Symbol.for("name")]: "Output"
                      };
              }));
}

var partial_arg$4 = /((?:\n|.)*\S+)\s*\[ at ([^\]]+) \]/;

function parseOutputWithRange(param) {
  return Emacs__Parser$AgdaModeVscode.captures(partial_arg$4, (function (captured) {
                return Belt_Option.map(Belt_Option.flatMap(Belt_Option.flatMap(Belt_Array.get(captured, 1), (function (x) {
                                      return x;
                                    })), parse$1), (function (oc) {
                              var r = Belt_Option.flatMap(Belt_Option.flatMap(Belt_Array.get(captured, 2), (function (x) {
                                          return x;
                                        })), View$AgdaModeVscode.AgdaRange.parse);
                              return {
                                      _0: oc,
                                      _1: r,
                                      [Symbol.for("name")]: "Output"
                                    };
                            }));
              }), param);
}

function parse$2(raw) {
  var rangeRe = /\[ at (\S+\:(?:\d+\,\d+\-\d+\,\d+|\d+\,\d+\-\d+)) \]$/;
  var hasRange = rangeRe.test(raw);
  if (hasRange) {
    return Curry._1(parseOutputWithRange, raw);
  } else {
    return parseOutputWithoutRange(raw);
  }
}

function Component$Output(Props) {
  var value = Props.value;
  return React.createElement(Component$OutputConstraint, {
              value: value._0,
              range: value._1
            });
}

var Output = {
  toString: toString$3,
  parseOutputWithoutRange: parseOutputWithoutRange,
  parseOutputWithRange: parseOutputWithRange,
  parse: parse$2,
  make: Component$Output
};

function toString$4(x) {
  if (x.TAG === /* PlainText */0) {
    return x._0;
  } else {
    return View$AgdaModeVscode.AgdaRange.toString(x._0);
  }
}

var Segment = {
  toString: toString$4
};

function toString$5(segments) {
  return Belt_Array.map(segments._0, toString$4).join("");
}

function parse$3(raw) {
  return {
          _0: Belt_Array.mapWithIndex(Belt_Array.keepMap(raw.split(/([^\(\)\s]+\:(?:\d+\,\d+\-\d+\,\d+|\d+\,\d+\-\d+))/), (function (x) {
                      return x;
                    })), (function (i, token) {
                  var match = i % 2;
                  if (match !== 1) {
                    return {
                            TAG: 0,
                            _0: token,
                            [Symbol.for("name")]: "PlainText"
                          };
                  } else {
                    return Belt_Option.mapWithDefault(Curry._1(View$AgdaModeVscode.AgdaRange.parse, token), {
                                TAG: 0,
                                _0: token,
                                [Symbol.for("name")]: "PlainText"
                              }, (function (x) {
                                  return {
                                          TAG: 1,
                                          _0: x,
                                          [Symbol.for("name")]: "Range"
                                        };
                                }));
                  }
                })),
          [Symbol.for("name")]: "Text"
        };
}

function Component$Text(Props) {
  var text = Props.text;
  return React.createElement("span", undefined, Belt_Array.mapWithIndex(text._0, (function (i, x) {
                    if (x.TAG === /* PlainText */0) {
                      return x._0;
                    } else {
                      return React.createElement(Component__Range$AgdaModeVscode.make, {
                                  range: x._0,
                                  key: String(i)
                                });
                    }
                  })));
}

var $$Text = {
  Segment: Segment,
  toString: toString$5,
  parse: parse$3,
  make: Component$Text
};

function toString$6(x) {
  switch (x.TAG | 0) {
    case /* PlainText */0 :
        return "Item [PlainText] " + toString$5(x._0);
    case /* Error */1 :
        return "Item [Error] " + toString$5(x._0);
    case /* Warning */2 :
        return "Item [Warning] " + toString$5(x._0);
    case /* Goal */3 :
        return "Item [Goal] " + toString$1(x._0);
    case /* Have */4 :
        return "Item [Have] " + toString$1(x._0);
    case /* Output */5 :
        return "Item [Output] " + toString$3(x._0);
    
  }
}

function Component$Item(Props) {
  var item = Props.item;
  switch (item.TAG | 0) {
    case /* PlainText */0 :
        return React.createElement("li", {
                    className: "labeled-item"
                  }, React.createElement("div", {
                        className: "item-content"
                      }, React.createElement(Component$Text, {
                            text: item._0
                          })));
    case /* Error */1 :
        return React.createElement("li", {
                    className: "labeled-item error"
                  }, React.createElement("div", {
                        className: "item-label"
                      }, "Error"), React.createElement("div", {
                        className: "item-content"
                      }, React.createElement(Component$Text, {
                            text: item._0
                          })));
    case /* Warning */2 :
        return React.createElement("li", {
                    className: "labeled-item warning"
                  }, React.createElement("div", {
                        className: "item-label"
                      }, "Warning"), React.createElement("div", {
                        className: "item-content"
                      }, React.createElement(Component$Text, {
                            text: item._0
                          })));
    case /* Goal */3 :
        return React.createElement("li", {
                    className: "labeled-item special"
                  }, React.createElement("div", {
                        className: "item-label"
                      }, "Goal"), React.createElement("div", {
                        className: "item-content"
                      }, React.createElement(Component$Expr, {
                            expr: item._0
                          })));
    case /* Have */4 :
        return React.createElement("li", {
                    className: "labeled-item special"
                  }, React.createElement("div", {
                        className: "item-label"
                      }, "Have"), React.createElement("div", {
                        className: "item-content"
                      }, React.createElement(Component$Expr, {
                            expr: item._0
                          })));
    case /* Output */5 :
        return React.createElement(Component$Output, {
                    value: item._0
                  });
    
  }
}

var Item = {
  toString: toString$6,
  make: Component$Item
};

var Link;

var $$Range;

exports.Link = Link;
exports.$$Range = $$Range;
exports.Term = Term;
exports.Expr = Expr;
exports.OutputConstraint = OutputConstraint;
exports.Output = Output;
exports.$$Text = $$Text;
exports.Item = Item;
/* react Not a pure module */
