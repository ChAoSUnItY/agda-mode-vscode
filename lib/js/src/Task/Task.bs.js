// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Vscode = require("vscode");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var View$AgdaModeVscode = require("../View.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Editor$AgdaModeVscode = require("../Editor.bs.js");
var Command$AgdaModeVscode = require("../Command.bs.js");
var View__Controller$AgdaModeVscode = require("../View__Controller.bs.js");

function toString(cmd) {
  if (typeof cmd === "number") {
    return "Destroy";
  }
  switch (cmd.tag | 0) {
    case /* DispatchCommand */0 :
        return "Command[" + (Command$AgdaModeVscode.toString(cmd[0]) + "]");
    case /* AgdaRequest */1 :
        return "AgdaRequest";
    case /* ViewEvent */2 :
        return "ViewEvent";
    case /* ViewRequest */3 :
        return "ViewRequest";
    case /* Decoration */4 :
        var tmp = cmd[0];
        if (typeof tmp !== "number") {
          if (tmp.tag) {
            return "Decoration[AddViaFile]";
          } else {
            return "Decoration[AddViaPipe]";
          }
        }
        switch (tmp) {
          case /* Clear */0 :
              return "Decoration[Clear]";
          case /* Apply */1 :
              return "Decoration[Apply]";
          case /* ApplyExperimental */2 :
              return "Decoration[ApplyExperimental]";
          case /* Refresh */3 :
              return "Decoration[Refresh]";
          
        }
    case /* Error */5 :
        return "Error";
    case /* Goal */6 :
        var tmp$1 = cmd[0];
        if (typeof tmp$1 === "number") {
          switch (tmp$1) {
            case /* UpdateRange */0 :
                return "Goal[UpdateRange]";
            case /* Next */1 :
                return "Goal[Next]";
            case /* Previous */2 :
                return "Goal[Previous]";
            case /* SaveCursor */3 :
                return "Goal[SaveCursor]";
            case /* RestoreCursor */4 :
                return "Goal[RestoreCursor]";
            
          }
        } else {
          switch (tmp$1.tag | 0) {
            case /* Instantiate */0 :
                return "Goal[Instantiate]";
            case /* Modify */1 :
                return "Goal[Modify]";
            case /* SetCursor */2 :
                return "Goal[SetCursor]";
            case /* JumpToOffset */3 :
                return "Goal[JumpToOffset]";
            case /* RemoveBoundaryAndDestroy */4 :
                return "Goal[RemoveBoundaryAndDestroy]";
            case /* ReplaceWithLines */5 :
                return "Goal[ReplaceWithLines]";
            case /* ReplaceWithLambda */6 :
                return "Goal[ReplaceWithLambda]";
            case /* LocalOrGlobal */7 :
                return "Goal[LocalOrGlobal]";
            case /* LocalOrGlobal2 */8 :
                return "Goal[LocalOrGlobal2]";
            
          }
        }
    case /* WithState */7 :
        return "WithState";
    case /* WithStateP */8 :
        return "WithStateP";
    case /* BenchStart */9 :
        return "BenchStart[" + (cmd[0] + "]");
    case /* BenchEnd */10 :
        return "BenchEnd[" + (cmd[0] + "]");
    case /* Debug */11 :
        return "Debug[" + (cmd[0] + "]");
    
  }
}

function display(header, body) {
  return /* ViewEvent */Caml_chrome_debugger.variant("ViewEvent", 2, [/* Display */Caml_chrome_debugger.variant("Display", 0, [
                header,
                body
              ])]);
}

function displayEmacs(kind, header, body) {
  return /* ViewEvent */Caml_chrome_debugger.variant("ViewEvent", 2, [/* Display */Caml_chrome_debugger.variant("Display", 0, [
                header,
                /* Emacs */Caml_chrome_debugger.variant("Emacs", 1, [
                    kind,
                    View$AgdaModeVscode.Header.toString(header),
                    body
                  ])
              ])]);
}

function prompt(header, prompt$1, callbackOnPromptSuccess) {
  return /* :: */Caml_chrome_debugger.simpleVariant("::", [
            /* WithState */Caml_chrome_debugger.variant("WithState", 7, [(function (state) {
                    Vscode.commands.executeCommand("setContext", "agdaModePrompting", true);
                    return View__Controller$AgdaModeVscode.focus(state.view);
                  })]),
            /* :: */Caml_chrome_debugger.simpleVariant("::", [
                /* ViewRequest */Caml_chrome_debugger.variant("ViewRequest", 3, [
                    /* Prompt */Caml_chrome_debugger.simpleVariant("Prompt", [
                        header,
                        prompt$1
                      ]),
                    (function (response) {
                        var tasks = response ? Curry._1(callbackOnPromptSuccess, response[0]) : /* [] */0;
                        return Belt_List.concat(tasks, /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                      /* WithState */Caml_chrome_debugger.variant("WithState", 7, [(function (state) {
                                              Vscode.commands.executeCommand("setContext", "agdaModePrompting", false);
                                              return Editor$AgdaModeVscode.focus(state.editor.document);
                                            })]),
                                      /* [] */0
                                    ]));
                      })
                  ]),
                /* [] */0
              ])
          ]);
}

exports.toString = toString;
exports.display = display;
exports.displayEmacs = displayEmacs;
exports.prompt = prompt;
/* vscode Not a pure module */
