// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Util$AgdaModeVscode = require("./Util/Util.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var State$AgdaModeVscode = require("./State.bs.js");
var Command$AgdaModeVscode = require("./Command.bs.js");
var Dispatcher$AgdaModeVscode = require("./Task/Dispatcher.bs.js");

function Impl(Editor) {
  var Dispatcher = Dispatcher$AgdaModeVscode.Impl(Editor);
  var State = State$AgdaModeVscode.Impl(Editor);
  var make = function (context, editor, onDestroy) {
    var state = Curry._2(State.make, context, editor);
    var dispatcher = Curry._1(Dispatcher.make, undefined);
    Curry._2(Editor.addToSubscriptions, Curry._2(Editor.View.on, state.view, (function ($$event) {
                if (!$$event.tag) {
                  return ;
                }
                Curry._3(Dispatcher.dispatchCommand, dispatcher, state, /* EventFromView */Caml_chrome_debugger.variant("EventFromView", 8, [$$event[0]]));
                
              })), context);
    Curry._2(Editor.addToSubscriptions, Curry._1(Editor.Disposable.make, Curry._1(state.inputMethod.onAction.on, (function (action) {
                    Curry._3(Dispatcher.dispatchCommand, dispatcher, state, /* InputMethod */Caml_chrome_debugger.variant("InputMethod", 13, [action]));
                    
                  }))), context);
    $$Promise.get(Curry._1(State.onKillMePlz, state), onDestroy);
    return /* tuple */[
            state,
            dispatcher
          ];
  };
  var destroy = function (param) {
    var state = param[0];
    return $$Promise.flatMap(Curry._1(Dispatcher.destroy, param[1]), (function (param) {
                  return Curry._1(State.destroy, state);
                }));
  };
  var forceDestroy = function (param) {
    var state = param[0];
    return $$Promise.flatMap(Curry._1(Dispatcher.forceDestroy, param[1]), (function (param) {
                  return Curry._1(State.destroy, state);
                }));
  };
  return {
          Dispatcher: Dispatcher,
          State: State,
          make: make,
          destroy: destroy,
          forceDestroy: forceDestroy
        };
}

var StateDispatcherPair = {
  Impl: Impl
};

function Impl$1(Editor) {
  var Dispatcher = Dispatcher$AgdaModeVscode.Impl(Editor);
  var State = State$AgdaModeVscode.Impl(Editor);
  var make = function (context, editor, onDestroy) {
    var state = Curry._2(State.make, context, editor);
    var dispatcher = Curry._1(Dispatcher.make, undefined);
    Curry._2(Editor.addToSubscriptions, Curry._2(Editor.View.on, state.view, (function ($$event) {
                if (!$$event.tag) {
                  return ;
                }
                Curry._3(Dispatcher.dispatchCommand, dispatcher, state, /* EventFromView */Caml_chrome_debugger.variant("EventFromView", 8, [$$event[0]]));
                
              })), context);
    Curry._2(Editor.addToSubscriptions, Curry._1(Editor.Disposable.make, Curry._1(state.inputMethod.onAction.on, (function (action) {
                    Curry._3(Dispatcher.dispatchCommand, dispatcher, state, /* InputMethod */Caml_chrome_debugger.variant("InputMethod", 13, [action]));
                    
                  }))), context);
    $$Promise.get(Curry._1(State.onKillMePlz, state), onDestroy);
    return /* tuple */[
            state,
            dispatcher
          ];
  };
  var destroy = function (param) {
    var state = param[0];
    return $$Promise.flatMap(Curry._1(Dispatcher.destroy, param[1]), (function (param) {
                  return Curry._1(State.destroy, state);
                }));
  };
  var forceDestroy = function (param) {
    var state = param[0];
    return $$Promise.flatMap(Curry._1(Dispatcher.forceDestroy, param[1]), (function (param) {
                  return Curry._1(State.destroy, state);
                }));
  };
  var StateDispatcherPair = {
    Dispatcher: Dispatcher,
    State: State,
    make: make,
    destroy: destroy,
    forceDestroy: forceDestroy
  };
  var dict = { };
  var get = function (fileName) {
    return Js_dict.get(dict, fileName);
  };
  var getByEditor = function (editor) {
    return Belt_Option.flatMap(Curry._1(Editor.getFileName, editor), get);
  };
  var add = function (fileName, state) {
    var match = Js_dict.get(dict, fileName);
    if (match !== undefined) {
      return ;
    } else {
      dict[fileName] = state;
      return ;
    }
  };
  var rename = function (oldName, newName) {
    var delete_ = (function (dict, key) {delete dict[key]});
    return Belt_Option.forEach(Js_dict.get(dict, oldName), (function (state) {
                  console.log("[ states ][ rename ]", oldName, newName);
                  delete_(dict, oldName);
                  return add(newName, state);
                }));
  };
  var remove = function (fileName) {
    var delete_ = (function (dict, key) {delete dict[key]});
    return delete_(dict, fileName);
  };
  var destroy$1 = function (fileName) {
    var pair = Js_dict.get(dict, fileName);
    if (pair !== undefined) {
      remove(fileName);
      return destroy(pair);
    } else {
      return $$Promise.resolved(undefined);
    }
  };
  var forceDestroy$1 = function (fileName) {
    var pair = Js_dict.get(dict, fileName);
    if (pair !== undefined) {
      remove(fileName);
      return forceDestroy(pair);
    } else {
      return $$Promise.resolved(undefined);
    }
  };
  var contains = function (fileName) {
    return Belt_Option.isSome(Js_dict.get(dict, fileName));
  };
  var destroyAll = function (param) {
    return Util$AgdaModeVscode.oneByOne(Belt_Array.map(Js_dict.entries(dict), (function (param, param$1) {
                      return destroy(param[1]);
                    })));
  };
  return {
          StateDispatcherPair: StateDispatcherPair,
          dict: dict,
          get: get,
          getByEditor: getByEditor,
          add: add,
          rename: rename,
          remove: remove,
          destroy: destroy$1,
          forceDestroy: forceDestroy$1,
          contains: contains,
          destroyAll: destroyAll
        };
}

var StateDict = {
  Impl: Impl$1
};

function Impl$2(Editor) {
  var Dispatcher = Dispatcher$AgdaModeVscode.Impl(Editor);
  var State = State$AgdaModeVscode.Impl(Editor);
  var make = function (context, editor, onDestroy) {
    var state = Curry._2(State.make, context, editor);
    var dispatcher = Curry._1(Dispatcher.make, undefined);
    Curry._2(Editor.addToSubscriptions, Curry._2(Editor.View.on, state.view, (function ($$event) {
                if (!$$event.tag) {
                  return ;
                }
                Curry._3(Dispatcher.dispatchCommand, dispatcher, state, /* EventFromView */Caml_chrome_debugger.variant("EventFromView", 8, [$$event[0]]));
                
              })), context);
    Curry._2(Editor.addToSubscriptions, Curry._1(Editor.Disposable.make, Curry._1(state.inputMethod.onAction.on, (function (action) {
                    Curry._3(Dispatcher.dispatchCommand, dispatcher, state, /* InputMethod */Caml_chrome_debugger.variant("InputMethod", 13, [action]));
                    
                  }))), context);
    $$Promise.get(Curry._1(State.onKillMePlz, state), onDestroy);
    return /* tuple */[
            state,
            dispatcher
          ];
  };
  var destroy = function (param) {
    var state = param[0];
    return $$Promise.flatMap(Curry._1(Dispatcher.destroy, param[1]), (function (param) {
                  return Curry._1(State.destroy, state);
                }));
  };
  var forceDestroy = function (param) {
    var state = param[0];
    return $$Promise.flatMap(Curry._1(Dispatcher.forceDestroy, param[1]), (function (param) {
                  return Curry._1(State.destroy, state);
                }));
  };
  var StateDispatcherPair = {
    Dispatcher: Dispatcher,
    State: State,
    make: make,
    destroy: destroy,
    forceDestroy: forceDestroy
  };
  var Dispatcher$1 = Dispatcher$AgdaModeVscode.Impl(Editor);
  var State$1 = State$AgdaModeVscode.Impl(Editor);
  var make$1 = function (context, editor, onDestroy) {
    var state = Curry._2(State$1.make, context, editor);
    var dispatcher = Curry._1(Dispatcher$1.make, undefined);
    Curry._2(Editor.addToSubscriptions, Curry._2(Editor.View.on, state.view, (function ($$event) {
                if (!$$event.tag) {
                  return ;
                }
                Curry._3(Dispatcher$1.dispatchCommand, dispatcher, state, /* EventFromView */Caml_chrome_debugger.variant("EventFromView", 8, [$$event[0]]));
                
              })), context);
    Curry._2(Editor.addToSubscriptions, Curry._1(Editor.Disposable.make, Curry._1(state.inputMethod.onAction.on, (function (action) {
                    Curry._3(Dispatcher$1.dispatchCommand, dispatcher, state, /* InputMethod */Caml_chrome_debugger.variant("InputMethod", 13, [action]));
                    
                  }))), context);
    $$Promise.get(Curry._1(State$1.onKillMePlz, state), onDestroy);
    return /* tuple */[
            state,
            dispatcher
          ];
  };
  var destroy$1 = function (param) {
    var state = param[0];
    return $$Promise.flatMap(Curry._1(Dispatcher$1.destroy, param[1]), (function (param) {
                  return Curry._1(State$1.destroy, state);
                }));
  };
  var forceDestroy$1 = function (param) {
    var state = param[0];
    return $$Promise.flatMap(Curry._1(Dispatcher$1.forceDestroy, param[1]), (function (param) {
                  return Curry._1(State$1.destroy, state);
                }));
  };
  var StateDispatcherPair$1 = {
    Dispatcher: Dispatcher$1,
    State: State$1,
    make: make$1,
    destroy: destroy$1,
    forceDestroy: forceDestroy$1
  };
  var dict = { };
  var get = function (fileName) {
    return Js_dict.get(dict, fileName);
  };
  var getByEditor = function (editor) {
    return Belt_Option.flatMap(Curry._1(Editor.getFileName, editor), get);
  };
  var add = function (fileName, state) {
    var match = Js_dict.get(dict, fileName);
    if (match !== undefined) {
      return ;
    } else {
      dict[fileName] = state;
      return ;
    }
  };
  var rename = function (oldName, newName) {
    var delete_ = (function (dict, key) {delete dict[key]});
    return Belt_Option.forEach(Js_dict.get(dict, oldName), (function (state) {
                  console.log("[ states ][ rename ]", oldName, newName);
                  delete_(dict, oldName);
                  return add(newName, state);
                }));
  };
  var remove = function (fileName) {
    var delete_ = (function (dict, key) {delete dict[key]});
    return delete_(dict, fileName);
  };
  var destroy$2 = function (fileName) {
    var pair = Js_dict.get(dict, fileName);
    if (pair !== undefined) {
      remove(fileName);
      return destroy$1(pair);
    } else {
      return $$Promise.resolved(undefined);
    }
  };
  var forceDestroy$2 = function (fileName) {
    var pair = Js_dict.get(dict, fileName);
    if (pair !== undefined) {
      remove(fileName);
      return forceDestroy$1(pair);
    } else {
      return $$Promise.resolved(undefined);
    }
  };
  var contains = function (fileName) {
    return Belt_Option.isSome(Js_dict.get(dict, fileName));
  };
  var destroyAll = function (param) {
    return Util$AgdaModeVscode.oneByOne(Belt_Array.map(Js_dict.entries(dict), (function (param, param$1) {
                      return destroy$1(param[1]);
                    })));
  };
  var States = {
    StateDispatcherPair: StateDispatcherPair$1,
    dict: dict,
    get: get,
    getByEditor: getByEditor,
    add: add,
    rename: rename,
    remove: remove,
    destroy: destroy$2,
    forceDestroy: forceDestroy$2,
    contains: contains,
    destroyAll: destroyAll
  };
  var State$2 = State$AgdaModeVscode.Impl(Editor);
  var Dispatcher$2 = Dispatcher$AgdaModeVscode.Impl(Editor);
  var addToSubscriptions = function (f, context) {
    context.subscriptions.push(f);
    
  };
  var activate = function (context) {
    console.log("[ states ] activate");
    Curry._2(Editor.addToSubscriptions, Curry._1(Editor.onDidCloseEditor, (function (fileName) {
                forceDestroy$2(fileName);
                
              })), context);
    Curry._2(Editor.addToSubscriptions, Curry._1(Editor.onDidChangeFileName, (function (oldName, newName) {
                return Belt_Option.forEach(oldName, (function (oldName) {
                              return Belt_Option.forEach(newName, (function (newName) {
                                            if (contains(oldName)) {
                                              if (Curry._1(Editor.isAgda, newName)) {
                                                return rename(oldName, newName);
                                              } else {
                                                forceDestroy$2(oldName);
                                                return ;
                                              }
                                            }
                                            
                                          }));
                            }));
              })), context);
    Curry._2(Editor.addToSubscriptions, Curry._1(Editor.onDidChangeActivation, (function (prev, next) {
                Belt_Option.forEach(Belt_Option.flatMap(prev, getByEditor), (function (param) {
                        return Curry._1(State$2.hide, param[0]);
                      }));
                return Belt_Option.forEach(Belt_Option.flatMap(next, getByEditor), (function (param) {
                              var dispatcher = param[1];
                              var state = param[0];
                              Belt_Option.forEach(next, (function (editor) {
                                      state.editor = editor;
                                      Curry._1(State$2.show, state);
                                      return Curry._3(Dispatcher$2.dispatchCommand, dispatcher, state, /* Refresh */3);
                                    }));
                              
                            }));
              })), context);
    return Belt_Array.forEach(Command$AgdaModeVscode.names, (function (param) {
                  var name = param[1];
                  var command = param[0];
                  return Curry._2(Editor.addToSubscriptions, Curry._2(Editor.registerCommand, name, (function (editor) {
                                    console.log("[ command ] " + name);
                                    var tmp;
                                    if (typeof command === "number" && command < 3) {
                                      switch (command) {
                                        case /* Load */0 :
                                            Belt_Option.forEach(Curry._1(Editor.getFileName, editor), (function (fileName) {
                                                    var _pair = get(fileName);
                                                    if (_pair !== undefined) {
                                                      return ;
                                                    }
                                                    var pair = make(context, editor, (function (param) {
                                                            forceDestroy$2(fileName);
                                                            
                                                          }));
                                                    return add(fileName, pair);
                                                  }));
                                            tmp = $$Promise.resolved(undefined);
                                            break;
                                        case /* Quit */1 :
                                            tmp = Belt_Option.mapWithDefault(Curry._1(Editor.getFileName, editor), $$Promise.resolved(undefined), forceDestroy$2);
                                            break;
                                        case /* Restart */2 :
                                            tmp = Belt_Option.mapWithDefault(Curry._1(Editor.getFileName, editor), $$Promise.resolved(undefined), (function (fileName) {
                                                    return $$Promise.map(destroy$2(fileName), (function (param) {
                                                                  var pair = make(context, editor, (function (param) {
                                                                          forceDestroy$2(fileName);
                                                                          
                                                                        }));
                                                                  return add(fileName, pair);
                                                                }));
                                                  }));
                                            break;
                                        
                                      }
                                    } else {
                                      tmp = $$Promise.resolved(undefined);
                                    }
                                    return $$Promise.get(tmp, (function (param) {
                                                  return Belt_Option.forEach(getByEditor(editor), (function (param) {
                                                                Curry._3(Dispatcher$2.dispatchCommand, param[1], param[0], command);
                                                                
                                                              }));
                                                }));
                                  })), context);
                }));
  };
  var deactivate = function (param) {
    return destroyAll(undefined);
  };
  return {
          StateDispatcherPair: StateDispatcherPair,
          States: States,
          State: State$2,
          Dispatcher: Dispatcher$2,
          addToSubscriptions: addToSubscriptions,
          activate: activate,
          deactivate: deactivate
        };
}

exports.StateDispatcherPair = StateDispatcherPair;
exports.StateDict = StateDict;
exports.Impl = Impl$2;
/* Promise Not a pure module */
