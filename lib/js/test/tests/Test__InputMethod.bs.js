// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Vscode = require("vscode");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Mocha$BsMocha = require("bs-mocha/lib/js/src/Mocha.bs.js");
var Goal$AgdaModeVscode = require("../../src/Goal.bs.js");
var Main$AgdaModeVscode = require("../../src/Main.bs.js");
var Task$AgdaModeVscode = require("../../src/Task/Task.bs.js");
var Util$AgdaModeVscode = require("../../src/Util/Util.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var SigImpl$AgdaModeVscode = require("../../src/SigImpl.bs.js");
var EditorIM$AgdaModeVscode = require("../../src/InputMethod/EditorIM.bs.js");
var Test__Util$AgdaModeVscode = require("./Test__Util.bs.js");
var Handle__Goal$AgdaModeVscode = require("../../src/Task/Handle__Goal.bs.js");

function Impl(Editor) {
  var Test__Util = Test__Util$AgdaModeVscode.Impl(Editor);
  var Goal = Goal$AgdaModeVscode.Impl(Editor);
  var Task = Task$AgdaModeVscode.Impl(Editor);
  var EditorIM = EditorIM$AgdaModeVscode.Impl(Editor);
  var GoalHandler = Handle__Goal$AgdaModeVscode.Impl(Editor);
  var activateExtension = function (fileName) {
    var Main = Main$AgdaModeVscode.Impl(Editor);
    var disposables = [];
    var extensionPath = Curry._1(Test__Util.Path.extensionPath, undefined);
    var emitter = Curry._2(Main.activateWithoutContext, disposables, extensionPath);
    return $$Promise.map(Curry._1(Editor.openEditor, fileName), (function (editor) {
                  return {
                          editor: editor,
                          emitter: emitter
                        };
                }));
  };
  var acquire = function (setup) {
    var setup$1 = setup.contents;
    if (setup$1 !== undefined) {
      return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [Caml_option.valFromOption(setup$1)]));
    } else {
      return $$Promise.resolved(/* Error */Caml_chrome_debugger.variant("Error", 1, [[
                      Util$AgdaModeVscode.$$Error,
                      "Cannot acquire the setup"
                    ]]));
    }
  };
  var cleanup = function (setup) {
    var range = Curry._2(Editor.$$Range.make, Curry._2(Editor.Point.make, 0, 0), Curry._2(Editor.Point.make, 100, 0));
    return $$Promise.map(Curry._3(Editor.replaceText, setup.editor, range, ""), (function (param) {
                  return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [undefined]);
                }));
  };
  var insertChar = function (setup, $$char) {
    var promise = Curry._1(setup.emitter.once, undefined);
    var positions = Curry._1(Editor.getCursorPositions, setup.editor);
    return $$Promise.map($$Promise.flatMap(Curry._3(Editor.insertTexts, setup.editor, positions, $$char), (function (param) {
                      return promise;
                    })), (function (x) {
                  return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [x]);
                }));
  };
  var backspace = function (setup) {
    var promise = Curry._1(setup.emitter.once, undefined);
    var end_ = Curry._1(Editor.getCursorPosition, setup.editor);
    var start = Curry._3(Editor.Point.translate, end_, 0, -1);
    var range = Curry._2(Editor.$$Range.make, start, end_);
    return $$Promise.map($$Promise.flatMap(Curry._2(Editor.deleteText, setup.editor, range), (function (param) {
                      return promise;
                    })), (function (x) {
                  return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [x]);
                }));
  };
  var activate = function (setup, positions, param) {
    var promise = Curry._1(setup.emitter.once, undefined);
    var positions$1 = Belt_Option.getWithDefault(positions, [Curry._1(Editor.getCursorPosition, setup.editor)]);
    Curry._2(Editor.setCursorPositions, setup.editor, positions$1);
    return $$Promise.map($$Promise.flatMap($$Promise.flatMap(Vscode.commands.executeCommand("agda-mode.input-symbol[Activate]"), (function (result) {
                          return result;
                        })), (function (param) {
                      return promise;
                    })), (function (x) {
                  return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [x]);
                }));
  };
  var deactivate = function (setup) {
    var promise = Curry._1(setup.emitter.once, undefined);
    return $$Promise.map($$Promise.flatMap($$Promise.flatMap(Vscode.commands.executeCommand("agda-mode.escape"), (function (result) {
                          return result;
                        })), (function (param) {
                      return promise;
                    })), (function (x) {
                  return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [x]);
                }));
  };
  var IM = {
    activate: activate,
    deactivate: deactivate
  };
  Mocha$BsMocha.describe("Input Method (Editor)")(undefined, undefined, undefined, (function (param) {
          var setup = {
            contents: undefined
          };
          Curry._1(Test__Util.Q.before, (function (param) {
                  return $$Promise.map(activateExtension(Curry._1(Test__Util.Path.asset, "InputMethod.agda")), (function (value) {
                                setup.contents = value;
                                return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [undefined]);
                              }));
                }));
          Curry._1(Test__Util.Q.after_each, (function (param) {
                  return $$Promise.mapOk(acquire(setup), cleanup);
                }));
          Mocha$BsMocha.describe("Insertion")(undefined, undefined, undefined, (function (param) {
                  Curry._2(Test__Util.Q.it, "should translate \"lambdabar\" to \"λ\"", (function (param) {
                          return $$Promise.flatMapOk(acquire(setup), (function (setup) {
                                        return $$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk(activate(setup, undefined, undefined), Curry._1(Test__Util.A.equal, /* Activate */1)), (function (param) {
                                                                                                                                                              return insertChar(setup, "l");
                                                                                                                                                            })), Curry._1(Test__Util.A.equal, /* Change */0)), (function (param) {
                                                                                                                                                      return Curry._2(Test__Util.A.equal, "←", Curry._1(Editor.getText, setup.editor));
                                                                                                                                                    })), (function (param) {
                                                                                                                                                  return insertChar(setup, "a");
                                                                                                                                                })), Curry._1(Test__Util.A.equal, /* Change */0)), (function (param) {
                                                                                                                                          return Curry._2(Test__Util.A.equal, "←a", Curry._1(Editor.getText, setup.editor));
                                                                                                                                        })), (function (param) {
                                                                                                                                      return insertChar(setup, "m");
                                                                                                                                    })), Curry._1(Test__Util.A.equal, /* Change */0)), (function (param) {
                                                                                                                              return Curry._2(Test__Util.A.equal, "←am", Curry._1(Editor.getText, setup.editor));
                                                                                                                            })), (function (param) {
                                                                                                                          return insertChar(setup, "b");
                                                                                                                        })), Curry._1(Test__Util.A.equal, /* Change */0)), (function (param) {
                                                                                                                  return Curry._2(Test__Util.A.equal, "←amb", Curry._1(Editor.getText, setup.editor));
                                                                                                                })), (function (param) {
                                                                                                              return insertChar(setup, "d");
                                                                                                            })), Curry._1(Test__Util.A.equal, /* Change */0)), (function (param) {
                                                                                                      return Curry._2(Test__Util.A.equal, "←ambd", Curry._1(Editor.getText, setup.editor));
                                                                                                    })), (function (param) {
                                                                                                  return insertChar(setup, "a");
                                                                                                })), Curry._1(Test__Util.A.equal, /* Change */0)), (function (param) {
                                                                                          return Curry._2(Test__Util.A.equal, "λ", Curry._1(Editor.getText, setup.editor));
                                                                                        })), (function (param) {
                                                                                      return insertChar(setup, "b");
                                                                                    })), Curry._1(Test__Util.A.equal, /* Change */0)), (function (param) {
                                                                              return Curry._2(Test__Util.A.equal, "λb", Curry._1(Editor.getText, setup.editor));
                                                                            })), (function (param) {
                                                                          return insertChar(setup, "a");
                                                                        })), Curry._1(Test__Util.A.equal, /* Change */0)), (function (param) {
                                                                  return Curry._2(Test__Util.A.equal, "λba", Curry._1(Editor.getText, setup.editor));
                                                                })), (function (param) {
                                                              return insertChar(setup, "r");
                                                            })), Curry._1(Test__Util.A.equal, /* Change */0)), (function (param) {
                                                      return Curry._2(Test__Util.A.equal, "ƛ", Curry._1(Editor.getText, setup.editor));
                                                    }));
                                      }));
                        }));
                  return Curry._2(Test__Util.Q.it, "should translate \"bn\" to \"𝕟\"", (function (param) {
                                return $$Promise.flatMapOk(acquire(setup), (function (setup) {
                                              return $$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk(activate(setup, undefined, undefined), Curry._1(Test__Util.A.equal, /* Activate */1)), (function (param) {
                                                                                return insertChar(setup, "b");
                                                                              })), Curry._1(Test__Util.A.equal, /* Change */0)), (function (param) {
                                                                        return Curry._2(Test__Util.A.equal, "♭", Curry._1(Editor.getText, setup.editor));
                                                                      })), (function (param) {
                                                                    return insertChar(setup, "n");
                                                                  })), Curry._1(Test__Util.A.equal, /* Change */0)), (function (param) {
                                                            return Curry._2(Test__Util.A.equal, "𝕟", Curry._1(Editor.getText, setup.editor));
                                                          }));
                                            }));
                              }));
                }));
          Mocha$BsMocha.describe("Backspacing")(undefined, undefined, undefined, (function (param) {
                  return Curry._2(Test__Util.Q.it, "should work just fine", (function (param) {
                                return $$Promise.flatMapOk(acquire(setup), (function (setup) {
                                              return $$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk(activate(setup, undefined, undefined), Curry._1(Test__Util.A.equal, /* Activate */1)), (function (param) {
                                                                                                                                                    return insertChar(setup, "l");
                                                                                                                                                  })), Curry._1(Test__Util.A.equal, /* Change */0)), (function (param) {
                                                                                                                                            return Curry._2(Test__Util.A.equal, "←", Curry._1(Editor.getText, setup.editor));
                                                                                                                                          })), (function (param) {
                                                                                                                                        return insertChar(setup, "a");
                                                                                                                                      })), Curry._1(Test__Util.A.equal, /* Change */0)), (function (param) {
                                                                                                                                return Curry._2(Test__Util.A.equal, "←a", Curry._1(Editor.getText, setup.editor));
                                                                                                                              })), (function (param) {
                                                                                                                            return insertChar(setup, "m");
                                                                                                                          })), Curry._1(Test__Util.A.equal, /* Change */0)), (function (param) {
                                                                                                                    return Curry._2(Test__Util.A.equal, "←am", Curry._1(Editor.getText, setup.editor));
                                                                                                                  })), (function (param) {
                                                                                                                return insertChar(setup, "b");
                                                                                                              })), Curry._1(Test__Util.A.equal, /* Change */0)), (function (param) {
                                                                                                        return Curry._2(Test__Util.A.equal, "←amb", Curry._1(Editor.getText, setup.editor));
                                                                                                      })), (function (param) {
                                                                                                    return insertChar(setup, "d");
                                                                                                  })), Curry._1(Test__Util.A.equal, /* Change */0)), (function (param) {
                                                                                            return Curry._2(Test__Util.A.equal, "←ambd", Curry._1(Editor.getText, setup.editor));
                                                                                          })), (function (param) {
                                                                                        return insertChar(setup, "a");
                                                                                      })), Curry._1(Test__Util.A.equal, /* Change */0)), (function (param) {
                                                                                return Curry._2(Test__Util.A.equal, "λ", Curry._1(Editor.getText, setup.editor));
                                                                              })), (function (param) {
                                                                            return backspace(setup);
                                                                          })), Curry._1(Test__Util.A.equal, /* Change */0)), (function (param) {
                                                                    return Curry._2(Test__Util.A.equal, "lambd", Curry._1(Editor.getText, setup.editor));
                                                                  })), (function (param) {
                                                                return deactivate(setup);
                                                              })), Curry._1(Test__Util.A.equal, /* Deactivate */2));
                                            }));
                              }));
                }));
          return Mocha$BsMocha.describe("Multiple cursors at once")(undefined, undefined, undefined, (function (param) {
                        var positions = [
                          Curry._2(Editor.Point.make, 0, 0),
                          Curry._2(Editor.Point.make, 1, 0),
                          Curry._2(Editor.Point.make, 2, 0),
                          Curry._2(Editor.Point.make, 3, 0)
                        ];
                        return Curry._2(Test__Util.Q.it, "should work just fine", (function (param) {
                                      var partial_arg = /\r\n/g;
                                      var replaceCRLF = function (param) {
                                        return param.replace(partial_arg, "\n");
                                      };
                                      return $$Promise.flatMapOk(acquire(setup), (function (setup) {
                                                    return $$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMap(Curry._3(Editor.insertText, setup.editor, Curry._2(Editor.Point.make, 0, 0), "\n\n\n"), (function (param) {
                                                                                              return activate(setup, positions, undefined);
                                                                                            })), Curry._1(Test__Util.A.equal, /* Activate */1)), (function (param) {
                                                                                      return insertChar(setup, "b");
                                                                                    })), Curry._1(Test__Util.A.equal, /* Change */0)), (function (param) {
                                                                              return Curry._2(Test__Util.A.equal, "♭\n♭\n♭\n♭", Curry._1(replaceCRLF, Curry._1(Editor.getText, setup.editor)));
                                                                            })), (function (param) {
                                                                          return insertChar(setup, "n");
                                                                        })), Curry._1(Test__Util.A.equal, /* Change */0)), (function (param) {
                                                                  return Curry._2(Test__Util.A.equal, "𝕟\n𝕟\n𝕟\n𝕟", Curry._1(replaceCRLF, Curry._1(Editor.getText, setup.editor)));
                                                                }));
                                                  }));
                                    }));
                      }));
        }));
  return {
          Test__Util: Test__Util,
          Goal: Goal,
          Task: Task,
          EditorIM: EditorIM,
          GoalHandler: GoalHandler,
          Js$prime: undefined,
          Js: undefined,
          activateExtension: activateExtension,
          acquire: acquire,
          cleanup: cleanup,
          insertChar: insertChar,
          backspace: backspace,
          IM: IM
        };
}

var Editor_Point = {
  line: SigImpl$AgdaModeVscode.Point.line,
  column: SigImpl$AgdaModeVscode.Point.column,
  make: SigImpl$AgdaModeVscode.Point.make,
  translate: SigImpl$AgdaModeVscode.Point.translate,
  compare: SigImpl$AgdaModeVscode.Point.compare
};

var Editor_Config = {
  getAgdaPath: SigImpl$AgdaModeVscode.Config.getAgdaPath,
  setAgdaPath: SigImpl$AgdaModeVscode.Config.setAgdaPath,
  getLibraryPath: SigImpl$AgdaModeVscode.Config.getLibraryPath,
  getHighlightingMethod: SigImpl$AgdaModeVscode.Config.getHighlightingMethod,
  getBackend: SigImpl$AgdaModeVscode.Config.getBackend
};

var Editor_View = {
  make: SigImpl$AgdaModeVscode.View.make,
  destroy: SigImpl$AgdaModeVscode.View.destroy,
  show: SigImpl$AgdaModeVscode.View.show,
  hide: SigImpl$AgdaModeVscode.View.hide,
  focus: SigImpl$AgdaModeVscode.View.focus,
  send: SigImpl$AgdaModeVscode.View.send,
  onEvent: SigImpl$AgdaModeVscode.View.onEvent,
  fromPosition: SigImpl$AgdaModeVscode.View.fromPosition,
  fromInterval: SigImpl$AgdaModeVscode.View.fromInterval
};

var Editor_Decoration = {
  decorate: SigImpl$AgdaModeVscode.Decoration.decorate,
  highlightBackground: SigImpl$AgdaModeVscode.Decoration.highlightBackground,
  highlightBackgroundWithColor: SigImpl$AgdaModeVscode.Decoration.highlightBackgroundWithColor,
  decorateText: SigImpl$AgdaModeVscode.Decoration.decorateText,
  decorateTextWithColor: SigImpl$AgdaModeVscode.Decoration.decorateTextWithColor,
  overlayText: SigImpl$AgdaModeVscode.Decoration.overlayText,
  overlayTextWithColor: SigImpl$AgdaModeVscode.Decoration.overlayTextWithColor,
  underlineText: SigImpl$AgdaModeVscode.Decoration.underlineText,
  destroy: SigImpl$AgdaModeVscode.Decoration.destroy
};

var Editor = {
  Disposable: SigImpl$AgdaModeVscode.Disposable,
  Point: Editor_Point,
  pointAtOffset: SigImpl$AgdaModeVscode.pointAtOffset,
  offsetAtPoint: SigImpl$AgdaModeVscode.offsetAtPoint,
  $$Range: SigImpl$AgdaModeVscode.$$Range,
  editorType: SigImpl$AgdaModeVscode.editorType,
  getExtensionPath: SigImpl$AgdaModeVscode.getExtensionPath,
  getFileName: SigImpl$AgdaModeVscode.getFileName,
  openEditor: SigImpl$AgdaModeVscode.openEditor,
  openEditorWithContent: SigImpl$AgdaModeVscode.openEditorWithContent,
  save: SigImpl$AgdaModeVscode.save,
  onDidChangeFileName: SigImpl$AgdaModeVscode.onDidChangeFileName,
  onDidChangeActivation: SigImpl$AgdaModeVscode.onDidChangeActivation,
  onDidCloseEditor: SigImpl$AgdaModeVscode.onDidCloseEditor,
  registerCommand: SigImpl$AgdaModeVscode.registerCommand,
  setContext: SigImpl$AgdaModeVscode.setContext,
  getDisposables: SigImpl$AgdaModeVscode.getDisposables,
  Config: Editor_Config,
  View: Editor_View,
  Decoration: Editor_Decoration,
  focus: SigImpl$AgdaModeVscode.focus,
  reveal: SigImpl$AgdaModeVscode.reveal,
  getSelection: SigImpl$AgdaModeVscode.getSelection,
  getSelections: SigImpl$AgdaModeVscode.getSelections,
  setSelection: SigImpl$AgdaModeVscode.setSelection,
  setSelections: SigImpl$AgdaModeVscode.setSelections,
  getCursorPosition: SigImpl$AgdaModeVscode.getCursorPosition,
  getCursorPositions: SigImpl$AgdaModeVscode.getCursorPositions,
  setCursorPosition: SigImpl$AgdaModeVscode.setCursorPosition,
  setCursorPositions: SigImpl$AgdaModeVscode.setCursorPositions,
  onChangeCursorPosition: SigImpl$AgdaModeVscode.onChangeCursorPosition,
  rangeForLine: SigImpl$AgdaModeVscode.rangeForLine,
  fromAgdaOffset: SigImpl$AgdaModeVscode.fromAgdaOffset,
  toAgdaOffset: SigImpl$AgdaModeVscode.toAgdaOffset,
  getText: SigImpl$AgdaModeVscode.getText,
  getTextInRange: SigImpl$AgdaModeVscode.getTextInRange,
  selectText: SigImpl$AgdaModeVscode.selectText,
  replaceText: SigImpl$AgdaModeVscode.replaceText,
  insertText: SigImpl$AgdaModeVscode.insertText,
  insertTexts: SigImpl$AgdaModeVscode.insertTexts,
  deleteText: SigImpl$AgdaModeVscode.deleteText,
  onChange: SigImpl$AgdaModeVscode.onChange,
  copyToClipboard: SigImpl$AgdaModeVscode.copyToClipboard,
  colorThemeIsDark: SigImpl$AgdaModeVscode.colorThemeIsDark,
  lineEndingIsCRLF: SigImpl$AgdaModeVscode.lineEndingIsCRLF
};

var Test__Util = Test__Util$AgdaModeVscode.Impl(Editor);

var Goal = Goal$AgdaModeVscode.Impl(Editor);

var Task = Task$AgdaModeVscode.Impl(Editor);

var EditorIM = EditorIM$AgdaModeVscode.Impl(Editor);

var GoalHandler = Handle__Goal$AgdaModeVscode.Impl(Editor);

function activateExtension(fileName) {
  var Main = Main$AgdaModeVscode.Impl(Editor);
  var disposables = [];
  var extensionPath = Curry._1(Test__Util.Path.extensionPath, undefined);
  var emitter = Curry._2(Main.activateWithoutContext, disposables, extensionPath);
  return $$Promise.map(SigImpl$AgdaModeVscode.openEditor(fileName), (function (editor) {
                return {
                        editor: editor,
                        emitter: emitter
                      };
              }));
}

function acquire(setup) {
  var setup$1 = setup.contents;
  if (setup$1 !== undefined) {
    return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [Caml_option.valFromOption(setup$1)]));
  } else {
    return $$Promise.resolved(/* Error */Caml_chrome_debugger.variant("Error", 1, [[
                    Util$AgdaModeVscode.$$Error,
                    "Cannot acquire the setup"
                  ]]));
  }
}

function cleanup(setup) {
  var range = SigImpl$AgdaModeVscode.$$Range.make(Curry._2(Editor_Point.make, 0, 0), Curry._2(Editor_Point.make, 100, 0));
  return $$Promise.map(SigImpl$AgdaModeVscode.replaceText(setup.editor, range, ""), (function (param) {
                return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [undefined]);
              }));
}

function insertChar(setup, $$char) {
  var promise = Curry._1(setup.emitter.once, undefined);
  var positions = SigImpl$AgdaModeVscode.getCursorPositions(setup.editor);
  return $$Promise.map($$Promise.flatMap(SigImpl$AgdaModeVscode.insertTexts(setup.editor, positions, $$char), (function (param) {
                    return promise;
                  })), (function (x) {
                return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [x]);
              }));
}

function backspace(setup) {
  var promise = Curry._1(setup.emitter.once, undefined);
  var end_ = SigImpl$AgdaModeVscode.getCursorPosition(setup.editor);
  var start = Curry._3(Editor_Point.translate, end_, 0, -1);
  var range = SigImpl$AgdaModeVscode.$$Range.make(start, end_);
  return $$Promise.map($$Promise.flatMap(SigImpl$AgdaModeVscode.deleteText(setup.editor, range), (function (param) {
                    return promise;
                  })), (function (x) {
                return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [x]);
              }));
}

function activate(setup, positions, param) {
  var promise = Curry._1(setup.emitter.once, undefined);
  var positions$1 = Belt_Option.getWithDefault(positions, [SigImpl$AgdaModeVscode.getCursorPosition(setup.editor)]);
  SigImpl$AgdaModeVscode.setCursorPositions(setup.editor, positions$1);
  return $$Promise.map($$Promise.flatMap($$Promise.flatMap(Vscode.commands.executeCommand("agda-mode.input-symbol[Activate]"), (function (result) {
                        return result;
                      })), (function (param) {
                    return promise;
                  })), (function (x) {
                return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [x]);
              }));
}

function deactivate(setup) {
  var promise = Curry._1(setup.emitter.once, undefined);
  return $$Promise.map($$Promise.flatMap($$Promise.flatMap(Vscode.commands.executeCommand("agda-mode.escape"), (function (result) {
                        return result;
                      })), (function (param) {
                    return promise;
                  })), (function (x) {
                return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [x]);
              }));
}

var IM = {
  activate: activate,
  deactivate: deactivate
};

Mocha$BsMocha.describe("Input Method (Editor)")(undefined, undefined, undefined, (function (param) {
        var setup = {
          contents: undefined
        };
        Curry._1(Test__Util.Q.before, (function (param) {
                return $$Promise.map(activateExtension(Curry._1(Test__Util.Path.asset, "InputMethod.agda")), (function (value) {
                              setup.contents = value;
                              return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [undefined]);
                            }));
              }));
        Curry._1(Test__Util.Q.after_each, (function (param) {
                return $$Promise.mapOk(acquire(setup), cleanup);
              }));
        Mocha$BsMocha.describe("Insertion")(undefined, undefined, undefined, (function (param) {
                Curry._2(Test__Util.Q.it, "should translate \"lambdabar\" to \"λ\"", (function (param) {
                        return $$Promise.flatMapOk(acquire(setup), (function (setup) {
                                      return $$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk(activate(setup, undefined, undefined), Curry._1(Test__Util.A.equal, /* Activate */1)), (function (param) {
                                                                                                                                                            return insertChar(setup, "l");
                                                                                                                                                          })), Curry._1(Test__Util.A.equal, /* Change */0)), (function (param) {
                                                                                                                                                    return Curry._2(Test__Util.A.equal, "←", SigImpl$AgdaModeVscode.getText(setup.editor));
                                                                                                                                                  })), (function (param) {
                                                                                                                                                return insertChar(setup, "a");
                                                                                                                                              })), Curry._1(Test__Util.A.equal, /* Change */0)), (function (param) {
                                                                                                                                        return Curry._2(Test__Util.A.equal, "←a", SigImpl$AgdaModeVscode.getText(setup.editor));
                                                                                                                                      })), (function (param) {
                                                                                                                                    return insertChar(setup, "m");
                                                                                                                                  })), Curry._1(Test__Util.A.equal, /* Change */0)), (function (param) {
                                                                                                                            return Curry._2(Test__Util.A.equal, "←am", SigImpl$AgdaModeVscode.getText(setup.editor));
                                                                                                                          })), (function (param) {
                                                                                                                        return insertChar(setup, "b");
                                                                                                                      })), Curry._1(Test__Util.A.equal, /* Change */0)), (function (param) {
                                                                                                                return Curry._2(Test__Util.A.equal, "←amb", SigImpl$AgdaModeVscode.getText(setup.editor));
                                                                                                              })), (function (param) {
                                                                                                            return insertChar(setup, "d");
                                                                                                          })), Curry._1(Test__Util.A.equal, /* Change */0)), (function (param) {
                                                                                                    return Curry._2(Test__Util.A.equal, "←ambd", SigImpl$AgdaModeVscode.getText(setup.editor));
                                                                                                  })), (function (param) {
                                                                                                return insertChar(setup, "a");
                                                                                              })), Curry._1(Test__Util.A.equal, /* Change */0)), (function (param) {
                                                                                        return Curry._2(Test__Util.A.equal, "λ", SigImpl$AgdaModeVscode.getText(setup.editor));
                                                                                      })), (function (param) {
                                                                                    return insertChar(setup, "b");
                                                                                  })), Curry._1(Test__Util.A.equal, /* Change */0)), (function (param) {
                                                                            return Curry._2(Test__Util.A.equal, "λb", SigImpl$AgdaModeVscode.getText(setup.editor));
                                                                          })), (function (param) {
                                                                        return insertChar(setup, "a");
                                                                      })), Curry._1(Test__Util.A.equal, /* Change */0)), (function (param) {
                                                                return Curry._2(Test__Util.A.equal, "λba", SigImpl$AgdaModeVscode.getText(setup.editor));
                                                              })), (function (param) {
                                                            return insertChar(setup, "r");
                                                          })), Curry._1(Test__Util.A.equal, /* Change */0)), (function (param) {
                                                    return Curry._2(Test__Util.A.equal, "ƛ", SigImpl$AgdaModeVscode.getText(setup.editor));
                                                  }));
                                    }));
                      }));
                return Curry._2(Test__Util.Q.it, "should translate \"bn\" to \"𝕟\"", (function (param) {
                              return $$Promise.flatMapOk(acquire(setup), (function (setup) {
                                            return $$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk(activate(setup, undefined, undefined), Curry._1(Test__Util.A.equal, /* Activate */1)), (function (param) {
                                                                              return insertChar(setup, "b");
                                                                            })), Curry._1(Test__Util.A.equal, /* Change */0)), (function (param) {
                                                                      return Curry._2(Test__Util.A.equal, "♭", SigImpl$AgdaModeVscode.getText(setup.editor));
                                                                    })), (function (param) {
                                                                  return insertChar(setup, "n");
                                                                })), Curry._1(Test__Util.A.equal, /* Change */0)), (function (param) {
                                                          return Curry._2(Test__Util.A.equal, "𝕟", SigImpl$AgdaModeVscode.getText(setup.editor));
                                                        }));
                                          }));
                            }));
              }));
        Mocha$BsMocha.describe("Backspacing")(undefined, undefined, undefined, (function (param) {
                return Curry._2(Test__Util.Q.it, "should work just fine", (function (param) {
                              return $$Promise.flatMapOk(acquire(setup), (function (setup) {
                                            return $$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk(activate(setup, undefined, undefined), Curry._1(Test__Util.A.equal, /* Activate */1)), (function (param) {
                                                                                                                                                  return insertChar(setup, "l");
                                                                                                                                                })), Curry._1(Test__Util.A.equal, /* Change */0)), (function (param) {
                                                                                                                                          return Curry._2(Test__Util.A.equal, "←", SigImpl$AgdaModeVscode.getText(setup.editor));
                                                                                                                                        })), (function (param) {
                                                                                                                                      return insertChar(setup, "a");
                                                                                                                                    })), Curry._1(Test__Util.A.equal, /* Change */0)), (function (param) {
                                                                                                                              return Curry._2(Test__Util.A.equal, "←a", SigImpl$AgdaModeVscode.getText(setup.editor));
                                                                                                                            })), (function (param) {
                                                                                                                          return insertChar(setup, "m");
                                                                                                                        })), Curry._1(Test__Util.A.equal, /* Change */0)), (function (param) {
                                                                                                                  return Curry._2(Test__Util.A.equal, "←am", SigImpl$AgdaModeVscode.getText(setup.editor));
                                                                                                                })), (function (param) {
                                                                                                              return insertChar(setup, "b");
                                                                                                            })), Curry._1(Test__Util.A.equal, /* Change */0)), (function (param) {
                                                                                                      return Curry._2(Test__Util.A.equal, "←amb", SigImpl$AgdaModeVscode.getText(setup.editor));
                                                                                                    })), (function (param) {
                                                                                                  return insertChar(setup, "d");
                                                                                                })), Curry._1(Test__Util.A.equal, /* Change */0)), (function (param) {
                                                                                          return Curry._2(Test__Util.A.equal, "←ambd", SigImpl$AgdaModeVscode.getText(setup.editor));
                                                                                        })), (function (param) {
                                                                                      return insertChar(setup, "a");
                                                                                    })), Curry._1(Test__Util.A.equal, /* Change */0)), (function (param) {
                                                                              return Curry._2(Test__Util.A.equal, "λ", SigImpl$AgdaModeVscode.getText(setup.editor));
                                                                            })), (function (param) {
                                                                          return backspace(setup);
                                                                        })), Curry._1(Test__Util.A.equal, /* Change */0)), (function (param) {
                                                                  return Curry._2(Test__Util.A.equal, "lambd", SigImpl$AgdaModeVscode.getText(setup.editor));
                                                                })), (function (param) {
                                                              return deactivate(setup);
                                                            })), Curry._1(Test__Util.A.equal, /* Deactivate */2));
                                          }));
                            }));
              }));
        return Mocha$BsMocha.describe("Multiple cursors at once")(undefined, undefined, undefined, (function (param) {
                      var positions = [
                        Curry._2(Editor_Point.make, 0, 0),
                        Curry._2(Editor_Point.make, 1, 0),
                        Curry._2(Editor_Point.make, 2, 0),
                        Curry._2(Editor_Point.make, 3, 0)
                      ];
                      return Curry._2(Test__Util.Q.it, "should work just fine", (function (param) {
                                    var partial_arg = /\r\n/g;
                                    var replaceCRLF = function (param) {
                                      return param.replace(partial_arg, "\n");
                                    };
                                    return $$Promise.flatMapOk(acquire(setup), (function (setup) {
                                                  return $$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMapOk($$Promise.flatMap(SigImpl$AgdaModeVscode.insertText(setup.editor, Curry._2(Editor_Point.make, 0, 0), "\n\n\n"), (function (param) {
                                                                                            return activate(setup, positions, undefined);
                                                                                          })), Curry._1(Test__Util.A.equal, /* Activate */1)), (function (param) {
                                                                                    return insertChar(setup, "b");
                                                                                  })), Curry._1(Test__Util.A.equal, /* Change */0)), (function (param) {
                                                                            return Curry._2(Test__Util.A.equal, "♭\n♭\n♭\n♭", Curry._1(replaceCRLF, SigImpl$AgdaModeVscode.getText(setup.editor)));
                                                                          })), (function (param) {
                                                                        return insertChar(setup, "n");
                                                                      })), Curry._1(Test__Util.A.equal, /* Change */0)), (function (param) {
                                                                return Curry._2(Test__Util.A.equal, "𝕟\n𝕟\n𝕟\n𝕟", Curry._1(replaceCRLF, SigImpl$AgdaModeVscode.getText(setup.editor)));
                                                              }));
                                                }));
                                  }));
                    }));
      }));

var Js$prime;

var Js;

exports.Impl = Impl;
exports.Test__Util = Test__Util;
exports.Goal = Goal;
exports.Task = Task;
exports.EditorIM = EditorIM;
exports.GoalHandler = GoalHandler;
exports.Js$prime = Js$prime;
exports.Js = Js;
exports.activateExtension = activateExtension;
exports.acquire = acquire;
exports.cleanup = cleanup;
exports.insertChar = insertChar;
exports.backspace = backspace;
exports.IM = IM;
/* Test__Util Not a pure module */
