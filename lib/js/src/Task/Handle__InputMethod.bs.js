// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Task$AgdaModeVscode = require("./Task.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Buffer$AgdaModeVscode = require("../InputMethod/Buffer.bs.js");
var InputMethod$AgdaModeVscode = require("../InputMethod/InputMethod.bs.js");

function Impl(Editor) {
  var $$Buffer = Buffer$AgdaModeVscode.Impl(Editor);
  var Task = Task$AgdaModeVscode.Impl(Editor);
  var InputMethod = InputMethod$AgdaModeVscode.Impl(Editor);
  var handle = function (input) {
    if (typeof input === "number") {
      switch (input) {
        case /* Activate */0 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* WithStateP */Caml_chrome_debugger.variant("WithStateP", 8, [(function (state) {
                              var match = state.inputMethod.activated;
                              switch (match) {
                                case /* ByEditor */0 :
                                    Curry._1(InputMethod.insertBackslash, state.editor);
                                    Curry._1(InputMethod.deactivate, state.inputMethod);
                                    return $$Promise.resolved(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                  /* ViewEvent */Caml_chrome_debugger.variant("ViewEvent", 2, [/* InputMethod */Caml_chrome_debugger.variant("InputMethod", 2, [/* Deactivate */1])]),
                                                  /* [] */0
                                                ]));
                                case /* ByQuery */1 :
                                    return $$Promise.resolved(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                  /* Debug */Caml_chrome_debugger.variant("Debug", 9, [":D"]),
                                                  /* [] */0
                                                ]));
                                case /* No */2 :
                                    state.inputMethod.activated = /* ByEditor */0;
                                    var startingRanges = Belt_Array.map(Curry._1(Editor.getSelectionRanges, state.editor), (function (range) {
                                            return /* tuple */[
                                                    Curry._2(Editor.offsetAtPoint, state.editor, Curry._1(Editor.$$Range.start, range)),
                                                    Curry._2(Editor.offsetAtPoint, state.editor, Curry._1(Editor.$$Range.end_, range))
                                                  ];
                                          }));
                                    Curry._3(InputMethod.activate, state.inputMethod, state.editor, startingRanges);
                                    return $$Promise.resolved(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                  /* ViewEvent */Caml_chrome_debugger.variant("ViewEvent", 2, [/* InputMethod */Caml_chrome_debugger.variant("InputMethod", 2, [/* Activate */0])]),
                                                  /* [] */0
                                                ]));
                                
                              }
                            })]),
                      /* [] */0
                    ]);
        case /* Deactivate */1 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* WithState */Caml_chrome_debugger.variant("WithState", 7, [(function (state) {
                              state.inputMethod.activated = /* No */2;
                              return Curry._1(InputMethod.deactivate, state.inputMethod);
                            })]),
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* ViewEvent */Caml_chrome_debugger.variant("ViewEvent", 2, [/* InputMethod */Caml_chrome_debugger.variant("InputMethod", 2, [/* Deactivate */1])]),
                          /* [] */0
                        ])
                    ]);
        case /* MoveUp */2 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* WithState */Caml_chrome_debugger.variant("WithState", 7, [(function (state) {
                              return Curry._2(InputMethod.moveUp, state.inputMethod, state.editor);
                            })]),
                      /* [] */0
                    ]);
        case /* MoveRight */3 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* WithState */Caml_chrome_debugger.variant("WithState", 7, [(function (state) {
                              return Curry._2(InputMethod.moveRight, state.inputMethod, state.editor);
                            })]),
                      /* [] */0
                    ]);
        case /* MoveDown */4 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* WithState */Caml_chrome_debugger.variant("WithState", 7, [(function (state) {
                              return Curry._2(InputMethod.moveDown, state.inputMethod, state.editor);
                            })]),
                      /* [] */0
                    ]);
        case /* MoveLeft */5 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* WithState */Caml_chrome_debugger.variant("WithState", 7, [(function (state) {
                              return Curry._2(InputMethod.moveLeft, state.inputMethod, state.editor);
                            })]),
                      /* [] */0
                    ]);
        
      }
    } else {
      switch (input.tag | 0) {
        case /* QueryChange */0 :
            var input$1 = input[0];
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* Debug */Caml_chrome_debugger.variant("Debug", 9, ["QueryChange " + input$1]),
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* WithStateP */Caml_chrome_debugger.variant("WithStateP", 8, [(function (state) {
                                  var shouldActivate = input$1.endsWith("\\");
                                  var deactivateByEditor = function (param) {
                                    Curry._1(InputMethod.deactivate, state.inputMethod);
                                    return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                              /* ViewEvent */Caml_chrome_debugger.variant("ViewEvent", 2, [/* InputMethod */Caml_chrome_debugger.variant("InputMethod", 2, [/* Deactivate */1])]),
                                              /* [] */0
                                            ]);
                                  };
                                  var activateByQuery = function (param) {
                                    state.inputMethod.activated = /* ByQuery */1;
                                    var input$2 = input$1.substring(0, input$1.length - 1 | 0);
                                    return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                              /* ViewEvent */Caml_chrome_debugger.variant("ViewEvent", 2, [/* InputMethod */Caml_chrome_debugger.variant("InputMethod", 2, [/* Activate */0])]),
                                              /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                  /* ViewEvent */Caml_chrome_debugger.variant("ViewEvent", 2, [/* QueryUpdate */Caml_chrome_debugger.variant("QueryUpdate", 1, [input$2])]),
                                                  /* [] */0
                                                ])
                                            ]);
                                  };
                                  var match = state.inputMethod.activated;
                                  switch (match) {
                                    case /* ByEditor */0 :
                                        if (shouldActivate) {
                                          return $$Promise.resolved(Belt_List.concatMany([
                                                          deactivateByEditor(undefined),
                                                          activateByQuery(undefined)
                                                        ]));
                                        } else {
                                          return $$Promise.resolved(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                        /* Debug */Caml_chrome_debugger.variant("Debug", 9, ["ByEditor => ByEditor"]),
                                                        /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                            /* ViewEvent */Caml_chrome_debugger.variant("ViewEvent", 2, [/* QueryUpdate */Caml_chrome_debugger.variant("QueryUpdate", 1, [input$1])]),
                                                            /* [] */0
                                                          ])
                                                      ]));
                                        }
                                    case /* ByQuery */1 :
                                        Curry._1($$Buffer.make, undefined);
                                        return $$Promise.resolved(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                      /* Debug */Caml_chrome_debugger.variant("Debug", 9, ["ByQuery => ByQuery"]),
                                                      /* [] */0
                                                    ]));
                                    case /* No */2 :
                                        if (shouldActivate) {
                                          return $$Promise.resolved(activateByQuery(undefined));
                                        } else {
                                          return $$Promise.resolved(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                        /* ViewEvent */Caml_chrome_debugger.variant("ViewEvent", 2, [/* QueryUpdate */Caml_chrome_debugger.variant("QueryUpdate", 1, [input$1])]),
                                                        /* [] */0
                                                      ]));
                                        }
                                    
                                  }
                                })]),
                          /* [] */0
                        ])
                    ]);
        case /* Update */1 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* ViewEvent */Caml_chrome_debugger.variant("ViewEvent", 2, [/* InputMethod */Caml_chrome_debugger.variant("InputMethod", 2, [/* Update */Caml_chrome_debugger.simpleVariant("Update", [
                                  input[0],
                                  input[1],
                                  input[2]
                                ])])]),
                      /* [] */0
                    ]);
        case /* InsertChar */2 :
            var $$char = input[0];
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* WithState */Caml_chrome_debugger.variant("WithState", 7, [(function (state) {
                              return Curry._2(InputMethod.insertChar, state.editor, $$char);
                            })]),
                      /* [] */0
                    ]);
        case /* ChooseSymbol */3 :
            var symbol = input[0];
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* WithState */Caml_chrome_debugger.variant("WithState", 7, [(function (state) {
                              return Curry._3(InputMethod.chooseSymbol, state.inputMethod, state.editor, symbol);
                            })]),
                      /* [] */0
                    ]);
        
      }
    }
  };
  return {
          $$Buffer: $$Buffer,
          Task: Task,
          InputMethod: InputMethod,
          handle: handle
        };
}

exports.Impl = Impl;
/* Promise Not a pure module */
