// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var VSCode = require("bs-vscode/lib/js/src/VSCode.bs.js");
var Vscode = require("vscode");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Chan$AgdaModeVscode = require("./Util/Chan.bs.js");
var VscodeLanguageclient = require("vscode-languageclient");

var Message = {};

function toEnum(x) {
  if (x) {
    return 2;
  } else {
    return 1;
  }
}

var ErrorAction = {
  toEnum: toEnum
};

function toEnum$1(x) {
  if (x) {
    return 2;
  } else {
    return 1;
  }
}

var CloseAction = {
  toEnum: toEnum$1
};

function make(error, closed) {
  var error$1 = function (a, b, c) {
    var x = Curry._3(error, a, b, c);
    if (x) {
      return 2;
    } else {
      return 1;
    }
  };
  var closed$1 = function (param) {
    var x = Curry._1(closed, undefined);
    if (x) {
      return 2;
    } else {
      return 1;
    }
  };
  return {
          error: error$1,
          closed: closed$1
        };
}

function makeDefault(name, maxRestartCount) {
  var restarts = [];
  return make((function (param, param$1, count) {
                if (count !== undefined && count <= 3) {
                  return /* Continue */0;
                } else {
                  return /* Shutdown */1;
                }
              }), (function (param) {
                restarts.push(Date.now());
                var length = restarts.length;
                if (length <= maxRestartCount) {
                  return /* Restart */1;
                }
                var diff = Belt_Option.flatMap(Belt_Array.get(restarts, length - 1 | 0), (function (latest) {
                        return Belt_Option.map(Belt_Array.get(restarts, 0), (function (first) {
                                      return latest - first;
                                    }));
                      }));
                if (diff === undefined) {
                  return /* Restart */1;
                }
                if ((diff | 0) <= 180000) {
                  var max = String(maxRestartCount + 1 | 0);
                  Vscode.window.showErrorMessage("The " + name + "server crashed " + max + " times in the last 3 minutes. The server will not be restarted.");
                  return /* DoNotRestart */0;
                }
                restarts.shift();
                return /* Restart */1;
              }));
}

var ErrorHandler = {
  make: make,
  makeDefault: makeDefault
};

var make$1 = (function (documentSelector, synchronize, errorHandler) {
      return {
		    documentSelector: documentSelector,
		    synchronize: synchronize,
        errorHandler: errorHandler
      }
    });

var LanguageClientOptions = {
  make: make$1
};

var makeWithCommand = (function (command) {
      return { command: command }
    });

var makeWithStreamInfo = (function (port) {
      const net = require('net');
      const socket = net.createConnection({ port: port })
      return (() => { return new Promise(resolve => resolve({
        writer: socket,
        reader: socket
      })
      )})
    });

var ServerOptions = {
  makeWithCommand: makeWithCommand,
  makeWithStreamInfo: makeWithStreamInfo
};

var LanguageClient = {};

var errorChan = Chan$AgdaModeVscode.make(undefined);

var dataChan = Chan$AgdaModeVscode.make(undefined);

function onError(callback) {
  return new Vscode.Disposable(Chan$AgdaModeVscode.on(errorChan, callback));
}

function onData(callback) {
  return new Vscode.Disposable(Chan$AgdaModeVscode.on(dataChan, callback));
}

function sendRequest(self, data) {
  return $$Promise.flatMapOk($$Promise.Js.toResult(self.client.onReady()), (function (param) {
                return $$Promise.Js.toResult(self.client.sendRequest("agda", data));
              }));
}

function destroy(self) {
  self.subscription.dispose();
  return $$Promise.map($$Promise.Js.toResult(self.client.stop()), (function (param) {
                
              }));
}

function make$2(devMode, method) {
  var serverOptions = method === /* ViaTCP */1 ? makeWithStreamInfo(3000) : makeWithCommand("als");
  var documentSelector = [VSCode.StringOr.others({
          language: "agda",
          pattern: undefined,
          scheme: "file"
        })];
  var synchronize = Vscode.workspace.createFileSystemWatcher('**/.clientrc', false, false, false);
  var errorHandler = devMode ? make((function (exn, _msg, _count) {
            Chan$AgdaModeVscode.emit(errorChan, exn);
            return /* Shutdown */1;
          }), (function (param) {
            return /* DoNotRestart */0;
          })) : makeDefault("Agda", 3);
  var clientOptions = make$1(documentSelector, synchronize, errorHandler);
  var languageClient = new VscodeLanguageclient.LanguageClient("agdaLanguageServer", "Agda Language Server", serverOptions, clientOptions);
  var self = {
    client: languageClient,
    queue: [],
    subscription: languageClient.start()
  };
  return $$Promise.map($$Promise.race({
                  hd: $$Promise.Js.toResult(self.client.onReady()),
                  tl: {
                    hd: $$Promise.map(Chan$AgdaModeVscode.once(errorChan), (function (err) {
                            return {
                                    TAG: 1,
                                    _0: err,
                                    [Symbol.for("name")]: "Error"
                                  };
                          })),
                    tl: /* [] */0
                  }
                }), (function (result) {
                if (result.TAG !== /* Ok */0) {
                  return {
                          TAG: 1,
                          _0: result._0,
                          [Symbol.for("name")]: "Error"
                        };
                }
                var flag = {
                  contents: true
                };
                self.client.onNotification("agda", (function (json) {
                        if (flag.contents) {
                          Chan$AgdaModeVscode.emit(dataChan, json);
                          flag.contents = false;
                        } else {
                          flag.contents = true;
                        }
                        
                      }));
                return {
                        TAG: 0,
                        _0: self,
                        [Symbol.for("name")]: "Ok"
                      };
              }));
}

var Client = {
  onError: onError,
  onData: onData,
  sendRequest: sendRequest,
  destroy: destroy,
  make: make$2
};

exports.Message = Message;
exports.ErrorAction = ErrorAction;
exports.CloseAction = CloseAction;
exports.ErrorHandler = ErrorHandler;
exports.LanguageClientOptions = LanguageClientOptions;
exports.ServerOptions = ServerOptions;
exports.LanguageClient = LanguageClient;
exports.Client = Client;
/* errorChan Not a pure module */
