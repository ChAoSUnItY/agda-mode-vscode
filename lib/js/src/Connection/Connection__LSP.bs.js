// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Net = require("net");
var Json = require("@glennsl/bs-json/lib/js/src/Json.bs.js");
var Curry = require("bs-platform/lib/js/curry.js");
var VSCode = require("bs-vscode/lib/js/src/VSCode.bs.js");
var Vscode = require("vscode");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/lib/js/src/Json_encode.bs.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var LSP$AgdaModeVscode = require("../LSP.bs.js");
var Chan$AgdaModeVscode = require("../Util/Chan.bs.js");
var Util$AgdaModeVscode = require("../Util/Util.bs.js");
var Parser$AgdaModeVscode = require("../Parser.bs.js");
var VscodeLanguageclient = require("vscode-languageclient");
var Process$AgdaModeVscode = require("../Process.bs.js");
var Response$AgdaModeVscode = require("../Response.bs.js");
var Component$AgdaModeVscode = require("../View/Component/Component.bs.js");
var Highlighting$AgdaModeVscode = require("../Highlighting.bs.js");
var Connection__Scheduler$AgdaModeVscode = require("./Connection__Scheduler.bs.js");

function toString(x) {
  if (x.TAG === /* CannotDecodeJSON */0) {
    return "Cannot decode JSON: \n" + x._0;
  } else {
    return "Cannot read IOTCM: \n" + x._0;
  }
}

var decode = Util$AgdaModeVscode.Decode.sum(function (x) {
      switch (x) {
        case "CmdErrCannotDecodeJSON" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (version) {
                                      return {
                                              TAG: 0,
                                              _0: version,
                                              [Symbol.for("name")]: "CannotDecodeJSON"
                                            };
                                    }), Json_decode.string, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "CmdErrCannotParseCommand" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (version) {
                                      return {
                                              TAG: 1,
                                              _0: version,
                                              [Symbol.for("name")]: "CannotParseCommand"
                                            };
                                    }), Json_decode.string, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        default:
          throw {
                RE_EXN_ID: Json_decode.DecodeError,
                _1: "[LSP.CommandErr] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

var CommandErr = {
  toString: toString,
  decode: decode
};

function toString$1(error) {
  if (typeof error === "number") {
    if (error === /* Initialize */0) {
      return [
              "[LSP] Cannot Initialize Connection",
              ""
            ];
    } else {
      return [
              "Connection not established yet",
              ""
            ];
    }
  }
  switch (error.TAG | 0) {
    case /* CannotConnectViaStdIO */0 :
        var match = Curry._1(Process$AgdaModeVscode.PathSearch.$$Error.toString, error._0);
        return [
                "Cannot locate \"als\"",
                match[1] + "\nPlease make sure that the executable is in the path"
              ];
    case /* CannotConnectViaTCP */1 :
        return [
                "Cannot connect with the server",
                "Please enter \":main -d\" in ghci"
              ];
    case /* Connection */2 :
        var exn = error._0;
        var isECONNREFUSED = Belt_Option.mapWithDefault(exn.message, false, (function (param) {
                return param.startsWith("connect ECONNREFUSED");
              }));
        if (isECONNREFUSED) {
          return [
                  "[LSP] Connection Error",
                  "Please enter \":main -d\" in ghci"
                ];
        } else {
          return [
                  "[LSP] Client Internal Connection Error",
                  Belt_Option.getWithDefault(exn.message, "")
                ];
        }
    case /* SendCommand */3 :
        return [
                "[LSP] Cannot Send Command",
                toString(error._0)
              ];
    case /* CannotDecodeCommandRes */4 :
        return [
                "[LSP] Cannot Send Command",
                "Cannot decode the result after sending command" + error._0 + "\n" + Json.stringify(error._1)
              ];
    case /* CannotDecodeResponse */5 :
        return [
                "[LSP] Cannot Parse Response",
                "Cannot decode responses from the server" + error._0 + "\n" + Json.stringify(error._1)
              ];
    case /* ResponseParseError */6 :
        return [
                "Internal Parse Error",
                Parser$AgdaModeVscode.$$Error.toString(error._0)
              ];
    
  }
}

var $$Error = {
  CommandErr: CommandErr,
  toString: toString$1
};

function encode(x) {
  if (x) {
    return Json_encode.object_({
                hd: [
                  "tag",
                  "CmdReq"
                ],
                tl: {
                  hd: [
                    "contents",
                    x._0
                  ],
                  tl: /* [] */0
                }
              });
  } else {
    return Json_encode.object_({
                hd: [
                  "tag",
                  "CmdReqSYN"
                ],
                tl: /* [] */0
              });
  }
}

var CommandReq = {
  encode: encode
};

function fromJsError(error) {
  return (function (e) {return e.toString()})(error);
}

var decode$1 = Util$AgdaModeVscode.Decode.sum(function (x) {
      switch (x) {
        case "CmdRes" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (error) {
                                      return {
                                              TAG: 1,
                                              _0: error,
                                              [Symbol.for("name")]: "Result"
                                            };
                                    }), (function (param) {
                                      return Json_decode.optional(decode, param);
                                    }), param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "CmdResACK" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (version) {
                                      return {
                                              TAG: 0,
                                              _0: version,
                                              [Symbol.for("name")]: "ACK"
                                            };
                                    }), Json_decode.string, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        default:
          throw {
                RE_EXN_ID: Json_decode.DecodeError,
                _1: "[LSP.CommandRes] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

var CommandRes = {
  fromJsError: fromJsError,
  decode: decode$1
};

var decode$2 = Util$AgdaModeVscode.Decode.sum(function (x) {
      switch (x) {
        case "DisplayInfoAllGoalsWarnings" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (param) {
                                      return {
                                              TAG: 2,
                                              _0: param[0],
                                              _1: param[1],
                                              _2: param[2],
                                              _3: param[3],
                                              _4: param[4],
                                              [Symbol.for("name")]: "AllGoalsWarnings"
                                            };
                                    }), (function (param) {
                                      return Util$AgdaModeVscode.Decode.tuple5(Json_decode.string, (function (param) {
                                                    return Json_decode.array(Component$AgdaModeVscode.Item.decode, param);
                                                  }), (function (param) {
                                                    return Json_decode.array(Component$AgdaModeVscode.Item.decode, param);
                                                  }), (function (param) {
                                                    return Json_decode.array(Json_decode.string, param);
                                                  }), (function (param) {
                                                    return Json_decode.array(Json_decode.string, param);
                                                  }), param);
                                    }), param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "DisplayInfoAuto" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (body) {
                                      return {
                                              TAG: 5,
                                              _0: body,
                                              [Symbol.for("name")]: "Auto"
                                            };
                                    }), Json_decode.string, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "DisplayInfoCompilationOk" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (param) {
                                      return {
                                              TAG: 1,
                                              _0: param[0],
                                              _1: param[1],
                                              [Symbol.for("name")]: "CompilationOk"
                                            };
                                    }), (function (param) {
                                      return Json_decode.pair((function (param) {
                                                    return Json_decode.array(Json_decode.string, param);
                                                  }), (function (param) {
                                                    return Json_decode.array(Json_decode.string, param);
                                                  }), param);
                                    }), param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "DisplayInfoCurrentGoal" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (body) {
                                      return {
                                              TAG: 3,
                                              _0: body,
                                              [Symbol.for("name")]: "CurrentGoal"
                                            };
                                    }), Component$AgdaModeVscode.Item.decode, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "DisplayInfoError" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (body) {
                                      return {
                                              TAG: 6,
                                              _0: body,
                                              [Symbol.for("name")]: "Error'"
                                            };
                                    }), Json_decode.string, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "DisplayInfoGeneric" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (param) {
                                      return {
                                              TAG: 0,
                                              _0: param[0],
                                              _1: param[1],
                                              [Symbol.for("name")]: "Generic"
                                            };
                                    }), (function (param) {
                                      return Json_decode.pair(Json_decode.string, (function (param) {
                                                    return Json_decode.array(Component$AgdaModeVscode.Item.decode, param);
                                                  }), param);
                                    }), param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "DisplayInfoInferredType" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (body) {
                                      return {
                                              TAG: 4,
                                              _0: body,
                                              [Symbol.for("name")]: "InferredType"
                                            };
                                    }), Component$AgdaModeVscode.Item.decode, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "DisplayInfoNormalForm" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (body) {
                                      return {
                                              TAG: 8,
                                              _0: body,
                                              [Symbol.for("name")]: "NormalForm"
                                            };
                                    }), Json_decode.string, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "DisplayInfoTime" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (body) {
                                      return {
                                              TAG: 7,
                                              _0: body,
                                              [Symbol.for("name")]: "Time"
                                            };
                                    }), Json_decode.string, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        default:
          throw {
                RE_EXN_ID: Json_decode.DecodeError,
                _1: "[LSP.DisplayInfo] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

var DisplayInfo = {
  decode: decode$2
};

function toString$2(x) {
  if (typeof x === "number") {
    return "========";
  }
  switch (x.TAG | 0) {
    case /* ResponseNonLast */0 :
        return Response$AgdaModeVscode.toString(x._0);
    case /* ResponseLast */1 :
        return "[Last " + String(x._0) + "] " + Response$AgdaModeVscode.toString(x._1);
    case /* ResponseParseError */2 :
        return Parser$AgdaModeVscode.$$Error.toString(x._0);
    
  }
}

var decode$3 = Util$AgdaModeVscode.Decode.sum(function (x) {
      switch (x) {
        case "ResponseClearHighlightingNotOnlyTokenBased" :
        case "ResponseClearHighlightingTokenBased" :
            return {
                    TAG: 1,
                    _0: {
                      TAG: 0,
                      _0: /* ClearHighlighting */1,
                      [Symbol.for("name")]: "ResponseNonLast"
                    },
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "ResponseClearRunningInfo" :
            return {
                    TAG: 1,
                    _0: {
                      TAG: 0,
                      _0: /* ClearRunningInfo */0,
                      [Symbol.for("name")]: "ResponseNonLast"
                    },
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "ResponseDisplayInfo" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (info) {
                                      switch (info.TAG | 0) {
                                        case /* Generic */0 :
                                            return {
                                                    TAG: 0,
                                                    _0: {
                                                      TAG: 9,
                                                      _0: {
                                                        TAG: 0,
                                                        _0: info._0,
                                                        _1: info._1,
                                                        [Symbol.for("name")]: "Generic"
                                                      },
                                                      [Symbol.for("name")]: "DisplayInfo"
                                                    },
                                                    [Symbol.for("name")]: "ResponseNonLast"
                                                  };
                                        case /* CompilationOk */1 :
                                            return {
                                                    TAG: 0,
                                                    _0: {
                                                      TAG: 9,
                                                      _0: {
                                                        TAG: 2,
                                                        _0: info._0,
                                                        _1: info._1,
                                                        [Symbol.for("name")]: "CompilationOkLSP"
                                                      },
                                                      [Symbol.for("name")]: "DisplayInfo"
                                                    },
                                                    [Symbol.for("name")]: "ResponseNonLast"
                                                  };
                                        case /* AllGoalsWarnings */2 :
                                            return {
                                                    TAG: 0,
                                                    _0: {
                                                      TAG: 9,
                                                      _0: {
                                                        TAG: 5,
                                                        _0: info._0,
                                                        _1: info._1,
                                                        _2: info._2,
                                                        _3: info._3,
                                                        _4: info._4,
                                                        [Symbol.for("name")]: "AllGoalsWarningsLSP"
                                                      },
                                                      [Symbol.for("name")]: "DisplayInfo"
                                                    },
                                                    [Symbol.for("name")]: "ResponseNonLast"
                                                  };
                                        case /* CurrentGoal */3 :
                                            return {
                                                    TAG: 0,
                                                    _0: {
                                                      TAG: 9,
                                                      _0: {
                                                        TAG: 16,
                                                        _0: info._0,
                                                        [Symbol.for("name")]: "CurrentGoalLSP"
                                                      },
                                                      [Symbol.for("name")]: "DisplayInfo"
                                                    },
                                                    [Symbol.for("name")]: "ResponseNonLast"
                                                  };
                                        case /* InferredType */4 :
                                            return {
                                                    TAG: 0,
                                                    _0: {
                                                      TAG: 9,
                                                      _0: {
                                                        TAG: 18,
                                                        _0: info._0,
                                                        [Symbol.for("name")]: "InferredTypeLSP"
                                                      },
                                                      [Symbol.for("name")]: "DisplayInfo"
                                                    },
                                                    [Symbol.for("name")]: "ResponseNonLast"
                                                  };
                                        case /* Auto */5 :
                                            return {
                                                    TAG: 0,
                                                    _0: {
                                                      TAG: 9,
                                                      _0: {
                                                        TAG: 9,
                                                        _0: info._0,
                                                        [Symbol.for("name")]: "Auto"
                                                      },
                                                      [Symbol.for("name")]: "DisplayInfo"
                                                    },
                                                    [Symbol.for("name")]: "ResponseNonLast"
                                                  };
                                        case /* Error' */6 :
                                            return {
                                                    TAG: 0,
                                                    _0: {
                                                      TAG: 9,
                                                      _0: {
                                                        TAG: 7,
                                                        _0: info._0,
                                                        [Symbol.for("name")]: "Error"
                                                      },
                                                      [Symbol.for("name")]: "DisplayInfo"
                                                    },
                                                    [Symbol.for("name")]: "ResponseNonLast"
                                                  };
                                        case /* Time */7 :
                                            return {
                                                    TAG: 0,
                                                    _0: {
                                                      TAG: 9,
                                                      _0: {
                                                        TAG: 6,
                                                        _0: info._0,
                                                        [Symbol.for("name")]: "Time"
                                                      },
                                                      [Symbol.for("name")]: "DisplayInfo"
                                                    },
                                                    [Symbol.for("name")]: "ResponseNonLast"
                                                  };
                                        case /* NormalForm */8 :
                                            return {
                                                    TAG: 0,
                                                    _0: {
                                                      TAG: 9,
                                                      _0: {
                                                        TAG: 13,
                                                        _0: info._0,
                                                        [Symbol.for("name")]: "NormalForm"
                                                      },
                                                      [Symbol.for("name")]: "DisplayInfo"
                                                    },
                                                    [Symbol.for("name")]: "ResponseNonLast"
                                                  };
                                        
                                      }
                                    }), decode$2, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "ResponseDoneAborting" :
            return {
                    TAG: 1,
                    _0: {
                      TAG: 0,
                      _0: /* DoneAborting */2,
                      [Symbol.for("name")]: "ResponseNonLast"
                    },
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "ResponseDoneExiting" :
            return {
                    TAG: 1,
                    _0: {
                      TAG: 0,
                      _0: /* DoneExiting */3,
                      [Symbol.for("name")]: "ResponseNonLast"
                    },
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "ResponseEnd" :
            return {
                    TAG: 1,
                    _0: /* ResponseEnd */0,
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "ResponseGiveAction" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (param) {
                                      return {
                                              TAG: 0,
                                              _0: {
                                                TAG: 6,
                                                _0: param[0],
                                                _1: param[1],
                                                [Symbol.for("name")]: "GiveAction"
                                              },
                                              [Symbol.for("name")]: "ResponseNonLast"
                                            };
                                    }), (function (param) {
                                      return Json_decode.pair(Json_decode.$$int, Response$AgdaModeVscode.GiveAction.decode, param);
                                    }), param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "ResponseHighlightingInfoDirect" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (param) {
                                      return {
                                              TAG: 0,
                                              _0: {
                                                TAG: 0,
                                                _0: param._0,
                                                _1: param._1,
                                                [Symbol.for("name")]: "HighlightingInfoDirect"
                                              },
                                              [Symbol.for("name")]: "ResponseNonLast"
                                            };
                                    }), Highlighting$AgdaModeVscode.Infos.decode, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "ResponseHighlightingInfoIndirect" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (filePath) {
                                      return {
                                              TAG: 0,
                                              _0: {
                                                TAG: 2,
                                                _0: filePath,
                                                [Symbol.for("name")]: "HighlightingInfoIndirectJSON"
                                              },
                                              [Symbol.for("name")]: "ResponseNonLast"
                                            };
                                    }), Json_decode.string, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "ResponseInteractionPoints" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (ids) {
                                      return {
                                              TAG: 1,
                                              _0: 1,
                                              _1: {
                                                TAG: 5,
                                                _0: ids,
                                                [Symbol.for("name")]: "InteractionPoints"
                                              },
                                              [Symbol.for("name")]: "ResponseLast"
                                            };
                                    }), (function (param) {
                                      return Json_decode.array(Json_decode.$$int, param);
                                    }), param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "ResponseJumpToError" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (param) {
                                      return {
                                              TAG: 1,
                                              _0: 3,
                                              _1: {
                                                TAG: 4,
                                                _0: param[0],
                                                _1: param[1],
                                                [Symbol.for("name")]: "JumpToError"
                                              },
                                              [Symbol.for("name")]: "ResponseLast"
                                            };
                                    }), (function (param) {
                                      return Json_decode.pair(Json_decode.string, Json_decode.$$int, param);
                                    }), param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "ResponseMakeCaseExtendedLambda" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (payload) {
                                      return {
                                              TAG: 1,
                                              _0: 2,
                                              _1: {
                                                TAG: 7,
                                                _0: /* ExtendedLambda */1,
                                                _1: payload,
                                                [Symbol.for("name")]: "MakeCase"
                                              },
                                              [Symbol.for("name")]: "ResponseLast"
                                            };
                                    }), (function (param) {
                                      return Json_decode.array(Json_decode.string, param);
                                    }), param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "ResponseMakeCaseFunction" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (payload) {
                                      return {
                                              TAG: 1,
                                              _0: 2,
                                              _1: {
                                                TAG: 7,
                                                _0: /* Function */0,
                                                _1: payload,
                                                [Symbol.for("name")]: "MakeCase"
                                              },
                                              [Symbol.for("name")]: "ResponseLast"
                                            };
                                    }), (function (param) {
                                      return Json_decode.array(Json_decode.string, param);
                                    }), param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "ResponseRunningInfo" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (param) {
                                      return {
                                              TAG: 0,
                                              _0: {
                                                TAG: 10,
                                                _0: param[0],
                                                _1: param[1],
                                                [Symbol.for("name")]: "RunningInfo"
                                              },
                                              [Symbol.for("name")]: "ResponseNonLast"
                                            };
                                    }), (function (param) {
                                      return Json_decode.pair(Json_decode.$$int, Json_decode.string, param);
                                    }), param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "ResponseSolveAll" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (payloads) {
                                      return {
                                              TAG: 1,
                                              _0: 2,
                                              _1: {
                                                TAG: 8,
                                                _0: payloads,
                                                [Symbol.for("name")]: "SolveAll"
                                              },
                                              [Symbol.for("name")]: "ResponseLast"
                                            };
                                    }), (function (param) {
                                      return Json_decode.array((function (param) {
                                                    return Json_decode.pair(Json_decode.$$int, Json_decode.string, param);
                                                  }), param);
                                    }), param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "ResponseStatus" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (param) {
                                      return {
                                              TAG: 0,
                                              _0: {
                                                TAG: 3,
                                                _0: param[0],
                                                _1: param[1],
                                                [Symbol.for("name")]: "Status"
                                              },
                                              [Symbol.for("name")]: "ResponseNonLast"
                                            };
                                    }), (function (param) {
                                      return Json_decode.pair(Json_decode.bool, Json_decode.bool, param);
                                    }), param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        default:
          throw {
                RE_EXN_ID: Json_decode.DecodeError,
                _1: "[LSP.Response] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

var LSPResponse = {
  DisplayInfo: DisplayInfo,
  toString: toString$2,
  decode: decode$3
};

var errorChan = Chan$AgdaModeVscode.make(undefined);

var dataChan = Chan$AgdaModeVscode.make(undefined);

function onError(callback) {
  return new Vscode.Disposable(Chan$AgdaModeVscode.on(errorChan, (function (e) {
                    return Curry._1(callback, {
                                TAG: 2,
                                _0: e,
                                [Symbol.for("name")]: "Connection"
                              });
                  })));
}

function sendRequest(self, data) {
  return $$Promise.mapError($$Promise.flatMapOk($$Promise.Js.toResult(self.client.onReady()), (function (param) {
                    return $$Promise.Js.toResult(self.client.sendRequest("agda", data));
                  })), (function (exn) {
                return {
                        TAG: 2,
                        _0: exn,
                        [Symbol.for("name")]: "Connection"
                      };
              }));
}

function destroy(self) {
  self.subscription.dispose();
  return $$Promise.map($$Promise.Js.toResult(self.client.stop()), (function (param) {
                
              }));
}

function make(method) {
  var serverOptions;
  serverOptions = method.TAG === /* ViaStdIO */0 ? LSP$AgdaModeVscode.ServerOptions.makeWithCommand(method._0) : LSP$AgdaModeVscode.ServerOptions.makeWithStreamInfo(method._0);
  var documentSelector = [VSCode.StringOr.others({
          language: "agda",
          pattern: undefined,
          scheme: "file"
        })];
  var synchronize = Vscode.workspace.createFileSystemWatcher('**/.clientrc', false, false, false);
  var errorHandler = LSP$AgdaModeVscode.ErrorHandler.make((function (exn, _msg, _count) {
          Chan$AgdaModeVscode.emit(errorChan, exn);
          return /* Shutdown */1;
        }), (function (param) {
          return /* DoNotRestart */0;
        }));
  var clientOptions = LSP$AgdaModeVscode.LanguageClientOptions.make(documentSelector, synchronize, errorHandler);
  var languageClient = new VscodeLanguageclient.LanguageClient("agdaLanguageServer", "Agda Language Server", serverOptions, clientOptions);
  var self_subscription = languageClient.start();
  var self = {
    client: languageClient,
    subscription: self_subscription,
    method: method
  };
  return $$Promise.map($$Promise.race({
                  hd: $$Promise.Js.toResult(languageClient.onReady()),
                  tl: {
                    hd: $$Promise.map(Chan$AgdaModeVscode.once(errorChan), (function (err) {
                            return {
                                    TAG: 1,
                                    _0: err,
                                    [Symbol.for("name")]: "Error"
                                  };
                          })),
                    tl: /* [] */0
                  }
                }), (function (result) {
                if (result.TAG !== /* Ok */0) {
                  return {
                          TAG: 1,
                          _0: {
                            TAG: 2,
                            _0: result._0,
                            [Symbol.for("name")]: "Connection"
                          },
                          [Symbol.for("name")]: "Error"
                        };
                }
                languageClient.onRequest("agda", (function (json) {
                        Chan$AgdaModeVscode.emit(dataChan, json);
                        return $$Promise.resolved(undefined);
                      }));
                return {
                        TAG: 0,
                        _0: self,
                        [Symbol.for("name")]: "Ok"
                      };
              }));
}

function probe(tryTCP, port, name) {
  var probeStdIO = function (name) {
    return $$Promise.mapError($$Promise.mapOk(Process$AgdaModeVscode.PathSearch.run(name), (function (path) {
                      return {
                              TAG: 0,
                              _0: name,
                              _1: path.trim(),
                              [Symbol.for("name")]: "ViaStdIO"
                            };
                    })), (function (e) {
                  return {
                          TAG: 0,
                          _0: e,
                          [Symbol.for("name")]: "CannotConnectViaStdIO"
                        };
                }));
  };
  var probeTCP = function (port) {
    var match = $$Promise.pending(undefined);
    var resolve = match[1];
    var socket = Net.connect(port, (function (param) {
            return Curry._1(resolve, {
                        TAG: 0,
                        _0: undefined,
                        [Symbol.for("name")]: "Ok"
                      });
          }));
    socket.on("error", (function (exn) {
            return Curry._1(resolve, {
                        TAG: 1,
                        _0: exn,
                        [Symbol.for("name")]: "Error"
                      });
          }));
    return $$Promise.mapOk(match[0], (function (param) {
                  socket.destroy();
                  return {
                          TAG: 1,
                          _0: port,
                          [Symbol.for("name")]: "ViaTCP"
                        };
                }));
  };
  if (tryTCP) {
    return $$Promise.flatMapError(probeTCP(port), (function (error) {
                  console.log("Got the following error when trying to connect to the Agda language server via TCP:", error);
                  return probeStdIO(name);
                }));
  } else {
    return probeStdIO(name);
  }
}

function decodeCommandRes(json) {
  var response;
  try {
    response = Curry._1(decode$1, json);
  }
  catch (raw_msg){
    var msg = Caml_js_exceptions.internalToOCamlException(raw_msg);
    if (msg.RE_EXN_ID === Json_decode.DecodeError) {
      return {
              TAG: 1,
              _0: {
                TAG: 4,
                _0: msg._1,
                _1: json,
                [Symbol.for("name")]: "CannotDecodeCommandRes"
              },
              [Symbol.for("name")]: "Error"
            };
    }
    throw msg;
  }
  return {
          TAG: 0,
          _0: response,
          [Symbol.for("name")]: "Ok"
        };
}

function decodeResponse(json) {
  var reaction;
  try {
    reaction = Curry._1(decode$3, json);
  }
  catch (raw_msg){
    var msg = Caml_js_exceptions.internalToOCamlException(raw_msg);
    if (msg.RE_EXN_ID === Json_decode.DecodeError) {
      return {
              TAG: 1,
              _0: {
                TAG: 5,
                _0: msg._1,
                _1: json,
                [Symbol.for("name")]: "CannotDecodeResponse"
              },
              [Symbol.for("name")]: "Error"
            };
    }
    throw msg;
  }
  return {
          TAG: 0,
          _0: reaction,
          [Symbol.for("name")]: "Ok"
        };
}

function sendRequestPrim(client, request) {
  return $$Promise.flatMapOk(sendRequest(client, encode(request)), (function (json) {
                return $$Promise.resolved(decodeCommandRes(json));
              }));
}

function make$1(tryTCP) {
  return $$Promise.flatMap($$Promise.flatMapOk(probe(tryTCP, 4096, "als"), make), (function (result) {
                if (result.TAG !== /* Ok */0) {
                  return $$Promise.resolved({
                              TAG: 1,
                              _0: result._0,
                              [Symbol.for("name")]: "Error"
                            });
                }
                var client = result._0;
                return $$Promise.flatMapOk(sendRequestPrim(client, /* SYN */0), (function (response) {
                              if (response.TAG === /* ACK */0) {
                                return $$Promise.resolved({
                                            TAG: 0,
                                            _0: {
                                              client: client,
                                              version: response._0,
                                              method: client.method
                                            },
                                            [Symbol.for("name")]: "Ok"
                                          });
                              } else {
                                return $$Promise.resolved({
                                            TAG: 1,
                                            _0: /* Initialize */0,
                                            [Symbol.for("name")]: "Error"
                                          });
                              }
                            }));
              }));
}

function destroy$1(self) {
  return destroy(self.client);
}

var singleton = {
  contents: /* Disconnected */0
};

function stop(param) {
  var match = singleton.contents;
  if (match) {
    singleton.contents = /* Disconnected */0;
    return destroy(match._0);
  } else {
    return $$Promise.resolved(undefined);
  }
}

function start(tryTCP) {
  var match = singleton.contents;
  if (match) {
    return $$Promise.resolved({
                TAG: 0,
                _0: [
                  match._1,
                  match._0.method
                ],
                [Symbol.for("name")]: "Ok"
              });
  } else {
    return $$Promise.flatMap($$Promise.flatMapOk(probe(tryTCP, 4096, "als"), make), (function (result) {
                  if (result.TAG === /* Ok */0) {
                    var client = result._0;
                    return $$Promise.flatMapOk(sendRequestPrim(client, /* SYN */0), (function (response) {
                                  if (response.TAG !== /* ACK */0) {
                                    return $$Promise.resolved({
                                                TAG: 1,
                                                _0: /* Initialize */0,
                                                [Symbol.for("name")]: "Error"
                                              });
                                  }
                                  var version = response._0;
                                  singleton.contents = {
                                    _0: client,
                                    _1: version,
                                    [Symbol.for("name")]: "Connected"
                                  };
                                  return $$Promise.resolved({
                                              TAG: 0,
                                              _0: [
                                                version,
                                                client.method
                                              ],
                                              [Symbol.for("name")]: "Ok"
                                            });
                                }));
                  }
                  singleton.contents = /* Disconnected */0;
                  return $$Promise.resolved({
                              TAG: 1,
                              _0: result._0,
                              [Symbol.for("name")]: "Error"
                            });
                }));
  }
}

function getVersion(param) {
  var match = singleton.contents;
  if (match) {
    return [
            match._1,
            match._0.method
          ];
  }
  
}

function isConnected(param) {
  var match = singleton.contents;
  if (match) {
    return true;
  } else {
    return false;
  }
}

function sendRequest$1(request, handler) {
  var match = singleton.contents;
  if (!match) {
    return $$Promise.resolved({
                TAG: 1,
                _0: /* NotConnectedYet */1,
                [Symbol.for("name")]: "Error"
              });
  }
  var scheduler = Connection__Scheduler$AgdaModeVscode.make(undefined);
  var match$1 = $$Promise.pending(undefined);
  var resolve = match$1[1];
  var waitForResponseEnd = match$1[0];
  var subscription = new Vscode.Disposable(Chan$AgdaModeVscode.on(dataChan, (function (json) {
              var error = decodeResponse(json);
              if (error.TAG !== /* Ok */0) {
                return Curry._1(resolve, {
                            TAG: 1,
                            _0: error._0,
                            [Symbol.for("name")]: "Error"
                          });
              }
              var responese = error._0;
              if (typeof responese === "number") {
                return Curry._1(resolve, {
                            TAG: 0,
                            _0: undefined,
                            [Symbol.for("name")]: "Ok"
                          });
              }
              switch (responese.TAG | 0) {
                case /* ResponseNonLast */0 :
                    return Connection__Scheduler$AgdaModeVscode.runNonLast(scheduler, handler, responese._0);
                case /* ResponseLast */1 :
                    return Connection__Scheduler$AgdaModeVscode.addLast(scheduler, responese._0, responese._1);
                case /* ResponseParseError */2 :
                    return Curry._1(resolve, {
                                TAG: 1,
                                _0: {
                                  TAG: 6,
                                  _0: responese._0,
                                  [Symbol.for("name")]: "ResponseParseError"
                                },
                                [Symbol.for("name")]: "Error"
                              });
                
              }
            })));
  return $$Promise.tap($$Promise.tap($$Promise.flatMapOk(sendRequestPrim(match._0, {
                          _0: request,
                          [Symbol.for("name")]: "Command"
                        }), (function (result) {
                        if (result.TAG === /* ACK */0) {
                          return $$Promise.resolved({
                                      TAG: 1,
                                      _0: /* Initialize */0,
                                      [Symbol.for("name")]: "Error"
                                    });
                        }
                        var error = result._0;
                        if (error !== undefined) {
                          return $$Promise.resolved({
                                      TAG: 1,
                                      _0: {
                                        TAG: 3,
                                        _0: error,
                                        [Symbol.for("name")]: "SendCommand"
                                      },
                                      [Symbol.for("name")]: "Error"
                                    });
                        } else {
                          return waitForResponseEnd;
                        }
                      })), (function (param) {
                    subscription.dispose();
                    
                  })), (function (param) {
                return Connection__Scheduler$AgdaModeVscode.runLast(scheduler, handler);
              }));
}

var Module = {
  make: make$1,
  destroy: destroy$1,
  start: start,
  stop: stop,
  sendRequest: sendRequest$1,
  getVersion: getVersion,
  onError: onError,
  isConnected: isConnected
};

var Scheduler;

exports.Scheduler = Scheduler;
exports.$$Error = $$Error;
exports.CommandReq = CommandReq;
exports.CommandRes = CommandRes;
exports.LSPResponse = LSPResponse;
exports.Module = Module;
exports.make = make$1;
exports.destroy = destroy$1;
exports.start = start;
exports.stop = stop;
exports.sendRequest = sendRequest$1;
exports.getVersion = getVersion;
exports.onError = onError;
exports.isConnected = isConnected;
/* decode Not a pure module */
