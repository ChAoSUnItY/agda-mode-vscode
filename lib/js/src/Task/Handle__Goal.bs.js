// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var $$String = require("bs-platform/lib/js/string.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_splice_call = require("bs-platform/lib/js/caml_splice_call.js");
var Goal$AgdaModeVscode = require("../Goal.bs.js");
var Task$AgdaModeVscode = require("./Task.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var State$AgdaModeVscode = require("../State.bs.js");

function Impl(Editor) {
  var Task = Task$AgdaModeVscode.Impl(Editor);
  var State = State$AgdaModeVscode.Impl(Editor);
  var Goal = Goal$AgdaModeVscode.Impl(Editor);
  var getOffsets = function (state) {
    return Belt_Array.map(state.goals, (function (goal) {
                  return goal.range[0] + 3 | 0;
                }));
  };
  var pointingAt = function (cursor, state) {
    var cursorOffset = cursor !== undefined ? cursor : Curry._2(Editor.offsetAtPoint, state.editor, Curry._1(Editor.getCursorPosition, state.editor));
    var pointedGoals = Belt_Array.keep(state.goals, (function (goal) {
            if (goal.range[0] <= cursorOffset) {
              return cursorOffset <= goal.range[1];
            } else {
              return false;
            }
          }));
    return Belt_Array.get(pointedGoals, 0);
  };
  var restoreCursorPosition = function (state, callback) {
    var originalPosition = Curry._1(Editor.getCursorPosition, state.editor);
    var originalOffset = Curry._2(Editor.offsetAtPoint, state.editor, originalPosition);
    return $$Promise.map(Curry._1(callback, undefined), (function (result) {
                  var pointed = pointingAt(originalOffset, state);
                  if (pointed !== undefined && Curry._2(Task.Goal.getContent, pointed, state.editor) === "") {
                    Curry._2(Task.Goal.setCursor, pointed, state.editor);
                  } else {
                    Curry._2(Editor.setCursorPosition, state.editor, originalPosition);
                  }
                  return result;
                }));
  };
  var handle = function (indices) {
    if (typeof indices === "number") {
      switch (indices) {
        case /* UpdateRange */0 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* WithState */Caml_chrome_debugger.variant("WithState", 5, [(function (state) {
                              Curry._2(Task.Goal.updateRanges, state.goals, state.editor);
                              return $$Promise.resolved(/* [] */0);
                            })]),
                      /* [] */0
                    ]);
        case /* Next */1 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* Goal */Caml_chrome_debugger.variant("Goal", 4, [/* UpdateRange */0]),
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* WithState */Caml_chrome_debugger.variant("WithState", 5, [(function (state) {
                                  console.log(Curry._1(Editor.getText, state.editor));
                                  var nextGoal = {
                                    contents: undefined
                                  };
                                  var cursorOffset = Curry._2(Editor.offsetAtPoint, state.editor, Curry._1(Editor.getCursorPosition, state.editor));
                                  var offsets = getOffsets(state);
                                  Belt_Array.forEach(offsets, (function (offset) {
                                          if (cursorOffset < offset && nextGoal.contents === undefined) {
                                            nextGoal.contents = offset;
                                            return ;
                                          }
                                          
                                        }));
                                  if (nextGoal.contents === undefined) {
                                    nextGoal.contents = Belt_Array.get(offsets, 0);
                                  }
                                  var offset = nextGoal.contents;
                                  if (offset !== undefined) {
                                    Curry._2(Editor.setCursorPosition, state.editor, Curry._2(Editor.pointAtOffset, state.editor, offset));
                                  }
                                  return $$Promise.resolved(/* [] */0);
                                })]),
                          /* [] */0
                        ])
                    ]);
        case /* Previous */2 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* Goal */Caml_chrome_debugger.variant("Goal", 4, [/* UpdateRange */0]),
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* WithState */Caml_chrome_debugger.variant("WithState", 5, [(function (state) {
                                  var previousGoal = {
                                    contents: undefined
                                  };
                                  var cursorOffset = Curry._2(Editor.offsetAtPoint, state.editor, Curry._1(Editor.getCursorPosition, state.editor));
                                  var offsets = getOffsets(state);
                                  Belt_Array.forEach(offsets, (function (offset) {
                                          if (cursorOffset > offset) {
                                            previousGoal.contents = offset;
                                            return ;
                                          }
                                          
                                        }));
                                  if (previousGoal.contents === undefined) {
                                    previousGoal.contents = Belt_Array.get(offsets, offsets.length - 1 | 0);
                                  }
                                  var offset = previousGoal.contents;
                                  if (offset !== undefined) {
                                    Curry._2(Editor.setCursorPosition, state.editor, Curry._2(Editor.pointAtOffset, state.editor, offset));
                                  }
                                  return $$Promise.resolved(/* [] */0);
                                })]),
                          /* [] */0
                        ])
                    ]);
        case /* SaveCursor */3 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* WithState */Caml_chrome_debugger.variant("WithState", 5, [(function (state) {
                              var position = Curry._1(Editor.getCursorPosition, state.editor);
                              var offset = Curry._2(Editor.offsetAtPoint, state.editor, position);
                              state.cursor = offset;
                              return $$Promise.resolved(/* [] */0);
                            })]),
                      /* [] */0
                    ]);
        case /* RestoreCursor */4 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* WithState */Caml_chrome_debugger.variant("WithState", 5, [(function (state) {
                              var offset = state.cursor;
                              if (offset !== undefined) {
                                var position = Curry._2(Editor.pointAtOffset, state.editor, offset);
                                var pointedGoal = pointingAt(offset, state);
                                if (pointedGoal !== undefined && Curry._2(Task.Goal.getContent, pointedGoal, state.editor) === "") {
                                  Curry._2(Task.Goal.setCursor, pointedGoal, state.editor);
                                } else {
                                  Curry._2(Editor.setCursorPosition, state.editor, position);
                                }
                              }
                              return $$Promise.resolved(/* [] */0);
                            })]),
                      /* [] */0
                    ]);
        
      }
    } else {
      switch (indices.tag | 0) {
        case /* Instantiate */0 :
            var indices$1 = indices[0];
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* WithState */Caml_chrome_debugger.variant("WithState", 5, [(function (state) {
                              Belt_Array.forEach(state.goals, Task.Goal.destroy);
                              return $$Promise.map(Curry._2(Task.Goal.makeMany, state.editor, indices$1), (function (goals) {
                                            state.goals = goals;
                                            return /* [] */0;
                                          }));
                            })]),
                      /* [] */0
                    ]);
        case /* Modify */1 :
            var f = indices[1];
            var goal = indices[0];
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* Goal */Caml_chrome_debugger.variant("Goal", 4, [/* UpdateRange */0]),
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* WithState */Caml_chrome_debugger.variant("WithState", 5, [(function (state) {
                                  var content = Curry._2(Task.Goal.getContent, goal, state.editor);
                                  console.log("[ goal ][ modify ] \"" + (content + ("\" => \"" + (Curry._1(f, content) + "\""))));
                                  return $$Promise.map(Curry._3(Task.Goal.setContent, goal, state.editor, Curry._1(f, content)), (function (param) {
                                                if (param) {
                                                  return /* [] */0;
                                                } else {
                                                  return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                            Curry._2(Task.displayError, "Goal-related Error", "Failed to modify the content of goal #" + String(goal.index)),
                                                            /* [] */0
                                                          ]);
                                                }
                                              }));
                                })]),
                          /* [] */0
                        ])
                    ]);
        case /* RemoveBoundaryAndDestroy */2 :
            var goal$1 = indices[0];
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* Goal */Caml_chrome_debugger.variant("Goal", 4, [/* UpdateRange */0]),
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* WithState */Caml_chrome_debugger.variant("WithState", 5, [(function (state) {
                                  var innerRange = Curry._2(Task.Goal.getInnerRange, goal$1, state.editor);
                                  var outerRange = Curry._2(Editor.$$Range.make, Curry._2(Editor.pointAtOffset, state.editor, goal$1.range[0]), Curry._2(Editor.pointAtOffset, state.editor, goal$1.range[1]));
                                  var content = $$String.trim(Curry._2(Editor.getTextInRange, state.editor, innerRange));
                                  return $$Promise.map(Curry._3(Editor.setText, state.editor, outerRange, content), (function (param) {
                                                if (param) {
                                                  Curry._1(Task.Goal.destroy, goal$1);
                                                  return /* [] */0;
                                                } else {
                                                  return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                            Curry._2(Task.displayError, "Goal-related Error", "Unable to remove the boundary of goal #" + String(goal$1.index)),
                                                            /* [] */0
                                                          ]);
                                                }
                                              }));
                                })]),
                          /* [] */0
                        ])
                    ]);
        case /* ReplaceWithLines */3 :
            var lines = indices[1];
            var goal$2 = indices[0];
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* WithState */Caml_chrome_debugger.variant("WithState", 5, [(function (state) {
                              var start = Curry._2(Editor.pointAtOffset, state.editor, goal$2.range[0]);
                              var startLineNo = Curry._1(Editor.Point.line, start);
                              var startLineRange = Curry._2(Editor.rangeForLine, state.editor, startLineNo);
                              var startLineText = Curry._2(Editor.getTextInRange, state.editor, startLineRange);
                              var indentedBy = function (s) {
                                var n = 0;
                                for(var i = 0 ,i_finish = s.length; i < i_finish; ++i){
                                  var match = s.charAt(i);
                                  var exit = 0;
                                  switch (match) {
                                    case "\t" :
                                    case "\n" :
                                    case "\f" :
                                    case "\r" :
                                    case " " :
                                        exit = 1;
                                        break;
                                    default:
                                      
                                  }
                                  if (exit === 1 && i === n) {
                                    n = n + 1 | 0;
                                  }
                                  
                                }
                                return n;
                              };
                              var indentation = " ".repeat(indentedBy(startLineText));
                              var indentedLines = Caml_splice_call.spliceObjApply("", "concat", [Belt_Array.map(lines, (function (line) {
                                            return indentation + (line + "\n");
                                          }))]);
                              var start$1 = Curry._1(Editor.$$Range.start, startLineRange);
                              var end_ = Curry._2(Editor.pointAtOffset, state.editor, goal$2.range[1]);
                              Curry._1(Editor.Point.line, end_);
                              var endLineRange = Curry._2(Editor.rangeForLine, state.editor, startLineNo);
                              var end_$1 = Curry._1(Editor.$$Range.end_, endLineRange);
                              var rangeToBeReplaced = Curry._2(Editor.$$Range.make, start$1, end_$1);
                              return $$Promise.map(Curry._3(Editor.setText, state.editor, rangeToBeReplaced, indentedLines), (function (param) {
                                            if (param) {
                                              Curry._1(Task.Goal.destroy, goal$2);
                                              return /* [] */0;
                                            } else {
                                              return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                        Curry._2(Task.displayError, "Goal-related Error", "Unable to replace the lines of goal #" + String(goal$2.index)),
                                                        /* [] */0
                                                      ]);
                                            }
                                          }));
                            })]),
                      /* [] */0
                    ]);
        case /* ReplaceWithLambda */4 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* Debug */Caml_chrome_debugger.variant("Debug", 6, ["ReplaceWithLambda"]),
                      /* [] */0
                    ]);
        case /* GetPointedOr */5 :
            var alternative = indices[1];
            var callback = indices[0];
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* Goal */Caml_chrome_debugger.variant("Goal", 4, [/* UpdateRange */0]),
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* WithState */Caml_chrome_debugger.variant("WithState", 5, [(function (state) {
                                  var goal = pointingAt(undefined, state);
                                  if (goal === undefined) {
                                    return $$Promise.resolved(alternative);
                                  }
                                  var content = Curry._2(Task.Goal.getContent, goal, state.editor);
                                  return $$Promise.resolved(Curry._2(callback, goal, content === "" ? undefined : content));
                                })]),
                          /* [] */0
                        ])
                    ]);
        case /* GetIndexedOr */6 :
            var alternative$1 = indices[2];
            var callback$1 = indices[1];
            var index = indices[0];
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* Goal */Caml_chrome_debugger.variant("Goal", 4, [/* UpdateRange */0]),
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* WithState */Caml_chrome_debugger.variant("WithState", 5, [(function (state) {
                                  var found = Belt_Array.keep(state.goals, (function (goal) {
                                          return goal.index === index;
                                        }));
                                  var goal = Belt_Array.get(found, 0);
                                  if (goal === undefined) {
                                    return $$Promise.resolved(alternative$1);
                                  }
                                  var content = Curry._2(Task.Goal.getContent, goal, state.editor);
                                  return $$Promise.resolved(Curry._2(callback$1, goal, content === "" ? undefined : content));
                                })]),
                          /* [] */0
                        ])
                    ]);
        
      }
    }
  };
  return {
          Task: Task,
          State: State,
          Goal: Goal,
          getOffsets: getOffsets,
          pointingAt: pointingAt,
          restoreCursorPosition: restoreCursorPosition,
          handle: handle
        };
}

exports.Impl = Impl;
/* Promise Not a pure module */
