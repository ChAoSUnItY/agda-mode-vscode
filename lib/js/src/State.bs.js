// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Vscode = require("vscode");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var IM$AgdaModeVscode = require("./InputMethod/IM.bs.js");
var Chan$AgdaModeVscode = require("./Util/Chan.bs.js");
var Goal$AgdaModeVscode = require("./Goal.bs.js");
var Config$AgdaModeVscode = require("./Config.bs.js");
var Editor$AgdaModeVscode = require("./Editor.bs.js");
var Component$AgdaModeVscode = require("./View/Component/Component.bs.js");
var Connection$AgdaModeVscode = require("./Connection.bs.js");
var Decoration$AgdaModeVscode = require("./Decoration.bs.js");
var ViewController$AgdaModeVscode = require("./ViewController.bs.js");
var Connection__Error$AgdaModeVscode = require("./Connection/Connection__Error.bs.js");

function make(param) {
  return {
          queue: [],
          busy: false
        };
}

function kickStart(self) {
  if (self.busy) {
    return ;
  }
  var thunk = self.queue.shift();
  if (thunk !== undefined) {
    self.busy = true;
    return $$Promise.get(Curry._1(thunk, undefined), (function (param) {
                  self.busy = false;
                  return kickStart(self);
                }));
  }
  
}

function push(self, sendRequestAndHandleResponses, request) {
  var match = $$Promise.pending(undefined);
  var resolve = match[1];
  var thunk = function (param) {
    return $$Promise.tap(Curry._1(sendRequestAndHandleResponses, request), resolve);
  };
  self.queue.push(thunk);
  kickStart(self);
  return match[0];
}

var RequestQueue = {
  make: make,
  push: push
};

function setPrompt(value) {
  Vscode.commands.executeCommand("setContext", "agdaModePrompting", value);
  
}

function setIM(value) {
  Vscode.commands.executeCommand("setContext", "agdaModeTyping", value);
  
}

var Context = {
  setPrompt: setPrompt,
  setIM: setIM
};

function sendEvent(state, $$event) {
  state.viewCache = {
    TAG: 0,
    _0: $$event,
    [Symbol.for("name")]: "Event"
  };
  return ViewController$AgdaModeVscode.sendEvent(state.view, $$event);
}

function activate(state) {
  return Belt_Option.forEach(state.viewCache, (function (content) {
                if (content.TAG === /* Event */0) {
                  ViewController$AgdaModeVscode.sendEvent(state.view, content._0);
                  return ;
                }
                ViewController$AgdaModeVscode.sendRequest(state.view, content._0, content._1);
                
              }));
}

function reveal(state) {
  return ViewController$AgdaModeVscode.reveal(state.view);
}

function display(state, header, body) {
  return sendEvent(state, {
              TAG: 0,
              _0: header,
              _1: body,
              [Symbol.for("name")]: "Display"
            });
}

function displayOutOfGoalError(state) {
  return display(state, {
              TAG: 3,
              _0: "Out of goal",
              [Symbol.for("name")]: "Error"
            }, [Component$AgdaModeVscode.Item.plainText("Please place the cursor in a goal")]);
}

function displayConnectionError(state, error) {
  var match = Connection__Error$AgdaModeVscode.toString(error);
  return display(state, {
              TAG: 3,
              _0: "Connection Error: " + match[0],
              [Symbol.for("name")]: "Error"
            }, [Component$AgdaModeVscode.Item.plainText(match[1])]);
}

function displayConnectionStatus(state, status) {
  if (status.TAG === /* Emacs */0) {
    return sendEvent(state, {
                TAG: 1,
                _0: "Emacs",
                [Symbol.for("name")]: "SetStatus"
              });
  } else if (status._1.TAG === /* ViaStdIO */0) {
    return sendEvent(state, {
                TAG: 1,
                _0: "LSP",
                [Symbol.for("name")]: "SetStatus"
              });
  } else {
    return sendEvent(state, {
                TAG: 1,
                _0: "LSP (TCP)",
                [Symbol.for("name")]: "SetStatus"
              });
  }
}

function updateIM(state, $$event) {
  return sendEvent(state, {
              TAG: 3,
              _0: $$event,
              [Symbol.for("name")]: "InputMethod"
            });
}

function updatePromptIM(state, content) {
  return sendEvent(state, {
              TAG: 2,
              _0: content,
              [Symbol.for("name")]: "PromptIMUpdate"
            });
}

function prompt(state, header, prompt$1, callbackOnPromptSuccess) {
  Vscode.commands.executeCommand("setContext", "agdaModePrompting", true);
  ViewController$AgdaModeVscode.focus(state.view);
  var request = {
    _0: header,
    _1: prompt$1,
    [Symbol.for("name")]: "Prompt"
  };
  var callback = function (response) {
    if (response) {
      return $$Promise.map(Curry._1(callbackOnPromptSuccess, response._0), (function (param) {
                    Vscode.commands.executeCommand("setContext", "agdaModePrompting", false);
                    return Editor$AgdaModeVscode.focus(state.document);
                  }));
    } else {
      return $$Promise.resolved(undefined);
    }
  };
  state.viewCache = {
    TAG: 1,
    _0: request,
    _1: callback,
    [Symbol.for("name")]: "Request"
  };
  return ViewController$AgdaModeVscode.sendRequest(state.view, request, callback);
}

function interruptPrompt(state) {
  return sendEvent(state, /* PromptInterrupt */0);
}

var View = {
  activate: activate,
  reveal: reveal,
  display: display,
  displayOutOfGoalError: displayOutOfGoalError,
  displayConnectionError: displayConnectionError,
  displayConnectionStatus: displayConnectionStatus,
  updateIM: updateIM,
  updatePromptIM: updatePromptIM,
  prompt: prompt,
  interruptPrompt: interruptPrompt
};

function sendRequest(state, handleResponse, request) {
  return push(state.agdaRequestQueue, (function (request) {
                var onResponse = function (result) {
                  if (result.TAG === /* Ok */0) {
                    return Curry._1(handleResponse, result._0);
                  } else {
                    return displayConnectionError(state, result._0);
                  }
                };
                return $$Promise.flatMap(Connection$AgdaModeVscode.sendRequest(Config$AgdaModeVscode.useAgdaLanguageServer(undefined), state.devMode, state.document, request, onResponse), (function (result) {
                              if (result.TAG === /* Ok */0) {
                                return displayConnectionStatus(state, result._0);
                              } else {
                                return displayConnectionError(state, result._0);
                              }
                            }));
              }), request);
}

function destroy(state, alsoRemoveFromRegistry) {
  if (alsoRemoveFromRegistry) {
    Chan$AgdaModeVscode.emit(state.onRemoveFromRegistry, undefined);
  }
  Chan$AgdaModeVscode.destroy(state.onRemoveFromRegistry);
  Belt_Array.forEach(state.goals, Goal$AgdaModeVscode.destroy);
  Decoration$AgdaModeVscode.destroy(state.decoration);
  Belt_Array.forEach(state.subscriptions, (function (prim) {
          return prim.dispose();
        }));
  return Connection$AgdaModeVscode.stop(undefined);
}

function make$1(chan, editor, view, devMode) {
  return {
          devMode: devMode,
          editor: editor,
          document: editor.document,
          view: view,
          viewCache: undefined,
          goals: [],
          decoration: Decoration$AgdaModeVscode.make(undefined),
          cursor: undefined,
          editorIM: IM$AgdaModeVscode.make(chan),
          promptIM: IM$AgdaModeVscode.make(chan),
          subscriptions: [],
          onRemoveFromRegistry: Chan$AgdaModeVscode.make(undefined),
          agdaRequestQueue: {
            queue: [],
            busy: false
          }
        };
}

exports.RequestQueue = RequestQueue;
exports.Context = Context;
exports.View = View;
exports.sendRequest = sendRequest;
exports.destroy = destroy;
exports.make = make$1;
/* vscode Not a pure module */
