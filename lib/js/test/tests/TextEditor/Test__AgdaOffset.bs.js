// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Mocha$BsMocha = require("bs-mocha/lib/js/src/Mocha.bs.js");
var Assert$BsMocha = require("bs-mocha/lib/js/src/Assert.bs.js");
var Promise$BsMocha = require("bs-mocha/lib/js/src/Promise.bs.js");
var Sig$AgdaModeVscode = require("../../../src/Sig.bs.js");
var SigImpl$AgdaModeVscode = require("../../../src/SigImpl.bs.js");

function Impl(Editor) {
  Mocha$BsMocha.describe("Conversion between Agda Offsets and Editor Offsets")(undefined, undefined, undefined, (function (param) {
          Mocha$BsMocha.describe("Sig.characterWidth")(undefined, undefined, undefined, (function (param) {
                  Mocha$BsMocha.it("should calculate the width of some grapheme cluster")(undefined, undefined, undefined, (function (param) {
                          var actual = Sig$AgdaModeVscode.characterWidth("𝐀");
                          return Assert$BsMocha.deep_equal(undefined, actual, 1);
                        }));
                  return Mocha$BsMocha.it("should calculate the width of some ordinary ASCII character")(undefined, undefined, undefined, (function (param) {
                                var actual = Sig$AgdaModeVscode.characterWidth("a");
                                return Assert$BsMocha.deep_equal(undefined, actual, 1);
                              }));
                }));
          Mocha$BsMocha.describe("SigImpl.normalizeUTF16Offset")(undefined, undefined, undefined, (function (param) {
                  var getTextToOffsetAt = function (textEditor, from, to_) {
                    var from$1 = SigImpl$AgdaModeVscode.normalizeUTF16Offset(textEditor, {
                          utf8: 0,
                          utf16: 0
                        }, from).utf16;
                    var to_$1 = SigImpl$AgdaModeVscode.normalizeUTF16Offset(textEditor, {
                          utf8: 0,
                          utf16: 0
                        }, to_).utf16;
                    var range = SigImpl$AgdaModeVscode.$$Range.make(SigImpl$AgdaModeVscode.pointAtOffset(textEditor, from$1), SigImpl$AgdaModeVscode.pointAtOffset(textEditor, to_$1));
                    return SigImpl$AgdaModeVscode.getTextInRange(textEditor, range);
                  };
                  return Promise$BsMocha.it("shouldn't cut into a grapheme")(undefined, undefined, undefined, (function (param) {
                                return $$Promise.Js.toBsPromise($$Promise.map(SigImpl$AgdaModeVscode.openEditorWithContent("𝐀a𝐁bb𝐂c𝐃dd𝐄e𝐅𝐆𝐇\na"), (function (textEditor) {
                                                  Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 0, 0), "");
                                                  Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 0, 1), "𝐀");
                                                  Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 0, 2), "𝐀");
                                                  Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 0, 3), "𝐀a");
                                                  Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 0, 4), "𝐀a𝐁");
                                                  Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 0, 5), "𝐀a𝐁");
                                                  Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 0, 6), "𝐀a𝐁b");
                                                  Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 1, 6), "a𝐁b");
                                                  Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 2, 6), "a𝐁b");
                                                  Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 3, 6), "𝐁b");
                                                  Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 4, 6), "b");
                                                  return Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 5, 6), "b");
                                                })));
                              }));
                }));
          Mocha$BsMocha.describe("Editor.fromUTF8Offset")(undefined, undefined, undefined, (function (param) {
                  Promise$BsMocha.it("should do it right")(undefined, undefined, undefined, (function (param) {
                          return $$Promise.Js.toBsPromise($$Promise.map(Curry._1(Editor.openEditorWithContent, "𝐀a𝐁bb𝐂c\na"), (function (textEditor) {
                                            Assert$BsMocha.equal(undefined, Curry._3(Editor.fromUTF8Offset, textEditor, undefined, 0), 0);
                                            Assert$BsMocha.equal(undefined, Curry._3(Editor.fromUTF8Offset, textEditor, undefined, 1), 2);
                                            Assert$BsMocha.equal(undefined, Curry._3(Editor.fromUTF8Offset, textEditor, undefined, 2), 3);
                                            Assert$BsMocha.equal(undefined, Curry._3(Editor.fromUTF8Offset, textEditor, undefined, 3), 5);
                                            Assert$BsMocha.equal(undefined, Curry._3(Editor.fromUTF8Offset, textEditor, undefined, 4), 6);
                                            Assert$BsMocha.equal(undefined, Curry._3(Editor.fromUTF8Offset, textEditor, undefined, 5), 7);
                                            Assert$BsMocha.equal(undefined, Curry._3(Editor.fromUTF8Offset, textEditor, undefined, 6), 9);
                                            Assert$BsMocha.equal(undefined, Curry._3(Editor.fromUTF8Offset, textEditor, undefined, 7), 10);
                                            Assert$BsMocha.equal(undefined, Curry._3(Editor.fromUTF8Offset, textEditor, undefined, 8), 11);
                                            return Assert$BsMocha.equal(undefined, Curry._3(Editor.fromUTF8Offset, textEditor, undefined, 9), 14);
                                          })));
                        }));
                  return Promise$BsMocha.it("should extract the right portion of text")(undefined, undefined, undefined, (function (param) {
                                var getTextToOffsetAt = function (textEditor, offset) {
                                  var offset$1 = Curry._3(Editor.fromUTF8Offset, textEditor, undefined, offset);
                                  var range = Curry._2(Editor.$$Range.make, Curry._2(Editor.Point.make, 0, 0), Curry._2(Editor.pointAtOffset, textEditor, offset$1));
                                  return Curry._2(Editor.getTextInRange, textEditor, range);
                                };
                                return $$Promise.Js.toBsPromise($$Promise.map(Curry._1(Editor.openEditorWithContent, "𝐀a𝐁bb𝐂c\na"), (function (textEditor) {
                                                  Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 0), "");
                                                  Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 1), "𝐀");
                                                  Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 2), "𝐀a");
                                                  Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 3), "𝐀a𝐁");
                                                  Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 4), "𝐀a𝐁b");
                                                  Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 5), "𝐀a𝐁bb");
                                                  Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 6), "𝐀a𝐁bb𝐂");
                                                  Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 7), "𝐀a𝐁bb𝐂c");
                                                  Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 8), "𝐀a𝐁bb𝐂c\n");
                                                  return Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 9), "𝐀a𝐁bb𝐂c\na");
                                                })));
                              }));
                }));
          return Mocha$BsMocha.describe("Editor.toUTF8Offset")(undefined, undefined, undefined, (function (param) {
                        Promise$BsMocha.it("should do it right")(undefined, undefined, undefined, (function (param) {
                                return $$Promise.Js.toBsPromise($$Promise.map(Curry._1(Editor.openEditorWithContent, "𝐀a𝐁bb𝐂c\na"), (function (textEditor) {
                                                  Assert$BsMocha.equal(undefined, Curry._2(Editor.toUTF8Offset, textEditor, 0), 0);
                                                  Assert$BsMocha.equal(undefined, Curry._2(Editor.toUTF8Offset, textEditor, 1), 1);
                                                  Assert$BsMocha.equal(undefined, Curry._2(Editor.toUTF8Offset, textEditor, 2), 1);
                                                  Assert$BsMocha.equal(undefined, Curry._2(Editor.toUTF8Offset, textEditor, 3), 2);
                                                  Assert$BsMocha.equal(undefined, Curry._2(Editor.toUTF8Offset, textEditor, 5), 3);
                                                  Assert$BsMocha.equal(undefined, Curry._2(Editor.toUTF8Offset, textEditor, 6), 4);
                                                  Assert$BsMocha.equal(undefined, Curry._2(Editor.toUTF8Offset, textEditor, 7), 5);
                                                  Assert$BsMocha.equal(undefined, Curry._2(Editor.toUTF8Offset, textEditor, 9), 6);
                                                  Assert$BsMocha.equal(undefined, Curry._2(Editor.toUTF8Offset, textEditor, 10), 7);
                                                  Assert$BsMocha.equal(undefined, Curry._2(Editor.toUTF8Offset, textEditor, 11), 8);
                                                  return Assert$BsMocha.equal(undefined, Curry._2(Editor.toUTF8Offset, textEditor, 12), 9);
                                                })));
                              }));
                        Promise$BsMocha.it("should be a left inverse of Editor.fromUTF8Offset")(undefined, undefined, undefined, (function (param) {
                                return $$Promise.Js.toBsPromise($$Promise.map(Curry._1(Editor.openEditorWithContent, "𝐀a𝐁bb𝐂c\na"), (function (textEditor) {
                                                  var n = Curry._3(Editor.fromUTF8Offset, textEditor, undefined, 0);
                                                  Assert$BsMocha.equal(undefined, Curry._2(Editor.toUTF8Offset, textEditor, n), 0);
                                                  var n$1 = Curry._3(Editor.fromUTF8Offset, textEditor, undefined, 1);
                                                  Assert$BsMocha.equal(undefined, Curry._2(Editor.toUTF8Offset, textEditor, n$1), 1);
                                                  var n$2 = Curry._3(Editor.fromUTF8Offset, textEditor, undefined, 2);
                                                  Assert$BsMocha.equal(undefined, Curry._2(Editor.toUTF8Offset, textEditor, n$2), 2);
                                                  var n$3 = Curry._3(Editor.fromUTF8Offset, textEditor, undefined, 3);
                                                  Assert$BsMocha.equal(undefined, Curry._2(Editor.toUTF8Offset, textEditor, n$3), 3);
                                                  var n$4 = Curry._3(Editor.fromUTF8Offset, textEditor, undefined, 4);
                                                  Assert$BsMocha.equal(undefined, Curry._2(Editor.toUTF8Offset, textEditor, n$4), 4);
                                                  var n$5 = Curry._3(Editor.fromUTF8Offset, textEditor, undefined, 5);
                                                  Assert$BsMocha.equal(undefined, Curry._2(Editor.toUTF8Offset, textEditor, n$5), 5);
                                                  var n$6 = Curry._3(Editor.fromUTF8Offset, textEditor, undefined, 6);
                                                  Assert$BsMocha.equal(undefined, Curry._2(Editor.toUTF8Offset, textEditor, n$6), 6);
                                                  var n$7 = Curry._3(Editor.fromUTF8Offset, textEditor, undefined, 7);
                                                  Assert$BsMocha.equal(undefined, Curry._2(Editor.toUTF8Offset, textEditor, n$7), 7);
                                                  var n$8 = Curry._3(Editor.fromUTF8Offset, textEditor, undefined, 8);
                                                  Assert$BsMocha.equal(undefined, Curry._2(Editor.toUTF8Offset, textEditor, n$8), 8);
                                                  var n$9 = Curry._3(Editor.fromUTF8Offset, textEditor, undefined, 9);
                                                  return Assert$BsMocha.equal(undefined, Curry._2(Editor.toUTF8Offset, textEditor, n$9), 9);
                                                })));
                              }));
                        return Promise$BsMocha.it("should be a right inverse of Editor.fromUTF8Offset ()")(undefined, undefined, undefined, (function (param) {
                                      return $$Promise.Js.toBsPromise($$Promise.map(Curry._1(Editor.openEditorWithContent, "𝐀a𝐁bb𝐂c\na"), (function (textEditor) {
                                                        var n = Curry._2(Editor.toUTF8Offset, textEditor, 0);
                                                        Assert$BsMocha.equal(undefined, Curry._3(Editor.fromUTF8Offset, textEditor, undefined, n), 0);
                                                        var n$1 = Curry._2(Editor.toUTF8Offset, textEditor, 2);
                                                        Assert$BsMocha.equal(undefined, Curry._3(Editor.fromUTF8Offset, textEditor, undefined, n$1), 2);
                                                        var n$2 = Curry._2(Editor.toUTF8Offset, textEditor, 3);
                                                        Assert$BsMocha.equal(undefined, Curry._3(Editor.fromUTF8Offset, textEditor, undefined, n$2), 3);
                                                        var n$3 = Curry._2(Editor.toUTF8Offset, textEditor, 5);
                                                        Assert$BsMocha.equal(undefined, Curry._3(Editor.fromUTF8Offset, textEditor, undefined, n$3), 5);
                                                        var n$4 = Curry._2(Editor.toUTF8Offset, textEditor, 6);
                                                        Assert$BsMocha.equal(undefined, Curry._3(Editor.fromUTF8Offset, textEditor, undefined, n$4), 6);
                                                        var n$5 = Curry._2(Editor.toUTF8Offset, textEditor, 7);
                                                        Assert$BsMocha.equal(undefined, Curry._3(Editor.fromUTF8Offset, textEditor, undefined, n$5), 7);
                                                        var n$6 = Curry._2(Editor.toUTF8Offset, textEditor, 9);
                                                        return Assert$BsMocha.equal(undefined, Curry._3(Editor.fromUTF8Offset, textEditor, undefined, n$6), 9);
                                                      })));
                                    }));
                      }));
        }));
  return { };
}

var Editor_Point = {
  line: SigImpl$AgdaModeVscode.Point.line,
  column: SigImpl$AgdaModeVscode.Point.column,
  make: SigImpl$AgdaModeVscode.Point.make,
  translate: SigImpl$AgdaModeVscode.Point.translate,
  compare: SigImpl$AgdaModeVscode.Point.compare
};

var Editor_Config = {
  getAgdaPath: SigImpl$AgdaModeVscode.Config.getAgdaPath,
  setAgdaPath: SigImpl$AgdaModeVscode.Config.setAgdaPath,
  getLibraryPath: SigImpl$AgdaModeVscode.Config.getLibraryPath,
  getHighlightingMethod: SigImpl$AgdaModeVscode.Config.getHighlightingMethod,
  getBackend: SigImpl$AgdaModeVscode.Config.getBackend
};

var Editor_View = {
  make: SigImpl$AgdaModeVscode.View.make,
  destroy: SigImpl$AgdaModeVscode.View.destroy,
  show: SigImpl$AgdaModeVscode.View.show,
  hide: SigImpl$AgdaModeVscode.View.hide,
  focus: SigImpl$AgdaModeVscode.View.focus,
  send: SigImpl$AgdaModeVscode.View.send,
  onEvent: SigImpl$AgdaModeVscode.View.onEvent,
  fromPosition: SigImpl$AgdaModeVscode.View.fromPosition,
  fromInterval: SigImpl$AgdaModeVscode.View.fromInterval
};

var Editor_Decoration = {
  decorate: SigImpl$AgdaModeVscode.Decoration.decorate,
  highlightBackground: SigImpl$AgdaModeVscode.Decoration.highlightBackground,
  highlightBackgroundWithColor: SigImpl$AgdaModeVscode.Decoration.highlightBackgroundWithColor,
  decorateText: SigImpl$AgdaModeVscode.Decoration.decorateText,
  decorateTextWithColor: SigImpl$AgdaModeVscode.Decoration.decorateTextWithColor,
  overlayText: SigImpl$AgdaModeVscode.Decoration.overlayText,
  overlayTextWithColor: SigImpl$AgdaModeVscode.Decoration.overlayTextWithColor,
  underlineText: SigImpl$AgdaModeVscode.Decoration.underlineText,
  destroy: SigImpl$AgdaModeVscode.Decoration.destroy
};

Mocha$BsMocha.describe("Conversion between Agda Offsets and Editor Offsets")(undefined, undefined, undefined, (function (param) {
        Mocha$BsMocha.describe("Sig.characterWidth")(undefined, undefined, undefined, (function (param) {
                Mocha$BsMocha.it("should calculate the width of some grapheme cluster")(undefined, undefined, undefined, (function (param) {
                        var actual = Sig$AgdaModeVscode.characterWidth("𝐀");
                        return Assert$BsMocha.deep_equal(undefined, actual, 1);
                      }));
                return Mocha$BsMocha.it("should calculate the width of some ordinary ASCII character")(undefined, undefined, undefined, (function (param) {
                              var actual = Sig$AgdaModeVscode.characterWidth("a");
                              return Assert$BsMocha.deep_equal(undefined, actual, 1);
                            }));
              }));
        Mocha$BsMocha.describe("SigImpl.normalizeUTF16Offset")(undefined, undefined, undefined, (function (param) {
                var getTextToOffsetAt = function (textEditor, from, to_) {
                  var from$1 = SigImpl$AgdaModeVscode.normalizeUTF16Offset(textEditor, {
                        utf8: 0,
                        utf16: 0
                      }, from).utf16;
                  var to_$1 = SigImpl$AgdaModeVscode.normalizeUTF16Offset(textEditor, {
                        utf8: 0,
                        utf16: 0
                      }, to_).utf16;
                  var range = SigImpl$AgdaModeVscode.$$Range.make(SigImpl$AgdaModeVscode.pointAtOffset(textEditor, from$1), SigImpl$AgdaModeVscode.pointAtOffset(textEditor, to_$1));
                  return SigImpl$AgdaModeVscode.getTextInRange(textEditor, range);
                };
                return Promise$BsMocha.it("shouldn't cut into a grapheme")(undefined, undefined, undefined, (function (param) {
                              return $$Promise.Js.toBsPromise($$Promise.map(SigImpl$AgdaModeVscode.openEditorWithContent("𝐀a𝐁bb𝐂c𝐃dd𝐄e𝐅𝐆𝐇\na"), (function (textEditor) {
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 0, 0), "");
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 0, 1), "𝐀");
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 0, 2), "𝐀");
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 0, 3), "𝐀a");
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 0, 4), "𝐀a𝐁");
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 0, 5), "𝐀a𝐁");
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 0, 6), "𝐀a𝐁b");
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 1, 6), "a𝐁b");
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 2, 6), "a𝐁b");
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 3, 6), "𝐁b");
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 4, 6), "b");
                                                return Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 5, 6), "b");
                                              })));
                            }));
              }));
        Mocha$BsMocha.describe("Editor.fromUTF8Offset")(undefined, undefined, undefined, (function (param) {
                Promise$BsMocha.it("should do it right")(undefined, undefined, undefined, (function (param) {
                        return $$Promise.Js.toBsPromise($$Promise.map(SigImpl$AgdaModeVscode.openEditorWithContent("𝐀a𝐁bb𝐂c\na"), (function (textEditor) {
                                          Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.fromUTF8Offset(textEditor, undefined, 0), 0);
                                          Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.fromUTF8Offset(textEditor, undefined, 1), 2);
                                          Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.fromUTF8Offset(textEditor, undefined, 2), 3);
                                          Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.fromUTF8Offset(textEditor, undefined, 3), 5);
                                          Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.fromUTF8Offset(textEditor, undefined, 4), 6);
                                          Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.fromUTF8Offset(textEditor, undefined, 5), 7);
                                          Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.fromUTF8Offset(textEditor, undefined, 6), 9);
                                          Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.fromUTF8Offset(textEditor, undefined, 7), 10);
                                          Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.fromUTF8Offset(textEditor, undefined, 8), 11);
                                          return Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.fromUTF8Offset(textEditor, undefined, 9), 14);
                                        })));
                      }));
                return Promise$BsMocha.it("should extract the right portion of text")(undefined, undefined, undefined, (function (param) {
                              var getTextToOffsetAt = function (textEditor, offset) {
                                var offset$1 = SigImpl$AgdaModeVscode.fromUTF8Offset(textEditor, undefined, offset);
                                var range = SigImpl$AgdaModeVscode.$$Range.make(Curry._2(Editor_Point.make, 0, 0), SigImpl$AgdaModeVscode.pointAtOffset(textEditor, offset$1));
                                return SigImpl$AgdaModeVscode.getTextInRange(textEditor, range);
                              };
                              return $$Promise.Js.toBsPromise($$Promise.map(SigImpl$AgdaModeVscode.openEditorWithContent("𝐀a𝐁bb𝐂c\na"), (function (textEditor) {
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 0), "");
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 1), "𝐀");
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 2), "𝐀a");
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 3), "𝐀a𝐁");
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 4), "𝐀a𝐁b");
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 5), "𝐀a𝐁bb");
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 6), "𝐀a𝐁bb𝐂");
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 7), "𝐀a𝐁bb𝐂c");
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 8), "𝐀a𝐁bb𝐂c\n");
                                                return Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 9), "𝐀a𝐁bb𝐂c\na");
                                              })));
                            }));
              }));
        return Mocha$BsMocha.describe("Editor.toUTF8Offset")(undefined, undefined, undefined, (function (param) {
                      Promise$BsMocha.it("should do it right")(undefined, undefined, undefined, (function (param) {
                              return $$Promise.Js.toBsPromise($$Promise.map(SigImpl$AgdaModeVscode.openEditorWithContent("𝐀a𝐁bb𝐂c\na"), (function (textEditor) {
                                                Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, 0), 0);
                                                Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, 1), 1);
                                                Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, 2), 1);
                                                Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, 3), 2);
                                                Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, 5), 3);
                                                Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, 6), 4);
                                                Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, 7), 5);
                                                Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, 9), 6);
                                                Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, 10), 7);
                                                Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, 11), 8);
                                                return Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, 12), 9);
                                              })));
                            }));
                      Promise$BsMocha.it("should be a left inverse of Editor.fromUTF8Offset")(undefined, undefined, undefined, (function (param) {
                              return $$Promise.Js.toBsPromise($$Promise.map(SigImpl$AgdaModeVscode.openEditorWithContent("𝐀a𝐁bb𝐂c\na"), (function (textEditor) {
                                                var n = SigImpl$AgdaModeVscode.fromUTF8Offset(textEditor, undefined, 0);
                                                Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, n), 0);
                                                var n$1 = SigImpl$AgdaModeVscode.fromUTF8Offset(textEditor, undefined, 1);
                                                Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, n$1), 1);
                                                var n$2 = SigImpl$AgdaModeVscode.fromUTF8Offset(textEditor, undefined, 2);
                                                Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, n$2), 2);
                                                var n$3 = SigImpl$AgdaModeVscode.fromUTF8Offset(textEditor, undefined, 3);
                                                Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, n$3), 3);
                                                var n$4 = SigImpl$AgdaModeVscode.fromUTF8Offset(textEditor, undefined, 4);
                                                Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, n$4), 4);
                                                var n$5 = SigImpl$AgdaModeVscode.fromUTF8Offset(textEditor, undefined, 5);
                                                Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, n$5), 5);
                                                var n$6 = SigImpl$AgdaModeVscode.fromUTF8Offset(textEditor, undefined, 6);
                                                Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, n$6), 6);
                                                var n$7 = SigImpl$AgdaModeVscode.fromUTF8Offset(textEditor, undefined, 7);
                                                Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, n$7), 7);
                                                var n$8 = SigImpl$AgdaModeVscode.fromUTF8Offset(textEditor, undefined, 8);
                                                Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, n$8), 8);
                                                var n$9 = SigImpl$AgdaModeVscode.fromUTF8Offset(textEditor, undefined, 9);
                                                return Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, n$9), 9);
                                              })));
                            }));
                      return Promise$BsMocha.it("should be a right inverse of Editor.fromUTF8Offset ()")(undefined, undefined, undefined, (function (param) {
                                    return $$Promise.Js.toBsPromise($$Promise.map(SigImpl$AgdaModeVscode.openEditorWithContent("𝐀a𝐁bb𝐂c\na"), (function (textEditor) {
                                                      var n = SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, 0);
                                                      Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.fromUTF8Offset(textEditor, undefined, n), 0);
                                                      var n$1 = SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, 2);
                                                      Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.fromUTF8Offset(textEditor, undefined, n$1), 2);
                                                      var n$2 = SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, 3);
                                                      Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.fromUTF8Offset(textEditor, undefined, n$2), 3);
                                                      var n$3 = SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, 5);
                                                      Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.fromUTF8Offset(textEditor, undefined, n$3), 5);
                                                      var n$4 = SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, 6);
                                                      Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.fromUTF8Offset(textEditor, undefined, n$4), 6);
                                                      var n$5 = SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, 7);
                                                      Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.fromUTF8Offset(textEditor, undefined, n$5), 7);
                                                      var n$6 = SigImpl$AgdaModeVscode.toUTF8Offset(textEditor, 9);
                                                      return Assert$BsMocha.equal(undefined, SigImpl$AgdaModeVscode.fromUTF8Offset(textEditor, undefined, n$6), 9);
                                                    })));
                                  }));
                    }));
      }));

var Assert;

var P;

exports.Assert = Assert;
exports.P = P;
exports.Impl = Impl;
/*  Not a pure module */
