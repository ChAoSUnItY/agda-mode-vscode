// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Goal$AgdaModeVscode = require("./Goal.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Event$AgdaModeVscode = require("./Util/Event.bs.js");
var Request$AgdaModeVscode = require("./Request.bs.js");
var Connection$AgdaModeVscode = require("./Connection.bs.js");
var InputMethod$AgdaModeVscode = require("./InputMethod/InputMethod.bs.js");

function Impl(Editor) {
  var Goal = Goal$AgdaModeVscode.Impl(Editor);
  var InputMethod = InputMethod$AgdaModeVscode.Impl(Editor);
  var $$Request = Request$AgdaModeVscode.Impl(Editor);
  var getEditor = function (state) {
    return state.editor;
  };
  var onRemoveFromRegistry = function (state) {
    return Curry._1(state.onRemoveFromRegistry.once, undefined);
  };
  var emitRemoveFromRegistry = function (state) {
    return Curry._1(state.onRemoveFromRegistry.emit, undefined);
  };
  var connect = function (state) {
    var connection = state.connection;
    if (connection !== undefined) {
      return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [connection]));
    } else {
      return $$Promise.tapOk($$Promise.mapError(Connection$AgdaModeVscode.make(Editor.Config.getAgdaPath, Editor.Config.setAgdaPath), (function (e) {
                        return /* Connection */Caml_chrome_debugger.variant("Connection", 0, [e]);
                      })), (function (conn) {
                    state.connection = conn;
                    
                  }));
    }
  };
  var disconnect = function (state) {
    var connection = state.connection;
    if (connection !== undefined) {
      Connection$AgdaModeVscode.destroy(connection);
      return $$Promise.resolved(undefined);
    } else {
      return $$Promise.resolved(undefined);
    }
  };
  var setLoaded = function (value) {
    Curry._2(Editor.setContext, "agdaMode", value);
    
  };
  var destroy = function (state) {
    Curry._1(Editor.View.destroy, state.view);
    Curry._1(state.onRemoveFromRegistry.destroy, undefined);
    Belt_Array.forEach(state.goals, Goal.destroy);
    Belt_Array.forEach(Belt_Array.map(state.decorations, (function (prim) {
                return prim[0];
              })), Editor.Decoration.destroy);
    Curry._2(Editor.setContext, "agdaMode", false);
    Belt_Array.forEach(state.subscriptions, Editor.Disposable.dispose);
    return disconnect(state);
  };
  var make = function (extentionPath, eventEmitter, editor) {
    Curry._2(Editor.setContext, "agdaMode", true);
    var view = Curry._2(Editor.View.make, extentionPath, editor);
    return {
            editor: editor,
            view: view,
            connection: undefined,
            goals: [],
            decorations: [],
            cursor: undefined,
            inputMethod: Curry._1(InputMethod.make, eventEmitter),
            subscriptions: [],
            onRemoveFromRegistry: Event$AgdaModeVscode.make(undefined)
          };
  };
  var show = function (state) {
    Curry._1(Editor.View.show, state.view);
    Curry._2(Editor.setContext, "agdaMode", true);
    
  };
  var hide = function (state) {
    Curry._1(Editor.View.hide, state.view);
    Curry._2(Editor.setContext, "agdaMode", false);
    
  };
  var sendRequestToView = function (state, request) {
    return Curry._2(Editor.View.send, state.view, /* Request */Caml_chrome_debugger.variant("Request", 0, [request]));
  };
  var sendEventToView = function (state, $$event) {
    return Curry._2(Editor.View.send, state.view, /* Event */Caml_chrome_debugger.variant("Event", 1, [$$event]));
  };
  return {
          Goal: Goal,
          InputMethod: InputMethod,
          $$Request: $$Request,
          getEditor: getEditor,
          onRemoveFromRegistry: onRemoveFromRegistry,
          emitRemoveFromRegistry: emitRemoveFromRegistry,
          connect: connect,
          disconnect: disconnect,
          setLoaded: setLoaded,
          destroy: destroy,
          make: make,
          show: show,
          hide: hide,
          sendRequestToView: sendRequestToView,
          sendEventToView: sendEventToView
        };
}

exports.Impl = Impl;
/* Promise Not a pure module */
