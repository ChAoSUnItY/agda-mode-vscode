// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Task$AgdaModeVscode = require("./Task.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Command$AgdaModeVscode = require("../Command.bs.js");
var Handle__InputMethod$AgdaModeVscode = require("./Handle__InputMethod.bs.js");

function Impl(Editor) {
  var Task = Task$AgdaModeVscode.Impl(Editor);
  var InputMethodHandler = Handle__InputMethod$AgdaModeVscode.Impl(Editor);
  var handle = function (command) {
    if (typeof command === "number") {
      switch (command) {
        case /* Load */0 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* WithStateP */Caml_chrome_debugger.variant("WithStateP", 7, [(function (state) {
                              return $$Promise.map(Curry._1(Editor.save, state.editor), (function (param) {
                                            return /* [] */0;
                                          }));
                            })]),
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* Goal */Caml_chrome_debugger.variant("Goal", 5, [/* SaveCursor */3]),
                          /* :: */Caml_chrome_debugger.simpleVariant("::", [
                              /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 1, [/* Load */0]),
                              /* [] */0
                            ])
                        ])
                    ]);
        case /* Quit */1 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* Terminate */0,
                      /* [] */0
                    ]);
        case /* NextGoal */2 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* Goal */Caml_chrome_debugger.variant("Goal", 5, [/* Next */1]),
                      /* [] */0
                    ]);
        case /* PreviousGoal */3 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* Goal */Caml_chrome_debugger.variant("Goal", 5, [/* Previous */2]),
                      /* [] */0
                    ]);
        case /* Give */4 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* Goal */Caml_chrome_debugger.variant("Goal", 5, [/* GetPointedOr */Caml_chrome_debugger.variant("GetPointedOr", 5, [
                              (function (goal, content) {
                                  if (content !== undefined) {
                                    return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                              /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 1, [/* Give */Caml_chrome_debugger.variant("Give", 0, [goal])]),
                                              /* [] */0
                                            ]);
                                  } else {
                                    return Curry._4(Task.query, Command$AgdaModeVscode.toString(/* Give */4), "expression to give:", undefined, (function (expr) {
                                                  return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                            /* Goal */Caml_chrome_debugger.variant("Goal", 5, [/* Modify */Caml_chrome_debugger.variant("Modify", 1, [
                                                                    goal,
                                                                    (function (param) {
                                                                        return expr;
                                                                      })
                                                                  ])]),
                                                            /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                                /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 1, [/* Give */Caml_chrome_debugger.variant("Give", 0, [goal])]),
                                                                /* [] */0
                                                              ])
                                                          ]);
                                                }));
                                  }
                                }),
                              /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                  /* Error */Caml_chrome_debugger.variant("Error", 4, [/* OutOfGoal */1]),
                                  /* [] */0
                                ])
                            ])]),
                      /* [] */0
                    ]);
        case /* Refine */5 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* Goal */Caml_chrome_debugger.variant("Goal", 5, [/* GetPointedOr */Caml_chrome_debugger.variant("GetPointedOr", 5, [
                              (function (goal, param) {
                                  return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                            /* Goal */Caml_chrome_debugger.variant("Goal", 5, [/* SaveCursor */3]),
                                            /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 1, [/* Refine */Caml_chrome_debugger.variant("Refine", 1, [goal])]),
                                                /* [] */0
                                              ])
                                          ]);
                                }),
                              /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                  /* Error */Caml_chrome_debugger.variant("Error", 4, [/* OutOfGoal */1]),
                                  /* [] */0
                                ])
                            ])]),
                      /* [] */0
                    ]);
        case /* Auto */6 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* Goal */Caml_chrome_debugger.variant("Goal", 5, [/* GetPointedOr */Caml_chrome_debugger.variant("GetPointedOr", 5, [
                              (function (goal, param) {
                                  return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                            /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 1, [/* Auto */Caml_chrome_debugger.variant("Auto", 2, [goal])]),
                                            /* [] */0
                                          ]);
                                }),
                              /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                  /* Error */Caml_chrome_debugger.variant("Error", 4, [/* OutOfGoal */1]),
                                  /* [] */0
                                ])
                            ])]),
                      /* [] */0
                    ]);
        case /* Case */7 :
            var header = Command$AgdaModeVscode.toString(/* Case */7);
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* Goal */Caml_chrome_debugger.variant("Goal", 5, [/* GetPointedOr */Caml_chrome_debugger.variant("GetPointedOr", 5, [
                              (function (goal, param) {
                                  if (param !== undefined) {
                                    return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                              /* Goal */Caml_chrome_debugger.variant("Goal", 5, [/* SaveCursor */3]),
                                              /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                  /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 1, [/* Case */Caml_chrome_debugger.variant("Case", 3, [goal])]),
                                                  /* [] */0
                                                ])
                                            ]);
                                  } else {
                                    return Curry._4(Task.query, header, "expression to case:", undefined, (function (expr) {
                                                  return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                            /* Goal */Caml_chrome_debugger.variant("Goal", 5, [/* Modify */Caml_chrome_debugger.variant("Modify", 1, [
                                                                    goal,
                                                                    (function (param) {
                                                                        return expr;
                                                                      })
                                                                  ])]),
                                                            /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                                /* Goal */Caml_chrome_debugger.variant("Goal", 5, [/* SaveCursor */3]),
                                                                /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                                    /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 1, [/* Case */Caml_chrome_debugger.variant("Case", 3, [goal])]),
                                                                    /* [] */0
                                                                  ])
                                                              ])
                                                          ]);
                                                }));
                                  }
                                }),
                              /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                  /* Error */Caml_chrome_debugger.variant("Error", 4, [/* OutOfGoal */1]),
                                  /* [] */0
                                ])
                            ])]),
                      /* [] */0
                    ]);
        case /* WhyInScope */8 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* WithStateP */Caml_chrome_debugger.variant("WithStateP", 7, [(function (state) {
                              var range = Curry._1(Editor.getSelectionRange, state.editor);
                              var selectedText = Curry._2(Editor.getTextInRange, state.editor, range);
                              if (selectedText === "") {
                                return $$Promise.resolved(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                              /* Goal */Caml_chrome_debugger.variant("Goal", 5, [/* GetPointedOr */Caml_chrome_debugger.variant("GetPointedOr", 5, [
                                                      (function (goal, expr) {
                                                          if (expr !== undefined) {
                                                            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                                      /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 1, [/* WhyInScope */Caml_chrome_debugger.variant("WhyInScope", 10, [
                                                                              expr,
                                                                              goal
                                                                            ])]),
                                                                      /* [] */0
                                                                    ]);
                                                          } else {
                                                            return Curry._4(Task.query, "Scope info", "name:", undefined, (function (expr) {
                                                                          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                                                    /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 1, [/* WhyInScope */Caml_chrome_debugger.variant("WhyInScope", 10, [
                                                                                            expr,
                                                                                            goal
                                                                                          ])]),
                                                                                    /* [] */0
                                                                                  ]);
                                                                        }));
                                                          }
                                                        }),
                                                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                          /* Error */Caml_chrome_debugger.variant("Error", 4, [/* NoTextSelectedAndOutOfGoal */2]),
                                                          /* [] */0
                                                        ])
                                                    ])]),
                                              /* [] */0
                                            ]));
                              } else {
                                return $$Promise.resolved(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                              /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 1, [/* WhyInScopeGlobal */Caml_chrome_debugger.variant("WhyInScopeGlobal", 11, [selectedText])]),
                                              /* [] */0
                                            ]));
                              }
                            })]),
                      /* [] */0
                    ]);
        case /* Escape */9 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* SendEventToView */Caml_chrome_debugger.variant("SendEventToView", 2, [/* InterruptQuery */2]),
                      /* [] */0
                    ]);
        
      }
    } else {
      switch (command.tag | 0) {
        case /* InferType */0 :
            var normalization = command[0];
            var header$1 = Command$AgdaModeVscode.toString(/* InferType */Caml_chrome_debugger.variant("InferType", 0, [normalization]));
            var placeholder = "expression to infer:";
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* Goal */Caml_chrome_debugger.variant("Goal", 5, [/* GetPointedOr */Caml_chrome_debugger.variant("GetPointedOr", 5, [
                              (function (goal, expr) {
                                  if (expr !== undefined) {
                                    return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                              /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 1, [/* InferType */Caml_chrome_debugger.variant("InferType", 4, [
                                                      normalization,
                                                      expr,
                                                      goal
                                                    ])]),
                                              /* [] */0
                                            ]);
                                  } else {
                                    return Curry._4(Task.query, header$1, placeholder, undefined, (function (expr) {
                                                  return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                            /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 1, [/* InferType */Caml_chrome_debugger.variant("InferType", 4, [
                                                                    normalization,
                                                                    expr,
                                                                    goal
                                                                  ])]),
                                                            /* [] */0
                                                          ]);
                                                }));
                                  }
                                }),
                              Curry._4(Task.query, header$1, placeholder, undefined, (function (expr) {
                                      return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 1, [/* InferTypeGlobal */Caml_chrome_debugger.variant("InferTypeGlobal", 5, [
                                                        normalization,
                                                        expr
                                                      ])]),
                                                /* [] */0
                                              ]);
                                    }))
                            ])]),
                      /* [] */0
                    ]);
        case /* GoalType */1 :
            var normalization$1 = command[0];
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* Goal */Caml_chrome_debugger.variant("Goal", 5, [/* GetPointedOr */Caml_chrome_debugger.variant("GetPointedOr", 5, [
                              (function (goal, param) {
                                  return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                            /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 1, [/* GoalType */Caml_chrome_debugger.variant("GoalType", 6, [
                                                    normalization$1,
                                                    goal
                                                  ])]),
                                            /* [] */0
                                          ]);
                                }),
                              /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                  /* Error */Caml_chrome_debugger.variant("Error", 4, [/* OutOfGoal */1]),
                                  /* [] */0
                                ])
                            ])]),
                      /* [] */0
                    ]);
        case /* GoalTypeAndContext */2 :
            var normalization$2 = command[0];
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* Goal */Caml_chrome_debugger.variant("Goal", 5, [/* GetPointedOr */Caml_chrome_debugger.variant("GetPointedOr", 5, [
                              (function (goal, param) {
                                  return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                            /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 1, [/* GoalTypeAndContext */Caml_chrome_debugger.variant("GoalTypeAndContext", 7, [
                                                    normalization$2,
                                                    goal
                                                  ])]),
                                            /* [] */0
                                          ]);
                                }),
                              /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                  /* Error */Caml_chrome_debugger.variant("Error", 4, [/* OutOfGoal */1]),
                                  /* [] */0
                                ])
                            ])]),
                      /* [] */0
                    ]);
        case /* EventFromView */3 :
            var $$event = command[0];
            if (typeof $$event === "number") {
              if ($$event !== 0) {
                return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* Terminate */0,
                          /* [] */0
                        ]);
              } else {
                return /* [] */0;
              }
            }
            var $$char = $$event[0];
            if ($$char.tag) {
              return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                        /* Goal */Caml_chrome_debugger.variant("Goal", 5, [/* SaveCursor */3]),
                        /* :: */Caml_chrome_debugger.simpleVariant("::", [
                            /* DispatchCommand */Caml_chrome_debugger.variant("DispatchCommand", 0, [/* InputMethod */Caml_chrome_debugger.variant("InputMethod", 5, [/* ChooseSymbol */Caml_chrome_debugger.variant("ChooseSymbol", 2, [$$char[0]])])]),
                            /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                /* Goal */Caml_chrome_debugger.variant("Goal", 5, [/* RestoreCursor */4]),
                                /* [] */0
                              ])
                          ])
                      ]);
            } else {
              return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                        /* Goal */Caml_chrome_debugger.variant("Goal", 5, [/* SaveCursor */3]),
                        /* :: */Caml_chrome_debugger.simpleVariant("::", [
                            /* DispatchCommand */Caml_chrome_debugger.variant("DispatchCommand", 0, [/* InputMethod */Caml_chrome_debugger.variant("InputMethod", 5, [/* InsertChar */Caml_chrome_debugger.variant("InsertChar", 1, [$$char[0]])])]),
                            /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                /* Goal */Caml_chrome_debugger.variant("Goal", 5, [/* RestoreCursor */4]),
                                /* [] */0
                              ])
                          ])
                      ]);
            }
        case /* ComputeNormalForm */4 :
            var computeMode = command[0];
            var header$2 = "Compute normal form";
            var placeholder$1 = "expression to normalize:";
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* Goal */Caml_chrome_debugger.variant("Goal", 5, [/* GetPointedOr */Caml_chrome_debugger.variant("GetPointedOr", 5, [
                              (function (goal, expr) {
                                  if (expr !== undefined) {
                                    return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                              /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 1, [/* ComputeNormalForm */Caml_chrome_debugger.variant("ComputeNormalForm", 8, [
                                                      computeMode,
                                                      expr,
                                                      goal
                                                    ])]),
                                              /* [] */0
                                            ]);
                                  } else {
                                    return Curry._4(Task.query, header$2, placeholder$1, undefined, (function (expr) {
                                                  return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                            /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 1, [/* ComputeNormalForm */Caml_chrome_debugger.variant("ComputeNormalForm", 8, [
                                                                    computeMode,
                                                                    expr,
                                                                    goal
                                                                  ])]),
                                                            /* [] */0
                                                          ]);
                                                }));
                                  }
                                }),
                              Curry._4(Task.query, header$2, placeholder$1, undefined, (function (expr) {
                                      return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 1, [/* ComputeNormalFormGlobal */Caml_chrome_debugger.variant("ComputeNormalFormGlobal", 9, [
                                                        computeMode,
                                                        expr
                                                      ])]),
                                                /* [] */0
                                              ]);
                                    }))
                            ])]),
                      /* [] */0
                    ]);
        case /* InputMethod */5 :
            return Curry._1(InputMethodHandler.handle, command[0]);
        
      }
    }
  };
  return {
          Task: Task,
          InputMethodHandler: InputMethodHandler,
          handle: handle
        };
}

exports.Impl = Impl;
/* Promise Not a pure module */
