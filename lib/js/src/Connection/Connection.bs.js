// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Util$AgdaModeVscode = require("../Util/Util.bs.js");
var Config$AgdaModeVscode = require("../Config.bs.js");
var Parser$AgdaModeVscode = require("../Parser/Parser.bs.js");
var Request$AgdaModeVscode = require("../Request.bs.js");
var Json_Encode$JsonCombinators = require("@glennsl/rescript-json-combinators/lib/js/src/Json_Encode.bs.js");
var Client__LSP$LanguageServerMule = require("language-server-mule/lib/js/src/Client/Client__LSP.bs.js");
var Connection__LSP$AgdaModeVscode = require("./LSP/Connection__LSP.bs.js");
var Connection__Emacs$AgdaModeVscode = require("./Emacs/Connection__Emacs.bs.js");
var Connection__Probe$AgdaModeVscode = require("./Connection__Probe.bs.js");

function getFromConfig(param) {
  var param$1 = {
    commandLineOptions: Config$AgdaModeVscode.Connection.getCommandLineOptions(undefined)
  };
  return {
          commandLineOptions: Json_Encode$JsonCombinators.array((function (prim) {
                  return prim;
                }), param$1.commandLineOptions)
        };
}

var singleton = {
  contents: undefined
};

function toStatus(conn) {
  if (conn.TAG === /* Emacs */0) {
    var match = Connection__Emacs$AgdaModeVscode.getInfo(conn._0);
    return {
            TAG: 0,
            _0: match[0],
            _1: match[1],
            [Symbol.for("name")]: "Emacs"
          };
  }
  var conn$1 = conn._0;
  return {
          TAG: 1,
          _0: conn$1.version,
          _1: Client__LSP$LanguageServerMule.getMethod(conn$1.client),
          [Symbol.for("name")]: "LSP"
        };
}

function start(globalStoragePath, useLSP, onDownload) {
  var conn = singleton.contents;
  if (conn !== undefined) {
    return $$Promise.resolved({
                TAG: 0,
                _0: toStatus(conn),
                [Symbol.for("name")]: "Ok"
              });
  } else if (useLSP) {
    return $$Promise.mapOk($$Promise.flatMapOk($$Promise.flatMap(Connection__Probe$AgdaModeVscode.probeLSP(globalStoragePath, onDownload), (function (param) {
                          var result = param[0];
                          if (result !== undefined) {
                            return $$Promise.resolved({
                                        TAG: 0,
                                        _0: result,
                                        [Symbol.for("name")]: "Ok"
                                      });
                          } else {
                            return $$Promise.resolved({
                                        TAG: 1,
                                        _0: {
                                          TAG: 2,
                                          _0: "Agda Language Server",
                                          _1: param[1],
                                          [Symbol.for("name")]: "CannotAcquireHandle"
                                        },
                                        [Symbol.for("name")]: "Error"
                                      });
                          }
                        })), (function (method) {
                      return $$Promise.mapError($$Promise.flatMapOk($$Promise.mapError(Util$AgdaModeVscode.P.toPromise(Client__LSP$LanguageServerMule.make("agda", "Agda Language Server", method, getFromConfig(undefined))), (function (e) {
                                            return {
                                                    TAG: 0,
                                                    _0: e,
                                                    [Symbol.for("name")]: "ConnectionError"
                                                  };
                                          })), Connection__LSP$AgdaModeVscode.make), (function (error) {
                                    return {
                                            TAG: 1,
                                            _0: error,
                                            [Symbol.for("name")]: "LSP"
                                          };
                                  }));
                    })), (function (conn) {
                  var version = conn.version;
                  var method = Client__LSP$LanguageServerMule.getMethod(conn.client);
                  singleton.contents = {
                    TAG: 1,
                    _0: conn,
                    [Symbol.for("name")]: "LSP"
                  };
                  return {
                          TAG: 1,
                          _0: version,
                          _1: method,
                          [Symbol.for("name")]: "LSP"
                        };
                }));
  } else {
    return $$Promise.mapOk($$Promise.flatMapOk($$Promise.flatMap(Connection__Probe$AgdaModeVscode.probeEmacs(undefined), (function (param) {
                          var result = param[0];
                          if (result !== undefined) {
                            return $$Promise.resolved({
                                        TAG: 0,
                                        _0: result,
                                        [Symbol.for("name")]: "Ok"
                                      });
                          }
                          var name = Config$AgdaModeVscode.Connection.getAgdaVersion(undefined);
                          return $$Promise.resolved({
                                      TAG: 1,
                                      _0: {
                                        TAG: 2,
                                        _0: name,
                                        _1: param[1],
                                        [Symbol.for("name")]: "CannotAcquireHandle"
                                      },
                                      [Symbol.for("name")]: "Error"
                                    });
                        })), (function (method) {
                      return $$Promise.mapError(Connection__Emacs$AgdaModeVscode.make(method), (function (error) {
                                    return {
                                            TAG: 0,
                                            _0: error,
                                            [Symbol.for("name")]: "Emacs"
                                          };
                                  }));
                    })), (function (conn) {
                  singleton.contents = {
                    TAG: 0,
                    _0: conn,
                    [Symbol.for("name")]: "Emacs"
                  };
                  var match = Connection__Emacs$AgdaModeVscode.getInfo(conn);
                  return {
                          TAG: 0,
                          _0: match[0],
                          _1: match[1],
                          [Symbol.for("name")]: "Emacs"
                        };
                }));
  }
}

function stop(param) {
  var match = singleton.contents;
  if (match === undefined) {
    return $$Promise.resolved({
                TAG: 0,
                _0: undefined,
                [Symbol.for("name")]: "Ok"
              });
  }
  if (match.TAG === /* Emacs */0) {
    singleton.contents = undefined;
    return $$Promise.map(Connection__Emacs$AgdaModeVscode.destroy(match._0), (function (param) {
                  return {
                          TAG: 0,
                          _0: undefined,
                          [Symbol.for("name")]: "Ok"
                        };
                }));
  }
  singleton.contents = undefined;
  return $$Promise.mapError(Connection__LSP$AgdaModeVscode.destroy(match._0), (function (err) {
                return {
                        TAG: 1,
                        _0: err,
                        [Symbol.for("name")]: "LSP"
                      };
              }));
}

function sendRequest(globalStoragePath, onDownload, useLSP, $$document, request, handler) {
  var encodeRequest = function ($$document, version) {
    var filepath = Parser$AgdaModeVscode.filepath($$document.fileName);
    var libraryPath = Config$AgdaModeVscode.getLibraryPath(undefined);
    var highlightingMethod = Config$AgdaModeVscode.Highlighting.getHighlightingMethod(undefined);
    var backend = Config$AgdaModeVscode.getBackend(undefined);
    return Request$AgdaModeVscode.encode($$document, version, filepath, backend, libraryPath, highlightingMethod, request);
  };
  var match = singleton.contents;
  if (match === undefined) {
    return $$Promise.flatMapOk(start(globalStoragePath, useLSP, onDownload), (function (param) {
                  return sendRequest(globalStoragePath, onDownload, useLSP, $$document, request, handler);
                }));
  }
  if (match.TAG === /* Emacs */0) {
    var conn = match._0;
    var match$1 = Connection__Emacs$AgdaModeVscode.getInfo(conn);
    var handler$1 = function (x) {
      return Curry._1(handler, Util$AgdaModeVscode.Result.mapError(x, (function (err) {
                        return {
                                TAG: 0,
                                _0: err,
                                [Symbol.for("name")]: "Emacs"
                              };
                      })));
    };
    return $$Promise.flatMapError($$Promise.mapOk(Connection__Emacs$AgdaModeVscode.sendRequest(conn, encodeRequest($$document, match$1[0]), handler$1), (function (param) {
                      return toStatus({
                                  TAG: 0,
                                  _0: conn,
                                  [Symbol.for("name")]: "Emacs"
                                });
                    })), (function (error) {
                  return $$Promise.map(stop(undefined), (function (param) {
                                return {
                                        TAG: 1,
                                        _0: {
                                          TAG: 0,
                                          _0: error,
                                          [Symbol.for("name")]: "Emacs"
                                        },
                                        [Symbol.for("name")]: "Error"
                                      };
                              }));
                }));
  }
  var conn$1 = match._0;
  var handler$2 = function (x) {
    return Curry._1(handler, Util$AgdaModeVscode.Result.mapError(x, (function (err) {
                      return {
                              TAG: 1,
                              _0: err,
                              [Symbol.for("name")]: "LSP"
                            };
                    })));
  };
  return $$Promise.flatMapError($$Promise.mapOk(Connection__LSP$AgdaModeVscode.sendRequest(conn$1, encodeRequest($$document, conn$1.version), handler$2), (function (param) {
                    return toStatus({
                                TAG: 1,
                                _0: conn$1,
                                [Symbol.for("name")]: "LSP"
                              });
                  })), (function (error) {
                return $$Promise.map(stop(undefined), (function (param) {
                              return {
                                      TAG: 1,
                                      _0: {
                                        TAG: 1,
                                        _0: error,
                                        [Symbol.for("name")]: "LSP"
                                      },
                                      [Symbol.for("name")]: "Error"
                                    };
                            }));
              }));
}

var Module = {
  start: start,
  stop: stop,
  sendRequest: sendRequest
};

var $$Error;

var Scheduler;

var Emacs;

var LSP;

exports.$$Error = $$Error;
exports.Scheduler = Scheduler;
exports.Emacs = Emacs;
exports.LSP = LSP;
exports.Module = Module;
exports.start = start;
exports.stop = stop;
exports.sendRequest = sendRequest;
/* Promise Not a pure module */
