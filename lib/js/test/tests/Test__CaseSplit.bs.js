// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Vscode = require("vscode");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Mocha$BsMocha = require("bs-mocha/lib/js/src/Mocha.bs.js");
var Assert$BsMocha = require("bs-mocha/lib/js/src/Assert.bs.js");
var Promise$BsMocha = require("bs-mocha/lib/js/src/Promise.bs.js");
var Goal$AgdaModeVscode = require("../../src/Goal.bs.js");
var Task$AgdaModeVscode = require("../../src/Task/Task.bs.js");
var SigImpl$AgdaModeVscode = require("../../src/SigImpl.bs.js");
var Dispatcher$AgdaModeVscode = require("../../src/Task/Dispatcher.bs.js");
var Test__Util$AgdaModeVscode = require("./Test__Util.bs.js");
var Handle__Goal$AgdaModeVscode = require("../../src/Task/Handle__Goal.bs.js");

function Impl(Editor) {
  var Test__Util = Test__Util$AgdaModeVscode.Impl(Editor);
  var makeTextEditor = function (content) {
    return $$Promise.flatMap(Vscode.workspace.openTextDocument({
                    content: content,
                    language: "agda"
                  }), (function (textDocument) {
                  return Vscode.window.showTextDocument(textDocument, undefined);
                }));
  };
  var Goal = Goal$AgdaModeVscode.Impl(Editor);
  var Task = Task$AgdaModeVscode.Impl(Editor);
  var Dispatcher = Dispatcher$AgdaModeVscode.Impl(Editor);
  var GoalHandler = Handle__Goal$AgdaModeVscode.Impl(Editor);
  var forGoal = function (goals, index, callback) {
    var goal = Belt_Array.get(goals, index);
    if (goal !== undefined) {
      return Curry._1(callback, Caml_option.valFromOption(goal));
    } else {
      Assert$BsMocha.fail("failed to instantiate goal #" + String(index));
      return $$Promise.resolved(undefined);
    }
  };
  Mocha$BsMocha.describe("Handle__Goal.caseSplitAux")(undefined, undefined, undefined, (function (param) {
          return Promise$BsMocha.it("should calculate the infomation needed for case splitting correctly")(undefined, undefined, undefined, (function (param) {
                        return $$Promise.Js.toBsPromise($$Promise.flatMap(Curry._1(Editor.openEditor, Curry._1(Test__Util.Path.asset, "CaseSplit.agda")), (function (editor) {
                                          return $$Promise.map($$Promise.map(Curry._2(Goal.makeMany, editor, [
                                                              0,
                                                              1,
                                                              2,
                                                              3,
                                                              4,
                                                              5,
                                                              6,
                                                              7,
                                                              8
                                                            ]), (function (goals) {
                                                            return Belt_Array.map(goals, (function (goal) {
                                                                          var match = Curry._2(GoalHandler.caseSplitAux, editor, goal);
                                                                          var rewriteRange = Curry._2(Editor.$$Range.fromOffset, editor, match[2]);
                                                                          return /* tuple */[
                                                                                  match[0],
                                                                                  match[1],
                                                                                  Curry._2(Editor.getTextInRange, editor, rewriteRange)
                                                                                ];
                                                                        }));
                                                          })), (function (results) {
                                                        return Assert$BsMocha.deep_equal(undefined, results, [
                                                                    /* tuple */[
                                                                      false,
                                                                      9,
                                                                      "x → {!   !}"
                                                                    ],
                                                                    /* tuple */[
                                                                      false,
                                                                      23,
                                                                      "y → {!   !}"
                                                                    ],
                                                                    /* tuple */[
                                                                      false,
                                                                      4,
                                                                      "x → {!   !}"
                                                                    ],
                                                                    /* tuple */[
                                                                      false,
                                                                      4,
                                                                      "y → {!   !}"
                                                                    ],
                                                                    /* tuple */[
                                                                      true,
                                                                      13,
                                                                      "x → {!   !}"
                                                                    ],
                                                                    /* tuple */[
                                                                      true,
                                                                      13,
                                                                      "y → {!   !}"
                                                                    ],
                                                                    /* tuple */[
                                                                      true,
                                                                      2,
                                                                      "x → {!   !}"
                                                                    ],
                                                                    /* tuple */[
                                                                      true,
                                                                      2,
                                                                      "y → {!   !}"
                                                                    ],
                                                                    /* tuple */[
                                                                      false,
                                                                      13,
                                                                      "x → {!   !}"
                                                                    ]
                                                                  ]);
                                                      }));
                                        })));
                      }));
        }));
  return {
          Test__Util: Test__Util,
          makeTextEditor: makeTextEditor,
          Goal: Goal,
          Task: Task,
          Dispatcher: Dispatcher,
          GoalHandler: GoalHandler,
          forGoal: forGoal
        };
}

var Editor_Point = {
  line: SigImpl$AgdaModeVscode.Point.line,
  column: SigImpl$AgdaModeVscode.Point.column,
  make: SigImpl$AgdaModeVscode.Point.make,
  translate: SigImpl$AgdaModeVscode.Point.translate,
  compare: SigImpl$AgdaModeVscode.Point.compare
};

var Editor_Config = {
  getAgdaPath: SigImpl$AgdaModeVscode.Config.getAgdaPath,
  setAgdaPath: SigImpl$AgdaModeVscode.Config.setAgdaPath,
  getLibraryPath: SigImpl$AgdaModeVscode.Config.getLibraryPath,
  getHighlightingMethod: SigImpl$AgdaModeVscode.Config.getHighlightingMethod,
  getBackend: SigImpl$AgdaModeVscode.Config.getBackend
};

var Editor_View = {
  make: SigImpl$AgdaModeVscode.View.make,
  destroy: SigImpl$AgdaModeVscode.View.destroy,
  show: SigImpl$AgdaModeVscode.View.show,
  hide: SigImpl$AgdaModeVscode.View.hide,
  focus: SigImpl$AgdaModeVscode.View.focus,
  send: SigImpl$AgdaModeVscode.View.send,
  onEvent: SigImpl$AgdaModeVscode.View.onEvent,
  fromPosition: SigImpl$AgdaModeVscode.View.fromPosition,
  fromInterval: SigImpl$AgdaModeVscode.View.fromInterval
};

var Editor_Decoration = {
  decorate: SigImpl$AgdaModeVscode.Decoration.decorate,
  highlightBackground: SigImpl$AgdaModeVscode.Decoration.highlightBackground,
  highlightBackgroundWithColor: SigImpl$AgdaModeVscode.Decoration.highlightBackgroundWithColor,
  decorateText: SigImpl$AgdaModeVscode.Decoration.decorateText,
  decorateTextWithColor: SigImpl$AgdaModeVscode.Decoration.decorateTextWithColor,
  overlayText: SigImpl$AgdaModeVscode.Decoration.overlayText,
  overlayTextWithColor: SigImpl$AgdaModeVscode.Decoration.overlayTextWithColor,
  underlineText: SigImpl$AgdaModeVscode.Decoration.underlineText,
  destroy: SigImpl$AgdaModeVscode.Decoration.destroy
};

var Editor = {
  Disposable: SigImpl$AgdaModeVscode.Disposable,
  Point: Editor_Point,
  pointAtOffset: SigImpl$AgdaModeVscode.pointAtOffset,
  offsetAtPoint: SigImpl$AgdaModeVscode.offsetAtPoint,
  $$Range: SigImpl$AgdaModeVscode.$$Range,
  editorType: SigImpl$AgdaModeVscode.editorType,
  getExtensionPath: SigImpl$AgdaModeVscode.getExtensionPath,
  getFileName: SigImpl$AgdaModeVscode.getFileName,
  openEditor: SigImpl$AgdaModeVscode.openEditor,
  openEditorWithContent: SigImpl$AgdaModeVscode.openEditorWithContent,
  save: SigImpl$AgdaModeVscode.save,
  onDidChangeFileName: SigImpl$AgdaModeVscode.onDidChangeFileName,
  onDidChangeActivation: SigImpl$AgdaModeVscode.onDidChangeActivation,
  onDidCloseEditor: SigImpl$AgdaModeVscode.onDidCloseEditor,
  registerCommand: SigImpl$AgdaModeVscode.registerCommand,
  setContext: SigImpl$AgdaModeVscode.setContext,
  getDisposables: SigImpl$AgdaModeVscode.getDisposables,
  Config: Editor_Config,
  View: Editor_View,
  Decoration: Editor_Decoration,
  focus: SigImpl$AgdaModeVscode.focus,
  reveal: SigImpl$AgdaModeVscode.reveal,
  getSelection: SigImpl$AgdaModeVscode.getSelection,
  getSelections: SigImpl$AgdaModeVscode.getSelections,
  setSelection: SigImpl$AgdaModeVscode.setSelection,
  setSelections: SigImpl$AgdaModeVscode.setSelections,
  getCursorPosition: SigImpl$AgdaModeVscode.getCursorPosition,
  getCursorPositions: SigImpl$AgdaModeVscode.getCursorPositions,
  setCursorPosition: SigImpl$AgdaModeVscode.setCursorPosition,
  setCursorPositions: SigImpl$AgdaModeVscode.setCursorPositions,
  onChangeCursorPosition: SigImpl$AgdaModeVscode.onChangeCursorPosition,
  rangeForLine: SigImpl$AgdaModeVscode.rangeForLine,
  fromAgdaOffset: SigImpl$AgdaModeVscode.fromAgdaOffset,
  toAgdaOffset: SigImpl$AgdaModeVscode.toAgdaOffset,
  getText: SigImpl$AgdaModeVscode.getText,
  getTextInRange: SigImpl$AgdaModeVscode.getTextInRange,
  selectText: SigImpl$AgdaModeVscode.selectText,
  replaceText: SigImpl$AgdaModeVscode.replaceText,
  insertText: SigImpl$AgdaModeVscode.insertText,
  insertTexts: SigImpl$AgdaModeVscode.insertTexts,
  deleteText: SigImpl$AgdaModeVscode.deleteText,
  onChange: SigImpl$AgdaModeVscode.onChange,
  copyToClipboard: SigImpl$AgdaModeVscode.copyToClipboard,
  colorThemeIsDark: SigImpl$AgdaModeVscode.colorThemeIsDark,
  lineEndingIsCRLF: SigImpl$AgdaModeVscode.lineEndingIsCRLF
};

var Test__Util = Test__Util$AgdaModeVscode.Impl(Editor);

function makeTextEditor(content) {
  return $$Promise.flatMap(Vscode.workspace.openTextDocument({
                  content: content,
                  language: "agda"
                }), (function (textDocument) {
                return Vscode.window.showTextDocument(textDocument, undefined);
              }));
}

var Goal = Goal$AgdaModeVscode.Impl(Editor);

var Task = Task$AgdaModeVscode.Impl(Editor);

var Dispatcher = Dispatcher$AgdaModeVscode.Impl(Editor);

var GoalHandler = Handle__Goal$AgdaModeVscode.Impl(Editor);

function forGoal(goals, index, callback) {
  var goal = Belt_Array.get(goals, index);
  if (goal !== undefined) {
    return Curry._1(callback, Caml_option.valFromOption(goal));
  } else {
    Assert$BsMocha.fail("failed to instantiate goal #" + String(index));
    return $$Promise.resolved(undefined);
  }
}

Mocha$BsMocha.describe("Handle__Goal.caseSplitAux")(undefined, undefined, undefined, (function (param) {
        return Promise$BsMocha.it("should calculate the infomation needed for case splitting correctly")(undefined, undefined, undefined, (function (param) {
                      return $$Promise.Js.toBsPromise($$Promise.flatMap(SigImpl$AgdaModeVscode.openEditor(Curry._1(Test__Util.Path.asset, "CaseSplit.agda")), (function (editor) {
                                        return $$Promise.map($$Promise.map(Curry._2(Goal.makeMany, editor, [
                                                            0,
                                                            1,
                                                            2,
                                                            3,
                                                            4,
                                                            5,
                                                            6,
                                                            7,
                                                            8
                                                          ]), (function (goals) {
                                                          return Belt_Array.map(goals, (function (goal) {
                                                                        var match = Curry._2(GoalHandler.caseSplitAux, editor, goal);
                                                                        var rewriteRange = SigImpl$AgdaModeVscode.$$Range.fromOffset(editor, match[2]);
                                                                        return /* tuple */[
                                                                                match[0],
                                                                                match[1],
                                                                                SigImpl$AgdaModeVscode.getTextInRange(editor, rewriteRange)
                                                                              ];
                                                                      }));
                                                        })), (function (results) {
                                                      return Assert$BsMocha.deep_equal(undefined, results, [
                                                                  /* tuple */[
                                                                    false,
                                                                    9,
                                                                    "x → {!   !}"
                                                                  ],
                                                                  /* tuple */[
                                                                    false,
                                                                    23,
                                                                    "y → {!   !}"
                                                                  ],
                                                                  /* tuple */[
                                                                    false,
                                                                    4,
                                                                    "x → {!   !}"
                                                                  ],
                                                                  /* tuple */[
                                                                    false,
                                                                    4,
                                                                    "y → {!   !}"
                                                                  ],
                                                                  /* tuple */[
                                                                    true,
                                                                    13,
                                                                    "x → {!   !}"
                                                                  ],
                                                                  /* tuple */[
                                                                    true,
                                                                    13,
                                                                    "y → {!   !}"
                                                                  ],
                                                                  /* tuple */[
                                                                    true,
                                                                    2,
                                                                    "x → {!   !}"
                                                                  ],
                                                                  /* tuple */[
                                                                    true,
                                                                    2,
                                                                    "y → {!   !}"
                                                                  ],
                                                                  /* tuple */[
                                                                    false,
                                                                    13,
                                                                    "x → {!   !}"
                                                                  ]
                                                                ]);
                                                    }));
                                      })));
                    }));
      }));

var Assert;

var P;

exports.Assert = Assert;
exports.P = P;
exports.Impl = Impl;
exports.Test__Util = Test__Util;
exports.makeTextEditor = makeTextEditor;
exports.Goal = Goal;
exports.Task = Task;
exports.Dispatcher = Dispatcher;
exports.GoalHandler = GoalHandler;
exports.forGoal = forGoal;
/* Test__Util Not a pure module */
