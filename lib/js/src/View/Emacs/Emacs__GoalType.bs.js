// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var React = require("react");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Component$AgdaModeVscode = require("../Component/Component.bs.js");
var Emacs__Parser$AgdaModeVscode = require("./Emacs__Parser.bs.js");
var Emacs__Parser2$AgdaModeVscode = require("./Emacs__Parser2.bs.js");

function parse(raw) {
  var markGoal = function (param) {
    return Belt_Option.map(Caml_option.null_to_opt(param[0].match(/^Goal:/)), (function (param) {
                  return "goal";
                }));
  };
  var markHave = function (param) {
    return Belt_Option.map(Caml_option.null_to_opt(param[0].match(/^Have:/)), (function (param) {
                  return "have";
                }));
  };
  var markMetas = function (param) {
    return Belt_Option.map(Caml_option.null_to_opt(param[0].match(/\u2014{60}/g)), (function (param) {
                  return "metas";
                }));
  };
  var partiteGoalTypeContext = function (xs) {
    return Emacs__Parser$AgdaModeVscode.Dict.partite(xs, (function (line) {
                  var v = markGoal(line);
                  if (v !== undefined) {
                    return v;
                  }
                  var v$1 = markHave(line);
                  if (v$1 !== undefined) {
                    return v$1;
                  }
                  var v$2 = markMetas(line);
                  if (v$2 !== undefined) {
                    return v$2;
                  }
                  
                }));
  };
  var removeDelimeter = function (xs) {
    return Emacs__Parser$AgdaModeVscode.Dict.update(xs, "metas", (function (param) {
                  return param.slice(1);
                }));
  };
  var lines = raw.split("\n");
  var dictionary = Emacs__Parser2$AgdaModeVscode.partiteMetas(removeDelimeter(partiteGoalTypeContext(lines)));
  var goal = Belt_Option.flatMap(Js_dict.get(dictionary, "goal"), (function (line) {
          return Component$AgdaModeVscode.Expr.parse(line.join("\n").slice(5));
        }));
  var have = Belt_Option.flatMap(Js_dict.get(dictionary, "have"), (function (line) {
          return Component$AgdaModeVscode.Expr.parse(line.join("\n").slice(5));
        }));
  var interactionMetas = Belt_Option.mapWithDefault(Js_dict.get(dictionary, "interactionMetas"), [], (function (metas) {
          return Belt_Array.keepMap(Belt_Array.map(metas, Component$AgdaModeVscode.Output.parseOutputWithoutRange), (function (x) {
                        return x;
                      }));
        }));
  var hiddenMetas = Belt_Option.mapWithDefault(Js_dict.get(dictionary, "hiddenMetas"), [], (function (metas) {
          return Belt_Array.keepMap(Belt_Array.map(metas, Component$AgdaModeVscode.Output.parseOutputWithRange), (function (x) {
                        return x;
                      }));
        }));
  return {
          goal: goal,
          have: have,
          interactionMetas: interactionMetas,
          hiddenMetas: hiddenMetas
        };
}

function Emacs__GoalType(Props) {
  var payload = Props.payload;
  var parsed = parse(payload);
  return React.createElement(React.Fragment, undefined, React.createElement("ul", undefined, Belt_Option.mapWithDefault(parsed.goal, null, (function (expr) {
                        return React.createElement(Component$AgdaModeVscode.Labeled.make, {
                                    label: "Goal ",
                                    expr: expr
                                  });
                      })), Belt_Option.mapWithDefault(parsed.have, null, (function (expr) {
                        return React.createElement(Component$AgdaModeVscode.Labeled.make, {
                                    label: "Have ",
                                    expr: expr
                                  });
                      }))), React.createElement("ul", undefined, Belt_Array.mapWithIndex(parsed.interactionMetas, (function (i, value) {
                        return React.createElement(Component$AgdaModeVscode.Output.make, {
                                    value: value,
                                    key: String(i)
                                  });
                      }))), React.createElement("ul", undefined, Belt_Array.mapWithIndex(parsed.hiddenMetas, (function (i, value) {
                        return React.createElement(Component$AgdaModeVscode.Output.make, {
                                    value: value,
                                    key: String(i)
                                  });
                      }))));
}

var make = Emacs__GoalType;

exports.parse = parse;
exports.make = make;
/* react Not a pure module */
