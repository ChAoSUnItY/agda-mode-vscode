// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Vscode = require("vscode");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Parser$AgdaModeVscode = require("./Parser.bs.js");

function make(prim) {
  return new Vscode.Disposable(prim);
}

function dispose(prim) {
  return prim.dispose();
}

var Disposable = {
  make: make,
  dispose: dispose
};

function make$1(prim, prim$1) {
  return new Vscode.Position(prim, prim$1);
}

function line(prim) {
  return prim.line;
}

function column(prim) {
  return prim.character;
}

function translate(prim, prim$1, prim$2) {
  return prim.translate(prim$1, prim$2);
}

var Point = {
  make: make$1,
  line: line,
  column: column,
  translate: translate
};

function make$2(prim, prim$1) {
  return new Vscode.Range(prim, prim$1);
}

function start(prim) {
  return prim.start;
}

function end_(prim) {
  return prim.end;
}

function contains(prim, prim$1) {
  return prim.contains(prim$1);
}

function containsRange(prim, prim$1) {
  return prim.contains(prim$1);
}

var $$Range = {
  make: make$2,
  start: start,
  end_: end_,
  contains: contains,
  containsRange: containsRange
};

function getExtensionPath(context) {
  return context.extensionPath;
}

function getFileName(editor) {
  return editor.document.fileName;
}

function save(editor) {
  return editor.document.save();
}

function addToSubscriptions(disposable, context) {
  context.subscriptions.push(disposable);
  
}

function onDidCloseEditor(callback) {
  return Vscode.workspace.onDidCloseTextDocument((function (textDoc) {
                return Belt_Option.forEach(textDoc, (function (textDoc) {
                              return Curry._1(callback, textDoc.fileName);
                            }));
              }));
}

function onDidChangeFileName(callback) {
  return Vscode.workspace.onDidRenameFiles((function ($$event) {
                return Belt_Option.forEach(Belt_Option.map($$event, (function (prim) {
                                  return prim.files;
                                })), (function (files) {
                              return Belt_Array.forEach(files, (function (file) {
                                            return Curry._2(callback, file.oldUri.path, file.newUri.path);
                                          }));
                            }));
              }));
}

function onDidChangeActivation(callback) {
  var previous = {
    contents: Belt_Option.flatMap(Vscode.window.activeTextEditor, getFileName)
  };
  return Vscode.window.onDidChangeActiveTextEditor((function (next) {
                var next$1 = Belt_Option.flatMap(next, getFileName);
                if (Caml_obj.caml_notequal(next$1, previous.contents)) {
                  Curry._2(callback, previous.contents, next$1);
                  previous.contents = next$1;
                  return ;
                }
                
              }));
}

function isAgda(filepath) {
  var filepath$1 = Parser$AgdaModeVscode.filepath(filepath);
  return /\.agda$|\.lagda$/i.test(filepath$1);
}

function registerCommand(name, callback) {
  return Vscode.commands.registerCommand("extension." + name, (function (param) {
                return Belt_Option.forEach(Vscode.window.activeTextEditor, (function (editor) {
                              return Belt_Option.forEach(editor.document.fileName, (function (fileName) {
                                            if (isAgda(fileName)) {
                                              return Curry._1(callback, editor);
                                            }
                                            
                                          }));
                            }));
              }));
}

function setAgdaPath(path) {
  return Vscode.workspace.getConfiguration("agda-mode", undefined).update("agdaPath", path, 1, undefined);
}

function getAgdaPath(param) {
  return Vscode.workspace.getConfiguration("agda-mode", undefined).get("agdaPath");
}

var Config = {
  setAgdaPath: setAgdaPath,
  getAgdaPath: getAgdaPath
};

function getCursorPosition(editor) {
  return editor.selection.end;
}

function rangeForLine(editor, line) {
  return editor.document.lineAt(line).range;
}

function getText(editor, range) {
  return editor.document.getText(Caml_option.some(range));
}

function selectText(editor, range) {
  var start = range.start;
  var end_ = range.end;
  var selection = new Vscode.Selection(start, end_);
  editor.selection = selection;
  
}

function insertText(editor, point, text) {
  var editCallback = function (edit) {
    edit.insert(point, text);
    
  };
  return editor.edit(editCallback, undefined);
}

function deleteText(editor, range) {
  var editCallback = function (edit) {
    edit.delete(range);
    
  };
  return editor.edit(editCallback, undefined);
}

var editorType = /* VsCode */1;

exports.Disposable = Disposable;
exports.Point = Point;
exports.$$Range = $$Range;
exports.editorType = editorType;
exports.getExtensionPath = getExtensionPath;
exports.getFileName = getFileName;
exports.save = save;
exports.addToSubscriptions = addToSubscriptions;
exports.onDidCloseEditor = onDidCloseEditor;
exports.onDidChangeFileName = onDidChangeFileName;
exports.onDidChangeActivation = onDidChangeActivation;
exports.isAgda = isAgda;
exports.registerCommand = registerCommand;
exports.Config = Config;
exports.getCursorPosition = getCursorPosition;
exports.rangeForLine = rangeForLine;
exports.getText = getText;
exports.selectText = selectText;
exports.insertText = insertText;
exports.deleteText = deleteText;
/* vscode Not a pure module */
