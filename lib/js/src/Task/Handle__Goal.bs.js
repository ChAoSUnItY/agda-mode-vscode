// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var $$String = require("bs-platform/lib/js/string.js");
var Vscode = require("vscode");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");
var Goal$AgdaModeVscode = require("../Goal.bs.js");
var Task$AgdaModeVscode = require("./Task.bs.js");
var Editor$AgdaModeVscode = require("../Editor.bs.js");

function getOffsets(state) {
  return Belt_Array.map(state.goals, (function (goal) {
                return goal.range[0] + 3 | 0;
              }));
}

function pointingAt(cursor, state) {
  var cursor$1 = cursor !== undefined ? Caml_option.valFromOption(cursor) : Editor$AgdaModeVscode.Cursor.get(state.editor);
  var cursorOffset = state.editor.document.offsetAt(cursor$1);
  var pointedGoals = Belt_Array.keep(state.goals, (function (goal) {
          if (goal.range[0] <= cursorOffset) {
            return cursorOffset <= goal.range[1];
          } else {
            return false;
          }
        }));
  return Belt_Array.get(pointedGoals, 0);
}

function caseSplitAux($$document, goal) {
  var start = $$document.positionAt(0);
  var end_ = $$document.positionAt(goal.range[0]);
  var range = new Vscode.Range(start, end_);
  var textBeforeGoal = Editor$AgdaModeVscode.$$Text.get($$document, range);
  var nextWordBoundary = function (start, string) {
    var $$break = false;
    var n = 0;
    var i = start;
    while(i < string.length && !$$break) {
      var $$char = string.charAt(i);
      switch ($$char) {
        case "\t" :
        case "\f" :
        case " " :
            n = n + 1 | 0;
            break;
        default:
          $$break = true;
      }
      i = i + 1 | 0;
    };
    return start + n | 0;
  };
  var bracketCount = 0;
  var i = goal.range[0] - 1 | 0;
  while(i >= 0 && bracketCount >= 0) {
    var i$prime = i;
    if (i$prime !== 0) {
      var match = textBeforeGoal.charAt(i$prime - 1 | 0);
      switch (match) {
        case "{" :
            bracketCount = bracketCount - 1 | 0;
            break;
        case "}" :
            bracketCount = bracketCount + 1 | 0;
            break;
        default:
          
      }
    }
    i = i - 1 | 0;
  };
  var lastOpenCurlyBracketOffset = i + 1 | 0;
  var n = textBeforeGoal.lastIndexOf(";");
  var lastSemicolonOffset = (
    n !== -1 ? n : 0
  ) + 1 | 0;
  var n$1 = textBeforeGoal.lastIndexOf("where");
  var lastWhereTokenOffset = (
    n$1 !== -1 ? n$1 : 0
  ) + 5 | 0;
  var lastLineBreakOffset = Caml_primitive.caml_int_max(0, Caml_primitive.caml_int_max(textBeforeGoal.lastIndexOf("\r"), textBeforeGoal.lastIndexOf("\n"))) + 1 | 0;
  var inWhereClause = lastWhereTokenOffset > lastOpenCurlyBracketOffset;
  var offset = Caml_primitive.caml_int_max(lastLineBreakOffset > lastSemicolonOffset ? lastLineBreakOffset : lastSemicolonOffset, lastWhereTokenOffset > lastOpenCurlyBracketOffset ? lastWhereTokenOffset : lastOpenCurlyBracketOffset);
  var caseStart = nextWordBoundary(offset, textBeforeGoal);
  var caseEnd = goal.range[1];
  var range$1 = [
    caseStart,
    caseEnd
  ];
  return [
          inWhereClause,
          caseStart - lastLineBreakOffset | 0,
          range$1
        ];
}

function indentationWidth($$document, goal) {
  var goalStart = $$document.positionAt(goal.range[0]);
  var lineNo = goalStart.line;
  var range = new Vscode.Range(new Vscode.Position(lineNo, 0), goalStart);
  var textBeforeGoal = Editor$AgdaModeVscode.$$Text.get($$document, range);
  var indentedBy = function (s) {
    var n = 0;
    for(var i = 0 ,i_finish = s.length; i < i_finish; ++i){
      var match = s.charAt(i);
      var exit = 0;
      switch (match) {
        case "\t" :
        case "\n" :
        case "\f" :
        case "\r" :
        case " " :
            exit = 1;
            break;
        default:
          
      }
      if (exit === 1 && i === n) {
        n = n + 1 | 0;
      }
      
    }
    return n;
  };
  return [
          indentedBy(textBeforeGoal),
          textBeforeGoal,
          range
        ];
}

function handle(x) {
  if (typeof x === "number") {
    switch (x) {
      case /* UpdateRange */0 :
          return {
                  hd: {
                    TAG: 7,
                    _0: (function (state) {
                        return Goal$AgdaModeVscode.updateRanges(state.goals, state.editor.document);
                      }),
                    [Symbol.for("name")]: "WithState"
                  },
                  tl: /* [] */0
                };
      case /* Next */1 :
          return {
                  hd: {
                    TAG: 6,
                    _0: /* UpdateRange */0,
                    [Symbol.for("name")]: "Goal"
                  },
                  tl: {
                    hd: {
                      TAG: 8,
                      _0: (function (state) {
                          var $$document = state.editor.document;
                          var nextGoal = {
                            contents: undefined
                          };
                          var cursorOffset = $$document.offsetAt(Editor$AgdaModeVscode.Cursor.get(state.editor));
                          var offsets = getOffsets(state);
                          Belt_Array.forEach(offsets, (function (offset) {
                                  if (cursorOffset < offset && nextGoal.contents === undefined) {
                                    nextGoal.contents = offset;
                                    return ;
                                  }
                                  
                                }));
                          if (nextGoal.contents === undefined) {
                            nextGoal.contents = Belt_Array.get(offsets, 0);
                          }
                          var offset = nextGoal.contents;
                          if (offset === undefined) {
                            return $$Promise.resolved(/* [] */0);
                          }
                          var point = $$document.positionAt(offset);
                          Editor$AgdaModeVscode.Cursor.set(state.editor, point);
                          return $$Promise.resolved({
                                      hd: {
                                        TAG: 6,
                                        _0: {
                                          TAG: 3,
                                          _0: offset,
                                          [Symbol.for("name")]: "JumpToOffset"
                                        },
                                        [Symbol.for("name")]: "Goal"
                                      },
                                      tl: /* [] */0
                                    });
                        }),
                      [Symbol.for("name")]: "WithStateP"
                    },
                    tl: /* [] */0
                  }
                };
      case /* Previous */2 :
          return {
                  hd: {
                    TAG: 6,
                    _0: /* UpdateRange */0,
                    [Symbol.for("name")]: "Goal"
                  },
                  tl: {
                    hd: {
                      TAG: 8,
                      _0: (function (state) {
                          var $$document = state.editor.document;
                          var previousGoal = {
                            contents: undefined
                          };
                          var cursorOffset = $$document.offsetAt(Editor$AgdaModeVscode.Cursor.get(state.editor));
                          var offsets = getOffsets(state);
                          Belt_Array.forEach(offsets, (function (offset) {
                                  if (cursorOffset > offset) {
                                    previousGoal.contents = offset;
                                    return ;
                                  }
                                  
                                }));
                          if (previousGoal.contents === undefined) {
                            previousGoal.contents = Belt_Array.get(offsets, offsets.length - 1 | 0);
                          }
                          var offset = previousGoal.contents;
                          if (offset === undefined) {
                            return $$Promise.resolved(/* [] */0);
                          }
                          var point = $$document.positionAt(offset);
                          Editor$AgdaModeVscode.Cursor.set(state.editor, point);
                          return $$Promise.resolved({
                                      hd: {
                                        TAG: 6,
                                        _0: {
                                          TAG: 3,
                                          _0: offset,
                                          [Symbol.for("name")]: "JumpToOffset"
                                        },
                                        [Symbol.for("name")]: "Goal"
                                      },
                                      tl: /* [] */0
                                    });
                        }),
                      [Symbol.for("name")]: "WithStateP"
                    },
                    tl: /* [] */0
                  }
                };
      case /* SaveCursor */3 :
      case /* RestoreCursor */4 :
          return /* [] */0;
      
    }
  } else {
    switch (x.TAG | 0) {
      case /* Instantiate */0 :
          var indices = x._0;
          return {
                  hd: {
                    TAG: 8,
                    _0: (function (state) {
                        Belt_Array.forEach(state.goals, Goal$AgdaModeVscode.destroy);
                        return $$Promise.map(Goal$AgdaModeVscode.makeMany(state.editor, indices), (function (goals) {
                                      state.goals = goals;
                                      return /* [] */0;
                                    }));
                      }),
                    [Symbol.for("name")]: "WithStateP"
                  },
                  tl: /* [] */0
                };
      case /* Modify */1 :
          var f = x._1;
          var goal = x._0;
          return {
                  hd: {
                    TAG: 6,
                    _0: /* UpdateRange */0,
                    [Symbol.for("name")]: "Goal"
                  },
                  tl: {
                    hd: {
                      TAG: 8,
                      _0: (function (state) {
                          var $$document = state.editor.document;
                          var content = Goal$AgdaModeVscode.getContent(goal, $$document);
                          return $$Promise.map(Goal$AgdaModeVscode.setContent(goal, $$document, Curry._1(f, content)), (function (x) {
                                        if (x) {
                                          return /* [] */0;
                                        } else {
                                          return {
                                                  hd: Task$AgdaModeVscode.display({
                                                        TAG: 3,
                                                        _0: "Goal-related Error",
                                                        [Symbol.for("name")]: "Error"
                                                      }, {
                                                        TAG: 0,
                                                        _0: "Failed to modify the content of goal #" + String(goal.index),
                                                        [Symbol.for("name")]: "Plain"
                                                      }),
                                                  tl: /* [] */0
                                                };
                                        }
                                      }));
                        }),
                      [Symbol.for("name")]: "WithStateP"
                    },
                    tl: /* [] */0
                  }
                };
      case /* SetCursor */2 :
          var offset = x._0;
          return {
                  hd: {
                    TAG: 7,
                    _0: (function (state) {
                        var point = state.editor.document.positionAt(offset);
                        return Editor$AgdaModeVscode.Cursor.set(state.editor, point);
                      }),
                    [Symbol.for("name")]: "WithState"
                  },
                  tl: /* [] */0
                };
      case /* JumpToOffset */3 :
          var offset$1 = x._0;
          return {
                  hd: {
                    TAG: 7,
                    _0: (function (state) {
                        var $$document = state.editor.document;
                        var point = $$document.positionAt(offset$1);
                        var range = new Vscode.Range(point, point);
                        return Editor$AgdaModeVscode.reveal(state.editor, range);
                      }),
                    [Symbol.for("name")]: "WithState"
                  },
                  tl: /* [] */0
                };
      case /* RemoveBoundaryAndDestroy */4 :
          var goal$1 = x._0;
          return {
                  hd: {
                    TAG: 6,
                    _0: /* UpdateRange */0,
                    [Symbol.for("name")]: "Goal"
                  },
                  tl: {
                    hd: {
                      TAG: 8,
                      _0: (function (state) {
                          var $$document = state.editor.document;
                          var innerRange = Goal$AgdaModeVscode.getInnerRange(goal$1, $$document);
                          var outerRange = new Vscode.Range($$document.positionAt(goal$1.range[0]), $$document.positionAt(goal$1.range[1]));
                          var content = $$String.trim(Editor$AgdaModeVscode.$$Text.get($$document, innerRange));
                          return $$Promise.map(Editor$AgdaModeVscode.$$Text.replace($$document, outerRange, content), (function (x) {
                                        if (x) {
                                          Goal$AgdaModeVscode.destroy(goal$1);
                                          return /* [] */0;
                                        } else {
                                          return {
                                                  hd: Task$AgdaModeVscode.display({
                                                        TAG: 3,
                                                        _0: "Goal-related Error",
                                                        [Symbol.for("name")]: "Error"
                                                      }, {
                                                        TAG: 0,
                                                        _0: "Unable to remove the boundary of goal #" + String(goal$1.index),
                                                        [Symbol.for("name")]: "Plain"
                                                      }),
                                                  tl: /* [] */0
                                                };
                                        }
                                      }));
                        }),
                      [Symbol.for("name")]: "WithStateP"
                    },
                    tl: /* [] */0
                  }
                };
      case /* ReplaceWithLines */5 :
          var lines = x._1;
          var goal$2 = x._0;
          return {
                  hd: {
                    TAG: 8,
                    _0: (function (state) {
                        var $$document = state.editor.document;
                        var match = indentationWidth($$document, goal$2);
                        var indentation = " ".repeat(match[0]);
                        var indentedLines = indentation + lines.join("\n" + indentation);
                        var start = $$document.positionAt(goal$2.range[0]);
                        var startLineNo = start.line;
                        var startLineRange = $$document.lineAt(startLineNo).range;
                        var start$1 = startLineRange.start;
                        var end_ = $$document.positionAt(goal$2.range[1]);
                        var rangeToBeReplaced = new Vscode.Range(start$1, end_);
                        return $$Promise.map(Editor$AgdaModeVscode.$$Text.replace($$document, rangeToBeReplaced, indentedLines), (function (x) {
                                      if (x) {
                                        Goal$AgdaModeVscode.destroy(goal$2);
                                        return /* [] */0;
                                      } else {
                                        return {
                                                hd: Task$AgdaModeVscode.display({
                                                      TAG: 3,
                                                      _0: "Goal-related Error",
                                                      [Symbol.for("name")]: "Error"
                                                    }, {
                                                      TAG: 0,
                                                      _0: "Unable to replace the lines of goal #" + String(goal$2.index),
                                                      [Symbol.for("name")]: "Plain"
                                                    }),
                                                tl: /* [] */0
                                              };
                                      }
                                    }));
                      }),
                    [Symbol.for("name")]: "WithStateP"
                  },
                  tl: /* [] */0
                };
      case /* ReplaceWithLambda */6 :
          var lines$1 = x._1;
          var goal$3 = x._0;
          return {
                  hd: {
                    TAG: 8,
                    _0: (function (state) {
                        var $$document = state.editor.document;
                        var match = caseSplitAux($$document, goal$3);
                        var rewriteRange = match[2];
                        var indentWidth = match[1];
                        var rewriteText = match[0] ? lines$1.join("\n" + " ".repeat(indentWidth)) : lines$1.join("\n" + (" ".repeat(indentWidth - 2 | 0) + "; "));
                        var rewriteRange$1 = new Vscode.Range($$document.positionAt(rewriteRange[0]), $$document.positionAt(rewriteRange[1]));
                        return $$Promise.map(Editor$AgdaModeVscode.$$Text.replace($$document, rewriteRange$1, rewriteText), (function (x) {
                                      if (x) {
                                        Goal$AgdaModeVscode.destroy(goal$3);
                                        return /* [] */0;
                                      } else {
                                        return {
                                                hd: Task$AgdaModeVscode.display({
                                                      TAG: 3,
                                                      _0: "Goal-related Error",
                                                      [Symbol.for("name")]: "Error"
                                                    }, {
                                                      TAG: 0,
                                                      _0: "Unable to replace the lines of goal #" + String(goal$3.index),
                                                      [Symbol.for("name")]: "Plain"
                                                    }),
                                                tl: /* [] */0
                                              };
                                      }
                                    }));
                      }),
                    [Symbol.for("name")]: "WithStateP"
                  },
                  tl: /* [] */0
                };
      case /* LocalOrGlobal */7 :
          var $$global = x._1;
          var local = x._0;
          return {
                  hd: {
                    TAG: 6,
                    _0: /* UpdateRange */0,
                    [Symbol.for("name")]: "Goal"
                  },
                  tl: {
                    hd: {
                      TAG: 8,
                      _0: (function (state) {
                          var goal = pointingAt(undefined, state);
                          if (goal !== undefined) {
                            return $$Promise.resolved(Curry._1(local, goal));
                          } else {
                            return $$Promise.resolved($$global);
                          }
                        }),
                      [Symbol.for("name")]: "WithStateP"
                    },
                    tl: /* [] */0
                  }
                };
      case /* LocalOrGlobal2 */8 :
          var $$global$1 = x._2;
          var localEmpty = x._1;
          var local$1 = x._0;
          return {
                  hd: {
                    TAG: 6,
                    _0: /* UpdateRange */0,
                    [Symbol.for("name")]: "Goal"
                  },
                  tl: {
                    hd: {
                      TAG: 8,
                      _0: (function (state) {
                          var $$document = state.editor.document;
                          var goal = pointingAt(undefined, state);
                          if (goal === undefined) {
                            return $$Promise.resolved($$global$1);
                          }
                          var content = Goal$AgdaModeVscode.getContent(goal, $$document);
                          if (content === "") {
                            return $$Promise.resolved(Curry._1(localEmpty, goal));
                          } else {
                            return $$Promise.resolved(Curry._2(local$1, goal, content));
                          }
                        }),
                      [Symbol.for("name")]: "WithStateP"
                    },
                    tl: /* [] */0
                  }
                };
      
    }
  }
}

var VSRange;

exports.VSRange = VSRange;
exports.getOffsets = getOffsets;
exports.pointingAt = pointingAt;
exports.caseSplitAux = caseSplitAux;
exports.indentationWidth = indentationWidth;
exports.handle = handle;
/* vscode Not a pure module */
