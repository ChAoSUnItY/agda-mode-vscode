// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var $$String = require("bs-platform/lib/js/string.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Goal$AgdaModeVscode = require("../Goal.bs.js");
var Task$AgdaModeVscode = require("./Task.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var State$AgdaModeVscode = require("../State.bs.js");

function Impl(Editor) {
  var Task = Task$AgdaModeVscode.Impl(Editor);
  var State = State$AgdaModeVscode.Impl(Editor);
  var Goal = Goal$AgdaModeVscode.Impl(Editor);
  var getPositions = function (state) {
    return Belt_Array.map(Belt_Array.map(state.goals, (function (goal) {
                      return goal.range;
                    })), (function (range) {
                  return Curry._3(Editor.Point.translate, Curry._1(Editor.$$Range.start, range), 0, 3);
                }));
  };
  var pointingAt = function (cursor, state) {
    var cursor$prime = cursor !== undefined ? Caml_option.valFromOption(cursor) : Curry._1(Editor.getCursorPosition, state.editor);
    var pointedGoals = Belt_Array.keep(state.goals, (function (goal) {
            return Curry._2(Editor.$$Range.contains, goal.range, cursor$prime);
          }));
    return Belt_Array.get(pointedGoals, 0);
  };
  var handle = function (indices) {
    if (typeof indices === "number") {
      if (indices === /* Next */0) {
        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* WithState */Caml_chrome_debugger.variant("WithState", 5, [(function (state) {
                          var nextGoal = {
                            contents: undefined
                          };
                          var cursor = Curry._1(Editor.getCursorPosition, state.editor);
                          var positions = getPositions(state);
                          Belt_Array.forEach(positions, (function (position) {
                                  if (Curry._2(Editor.Point.compare, cursor, position) === /* LT */2 && nextGoal.contents === undefined) {
                                    nextGoal.contents = Caml_option.some(position);
                                    return ;
                                  }
                                  
                                }));
                          if (nextGoal.contents === undefined) {
                            nextGoal.contents = Belt_Array.get(positions, 0);
                          }
                          var point = nextGoal.contents;
                          if (point !== undefined) {
                            Curry._2(Editor.setCursorPosition, state.editor, Caml_option.valFromOption(point));
                          }
                          return $$Promise.resolved(/* [] */0);
                        })]),
                  /* [] */0
                ]);
      } else {
        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* WithState */Caml_chrome_debugger.variant("WithState", 5, [(function (state) {
                          var previousGoal = {
                            contents: undefined
                          };
                          var cursor = Curry._1(Editor.getCursorPosition, state.editor);
                          var positions = getPositions(state);
                          Belt_Array.forEach(positions, (function (position) {
                                  if (Curry._2(Editor.Point.compare, cursor, position) === /* GT */0) {
                                    previousGoal.contents = Caml_option.some(position);
                                    return ;
                                  }
                                  
                                }));
                          if (previousGoal.contents === undefined) {
                            previousGoal.contents = Belt_Array.get(positions, positions.length - 1 | 0);
                          }
                          var point = previousGoal.contents;
                          if (point !== undefined) {
                            Curry._2(Editor.setCursorPosition, state.editor, Caml_option.valFromOption(point));
                          }
                          return $$Promise.resolved(/* [] */0);
                        })]),
                  /* [] */0
                ]);
      }
    }
    switch (indices.tag | 0) {
      case /* Instantiate */0 :
          var indices$1 = indices[0];
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* WithState */Caml_chrome_debugger.variant("WithState", 5, [(function (state) {
                            Belt_Array.forEach(state.goals, Task.Goal.destroy);
                            return $$Promise.map(Curry._2(Task.Goal.makeMany, state.editor, indices$1), (function (goals) {
                                          state.goals = goals;
                                          return /* [] */0;
                                        }));
                          })]),
                    /* [] */0
                  ]);
      case /* Modify */1 :
          var f = indices[1];
          var goal = indices[0];
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* WithState */Caml_chrome_debugger.variant("WithState", 5, [(function (state) {
                            var content = Curry._2(Task.Goal.getContent, goal, state.editor);
                            return $$Promise.map(Curry._3(Task.Goal.setContent, goal, state.editor, Curry._1(f, content)), (function (param) {
                                          if (param) {
                                            return /* [] */0;
                                          } else {
                                            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                      Curry._2(Task.displayError, "Goal-related Error", "Failed to modify the content of goal #" + String(goal.index)),
                                                      /* [] */0
                                                    ]);
                                          }
                                        }));
                          })]),
                    /* [] */0
                  ]);
      case /* RemoveBoundaryAndDestroy */2 :
          var goal$1 = indices[0];
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* WithState */Caml_chrome_debugger.variant("WithState", 5, [(function (state) {
                            var innerRange = Curry._1(Task.Goal.getInnerRange, goal$1);
                            var content = $$String.trim(Curry._2(Editor.getTextInRange, state.editor, innerRange));
                            return $$Promise.map(Curry._3(Editor.setText, state.editor, goal$1.range, content), (function (param) {
                                          if (param) {
                                            Curry._1(Task.Goal.destroy, goal$1);
                                            return /* [] */0;
                                          } else {
                                            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                      Curry._2(Task.displayError, "Goal-related Error", "Unable to remove the boundary of goal #" + String(goal$1.index)),
                                                      /* [] */0
                                                    ]);
                                          }
                                        }));
                          })]),
                    /* [] */0
                  ]);
      case /* GetPointedOr */3 :
          var alternative = indices[1];
          var callback = indices[0];
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* WithState */Caml_chrome_debugger.variant("WithState", 5, [(function (state) {
                            var goal = pointingAt(undefined, state);
                            if (goal !== undefined) {
                              return Curry._1(callback, goal);
                            } else {
                              return $$Promise.resolved(alternative);
                            }
                          })]),
                    /* [] */0
                  ]);
      case /* GetIndexedOr */4 :
          var alternative$1 = indices[2];
          var callback$1 = indices[1];
          var index = indices[0];
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* WithState */Caml_chrome_debugger.variant("WithState", 5, [(function (state) {
                            var found = Belt_Array.keep(state.goals, (function (goal) {
                                    return goal.index === index;
                                  }));
                            var goal = Belt_Array.get(found, 0);
                            if (goal !== undefined) {
                              return Curry._1(callback$1, goal);
                            } else {
                              return $$Promise.resolved(alternative$1);
                            }
                          })]),
                    /* [] */0
                  ]);
      
    }
  };
  return {
          Task: Task,
          State: State,
          Goal: Goal,
          getPositions: getPositions,
          pointingAt: pointingAt,
          handle: handle
        };
}

exports.Impl = Impl;
/* Promise Not a pure module */
