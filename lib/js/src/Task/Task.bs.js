// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Goal$AgdaModeVscode = require("../Goal.bs.js");
var View$AgdaModeVscode = require("../View.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var State$AgdaModeVscode = require("../State.bs.js");
var Command$AgdaModeVscode = require("../Command.bs.js");
var Request$AgdaModeVscode = require("../Request.bs.js");
var Decoration$AgdaModeVscode = require("../Decoration.bs.js");

function Impl(Editor) {
  var State = State$AgdaModeVscode.Impl(Editor);
  var Goal = Goal$AgdaModeVscode.Impl(Editor);
  var Decoration = Decoration$AgdaModeVscode.Impl(Editor);
  var $$Request = Request$AgdaModeVscode.Impl(Editor);
  var toString = function (cmd) {
    if (typeof cmd === "number") {
      return "Destroy";
    }
    switch (cmd.tag | 0) {
      case /* DispatchCommand */0 :
          return "Command[" + (Command$AgdaModeVscode.toString(cmd[0]) + "]");
      case /* AgdaRequest */1 :
          return "AgdaRequest";
      case /* ViewEvent */2 :
          return "ViewEvent";
      case /* ViewRequest */3 :
          return "ViewRequest";
      case /* Decoration */4 :
          var tmp = cmd[0];
          if (typeof tmp !== "number") {
            if (tmp.tag) {
              return "Decoration[AddIndirectly]";
            } else {
              return "Decoration[AddDirectly]";
            }
          }
          switch (tmp) {
            case /* Clear */0 :
                return "Decoration[Clear]";
            case /* Apply */1 :
                return "Decoration[Apply]";
            case /* Refresh */2 :
                return "Decoration[Refresh]";
            
          }
      case /* Error */5 :
          return "Error";
      case /* Goal */6 :
          var tmp$1 = cmd[0];
          if (typeof tmp$1 === "number") {
            switch (tmp$1) {
              case /* UpdateRange */0 :
                  return "Goal[UpdateRange]";
              case /* Next */1 :
                  return "Goal[Next]";
              case /* Previous */2 :
                  return "Goal[Previous]";
              case /* SaveCursor */3 :
                  return "Goal[SaveCursor]";
              case /* RestoreCursor */4 :
                  return "Goal[RestoreCursor]";
              
            }
          } else {
            switch (tmp$1.tag | 0) {
              case /* Instantiate */0 :
                  return "Goal[Instantiate]";
              case /* Modify */1 :
                  return "Goal[Modify]";
              case /* SetCursor */2 :
                  return "Goal[SetCursor]";
              case /* JumpToOffset */3 :
                  return "Goal[JumpToOffset]";
              case /* RemoveBoundaryAndDestroy */4 :
                  return "Goal[RemoveBoundaryAndDestroy]";
              case /* ReplaceWithLines */5 :
                  return "Goal[ReplaceWithLines]";
              case /* ReplaceWithLambda */6 :
                  return "Goal[ReplaceWithLambda]";
              case /* LocalOrGlobal */7 :
                  return "Goal[LocalOrGlobal]";
              case /* LocalOrGlobal2 */8 :
                  return "Goal[LocalOrGlobal2]";
              
            }
          }
      case /* WithState */7 :
          return "WithState";
      case /* WithStateP */8 :
          return "WithStateP";
      case /* Debug */9 :
          return "Debug[" + (cmd[0] + "]");
      
    }
  };
  var display = function (header, body) {
    return /* ViewEvent */Caml_chrome_debugger.variant("ViewEvent", 2, [/* Display */Caml_chrome_debugger.variant("Display", 0, [
                  header,
                  body
                ])]);
  };
  var displayEmacs = function (kind, header, body) {
    return /* ViewEvent */Caml_chrome_debugger.variant("ViewEvent", 2, [/* Display */Caml_chrome_debugger.variant("Display", 0, [
                  header,
                  /* Emacs */Caml_chrome_debugger.variant("Emacs", 1, [
                      kind,
                      View$AgdaModeVscode.Header.toString(header),
                      body
                    ])
                ])]);
  };
  var prompt = function (header, prompt$1, callbackOnPromptSuccess) {
    return /* :: */Caml_chrome_debugger.simpleVariant("::", [
              /* WithState */Caml_chrome_debugger.variant("WithState", 7, [(function (state) {
                      Curry._2(Editor.setContext, "agdaModePrompting", true);
                      return Curry._1(Editor.View.focus, state.view);
                    })]),
              /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* ViewRequest */Caml_chrome_debugger.variant("ViewRequest", 3, [
                      /* Prompt */Caml_chrome_debugger.simpleVariant("Prompt", [
                          header,
                          prompt$1
                        ]),
                      (function (response) {
                          var tasks = response ? Curry._1(callbackOnPromptSuccess, response[0]) : /* [] */0;
                          return Belt_List.concat(tasks, /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                        /* WithState */Caml_chrome_debugger.variant("WithState", 7, [(function (state) {
                                                Curry._2(Editor.setContext, "agdaModePrompting", false);
                                                return Curry._1(Editor.focus, state.editor);
                                              })]),
                                        /* [] */0
                                      ]));
                        })
                    ]),
                  /* [] */0
                ])
            ]);
  };
  return {
          State: State,
          Goal: Goal,
          Decoration: Decoration,
          $$Request: $$Request,
          toString: toString,
          display: display,
          displayEmacs: displayEmacs,
          prompt: prompt
        };
}

exports.Impl = Impl;
/* Goal-AgdaModeVscode Not a pure module */
