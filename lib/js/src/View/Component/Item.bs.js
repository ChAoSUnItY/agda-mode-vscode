// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var React = require("react");
var Link$AgdaModeVscode = require("./Link.bs.js");
var Util$AgdaModeVscode = require("../../Util/Util.bs.js");
var Common$AgdaModeVscode = require("../Common.bs.js");
var RichText$AgdaModeVscode = require("./RichText.bs.js");
var Json_Decode$JsonCombinators = require("@glennsl/rescript-json-combinators/lib/js/src/Json_Decode.bs.js");
var Json_Encode$JsonCombinators = require("@glennsl/rescript-json-combinators/lib/js/src/Json_Encode.bs.js");

function plainText(s) {
  return {
          TAG: 1,
          _0: RichText$AgdaModeVscode.string(s),
          _1: undefined,
          _2: undefined,
          [Symbol.for("name")]: "Unlabeled"
        };
}

function error(s, raw) {
  return {
          TAG: 0,
          _0: "Error",
          _1: "error",
          _2: s,
          _3: raw,
          _4: undefined,
          [Symbol.for("name")]: "Labeled"
        };
}

function warning(s, raw) {
  return {
          TAG: 0,
          _0: "Warning",
          _1: "warning",
          _2: s,
          _3: raw,
          _4: undefined,
          [Symbol.for("name")]: "Labeled"
        };
}

function Item(Props) {
  var item = Props.item;
  var match = React.useState(function () {
        return false;
      });
  var setRevealRaw = match[1];
  var revealRaw = match[0];
  var onClickRevealRaw = function (param) {
    Curry._1(setRevealRaw, (function (state) {
            return !state;
          }));
  };
  var content = function (value, raw) {
    if (raw !== undefined) {
      if (revealRaw) {
        return React.createElement(RichText$AgdaModeVscode.make, {
                    value: RichText$AgdaModeVscode.string(raw)
                  });
      } else {
        return React.createElement(RichText$AgdaModeVscode.make, {
                    value: value
                  });
      }
    } else {
      return React.createElement(RichText$AgdaModeVscode.make, {
                  value: value
                });
    }
  };
  var revealRawButton = function (raw) {
    if (raw !== undefined) {
      if (revealRaw) {
        return React.createElement("div", {
                    className: "item-raw-button active",
                    onClick: onClickRevealRaw
                  }, React.createElement("div", {
                        className: "codicon codicon-code"
                      }));
      } else {
        return React.createElement("div", {
                    className: "item-raw-button",
                    onClick: onClickRevealRaw
                  }, React.createElement("div", {
                        className: "codicon codicon-code"
                      }));
      }
    } else {
      return React.createElement(React.Fragment, undefined);
    }
  };
  var locationButton = function ($$location) {
    if ($$location !== undefined) {
      return React.createElement(Link$AgdaModeVscode.make, {
                  target: {
                    TAG: 0,
                    _0: $$location,
                    [Symbol.for("name")]: "SrcLoc"
                  },
                  jump: true,
                  hover: false,
                  className: ["item-location-button"],
                  children: React.createElement("div", {
                        className: "codicon codicon-link"
                      })
                });
    } else {
      return React.createElement(React.Fragment, undefined);
    }
  };
  switch (item.TAG | 0) {
    case /* Labeled */0 :
        var raw = item._3;
        return React.createElement("li", {
                    className: "labeled-item " + item._1
                  }, React.createElement("div", {
                        className: "item-label"
                      }, item._0), React.createElement("div", {
                        className: "item-content"
                      }, content(item._2, raw)), revealRawButton(raw));
    case /* Unlabeled */1 :
        var raw$1 = item._1;
        return React.createElement("li", {
                    className: "unlabeled-item"
                  }, React.createElement("div", {
                        className: "item-content"
                      }, content(item._0, raw$1)), revealRawButton(raw$1), locationButton(item._2));
    case /* Header */2 :
        return React.createElement("li", {
                    className: "header-item"
                  }, React.createElement("h3", undefined, item._0));
    
  }
}

var decode = Util$AgdaModeVscode.Decode.sum_(function (x) {
      switch (x) {
        case "Header" :
            return {
                    TAG: 0,
                    _0: Json_Decode$JsonCombinators.map(Json_Decode$JsonCombinators.string, (function (s) {
                            return {
                                    TAG: 2,
                                    _0: s,
                                    [Symbol.for("name")]: "Header"
                                  };
                          })),
                    [Symbol.for("name")]: "Payload"
                  };
        case "Labeled" :
            return {
                    TAG: 0,
                    _0: Json_Decode$JsonCombinators.map(Util$AgdaModeVscode.Decode.tuple5_(RichText$AgdaModeVscode.decode, Json_Decode$JsonCombinators.option(Json_Decode$JsonCombinators.string), Json_Decode$JsonCombinators.option(Common$AgdaModeVscode.AgdaRange.decode), Json_Decode$JsonCombinators.string, Json_Decode$JsonCombinators.string), (function (param) {
                            return {
                                    TAG: 0,
                                    _0: param[3],
                                    _1: param[4],
                                    _2: param[0],
                                    _3: param[1],
                                    _4: param[2],
                                    [Symbol.for("name")]: "Labeled"
                                  };
                          })),
                    [Symbol.for("name")]: "Payload"
                  };
        case "Unlabeled" :
            return {
                    TAG: 0,
                    _0: Json_Decode$JsonCombinators.map(Json_Decode$JsonCombinators.tuple3(RichText$AgdaModeVscode.decode, Json_Decode$JsonCombinators.option(Json_Decode$JsonCombinators.string), Json_Decode$JsonCombinators.option(Common$AgdaModeVscode.AgdaRange.decode)), (function (param) {
                            return {
                                    TAG: 1,
                                    _0: param[0],
                                    _1: param[1],
                                    _2: param[2],
                                    [Symbol.for("name")]: "Unlabeled"
                                  };
                          })),
                    [Symbol.for("name")]: "Payload"
                  };
        default:
          throw {
                RE_EXN_ID: Json_Decode$JsonCombinators.DecodeError,
                _1: "[Item] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

function encode(param) {
  return Util$AgdaModeVscode.Encode.sum((function (x) {
                switch (x.TAG | 0) {
                  case /* Labeled */0 :
                      return {
                              TAG: 0,
                              _0: "Labeled",
                              _1: Util$AgdaModeVscode.Encode.tuple5(RichText$AgdaModeVscode.encode, (function (param) {
                                      return Json_Encode$JsonCombinators.option((function (prim) {
                                                    return prim;
                                                  }), param);
                                    }), (function (param) {
                                      return Json_Encode$JsonCombinators.option(Common$AgdaModeVscode.AgdaRange.encode, param);
                                    }), (function (prim) {
                                      return prim;
                                    }), (function (prim) {
                                      return prim;
                                    }), [
                                    x._2,
                                    x._3,
                                    x._4,
                                    x._0,
                                    x._1
                                  ]),
                              [Symbol.for("name")]: "Payload"
                            };
                  case /* Unlabeled */1 :
                      return {
                              TAG: 0,
                              _0: "Unlabeled",
                              _1: Json_Encode$JsonCombinators.tuple3(RichText$AgdaModeVscode.encode, (function (param) {
                                      return Json_Encode$JsonCombinators.option((function (prim) {
                                                    return prim;
                                                  }), param);
                                    }), (function (param) {
                                      return Json_Encode$JsonCombinators.option(Common$AgdaModeVscode.AgdaRange.encode, param);
                                    }), [
                                    x._0,
                                    x._1,
                                    x._2
                                  ]),
                              [Symbol.for("name")]: "Payload"
                            };
                  case /* Header */2 :
                      return {
                              TAG: 0,
                              _0: "Header",
                              _1: x._0,
                              [Symbol.for("name")]: "Payload"
                            };
                  
                }
              }), param);
}

var make = Item;

exports.plainText = plainText;
exports.error = error;
exports.warning = warning;
exports.make = make;
exports.decode = decode;
exports.encode = encode;
/* decode Not a pure module */
