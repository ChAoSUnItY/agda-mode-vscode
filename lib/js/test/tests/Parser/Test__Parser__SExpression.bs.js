// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Mocha$BsMocha = require("bs-mocha/lib/js/src/Mocha.bs.js");
var Assert$BsMocha = require("bs-mocha/lib/js/src/Assert.bs.js");
var Promise$BsMocha = require("bs-mocha/lib/js/src/Promise.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Parser$AgdaModeVscode = require("../../../src/Parser.bs.js");
var SigImpl$AgdaModeVscode = require("../../../src/SigImpl.bs.js");
var Test__Util$AgdaModeVscode = require("../Test__Util.bs.js");

function Impl(Editor) {
  var Test__Util = Test__Util$AgdaModeVscode.Impl(Editor);
  var parseSExpression = function (breakpoints, input) {
    var output = {
      contents: []
    };
    var parser = Parser$AgdaModeVscode.SExpression.makeIncr((function (param) {
            if (!param) {
              return ;
            }
            var a = param[0];
            if (a.tag) {
              var match = a[0];
              return Assert$BsMocha.fail("Failed when parsing S-expression: " + Parser$AgdaModeVscode.$$Error.toString(/* SExpression */Caml_chrome_debugger.variant("SExpression", 0, [
                                match[0],
                                match[1]
                              ])));
            }
            output.contents.push(a[0]);
            
          }));
    Belt_Array.forEach(Belt_Array.concatMany(Belt_Array.map(Curry._2(Test__Util.Strings.breakInput, input.trim(), breakpoints), Parser$AgdaModeVscode.split)), (function (param) {
            return Parser$AgdaModeVscode.Incr.feed(parser, param);
          }));
    return output.contents;
  };
  Mocha$BsMocha.describe("when parsing S-expressions as a whole")(undefined, undefined, undefined, (function (param) {
          return Belt_Array.forEach(Curry._1(Test__Util.Golden.getGoldenFilepathsSync, "../../../../test/tests/Parser/SExpression"), (function (filepath) {
                        return Promise$BsMocha.it("should golden test " + filepath)(undefined, undefined, undefined, (function (param) {
                                      return Curry._1(Test__Util.Golden.readFile, filepath).then((function (raw) {
                                                    var partial_arg = [];
                                                    return Curry._1(Test__Util.Golden.compare, Curry._2(Test__Util.Golden.map, Curry._2(Test__Util.Golden.map, raw, (function (param) {
                                                                          return parseSExpression(partial_arg, param);
                                                                        })), Curry._1(Test__Util.Strings.serializeWith, Parser$AgdaModeVscode.SExpression.toString)));
                                                  }));
                                    }));
                      }));
        }));
  Mocha$BsMocha.describe("when parsing S-expressions incrementally")(undefined, undefined, undefined, (function (param) {
          return Belt_Array.forEach(Curry._1(Test__Util.Golden.getGoldenFilepathsSync, "../../../../test/tests/Parser/SExpression"), (function (filepath) {
                        return Promise$BsMocha.it("should golden test " + filepath)(undefined, undefined, undefined, (function (param) {
                                      return Curry._1(Test__Util.Golden.readFile, filepath).then((function (raw) {
                                                    var partial_arg = [
                                                      3,
                                                      23,
                                                      171,
                                                      217,
                                                      1234,
                                                      2342,
                                                      3453
                                                    ];
                                                    return Curry._1(Test__Util.Golden.compare, Curry._2(Test__Util.Golden.map, Curry._2(Test__Util.Golden.map, raw, (function (param) {
                                                                          return parseSExpression(partial_arg, param);
                                                                        })), Curry._1(Test__Util.Strings.serializeWith, Parser$AgdaModeVscode.SExpression.toString)));
                                                  }));
                                    }));
                      }));
        }));
  return {
          Test__Util: Test__Util,
          parseSExpression: parseSExpression
        };
}

var Editor_Point = {
  line: SigImpl$AgdaModeVscode.Point.line,
  column: SigImpl$AgdaModeVscode.Point.column,
  make: SigImpl$AgdaModeVscode.Point.make,
  translate: SigImpl$AgdaModeVscode.Point.translate,
  compare: SigImpl$AgdaModeVscode.Point.compare
};

var Editor_Config = {
  getAgdaPath: SigImpl$AgdaModeVscode.Config.getAgdaPath,
  setAgdaPath: SigImpl$AgdaModeVscode.Config.setAgdaPath,
  getLibraryPath: SigImpl$AgdaModeVscode.Config.getLibraryPath,
  getHighlightingMethod: SigImpl$AgdaModeVscode.Config.getHighlightingMethod,
  getBackend: SigImpl$AgdaModeVscode.Config.getBackend
};

var Editor_View = {
  make: SigImpl$AgdaModeVscode.View.make,
  destroy: SigImpl$AgdaModeVscode.View.destroy,
  show: SigImpl$AgdaModeVscode.View.show,
  hide: SigImpl$AgdaModeVscode.View.hide,
  focus: SigImpl$AgdaModeVscode.View.focus,
  send: SigImpl$AgdaModeVscode.View.send,
  onEvent: SigImpl$AgdaModeVscode.View.onEvent,
  fromPosition: SigImpl$AgdaModeVscode.View.fromPosition,
  fromInterval: SigImpl$AgdaModeVscode.View.fromInterval
};

var Editor_Decoration = {
  decorate: SigImpl$AgdaModeVscode.Decoration.decorate,
  highlightBackground: SigImpl$AgdaModeVscode.Decoration.highlightBackground,
  highlightBackgroundWithColor: SigImpl$AgdaModeVscode.Decoration.highlightBackgroundWithColor,
  decorateText: SigImpl$AgdaModeVscode.Decoration.decorateText,
  decorateTextWithColor: SigImpl$AgdaModeVscode.Decoration.decorateTextWithColor,
  overlayText: SigImpl$AgdaModeVscode.Decoration.overlayText,
  overlayTextWithColor: SigImpl$AgdaModeVscode.Decoration.overlayTextWithColor,
  underlineText: SigImpl$AgdaModeVscode.Decoration.underlineText,
  destroy: SigImpl$AgdaModeVscode.Decoration.destroy
};

var Editor_OffsetIntervals = {
  compile: SigImpl$AgdaModeVscode.OffsetIntervals.compile,
  fromUTF8Offset: SigImpl$AgdaModeVscode.OffsetIntervals.fromUTF8Offset
};

var Editor = {
  Disposable: SigImpl$AgdaModeVscode.Disposable,
  Point: Editor_Point,
  pointAtOffset: SigImpl$AgdaModeVscode.pointAtOffset,
  offsetAtPoint: SigImpl$AgdaModeVscode.offsetAtPoint,
  $$Range: SigImpl$AgdaModeVscode.$$Range,
  editorType: SigImpl$AgdaModeVscode.editorType,
  getExtensionPath: SigImpl$AgdaModeVscode.getExtensionPath,
  getFileName: SigImpl$AgdaModeVscode.getFileName,
  openEditor: SigImpl$AgdaModeVscode.openEditor,
  openEditorWithContent: SigImpl$AgdaModeVscode.openEditorWithContent,
  save: SigImpl$AgdaModeVscode.save,
  onDidChangeFileName: SigImpl$AgdaModeVscode.onDidChangeFileName,
  onDidChangeActivation: SigImpl$AgdaModeVscode.onDidChangeActivation,
  onDidCloseEditor: SigImpl$AgdaModeVscode.onDidCloseEditor,
  registerCommand: SigImpl$AgdaModeVscode.registerCommand,
  setContext: SigImpl$AgdaModeVscode.setContext,
  getDisposables: SigImpl$AgdaModeVscode.getDisposables,
  Config: Editor_Config,
  View: Editor_View,
  Decoration: Editor_Decoration,
  focus: SigImpl$AgdaModeVscode.focus,
  reveal: SigImpl$AgdaModeVscode.reveal,
  getSelection: SigImpl$AgdaModeVscode.getSelection,
  getSelections: SigImpl$AgdaModeVscode.getSelections,
  setSelection: SigImpl$AgdaModeVscode.setSelection,
  setSelections: SigImpl$AgdaModeVscode.setSelections,
  getCursorPosition: SigImpl$AgdaModeVscode.getCursorPosition,
  getCursorPositions: SigImpl$AgdaModeVscode.getCursorPositions,
  setCursorPosition: SigImpl$AgdaModeVscode.setCursorPosition,
  setCursorPositions: SigImpl$AgdaModeVscode.setCursorPositions,
  onChangeCursorPosition: SigImpl$AgdaModeVscode.onChangeCursorPosition,
  rangeForLine: SigImpl$AgdaModeVscode.rangeForLine,
  OffsetIntervals: Editor_OffsetIntervals,
  fromUTF8Offset: SigImpl$AgdaModeVscode.fromUTF8Offset,
  toUTF8Offset: SigImpl$AgdaModeVscode.toUTF8Offset,
  getText: SigImpl$AgdaModeVscode.getText,
  getTextInRange: SigImpl$AgdaModeVscode.getTextInRange,
  selectText: SigImpl$AgdaModeVscode.selectText,
  replaceText: SigImpl$AgdaModeVscode.replaceText,
  insertText: SigImpl$AgdaModeVscode.insertText,
  insertTexts: SigImpl$AgdaModeVscode.insertTexts,
  deleteText: SigImpl$AgdaModeVscode.deleteText,
  onChange: SigImpl$AgdaModeVscode.onChange,
  copyToClipboard: SigImpl$AgdaModeVscode.copyToClipboard,
  colorThemeIsDark: SigImpl$AgdaModeVscode.colorThemeIsDark,
  lineEndingIsCRLF: SigImpl$AgdaModeVscode.lineEndingIsCRLF
};

var Test__Util = Test__Util$AgdaModeVscode.Impl(Editor);

function parseSExpression(breakpoints, input) {
  var output = {
    contents: []
  };
  var parser = Parser$AgdaModeVscode.SExpression.makeIncr((function (param) {
          if (!param) {
            return ;
          }
          var a = param[0];
          if (a.tag) {
            var match = a[0];
            return Assert$BsMocha.fail("Failed when parsing S-expression: " + Parser$AgdaModeVscode.$$Error.toString(/* SExpression */Caml_chrome_debugger.variant("SExpression", 0, [
                              match[0],
                              match[1]
                            ])));
          }
          output.contents.push(a[0]);
          
        }));
  Belt_Array.forEach(Belt_Array.concatMany(Belt_Array.map(Curry._2(Test__Util.Strings.breakInput, input.trim(), breakpoints), Parser$AgdaModeVscode.split)), (function (param) {
          return Parser$AgdaModeVscode.Incr.feed(parser, param);
        }));
  return output.contents;
}

Mocha$BsMocha.describe("when parsing S-expressions as a whole")(undefined, undefined, undefined, (function (param) {
        return Belt_Array.forEach(Curry._1(Test__Util.Golden.getGoldenFilepathsSync, "../../../../test/tests/Parser/SExpression"), (function (filepath) {
                      return Promise$BsMocha.it("should golden test " + filepath)(undefined, undefined, undefined, (function (param) {
                                    return Curry._1(Test__Util.Golden.readFile, filepath).then((function (raw) {
                                                  var partial_arg = [];
                                                  return Curry._1(Test__Util.Golden.compare, Curry._2(Test__Util.Golden.map, Curry._2(Test__Util.Golden.map, raw, (function (param) {
                                                                        return parseSExpression(partial_arg, param);
                                                                      })), Curry._1(Test__Util.Strings.serializeWith, Parser$AgdaModeVscode.SExpression.toString)));
                                                }));
                                  }));
                    }));
      }));

Mocha$BsMocha.describe("when parsing S-expressions incrementally")(undefined, undefined, undefined, (function (param) {
        return Belt_Array.forEach(Curry._1(Test__Util.Golden.getGoldenFilepathsSync, "../../../../test/tests/Parser/SExpression"), (function (filepath) {
                      return Promise$BsMocha.it("should golden test " + filepath)(undefined, undefined, undefined, (function (param) {
                                    return Curry._1(Test__Util.Golden.readFile, filepath).then((function (raw) {
                                                  var partial_arg = [
                                                    3,
                                                    23,
                                                    171,
                                                    217,
                                                    1234,
                                                    2342,
                                                    3453
                                                  ];
                                                  return Curry._1(Test__Util.Golden.compare, Curry._2(Test__Util.Golden.map, Curry._2(Test__Util.Golden.map, raw, (function (param) {
                                                                        return parseSExpression(partial_arg, param);
                                                                      })), Curry._1(Test__Util.Strings.serializeWith, Parser$AgdaModeVscode.SExpression.toString)));
                                                }));
                                  }));
                    }));
      }));

exports.Impl = Impl;
exports.Test__Util = Test__Util;
exports.parseSExpression = parseSExpression;
/* Test__Util Not a pure module */
