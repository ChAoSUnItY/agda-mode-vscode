// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Vscode = require("vscode");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var ViewController$AgdaModeVscode = require("../View/ViewController.bs.js");

function make(param) {
  return {
          queue: [],
          busy: false
        };
}

function kickStart(self) {
  if (self.busy) {
    return ;
  }
  var thunk = self.queue.shift();
  if (thunk !== undefined) {
    self.busy = true;
    return $$Promise.get(Curry._1(thunk, undefined), (function (param) {
                  self.busy = false;
                  return kickStart(self);
                }));
  }
  
}

function push(self, sendRequestAndHandleResponses, request) {
  var match = $$Promise.pending(undefined);
  var resolve = match[1];
  var thunk = function (param) {
    return $$Promise.tap(Curry._1(sendRequestAndHandleResponses, request), resolve);
  };
  self.queue.push(thunk);
  kickStart(self);
  return match[0];
}

var RequestQueue = {
  make: make,
  push: push
};

function make$1(param) {
  return {
          display: undefined,
          prompt: undefined
        };
}

function cacheEvent(self, $$event) {
  if (typeof $$event === "number" || $$event.TAG !== /* Display */0) {
    return ;
  } else {
    self.display = [
      $$event._0,
      $$event._1
    ];
    return ;
  }
}

function cacheRequest(self, $$event, callback) {
  self.prompt = [
    $$event._0,
    $$event._1,
    callback
  ];
  
}

function clearPrompt(self) {
  self.prompt = undefined;
  
}

function restore(self, view) {
  var match = self.prompt;
  if (match !== undefined) {
    ViewController$AgdaModeVscode.sendRequest(view, {
          _0: match[0],
          _1: match[1],
          [Symbol.for("name")]: "Prompt"
        }, match[2]);
    return ;
  } else {
    return Belt_Option.forEach(self.display, (function (param) {
                  ViewController$AgdaModeVscode.sendEvent(view, {
                        TAG: 0,
                        _0: param[0],
                        _1: param[1],
                        [Symbol.for("name")]: "Display"
                      });
                  
                }));
  }
}

var ViewCache = {
  make: make$1,
  cacheEvent: cacheEvent,
  cacheRequest: cacheRequest,
  clearPrompt: clearPrompt,
  restore: restore
};

function setPrompt(value) {
  Vscode.commands.executeCommand("setContext", "agdaModePrompting", value);
  
}

function setIM(value) {
  Vscode.commands.executeCommand("setContext", "agdaModeTyping", value);
  
}

var Context = {
  setPrompt: setPrompt,
  setIM: setIM
};

exports.RequestQueue = RequestQueue;
exports.ViewCache = ViewCache;
exports.Context = Context;
/* vscode Not a pure module */
