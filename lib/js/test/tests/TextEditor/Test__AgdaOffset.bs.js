// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Vscode = require("vscode");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Mocha$BsMocha = require("bs-mocha/lib/js/src/Mocha.bs.js");
var Assert$BsMocha = require("bs-mocha/lib/js/src/Assert.bs.js");
var Promise$BsMocha = require("bs-mocha/lib/js/src/Promise.bs.js");
var Editor$AgdaModeVscode = require("../../../src/Editor.bs.js");

function openTextEditor(content) {
  return $$Promise.flatMap(Vscode.workspace.openTextDocument({
                  content: content,
                  language: "agda"
                }), (function (textDocument) {
                return Vscode.window.showTextDocument(textDocument, undefined);
              }));
}

function getTextToOffsetAt(textEditor, offset) {
  var match = Editor$AgdaModeVscode.codeUnitEndingOffset(textEditor, offset);
  var range = new Vscode.Range(new Vscode.Position(0, 0), textEditor.document.positionAt(match[0]));
  return textEditor.document.getText(Caml_option.some(range));
}

Mocha$BsMocha.describe("Conversion between Agda Offsets and Editor Offsets")(undefined, undefined, undefined, (function (param) {
        Mocha$BsMocha.describe("Editor.characterWidth")(undefined, undefined, undefined, (function (param) {
                Mocha$BsMocha.it("should calculate the width of some grapheme cluster")(undefined, undefined, undefined, (function (param) {
                        var actual = Editor$AgdaModeVscode.characterWidth("𝐀");
                        return Assert$BsMocha.deep_equal(undefined, actual, 1);
                      }));
                return Mocha$BsMocha.it("should calculate the width of some ordinary ASCII character")(undefined, undefined, undefined, (function (param) {
                              var actual = Editor$AgdaModeVscode.characterWidth("a");
                              return Assert$BsMocha.deep_equal(undefined, actual, 1);
                            }));
              }));
        Mocha$BsMocha.describe("Editor.codeUnitEndingOffset")(undefined, undefined, undefined, (function (param) {
                return Promise$BsMocha.it("shouldn't cut into a grapheme")(undefined, undefined, undefined, (function (param) {
                              return $$Promise.Js.toBsPromise($$Promise.map(openTextEditor("𝐀a𝐁bb𝐂c𝐃dd𝐄e𝐅𝐆𝐇\na"), (function (textEditor) {
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 0), "");
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 1), "𝐀");
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 2), "𝐀");
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 3), "𝐀a");
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 4), "𝐀a𝐁");
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 5), "𝐀a𝐁");
                                                return Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 6), "𝐀a𝐁b");
                                              })));
                            }));
              }));
        Mocha$BsMocha.describe("Editor.fromAgdaOffset")(undefined, undefined, undefined, (function (param) {
                Promise$BsMocha.it("should do it right")(undefined, undefined, undefined, (function (param) {
                        return $$Promise.Js.toBsPromise($$Promise.map(openTextEditor("𝐀a𝐁bb𝐂c\na"), (function (textEditor) {
                                          Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.fromAgdaOffset(textEditor, 0), 0);
                                          Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.fromAgdaOffset(textEditor, 1), 2);
                                          Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.fromAgdaOffset(textEditor, 2), 3);
                                          Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.fromAgdaOffset(textEditor, 3), 5);
                                          Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.fromAgdaOffset(textEditor, 4), 6);
                                          Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.fromAgdaOffset(textEditor, 5), 7);
                                          Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.fromAgdaOffset(textEditor, 6), 9);
                                          Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.fromAgdaOffset(textEditor, 7), 10);
                                          Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.fromAgdaOffset(textEditor, 8), 11);
                                          return Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.fromAgdaOffset(textEditor, 9), 14);
                                        })));
                      }));
                return Promise$BsMocha.it("should extract the right portion of text")(undefined, undefined, undefined, (function (param) {
                              var getTextToOffsetAt = function (textEditor, offset) {
                                var offset$1 = Editor$AgdaModeVscode.fromAgdaOffset(textEditor, offset);
                                var range = new Vscode.Range(new Vscode.Position(0, 0), Editor$AgdaModeVscode.pointAtOffset(textEditor, offset$1));
                                return Editor$AgdaModeVscode.getTextInRange(textEditor, range);
                              };
                              return $$Promise.Js.toBsPromise($$Promise.map(openTextEditor("𝐀a𝐁bb𝐂c\na"), (function (textEditor) {
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 0), "");
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 1), "𝐀");
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 2), "𝐀a");
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 3), "𝐀a𝐁");
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 4), "𝐀a𝐁b");
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 5), "𝐀a𝐁bb");
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 6), "𝐀a𝐁bb𝐂");
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 7), "𝐀a𝐁bb𝐂c");
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 8), "𝐀a𝐁bb𝐂c\n");
                                                return Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 9), "𝐀a𝐁bb𝐂c\na");
                                              })));
                            }));
              }));
        return Mocha$BsMocha.describe("Editor.toAgdaOffset")(undefined, undefined, undefined, (function (param) {
                      Promise$BsMocha.it("should do it right")(undefined, undefined, undefined, (function (param) {
                              return $$Promise.Js.toBsPromise($$Promise.map(openTextEditor("𝐀a𝐁bb𝐂c\na"), (function (textEditor) {
                                                Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.toAgdaOffset(textEditor, 0), 0);
                                                Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.toAgdaOffset(textEditor, 1), 1);
                                                Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.toAgdaOffset(textEditor, 2), 1);
                                                Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.toAgdaOffset(textEditor, 3), 2);
                                                Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.toAgdaOffset(textEditor, 5), 3);
                                                Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.toAgdaOffset(textEditor, 6), 4);
                                                Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.toAgdaOffset(textEditor, 7), 5);
                                                Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.toAgdaOffset(textEditor, 9), 6);
                                                Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.toAgdaOffset(textEditor, 10), 7);
                                                Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.toAgdaOffset(textEditor, 11), 8);
                                                return Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.toAgdaOffset(textEditor, 12), 9);
                                              })));
                            }));
                      Promise$BsMocha.it("should be a left inverse of Editor.fromAgdaOffset")(undefined, undefined, undefined, (function (param) {
                              return $$Promise.Js.toBsPromise($$Promise.map(openTextEditor("𝐀a𝐁bb𝐂c\na"), (function (textEditor) {
                                                Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.toAgdaOffset(textEditor, Editor$AgdaModeVscode.fromAgdaOffset(textEditor, 0)), 0);
                                                Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.toAgdaOffset(textEditor, Editor$AgdaModeVscode.fromAgdaOffset(textEditor, 1)), 1);
                                                Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.toAgdaOffset(textEditor, Editor$AgdaModeVscode.fromAgdaOffset(textEditor, 2)), 2);
                                                Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.toAgdaOffset(textEditor, Editor$AgdaModeVscode.fromAgdaOffset(textEditor, 3)), 3);
                                                Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.toAgdaOffset(textEditor, Editor$AgdaModeVscode.fromAgdaOffset(textEditor, 4)), 4);
                                                Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.toAgdaOffset(textEditor, Editor$AgdaModeVscode.fromAgdaOffset(textEditor, 5)), 5);
                                                Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.toAgdaOffset(textEditor, Editor$AgdaModeVscode.fromAgdaOffset(textEditor, 6)), 6);
                                                Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.toAgdaOffset(textEditor, Editor$AgdaModeVscode.fromAgdaOffset(textEditor, 7)), 7);
                                                Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.toAgdaOffset(textEditor, Editor$AgdaModeVscode.fromAgdaOffset(textEditor, 8)), 8);
                                                return Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.toAgdaOffset(textEditor, Editor$AgdaModeVscode.fromAgdaOffset(textEditor, 9)), 9);
                                              })));
                            }));
                      return Promise$BsMocha.it("should be a right inverse of Editor.fromAgdaOffset ()")(undefined, undefined, undefined, (function (param) {
                                    return $$Promise.Js.toBsPromise($$Promise.map(openTextEditor("𝐀a𝐁bb𝐂c\na"), (function (textEditor) {
                                                      Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.fromAgdaOffset(textEditor, Editor$AgdaModeVscode.toAgdaOffset(textEditor, 0)), 0);
                                                      Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.fromAgdaOffset(textEditor, Editor$AgdaModeVscode.toAgdaOffset(textEditor, 2)), 2);
                                                      Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.fromAgdaOffset(textEditor, Editor$AgdaModeVscode.toAgdaOffset(textEditor, 3)), 3);
                                                      Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.fromAgdaOffset(textEditor, Editor$AgdaModeVscode.toAgdaOffset(textEditor, 5)), 5);
                                                      Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.fromAgdaOffset(textEditor, Editor$AgdaModeVscode.toAgdaOffset(textEditor, 6)), 6);
                                                      Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.fromAgdaOffset(textEditor, Editor$AgdaModeVscode.toAgdaOffset(textEditor, 7)), 7);
                                                      return Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.fromAgdaOffset(textEditor, Editor$AgdaModeVscode.toAgdaOffset(textEditor, 9)), 9);
                                                    })));
                                  }));
                    }));
      }));

var Assert;

var P;

exports.Assert = Assert;
exports.P = P;
exports.openTextEditor = openTextEditor;
exports.getTextToOffsetAt = getTextToOffsetAt;
/*  Not a pure module */
