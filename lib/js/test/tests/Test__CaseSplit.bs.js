// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Vscode = require("vscode");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Mocha$BsMocha = require("bs-mocha/lib/js/src/Mocha.bs.js");
var Assert$BsMocha = require("bs-mocha/lib/js/src/Assert.bs.js");
var Promise$BsMocha = require("bs-mocha/lib/js/src/Promise.bs.js");
var Goal$AgdaModeVscode = require("../../src/Goal.bs.js");
var Editor$AgdaModeVscode = require("../../src/Editor.bs.js");
var Test__Util$AgdaModeVscode = require("./Test__Util.bs.js");
var State__Goal$AgdaModeVscode = require("../../src/State/State__Goal.bs.js");

function makeTextEditor(content) {
  return $$Promise.flatMap(Vscode.workspace.openTextDocument({
                  content: content,
                  language: "agda"
                }), (function (textDocument) {
                return Vscode.window.showTextDocument(textDocument, undefined);
              }));
}

function forGoal(goals, index, callback) {
  var goal = Belt_Array.get(goals, index);
  if (goal !== undefined) {
    return Curry._1(callback, Caml_option.valFromOption(goal));
  } else {
    Assert$BsMocha.fail("failed to instantiate goal #" + String(index));
    return $$Promise.resolved(undefined);
  }
}

Mocha$BsMocha.describe("State__Goal.caseSplitAux")(undefined, undefined, undefined, (function (param) {
        return Promise$BsMocha.it("should calculate the infomation needed for case splitting correctly")(undefined, undefined, undefined, (function (param) {
                      return $$Promise.Js.toBsPromise($$Promise.map(Vscode.window.showTextDocument(Vscode.Uri.file(Test__Util$AgdaModeVscode.Path.asset("CaseSplit.agda")), undefined), (function (editor) {
                                        var $$document = editor.document;
                                        return $$Promise.map($$Promise.map(Goal$AgdaModeVscode.makeMany(editor, [
                                                            0,
                                                            1,
                                                            2,
                                                            3,
                                                            4,
                                                            5,
                                                            6,
                                                            7,
                                                            8
                                                          ]), (function (goals) {
                                                          return Belt_Array.map(goals, (function (goal) {
                                                                        var match = State__Goal$AgdaModeVscode.caseSplitAux($$document, goal);
                                                                        var rewriteRange = match[2];
                                                                        var rewriteRange$1 = new Vscode.Range($$document.positionAt(rewriteRange[0]), $$document.positionAt(rewriteRange[1]));
                                                                        return [
                                                                                match[0],
                                                                                match[1],
                                                                                Editor$AgdaModeVscode.$$Text.get($$document, rewriteRange$1)
                                                                              ];
                                                                      }));
                                                        })), (function (results) {
                                                      return Assert$BsMocha.deep_equal(undefined, results, [
                                                                  [
                                                                    false,
                                                                    9,
                                                                    "x → {!   !}"
                                                                  ],
                                                                  [
                                                                    false,
                                                                    23,
                                                                    "y → {!   !}"
                                                                  ],
                                                                  [
                                                                    false,
                                                                    4,
                                                                    "x → {!   !}"
                                                                  ],
                                                                  [
                                                                    false,
                                                                    4,
                                                                    "y → {!   !}"
                                                                  ],
                                                                  [
                                                                    true,
                                                                    13,
                                                                    "x → {!   !}"
                                                                  ],
                                                                  [
                                                                    true,
                                                                    13,
                                                                    "y → {!   !}"
                                                                  ],
                                                                  [
                                                                    true,
                                                                    2,
                                                                    "x → {!   !}"
                                                                  ],
                                                                  [
                                                                    true,
                                                                    2,
                                                                    "y → {!   !}"
                                                                  ],
                                                                  [
                                                                    false,
                                                                    13,
                                                                    "x → {!   !}"
                                                                  ]
                                                                ]);
                                                    }));
                                      })));
                    }));
      }));

var VSRange;

var Assert;

var P;

exports.VSRange = VSRange;
exports.Assert = Assert;
exports.P = P;
exports.makeTextEditor = makeTextEditor;
exports.forGoal = forGoal;
/*  Not a pure module */
