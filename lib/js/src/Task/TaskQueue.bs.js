// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Util$AgdaModeVscode = require("../Util/Util.bs.js");

function make(param) {
  return {
          main: /* [] */0,
          agda: undefined,
          view: undefined
        };
}

function addTasksToMain(param, tasks) {
  return {
          main: Belt_List.concat(param.main, tasks),
          agda: param.agda,
          view: param.view
        };
}

function acquireAgda(param) {
  var view = param.view;
  var agda = param.agda;
  var main = param.main;
  if (agda !== undefined) {
    console.log("[ panic ] The Agda task queue has already been acquired");
    return {
            main: main,
            agda: agda,
            view: view
          };
  } else {
    return {
            main: main,
            agda: /* [] */0,
            view: view
          };
  }
}

function releaseAgda(param) {
  var view = param.view;
  var agda = param.agda;
  var main = param.main;
  if (agda !== undefined) {
    return {
            main: Belt_List.concat(agda, main),
            agda: undefined,
            view: view
          };
  } else {
    return {
            main: main,
            agda: agda,
            view: view
          };
  }
}

function acquireView(param) {
  var view = param.view;
  var main = param.main;
  if (view !== undefined) {
    console.log("[ panic ] The View task queue has already been acquired");
    return {
            main: main,
            agda: undefined,
            view: view
          };
  } else {
    return {
            main: main,
            agda: param.agda,
            view: /* [] */0
          };
  }
}

function releaseView(param) {
  var view = param.view;
  var agda = param.agda;
  var main = param.main;
  if (view !== undefined) {
    return {
            main: Belt_List.concat(view, main),
            agda: agda,
            view: undefined
          };
  } else {
    return {
            main: main,
            agda: agda,
            view: view
          };
  }
}

function addTasksToAgda(param, tasks) {
  var view = param.view;
  var agda = param.agda;
  var main = param.main;
  if (agda !== undefined) {
    return {
            main: main,
            agda: Belt_List.concat(agda, tasks),
            view: view
          };
  } else {
    console.log("[ panic ] Cannot add task to the Agda task queue before acquiring it");
    return {
            main: main,
            agda: agda,
            view: view
          };
  }
}

function addTasksToView(param, tasks) {
  var view = param.view;
  var agda = param.agda;
  var main = param.main;
  if (view !== undefined) {
    return {
            main: main,
            agda: agda,
            view: Belt_List.concat(view, tasks)
          };
  } else {
    console.log("[ panic ] Cannot add task to the View task queue before acquiring it");
    return {
            main: main,
            agda: agda,
            view: view
          };
  }
}

function toString(taskToString, param) {
  var view = param.view;
  var agda = param.agda;
  var main = "Main " + Util$AgdaModeVscode.Pretty.list(Belt_List.map(param.main, taskToString));
  var agda$1 = agda !== undefined ? "Agda " + Util$AgdaModeVscode.Pretty.list(Belt_List.map(agda, taskToString)) : "";
  var view$1 = view !== undefined ? "View " + Util$AgdaModeVscode.Pretty.list(Belt_List.map(view, taskToString)) : "";
  return main + ("\n" + (agda$1 + ("\n" + view$1)));
}

function getNextTask(self) {
  var match = self.view;
  var match$1 = self.agda;
  var match$2 = self.main;
  if (match !== undefined) {
    if (match) {
      return /* tuple */[
              Caml_option.some(match[0]),
              {
                main: match$2,
                agda: match$1,
                view: match[1]
              }
            ];
    } else {
      return /* tuple */[
              undefined,
              self
            ];
    }
  } else if (match$1 !== undefined) {
    if (match$1) {
      return /* tuple */[
              Caml_option.some(match$1[0]),
              {
                main: match$2,
                agda: match$1[1],
                view: undefined
              }
            ];
    } else {
      return /* tuple */[
              undefined,
              self
            ];
    }
  } else if (match$2) {
    return /* tuple */[
            Caml_option.some(match$2[0]),
            {
              main: match$2[1],
              agda: undefined,
              view: undefined
            }
          ];
  } else {
    return /* tuple */[
            undefined,
            self
          ];
  }
}

exports.make = make;
exports.addTasksToMain = addTasksToMain;
exports.acquireAgda = acquireAgda;
exports.releaseAgda = releaseAgda;
exports.acquireView = acquireView;
exports.releaseView = releaseView;
exports.addTasksToAgda = addTasksToAgda;
exports.addTasksToView = addTasksToView;
exports.toString = toString;
exports.getNextTask = getNextTask;
/* Util-AgdaModeVscode Not a pure module */
