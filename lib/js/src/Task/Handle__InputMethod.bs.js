// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Vscode = require("vscode");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Editor$AgdaModeVscode = require("../Editor.bs.js");
var EditorIM$AgdaModeVscode = require("../InputMethod/EditorIM.bs.js");

function handleEditorIMOutput(output) {
  var handle = function (kind) {
    if (typeof kind === "number") {
      if (kind === /* Activate */0) {
        return /* Activate */0;
      } else {
        return /* Deactivate */1;
      }
    } else if (kind.TAG) {
      return {
              TAG: 1,
              _0: kind._0,
              _1: kind._1,
              [Symbol.for("name")]: "Rewrite"
            };
    } else {
      return {
              TAG: 2,
              _0: kind._0,
              _1: kind._1,
              _2: kind._2,
              [Symbol.for("name")]: "UpdateView"
            };
    }
  };
  return Belt_Array.map(output, handle);
}

var previous = {
  contents: ""
};

var current = {
  contents: ""
};

function activate(self, input) {
  var cursorOffset = input.length;
  previous.contents = input.substring(0, cursorOffset);
  return EditorIM$AgdaModeVscode.activate(self, undefined, [[
                cursorOffset,
                cursorOffset
              ]]);
}

function change(self, input) {
  current.contents = input;
  var input$1 = EditorIM$AgdaModeVscode.deviseChange(self, previous.contents, input);
  if (input$1 !== undefined) {
    return EditorIM$AgdaModeVscode.run(self, undefined, input$1);
  } else {
    return $$Promise.resolved([/* Deactivate */1]);
  }
}

function insertChar(self, $$char) {
  return change(self, previous.contents + $$char);
}

function handle(output) {
  var handle$1 = function (kind) {
    if (typeof kind === "number") {
      if (kind === /* Activate */0) {
        return {
                hd: {
                  TAG: 0,
                  _0: {
                    TAG: 13,
                    _0: /* Activate */0,
                    [Symbol.for("name")]: "InputMethod"
                  },
                  [Symbol.for("name")]: "DispatchCommand"
                },
                tl: /* [] */0
              };
      } else {
        return {
                hd: {
                  TAG: 0,
                  _0: {
                    TAG: 13,
                    _0: /* Deactivate */1,
                    [Symbol.for("name")]: "InputMethod"
                  },
                  [Symbol.for("name")]: "DispatchCommand"
                },
                tl: /* [] */0
              };
      }
    }
    if (!kind.TAG) {
      return {
              hd: {
                TAG: 0,
                _0: {
                  TAG: 13,
                  _0: {
                    TAG: 2,
                    _0: kind._0,
                    _1: kind._1,
                    _2: kind._2,
                    [Symbol.for("name")]: "UpdateView"
                  },
                  [Symbol.for("name")]: "InputMethod"
                },
                [Symbol.for("name")]: "DispatchCommand"
              },
              tl: /* [] */0
            };
    }
    Curry._1(kind._1, undefined);
    var replaced = {
      contents: current.contents
    };
    var delta = {
      contents: 0
    };
    var replace = function (param) {
      var t = param[1];
      var match = param[0];
      var end_ = match[1];
      var start = match[0];
      replaced.contents = replaced.contents.slice(0, delta.contents + start | 0) + t + replaced.contents.slice(delta.contents + end_ | 0);
      delta.contents = (delta.contents + t.length | 0) - (end_ - start | 0) | 0;
      
    };
    Belt_Array.forEach(kind._0, replace);
    return {
            hd: {
              TAG: 2,
              _0: {
                TAG: 1,
                _0: replaced.contents,
                [Symbol.for("name")]: "PromptIMUpdate"
              },
              [Symbol.for("name")]: "ViewEvent"
            },
            tl: /* [] */0
          };
  };
  return Belt_List.concatMany(Belt_Array.map(output, handle$1));
}

var TempPromptIM = {
  previous: previous,
  current: current,
  activate: activate,
  change: change,
  insertChar: insertChar,
  handle: handle
};

function handle$1(x) {
  if (typeof x === "number") {
    switch (x) {
      case /* Activate */0 :
          return {
                  hd: {
                    TAG: 8,
                    _0: (function (state) {
                        if (EditorIM$AgdaModeVscode.isActivated(state.editorIM)) {
                          Belt_Array.forEach(Editor$AgdaModeVscode.Cursor.getMany(state.editor), (function (point) {
                                  Editor$AgdaModeVscode.$$Text.insert(state.editor.document, point, "\\");
                                  
                                }));
                          EditorIM$AgdaModeVscode.deactivate(state.editorIM);
                          return $$Promise.resolved({
                                      hd: {
                                        TAG: 2,
                                        _0: {
                                          TAG: 2,
                                          _0: /* Deactivate */1,
                                          [Symbol.for("name")]: "InputMethod"
                                        },
                                        [Symbol.for("name")]: "ViewEvent"
                                      },
                                      tl: /* [] */0
                                    });
                        }
                        var $$document = state.editor.document;
                        var startingRanges = Belt_Array.map(Editor$AgdaModeVscode.$$Selection.getMany(state.editor), (function (range) {
                                return [
                                        $$document.offsetAt(range.start),
                                        $$document.offsetAt(range.end)
                                      ];
                              }));
                        EditorIM$AgdaModeVscode.activate(state.editorIM, Caml_option.some(state.editor), startingRanges);
                        return $$Promise.resolved({
                                    hd: {
                                      TAG: 2,
                                      _0: {
                                        TAG: 2,
                                        _0: /* Activate */0,
                                        [Symbol.for("name")]: "InputMethod"
                                      },
                                      [Symbol.for("name")]: "ViewEvent"
                                    },
                                    tl: /* [] */0
                                  });
                      }),
                    [Symbol.for("name")]: "WithStateP"
                  },
                  tl: /* [] */0
                };
      case /* Deactivate */1 :
          return {
                  hd: {
                    TAG: 7,
                    _0: (function (state) {
                        EditorIM$AgdaModeVscode.deactivate(state.editorIM);
                        return EditorIM$AgdaModeVscode.deactivate(state.promptIM);
                      }),
                    [Symbol.for("name")]: "WithState"
                  },
                  tl: {
                    hd: {
                      TAG: 2,
                      _0: {
                        TAG: 2,
                        _0: /* Deactivate */1,
                        [Symbol.for("name")]: "InputMethod"
                      },
                      [Symbol.for("name")]: "ViewEvent"
                    },
                    tl: /* [] */0
                  }
                };
      case /* MoveUp */2 :
          return {
                  hd: {
                    TAG: 8,
                    _0: (function (state) {
                        return $$Promise.map($$Promise.map(EditorIM$AgdaModeVscode.run(state.editorIM, Caml_option.some(state.editor), {
                                            TAG: 2,
                                            _0: /* BrowseUp */0,
                                            [Symbol.for("name")]: "Candidate"
                                          }), handleEditorIMOutput), (function (xs) {
                                      return Belt_List.map(Belt_List.fromArray(xs), (function (x) {
                                                    return {
                                                            TAG: 0,
                                                            _0: {
                                                              TAG: 13,
                                                              _0: x,
                                                              [Symbol.for("name")]: "InputMethod"
                                                            },
                                                            [Symbol.for("name")]: "DispatchCommand"
                                                          };
                                                  }));
                                    }));
                      }),
                    [Symbol.for("name")]: "WithStateP"
                  },
                  tl: /* [] */0
                };
      case /* MoveRight */3 :
          return {
                  hd: {
                    TAG: 8,
                    _0: (function (state) {
                        return $$Promise.map($$Promise.map(EditorIM$AgdaModeVscode.run(state.editorIM, Caml_option.some(state.editor), {
                                            TAG: 2,
                                            _0: /* BrowseRight */3,
                                            [Symbol.for("name")]: "Candidate"
                                          }), handleEditorIMOutput), (function (xs) {
                                      return Belt_List.map(Belt_List.fromArray(xs), (function (x) {
                                                    return {
                                                            TAG: 0,
                                                            _0: {
                                                              TAG: 13,
                                                              _0: x,
                                                              [Symbol.for("name")]: "InputMethod"
                                                            },
                                                            [Symbol.for("name")]: "DispatchCommand"
                                                          };
                                                  }));
                                    }));
                      }),
                    [Symbol.for("name")]: "WithStateP"
                  },
                  tl: /* [] */0
                };
      case /* MoveDown */4 :
          return {
                  hd: {
                    TAG: 8,
                    _0: (function (state) {
                        return $$Promise.map($$Promise.map(EditorIM$AgdaModeVscode.run(state.editorIM, Caml_option.some(state.editor), {
                                            TAG: 2,
                                            _0: /* BrowseDown */1,
                                            [Symbol.for("name")]: "Candidate"
                                          }), handleEditorIMOutput), (function (xs) {
                                      return Belt_List.map(Belt_List.fromArray(xs), (function (x) {
                                                    return {
                                                            TAG: 0,
                                                            _0: {
                                                              TAG: 13,
                                                              _0: x,
                                                              [Symbol.for("name")]: "InputMethod"
                                                            },
                                                            [Symbol.for("name")]: "DispatchCommand"
                                                          };
                                                  }));
                                    }));
                      }),
                    [Symbol.for("name")]: "WithStateP"
                  },
                  tl: /* [] */0
                };
      case /* MoveLeft */5 :
          return {
                  hd: {
                    TAG: 8,
                    _0: (function (state) {
                        return $$Promise.map($$Promise.map(EditorIM$AgdaModeVscode.run(state.editorIM, Caml_option.some(state.editor), {
                                            TAG: 2,
                                            _0: /* BrowseLeft */2,
                                            [Symbol.for("name")]: "Candidate"
                                          }), handleEditorIMOutput), (function (xs) {
                                      return Belt_List.map(Belt_List.fromArray(xs), (function (x) {
                                                    return {
                                                            TAG: 0,
                                                            _0: {
                                                              TAG: 13,
                                                              _0: x,
                                                              [Symbol.for("name")]: "InputMethod"
                                                            },
                                                            [Symbol.for("name")]: "DispatchCommand"
                                                          };
                                                  }));
                                    }));
                      }),
                    [Symbol.for("name")]: "WithStateP"
                  },
                  tl: /* [] */0
                };
      
    }
  } else {
    switch (x.TAG | 0) {
      case /* PromptChange */0 :
          var input = x._0;
          return {
                  hd: {
                    TAG: 8,
                    _0: (function (state) {
                        var shouldActivate = input.endsWith("\\");
                        var deactivateEditorIM = function (param) {
                          EditorIM$AgdaModeVscode.deactivate(state.editorIM);
                          return {
                                  hd: {
                                    TAG: 2,
                                    _0: {
                                      TAG: 2,
                                      _0: /* Deactivate */1,
                                      [Symbol.for("name")]: "InputMethod"
                                    },
                                    [Symbol.for("name")]: "ViewEvent"
                                  },
                                  tl: /* [] */0
                                };
                        };
                        var activatePromptIM = function (param) {
                          var input$1 = input.substring(0, input.length - 1 | 0);
                          activate(state.promptIM, input$1);
                          return {
                                  hd: {
                                    TAG: 2,
                                    _0: {
                                      TAG: 2,
                                      _0: /* Activate */0,
                                      [Symbol.for("name")]: "InputMethod"
                                    },
                                    [Symbol.for("name")]: "ViewEvent"
                                  },
                                  tl: {
                                    hd: {
                                      TAG: 2,
                                      _0: {
                                        TAG: 1,
                                        _0: input$1,
                                        [Symbol.for("name")]: "PromptIMUpdate"
                                      },
                                      [Symbol.for("name")]: "ViewEvent"
                                    },
                                    tl: /* [] */0
                                  }
                                };
                        };
                        if (EditorIM$AgdaModeVscode.isActivated(state.editorIM)) {
                          if (shouldActivate) {
                            return $$Promise.resolved(Belt_List.concatMany([
                                            deactivateEditorIM(undefined),
                                            activatePromptIM(undefined)
                                          ]));
                          } else {
                            return $$Promise.resolved({
                                        hd: {
                                          TAG: 2,
                                          _0: {
                                            TAG: 1,
                                            _0: input,
                                            [Symbol.for("name")]: "PromptIMUpdate"
                                          },
                                          [Symbol.for("name")]: "ViewEvent"
                                        },
                                        tl: /* [] */0
                                      });
                          }
                        } else if (EditorIM$AgdaModeVscode.isActivated(state.promptIM)) {
                          return $$Promise.map(change(state.promptIM, input), handle);
                        } else if (shouldActivate) {
                          return $$Promise.resolved(activatePromptIM(undefined));
                        } else {
                          return $$Promise.resolved({
                                      hd: {
                                        TAG: 2,
                                        _0: {
                                          TAG: 1,
                                          _0: input,
                                          [Symbol.for("name")]: "PromptIMUpdate"
                                        },
                                        [Symbol.for("name")]: "ViewEvent"
                                      },
                                      tl: /* [] */0
                                    });
                        }
                      }),
                    [Symbol.for("name")]: "WithStateP"
                  },
                  tl: /* [] */0
                };
      case /* Rewrite */1 :
          var resolve = x._1;
          var replacements = x._0;
          return {
                  hd: {
                    TAG: 8,
                    _0: (function (state) {
                        var $$document = state.editor.document;
                        var replacements$1 = Belt_Array.map(replacements, (function (param) {
                                var interval = param[0];
                                var range = new Vscode.Range($$document.positionAt(interval[0]), $$document.positionAt(interval[1]));
                                return [
                                        range,
                                        param[1]
                                      ];
                              }));
                        return $$Promise.map(Editor$AgdaModeVscode.$$Text.batchReplace($$document, replacements$1), (function (param) {
                                      Curry._1(resolve, undefined);
                                      return /* [] */0;
                                    }));
                      }),
                    [Symbol.for("name")]: "WithStateP"
                  },
                  tl: /* [] */0
                };
      case /* UpdateView */2 :
          return {
                  hd: {
                    TAG: 2,
                    _0: {
                      TAG: 2,
                      _0: {
                        _0: x._0,
                        _1: x._1,
                        _2: x._2,
                        [Symbol.for("name")]: "Update"
                      },
                      [Symbol.for("name")]: "InputMethod"
                    },
                    [Symbol.for("name")]: "ViewEvent"
                  },
                  tl: /* [] */0
                };
      case /* InsertChar */3 :
          var $$char = x._0;
          return {
                  hd: {
                    TAG: 8,
                    _0: (function (state) {
                        if (!EditorIM$AgdaModeVscode.isActivated(state.editorIM)) {
                          if (EditorIM$AgdaModeVscode.isActivated(state.promptIM)) {
                            return $$Promise.map(insertChar(state.promptIM, $$char), handle);
                          } else {
                            return $$Promise.resolved(/* [] */0);
                          }
                        }
                        var $$char$1 = $$char.charAt(0);
                        Belt_Array.forEach(Editor$AgdaModeVscode.Cursor.getMany(state.editor), (function (point) {
                                Editor$AgdaModeVscode.$$Text.insert(state.editor.document, point, $$char$1);
                                
                              }));
                        return $$Promise.resolved(/* [] */0);
                      }),
                    [Symbol.for("name")]: "WithStateP"
                  },
                  tl: /* [] */0
                };
      case /* ChooseSymbol */4 :
          var symbol = x._0;
          return {
                  hd: {
                    TAG: 8,
                    _0: (function (state) {
                        if (EditorIM$AgdaModeVscode.isActivated(state.editorIM)) {
                          return $$Promise.map($$Promise.map(EditorIM$AgdaModeVscode.run(state.editorIM, Caml_option.some(state.editor), {
                                              TAG: 2,
                                              _0: {
                                                _0: symbol,
                                                [Symbol.for("name")]: "ChooseSymbol"
                                              },
                                              [Symbol.for("name")]: "Candidate"
                                            }), handleEditorIMOutput), (function (xs) {
                                        return Belt_List.map(Belt_List.fromArray(xs), (function (x) {
                                                      return {
                                                              TAG: 0,
                                                              _0: {
                                                                TAG: 13,
                                                                _0: x,
                                                                [Symbol.for("name")]: "InputMethod"
                                                              },
                                                              [Symbol.for("name")]: "DispatchCommand"
                                                            };
                                                    }));
                                      }));
                        } else if (EditorIM$AgdaModeVscode.isActivated(state.promptIM)) {
                          return $$Promise.map(EditorIM$AgdaModeVscode.run(state.promptIM, undefined, {
                                          TAG: 2,
                                          _0: {
                                            _0: symbol,
                                            [Symbol.for("name")]: "ChooseSymbol"
                                          },
                                          [Symbol.for("name")]: "Candidate"
                                        }), handle);
                        } else {
                          return $$Promise.resolved(/* [] */0);
                        }
                      }),
                    [Symbol.for("name")]: "WithStateP"
                  },
                  tl: /* [] */0
                };
      
    }
  }
}

exports.handleEditorIMOutput = handleEditorIMOutput;
exports.TempPromptIM = TempPromptIM;
exports.handle = handle$1;
/* vscode Not a pure module */
