// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Vscode = require("vscode");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Mocha$BsMocha = require("bs-mocha/lib/js/src/Mocha.bs.js");
var Assert$BsMocha = require("bs-mocha/lib/js/src/Assert.bs.js");
var Goal$AgdaModeVscode = require("../../src/Goal.bs.js");
var Task$AgdaModeVscode = require("../../src/Task/Task.bs.js");
var Editor$AgdaModeVscode = require("../../src/Editor.bs.js");
var Dispatcher$AgdaModeVscode = require("../../src/Task/Dispatcher.bs.js");
var Test__Util$AgdaModeVscode = require("./Test__Util.bs.js");
var Handle__Goal$AgdaModeVscode = require("../../src/Task/Handle__Goal.bs.js");

var Goal = Goal$AgdaModeVscode.Impl({
      Disposable: Editor$AgdaModeVscode.Disposable,
      Point: {
        line: Editor$AgdaModeVscode.Point.line,
        column: Editor$AgdaModeVscode.Point.column,
        make: Editor$AgdaModeVscode.Point.make,
        translate: Editor$AgdaModeVscode.Point.translate,
        compare: Editor$AgdaModeVscode.Point.compare
      },
      pointAtOffset: Editor$AgdaModeVscode.pointAtOffset,
      offsetAtPoint: Editor$AgdaModeVscode.offsetAtPoint,
      $$Range: Editor$AgdaModeVscode.$$Range,
      editorType: Editor$AgdaModeVscode.editorType,
      getExtensionPath: Editor$AgdaModeVscode.getExtensionPath,
      getFileName: Editor$AgdaModeVscode.getFileName,
      save: Editor$AgdaModeVscode.save,
      onDidChangeFileName: Editor$AgdaModeVscode.onDidChangeFileName,
      onDidChangeActivation: Editor$AgdaModeVscode.onDidChangeActivation,
      onDidCloseEditor: Editor$AgdaModeVscode.onDidCloseEditor,
      registerCommand: Editor$AgdaModeVscode.registerCommand,
      setContext: Editor$AgdaModeVscode.setContext,
      addToSubscriptions: Editor$AgdaModeVscode.addToSubscriptions,
      Config: {
        getAgdaPath: Editor$AgdaModeVscode.Config.getAgdaPath,
        setAgdaPath: Editor$AgdaModeVscode.Config.setAgdaPath,
        getLibraryPath: Editor$AgdaModeVscode.Config.getLibraryPath,
        getHighlightingMethod: Editor$AgdaModeVscode.Config.getHighlightingMethod,
        getBackend: Editor$AgdaModeVscode.Config.getBackend
      },
      View: {
        make: Editor$AgdaModeVscode.View.make,
        destroy: Editor$AgdaModeVscode.View.destroy,
        show: Editor$AgdaModeVscode.View.show,
        hide: Editor$AgdaModeVscode.View.hide,
        focus: Editor$AgdaModeVscode.View.focus,
        send: Editor$AgdaModeVscode.View.send,
        on: Editor$AgdaModeVscode.View.on
      },
      Decoration: {
        decorate: Editor$AgdaModeVscode.Decoration.decorate,
        highlightBackground: Editor$AgdaModeVscode.Decoration.highlightBackground,
        highlightBackgroundWithColor: Editor$AgdaModeVscode.Decoration.highlightBackgroundWithColor,
        decorateText: Editor$AgdaModeVscode.Decoration.decorateText,
        decorateTextWithColor: Editor$AgdaModeVscode.Decoration.decorateTextWithColor,
        overlayText: Editor$AgdaModeVscode.Decoration.overlayText,
        overlayTextWithColor: Editor$AgdaModeVscode.Decoration.overlayTextWithColor,
        underlineText: Editor$AgdaModeVscode.Decoration.underlineText,
        destroy: Editor$AgdaModeVscode.Decoration.destroy
      },
      focus: Editor$AgdaModeVscode.focus,
      getSelectionRange: Editor$AgdaModeVscode.getSelectionRange,
      getSelectionRanges: Editor$AgdaModeVscode.getSelectionRanges,
      getCursorPosition: Editor$AgdaModeVscode.getCursorPosition,
      getCursorPositions: Editor$AgdaModeVscode.getCursorPositions,
      setCursorPosition: Editor$AgdaModeVscode.setCursorPosition,
      onChangeCursorPosition: Editor$AgdaModeVscode.onChangeCursorPosition,
      rangeForLine: Editor$AgdaModeVscode.rangeForLine,
      fromAgdaOffset: Editor$AgdaModeVscode.fromAgdaOffset,
      toAgdaOffset: Editor$AgdaModeVscode.toAgdaOffset,
      getText: Editor$AgdaModeVscode.getText,
      getTextInRange: Editor$AgdaModeVscode.getTextInRange,
      selectText: Editor$AgdaModeVscode.selectText,
      replaceText: Editor$AgdaModeVscode.replaceText,
      insertText: Editor$AgdaModeVscode.insertText,
      insertTexts: Editor$AgdaModeVscode.insertTexts,
      deleteText: Editor$AgdaModeVscode.deleteText,
      onChange: Editor$AgdaModeVscode.onChange,
      copyToClipboard: Editor$AgdaModeVscode.copyToClipboard,
      colorThemeIsDark: Editor$AgdaModeVscode.colorThemeIsDark,
      lineEndingIsCRLF: Editor$AgdaModeVscode.lineEndingIsCRLF
    });

var Task = Task$AgdaModeVscode.Impl({
      Disposable: Editor$AgdaModeVscode.Disposable,
      Point: {
        line: Editor$AgdaModeVscode.Point.line,
        column: Editor$AgdaModeVscode.Point.column,
        make: Editor$AgdaModeVscode.Point.make,
        translate: Editor$AgdaModeVscode.Point.translate,
        compare: Editor$AgdaModeVscode.Point.compare
      },
      pointAtOffset: Editor$AgdaModeVscode.pointAtOffset,
      offsetAtPoint: Editor$AgdaModeVscode.offsetAtPoint,
      $$Range: Editor$AgdaModeVscode.$$Range,
      editorType: Editor$AgdaModeVscode.editorType,
      getExtensionPath: Editor$AgdaModeVscode.getExtensionPath,
      getFileName: Editor$AgdaModeVscode.getFileName,
      save: Editor$AgdaModeVscode.save,
      onDidChangeFileName: Editor$AgdaModeVscode.onDidChangeFileName,
      onDidChangeActivation: Editor$AgdaModeVscode.onDidChangeActivation,
      onDidCloseEditor: Editor$AgdaModeVscode.onDidCloseEditor,
      registerCommand: Editor$AgdaModeVscode.registerCommand,
      setContext: Editor$AgdaModeVscode.setContext,
      addToSubscriptions: Editor$AgdaModeVscode.addToSubscriptions,
      Config: {
        getAgdaPath: Editor$AgdaModeVscode.Config.getAgdaPath,
        setAgdaPath: Editor$AgdaModeVscode.Config.setAgdaPath,
        getLibraryPath: Editor$AgdaModeVscode.Config.getLibraryPath,
        getHighlightingMethod: Editor$AgdaModeVscode.Config.getHighlightingMethod,
        getBackend: Editor$AgdaModeVscode.Config.getBackend
      },
      View: {
        make: Editor$AgdaModeVscode.View.make,
        destroy: Editor$AgdaModeVscode.View.destroy,
        show: Editor$AgdaModeVscode.View.show,
        hide: Editor$AgdaModeVscode.View.hide,
        focus: Editor$AgdaModeVscode.View.focus,
        send: Editor$AgdaModeVscode.View.send,
        on: Editor$AgdaModeVscode.View.on
      },
      Decoration: {
        decorate: Editor$AgdaModeVscode.Decoration.decorate,
        highlightBackground: Editor$AgdaModeVscode.Decoration.highlightBackground,
        highlightBackgroundWithColor: Editor$AgdaModeVscode.Decoration.highlightBackgroundWithColor,
        decorateText: Editor$AgdaModeVscode.Decoration.decorateText,
        decorateTextWithColor: Editor$AgdaModeVscode.Decoration.decorateTextWithColor,
        overlayText: Editor$AgdaModeVscode.Decoration.overlayText,
        overlayTextWithColor: Editor$AgdaModeVscode.Decoration.overlayTextWithColor,
        underlineText: Editor$AgdaModeVscode.Decoration.underlineText,
        destroy: Editor$AgdaModeVscode.Decoration.destroy
      },
      focus: Editor$AgdaModeVscode.focus,
      getSelectionRange: Editor$AgdaModeVscode.getSelectionRange,
      getSelectionRanges: Editor$AgdaModeVscode.getSelectionRanges,
      getCursorPosition: Editor$AgdaModeVscode.getCursorPosition,
      getCursorPositions: Editor$AgdaModeVscode.getCursorPositions,
      setCursorPosition: Editor$AgdaModeVscode.setCursorPosition,
      onChangeCursorPosition: Editor$AgdaModeVscode.onChangeCursorPosition,
      rangeForLine: Editor$AgdaModeVscode.rangeForLine,
      fromAgdaOffset: Editor$AgdaModeVscode.fromAgdaOffset,
      toAgdaOffset: Editor$AgdaModeVscode.toAgdaOffset,
      getText: Editor$AgdaModeVscode.getText,
      getTextInRange: Editor$AgdaModeVscode.getTextInRange,
      selectText: Editor$AgdaModeVscode.selectText,
      replaceText: Editor$AgdaModeVscode.replaceText,
      insertText: Editor$AgdaModeVscode.insertText,
      insertTexts: Editor$AgdaModeVscode.insertTexts,
      deleteText: Editor$AgdaModeVscode.deleteText,
      onChange: Editor$AgdaModeVscode.onChange,
      copyToClipboard: Editor$AgdaModeVscode.copyToClipboard,
      colorThemeIsDark: Editor$AgdaModeVscode.colorThemeIsDark,
      lineEndingIsCRLF: Editor$AgdaModeVscode.lineEndingIsCRLF
    });

var Dispatcher = Dispatcher$AgdaModeVscode.Impl({
      Disposable: Editor$AgdaModeVscode.Disposable,
      Point: {
        line: Editor$AgdaModeVscode.Point.line,
        column: Editor$AgdaModeVscode.Point.column,
        make: Editor$AgdaModeVscode.Point.make,
        translate: Editor$AgdaModeVscode.Point.translate,
        compare: Editor$AgdaModeVscode.Point.compare
      },
      pointAtOffset: Editor$AgdaModeVscode.pointAtOffset,
      offsetAtPoint: Editor$AgdaModeVscode.offsetAtPoint,
      $$Range: Editor$AgdaModeVscode.$$Range,
      editorType: Editor$AgdaModeVscode.editorType,
      getExtensionPath: Editor$AgdaModeVscode.getExtensionPath,
      getFileName: Editor$AgdaModeVscode.getFileName,
      save: Editor$AgdaModeVscode.save,
      onDidChangeFileName: Editor$AgdaModeVscode.onDidChangeFileName,
      onDidChangeActivation: Editor$AgdaModeVscode.onDidChangeActivation,
      onDidCloseEditor: Editor$AgdaModeVscode.onDidCloseEditor,
      registerCommand: Editor$AgdaModeVscode.registerCommand,
      setContext: Editor$AgdaModeVscode.setContext,
      addToSubscriptions: Editor$AgdaModeVscode.addToSubscriptions,
      Config: {
        getAgdaPath: Editor$AgdaModeVscode.Config.getAgdaPath,
        setAgdaPath: Editor$AgdaModeVscode.Config.setAgdaPath,
        getLibraryPath: Editor$AgdaModeVscode.Config.getLibraryPath,
        getHighlightingMethod: Editor$AgdaModeVscode.Config.getHighlightingMethod,
        getBackend: Editor$AgdaModeVscode.Config.getBackend
      },
      View: {
        make: Editor$AgdaModeVscode.View.make,
        destroy: Editor$AgdaModeVscode.View.destroy,
        show: Editor$AgdaModeVscode.View.show,
        hide: Editor$AgdaModeVscode.View.hide,
        focus: Editor$AgdaModeVscode.View.focus,
        send: Editor$AgdaModeVscode.View.send,
        on: Editor$AgdaModeVscode.View.on
      },
      Decoration: {
        decorate: Editor$AgdaModeVscode.Decoration.decorate,
        highlightBackground: Editor$AgdaModeVscode.Decoration.highlightBackground,
        highlightBackgroundWithColor: Editor$AgdaModeVscode.Decoration.highlightBackgroundWithColor,
        decorateText: Editor$AgdaModeVscode.Decoration.decorateText,
        decorateTextWithColor: Editor$AgdaModeVscode.Decoration.decorateTextWithColor,
        overlayText: Editor$AgdaModeVscode.Decoration.overlayText,
        overlayTextWithColor: Editor$AgdaModeVscode.Decoration.overlayTextWithColor,
        underlineText: Editor$AgdaModeVscode.Decoration.underlineText,
        destroy: Editor$AgdaModeVscode.Decoration.destroy
      },
      focus: Editor$AgdaModeVscode.focus,
      getSelectionRange: Editor$AgdaModeVscode.getSelectionRange,
      getSelectionRanges: Editor$AgdaModeVscode.getSelectionRanges,
      getCursorPosition: Editor$AgdaModeVscode.getCursorPosition,
      getCursorPositions: Editor$AgdaModeVscode.getCursorPositions,
      setCursorPosition: Editor$AgdaModeVscode.setCursorPosition,
      onChangeCursorPosition: Editor$AgdaModeVscode.onChangeCursorPosition,
      rangeForLine: Editor$AgdaModeVscode.rangeForLine,
      fromAgdaOffset: Editor$AgdaModeVscode.fromAgdaOffset,
      toAgdaOffset: Editor$AgdaModeVscode.toAgdaOffset,
      getText: Editor$AgdaModeVscode.getText,
      getTextInRange: Editor$AgdaModeVscode.getTextInRange,
      selectText: Editor$AgdaModeVscode.selectText,
      replaceText: Editor$AgdaModeVscode.replaceText,
      insertText: Editor$AgdaModeVscode.insertText,
      insertTexts: Editor$AgdaModeVscode.insertTexts,
      deleteText: Editor$AgdaModeVscode.deleteText,
      onChange: Editor$AgdaModeVscode.onChange,
      copyToClipboard: Editor$AgdaModeVscode.copyToClipboard,
      colorThemeIsDark: Editor$AgdaModeVscode.colorThemeIsDark,
      lineEndingIsCRLF: Editor$AgdaModeVscode.lineEndingIsCRLF
    });

var GoalHandler = Handle__Goal$AgdaModeVscode.Impl({
      Disposable: Editor$AgdaModeVscode.Disposable,
      Point: {
        line: Editor$AgdaModeVscode.Point.line,
        column: Editor$AgdaModeVscode.Point.column,
        make: Editor$AgdaModeVscode.Point.make,
        translate: Editor$AgdaModeVscode.Point.translate,
        compare: Editor$AgdaModeVscode.Point.compare
      },
      pointAtOffset: Editor$AgdaModeVscode.pointAtOffset,
      offsetAtPoint: Editor$AgdaModeVscode.offsetAtPoint,
      $$Range: Editor$AgdaModeVscode.$$Range,
      editorType: Editor$AgdaModeVscode.editorType,
      getExtensionPath: Editor$AgdaModeVscode.getExtensionPath,
      getFileName: Editor$AgdaModeVscode.getFileName,
      save: Editor$AgdaModeVscode.save,
      onDidChangeFileName: Editor$AgdaModeVscode.onDidChangeFileName,
      onDidChangeActivation: Editor$AgdaModeVscode.onDidChangeActivation,
      onDidCloseEditor: Editor$AgdaModeVscode.onDidCloseEditor,
      registerCommand: Editor$AgdaModeVscode.registerCommand,
      setContext: Editor$AgdaModeVscode.setContext,
      addToSubscriptions: Editor$AgdaModeVscode.addToSubscriptions,
      Config: {
        getAgdaPath: Editor$AgdaModeVscode.Config.getAgdaPath,
        setAgdaPath: Editor$AgdaModeVscode.Config.setAgdaPath,
        getLibraryPath: Editor$AgdaModeVscode.Config.getLibraryPath,
        getHighlightingMethod: Editor$AgdaModeVscode.Config.getHighlightingMethod,
        getBackend: Editor$AgdaModeVscode.Config.getBackend
      },
      View: {
        make: Editor$AgdaModeVscode.View.make,
        destroy: Editor$AgdaModeVscode.View.destroy,
        show: Editor$AgdaModeVscode.View.show,
        hide: Editor$AgdaModeVscode.View.hide,
        focus: Editor$AgdaModeVscode.View.focus,
        send: Editor$AgdaModeVscode.View.send,
        on: Editor$AgdaModeVscode.View.on
      },
      Decoration: {
        decorate: Editor$AgdaModeVscode.Decoration.decorate,
        highlightBackground: Editor$AgdaModeVscode.Decoration.highlightBackground,
        highlightBackgroundWithColor: Editor$AgdaModeVscode.Decoration.highlightBackgroundWithColor,
        decorateText: Editor$AgdaModeVscode.Decoration.decorateText,
        decorateTextWithColor: Editor$AgdaModeVscode.Decoration.decorateTextWithColor,
        overlayText: Editor$AgdaModeVscode.Decoration.overlayText,
        overlayTextWithColor: Editor$AgdaModeVscode.Decoration.overlayTextWithColor,
        underlineText: Editor$AgdaModeVscode.Decoration.underlineText,
        destroy: Editor$AgdaModeVscode.Decoration.destroy
      },
      focus: Editor$AgdaModeVscode.focus,
      getSelectionRange: Editor$AgdaModeVscode.getSelectionRange,
      getSelectionRanges: Editor$AgdaModeVscode.getSelectionRanges,
      getCursorPosition: Editor$AgdaModeVscode.getCursorPosition,
      getCursorPositions: Editor$AgdaModeVscode.getCursorPositions,
      setCursorPosition: Editor$AgdaModeVscode.setCursorPosition,
      onChangeCursorPosition: Editor$AgdaModeVscode.onChangeCursorPosition,
      rangeForLine: Editor$AgdaModeVscode.rangeForLine,
      fromAgdaOffset: Editor$AgdaModeVscode.fromAgdaOffset,
      toAgdaOffset: Editor$AgdaModeVscode.toAgdaOffset,
      getText: Editor$AgdaModeVscode.getText,
      getTextInRange: Editor$AgdaModeVscode.getTextInRange,
      selectText: Editor$AgdaModeVscode.selectText,
      replaceText: Editor$AgdaModeVscode.replaceText,
      insertText: Editor$AgdaModeVscode.insertText,
      insertTexts: Editor$AgdaModeVscode.insertTexts,
      deleteText: Editor$AgdaModeVscode.deleteText,
      onChange: Editor$AgdaModeVscode.onChange,
      copyToClipboard: Editor$AgdaModeVscode.copyToClipboard,
      colorThemeIsDark: Editor$AgdaModeVscode.colorThemeIsDark,
      lineEndingIsCRLF: Editor$AgdaModeVscode.lineEndingIsCRLF
    });

function activateExtension(fileName) {
  var extension = Vscode.extensions.getExtension("banacorn.agda-mode");
  if (extension === undefined) {
    return $$Promise.resolved(undefined);
  }
  var extension$1 = Caml_option.valFromOption(extension);
  return $$Promise.flatMap(Test__Util$AgdaModeVscode.openTextEditor(fileName), (function (editor) {
                return $$Promise.map(extension$1.activate(), (function (emitter) {
                              return /* tuple */[
                                      editor,
                                      emitter
                                    ];
                            }));
              }));
}

function cleanup(editor) {
  var range = Editor$AgdaModeVscode.$$Range.make(Editor$AgdaModeVscode.Point.make(0, 0), Editor$AgdaModeVscode.Point.make(100, 0));
  return $$Promise.map(Editor$AgdaModeVscode.replaceText(editor, range, ""), (function (param) {
                
              }));
}

function insertChar(emitter, editor, $$char) {
  var promise = Curry._1(emitter.once, undefined);
  var pos = Editor$AgdaModeVscode.getCursorPosition(editor);
  return $$Promise.flatMap(Editor$AgdaModeVscode.insertText(editor, pos, $$char), (function (param) {
                return promise;
              }));
}

function backspace(emitter, editor) {
  var promise = Curry._1(emitter.once, undefined);
  var end_ = Editor$AgdaModeVscode.getCursorPosition(editor);
  var start = Editor$AgdaModeVscode.Point.translate(end_, 0, -1);
  var range = Editor$AgdaModeVscode.$$Range.make(start, end_);
  return $$Promise.flatMap(Editor$AgdaModeVscode.deleteText(editor, range), (function (param) {
                return promise;
              }));
}

function activateInputhMethod(param) {
  return $$Promise.flatMap(Vscode.commands.executeCommand("agda-mode.input-symbol[Activate]"), (function (result) {
                return result;
              }));
}

function deactivateInputhMethod(param) {
  return $$Promise.flatMap(Vscode.commands.executeCommand("agda-mode.escape"), (function (result) {
                return result;
              }));
}

Mocha$BsMocha.describe_only("InputMethod")(undefined, undefined, undefined, (function (param) {
        var env = {
          contents: undefined
        };
        Test__Util$AgdaModeVscode.Q.before((function (param) {
                return $$Promise.map(activateExtension(Test__Util$AgdaModeVscode.Path.asset("InputMethod.agda")), (function (param) {
                              if (param !== undefined) {
                                env.contents = /* tuple */[
                                  param[0],
                                  param[1]
                                ];
                                return ;
                              } else {
                                return Assert$BsMocha.fail("cannot acquire the extension");
                              }
                            }));
              }));
        Test__Util$AgdaModeVscode.Q.after_each((function (param) {
                return Belt_Option.mapWithDefault(env.contents, $$Promise.resolved(undefined), (function (param) {
                              return cleanup(param[0]);
                            }));
              }));
        Mocha$BsMocha.describe("Insertion")(undefined, undefined, undefined, (function (param) {
                Test__Util$AgdaModeVscode.Q.it("should translate \"lambda\" to \"λ\"", (function (param) {
                        return Belt_Option.mapWithDefault(env.contents, $$Promise.resolved(undefined), (function (param) {
                                      var emitter = param[1];
                                      var editor = param[0];
                                      return $$Promise.flatMap($$Promise.tap($$Promise.flatMap($$Promise.tap($$Promise.flatMap($$Promise.tap($$Promise.flatMap($$Promise.tap($$Promise.flatMap($$Promise.tap($$Promise.flatMap($$Promise.tap($$Promise.flatMap($$Promise.flatMap(Vscode.commands.executeCommand("agda-mode.input-symbol[Activate]"), (function (result) {
                                                                                                        return result;
                                                                                                      })), (function (param) {
                                                                                                    return insertChar(emitter, editor, "l");
                                                                                                  })), (function (param) {
                                                                                                return Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.getText(editor), "←");
                                                                                              })), (function (param) {
                                                                                            return insertChar(emitter, editor, "a");
                                                                                          })), (function (param) {
                                                                                        return Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.getText(editor), "←a");
                                                                                      })), (function (param) {
                                                                                    return insertChar(emitter, editor, "m");
                                                                                  })), (function (param) {
                                                                                return Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.getText(editor), "←am");
                                                                              })), (function (param) {
                                                                            return insertChar(emitter, editor, "b");
                                                                          })), (function (param) {
                                                                        return Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.getText(editor), "←amb");
                                                                      })), (function (param) {
                                                                    return insertChar(emitter, editor, "d");
                                                                  })), (function (param) {
                                                                return Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.getText(editor), "←ambd");
                                                              })), (function (param) {
                                                            return insertChar(emitter, editor, "a");
                                                          })), (function (param) {
                                                        return Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.getText(editor), "λ");
                                                      })), deactivateInputhMethod);
                                    }));
                      }));
                return Test__Util$AgdaModeVscode.Q.it("should translate \"bn\" to \"𝕟\"", (function (param) {
                              return Belt_Option.mapWithDefault(env.contents, $$Promise.resolved(undefined), (function (param) {
                                            var emitter = param[1];
                                            var editor = param[0];
                                            return $$Promise.flatMap($$Promise.map($$Promise.flatMap($$Promise.flatMap($$Promise.flatMap(Vscode.commands.executeCommand("agda-mode.input-symbol[Activate]"), (function (result) {
                                                                          return result;
                                                                        })), (function (param) {
                                                                      return insertChar(emitter, editor, "b");
                                                                    })), (function (param) {
                                                                  return insertChar(emitter, editor, "n");
                                                                })), (function (param) {
                                                              return Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.getText(editor), "𝕟");
                                                            })), deactivateInputhMethod);
                                          }));
                            }));
              }));
        return Mocha$BsMocha.describe("Backspace")(undefined, undefined, undefined, (function (param) {
                      return Test__Util$AgdaModeVscode.Q.it("should work just fine", (function (param) {
                                    return Belt_Option.mapWithDefault(env.contents, $$Promise.resolved(undefined), (function (param) {
                                                  var emitter = param[1];
                                                  var editor = param[0];
                                                  return $$Promise.flatMap($$Promise.tap($$Promise.flatMap($$Promise.tap($$Promise.flatMap($$Promise.tap($$Promise.flatMap($$Promise.tap($$Promise.flatMap($$Promise.tap($$Promise.flatMap($$Promise.tap($$Promise.flatMap($$Promise.tap($$Promise.flatMap($$Promise.flatMap(Vscode.commands.executeCommand("agda-mode.input-symbol[Activate]"), (function (result) {
                                                                                                                            return result;
                                                                                                                          })), (function (param) {
                                                                                                                        return insertChar(emitter, editor, "l");
                                                                                                                      })), (function (param) {
                                                                                                                    return Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.getText(editor), "←");
                                                                                                                  })), (function (param) {
                                                                                                                return insertChar(emitter, editor, "a");
                                                                                                              })), (function (param) {
                                                                                                            return Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.getText(editor), "←a");
                                                                                                          })), (function (param) {
                                                                                                        return insertChar(emitter, editor, "m");
                                                                                                      })), (function (param) {
                                                                                                    return Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.getText(editor), "←am");
                                                                                                  })), (function (param) {
                                                                                                return insertChar(emitter, editor, "b");
                                                                                              })), (function (param) {
                                                                                            return Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.getText(editor), "←amb");
                                                                                          })), (function (param) {
                                                                                        return insertChar(emitter, editor, "d");
                                                                                      })), (function (param) {
                                                                                    return Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.getText(editor), "←ambd");
                                                                                  })), (function (param) {
                                                                                return insertChar(emitter, editor, "a");
                                                                              })), (function (param) {
                                                                            return Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.getText(editor), "λ");
                                                                          })), (function (param) {
                                                                        return backspace(emitter, editor);
                                                                      })), (function (param) {
                                                                    return Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.getText(editor), "lambd");
                                                                  })), deactivateInputhMethod);
                                                }));
                                  }));
                    }));
      }));

var Assert;

exports.Assert = Assert;
exports.Goal = Goal;
exports.Task = Task;
exports.Dispatcher = Dispatcher;
exports.GoalHandler = GoalHandler;
exports.activateExtension = activateExtension;
exports.cleanup = cleanup;
exports.insertChar = insertChar;
exports.backspace = backspace;
exports.activateInputhMethod = activateInputhMethod;
exports.deactivateInputhMethod = deactivateInputhMethod;
/* Goal Not a pure module */
