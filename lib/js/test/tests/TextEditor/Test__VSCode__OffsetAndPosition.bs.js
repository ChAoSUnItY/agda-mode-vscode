// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Vscode = require("vscode");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Mocha$BsMocha = require("bs-mocha/lib/js/src/Mocha.bs.js");
var Assert$BsMocha = require("bs-mocha/lib/js/src/Assert.bs.js");
var Promise$BsMocha = require("bs-mocha/lib/js/src/Promise.bs.js");
var Editor$AgdaModeVscode = require("../../../src/Editor.bs.js");

function openTextEditor(content) {
  return $$Promise.flatMap(Vscode.workspace.openTextDocument({
                  content: content,
                  language: "agda"
                }), (function (textDocument) {
                return Vscode.window.showTextDocument(textDocument, undefined);
              }));
}

function getTextToOffsetAt(textEditor, offset) {
  var match = Editor$AgdaModeVscode.codeUnitEndingOffset(textEditor, offset);
  var range = new Vscode.Range(new Vscode.Position(0, 0), textEditor.document.positionAt(match[0]));
  return textEditor.document.getText(Caml_option.some(range));
}

Mocha$BsMocha.describe("Conversion between Offsets and Positions")(undefined, undefined, undefined, (function (param) {
        Mocha$BsMocha.describe("Editor.characterWidth")(undefined, undefined, undefined, (function (param) {
                Mocha$BsMocha.it("should calculate the width of some grapheme cluster")(undefined, undefined, undefined, (function (param) {
                        var actual = Editor$AgdaModeVscode.characterWidth("𝐀");
                        return Assert$BsMocha.deep_equal(undefined, actual, 1);
                      }));
                return Mocha$BsMocha.it("should calculate the width of some ordinary ASCII character")(undefined, undefined, undefined, (function (param) {
                              var actual = Editor$AgdaModeVscode.characterWidth("a");
                              return Assert$BsMocha.deep_equal(undefined, actual, 1);
                            }));
              }));
        Mocha$BsMocha.describe("VSCode.TextDocument.positionAt")(undefined, undefined, undefined, (function (param) {
                var openTextDocument = Vscode.workspace.openTextDocument({
                      content: "𝐀𝐁𝐂𝐃𝐄𝐅𝐆𝐇\na",
                      language: "agda"
                    });
                return Promise$BsMocha.it("should count it wrong")(undefined, undefined, undefined, (function (param) {
                              return $$Promise.Js.toBsPromise($$Promise.map(openTextDocument, (function (textDocument) {
                                                var range = new Vscode.Range(textDocument.positionAt(0), textDocument.positionAt(4));
                                                var actual = textDocument.getText(Caml_option.some(range));
                                                Assert$BsMocha.not_equal(undefined, actual, "𝐀𝐁𝐂𝐃");
                                                return Assert$BsMocha.equal(undefined, actual, "𝐀𝐁");
                                              })));
                            }));
              }));
        Mocha$BsMocha.describe("Editor.codeUnitEndingOffset")(undefined, undefined, undefined, (function (param) {
                return Promise$BsMocha.it("shouldn't cut into a grapheme")(undefined, undefined, undefined, (function (param) {
                              return $$Promise.Js.toBsPromise($$Promise.map(openTextEditor("𝐀a𝐁bb𝐂c𝐃dd𝐄e𝐅𝐆𝐇\na"), (function (textEditor) {
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 0), "");
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 1), "𝐀");
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 2), "𝐀");
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 3), "𝐀a");
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 4), "𝐀a𝐁");
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 5), "𝐀a𝐁");
                                                return Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 6), "𝐀a𝐁b");
                                              })));
                            }));
              }));
        Mocha$BsMocha.describe("Editor.pointAtOffset")(undefined, undefined, undefined, (function (param) {
                var getTextToOffsetAt = function (textEditor, offset) {
                  var range = new Vscode.Range(new Vscode.Position(0, 0), Editor$AgdaModeVscode.pointAtOffset(textEditor, offset));
                  return Editor$AgdaModeVscode.getTextInRange(textEditor, range);
                };
                return Promise$BsMocha.it("should extract the right portion of text")(undefined, undefined, undefined, (function (param) {
                              return $$Promise.Js.toBsPromise($$Promise.map(openTextEditor("𝐀a𝐁bb𝐂c\na"), (function (textEditor) {
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 0), "");
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 1), "𝐀");
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 2), "𝐀a");
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 3), "𝐀a𝐁");
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 4), "𝐀a𝐁b");
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 5), "𝐀a𝐁bb");
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 6), "𝐀a𝐁bb𝐂");
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 7), "𝐀a𝐁bb𝐂c");
                                                Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 8), "𝐀a𝐁bb𝐂c\n");
                                                return Assert$BsMocha.equal(undefined, getTextToOffsetAt(textEditor, 9), "𝐀a𝐁bb𝐂c\na");
                                              })));
                            }));
              }));
        Mocha$BsMocha.describe("VSCode.TextDocument.offsetAt")(undefined, undefined, undefined, (function (param) {
                return Promise$BsMocha.it("should count it wrong")(undefined, undefined, undefined, (function (param) {
                              return $$Promise.Js.toBsPromise($$Promise.map(openTextEditor("𝐀𝐁𝐂𝐃𝐄𝐅𝐆𝐇\na"), (function (textEditor) {
                                                var point = Editor$AgdaModeVscode.pointAtOffset(textEditor, 1);
                                                Assert$BsMocha.not_equal(undefined, textEditor.document.offsetAt(point), 1);
                                                var point$1 = Editor$AgdaModeVscode.pointAtOffset(textEditor, 1);
                                                return Assert$BsMocha.equal(undefined, textEditor.document.offsetAt(point$1), 2);
                                              })));
                            }));
              }));
        return Mocha$BsMocha.describe("Editor.offsetAtPoint")(undefined, undefined, undefined, (function (param) {
                      Promise$BsMocha.it("should be a left inverse of Editor.pointAtOffset")(undefined, undefined, undefined, (function (param) {
                              return $$Promise.Js.toBsPromise($$Promise.map(openTextEditor("𝐀a𝐁bb𝐂c\na"), (function (textEditor) {
                                                Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.offsetAtPoint(textEditor, Editor$AgdaModeVscode.pointAtOffset(textEditor, 0)), 0);
                                                Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.offsetAtPoint(textEditor, Editor$AgdaModeVscode.pointAtOffset(textEditor, 1)), 1);
                                                Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.offsetAtPoint(textEditor, Editor$AgdaModeVscode.pointAtOffset(textEditor, 2)), 2);
                                                Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.offsetAtPoint(textEditor, Editor$AgdaModeVscode.pointAtOffset(textEditor, 3)), 3);
                                                Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.offsetAtPoint(textEditor, Editor$AgdaModeVscode.pointAtOffset(textEditor, 4)), 4);
                                                Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.offsetAtPoint(textEditor, Editor$AgdaModeVscode.pointAtOffset(textEditor, 5)), 5);
                                                Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.offsetAtPoint(textEditor, Editor$AgdaModeVscode.pointAtOffset(textEditor, 6)), 6);
                                                Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.offsetAtPoint(textEditor, Editor$AgdaModeVscode.pointAtOffset(textEditor, 7)), 7);
                                                Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.offsetAtPoint(textEditor, Editor$AgdaModeVscode.pointAtOffset(textEditor, 8)), 8);
                                                return Assert$BsMocha.equal(undefined, Editor$AgdaModeVscode.offsetAtPoint(textEditor, Editor$AgdaModeVscode.pointAtOffset(textEditor, 9)), 9);
                                              })));
                            }));
                      return Promise$BsMocha.it("should be a right inverse of Editor.pointAtOffset? (nope!)")(undefined, undefined, undefined, (function (param) {
                                    return $$Promise.Js.toBsPromise($$Promise.map(openTextEditor("𝐀a𝐁bb𝐂c\na"), (function (textEditor) {
                                                      var fromOffset = function (n) {
                                                        var point = Editor$AgdaModeVscode.pointAtOffset(textEditor, n);
                                                        return /* tuple */[
                                                                Editor$AgdaModeVscode.Point.line(point),
                                                                Editor$AgdaModeVscode.Point.column(point)
                                                              ];
                                                      };
                                                      var toOffset = function (line, col) {
                                                        return Editor$AgdaModeVscode.offsetAtPoint(textEditor, Editor$AgdaModeVscode.Point.make(line, col));
                                                      };
                                                      Assert$BsMocha.deep_equal(undefined, fromOffset(toOffset(0, 0)), /* tuple */[
                                                            0,
                                                            0
                                                          ]);
                                                      Assert$BsMocha.deep_equal(undefined, fromOffset(toOffset(0, 1)), /* tuple */[
                                                            0,
                                                            2
                                                          ]);
                                                      Assert$BsMocha.deep_equal(undefined, fromOffset(toOffset(0, 2)), /* tuple */[
                                                            0,
                                                            2
                                                          ]);
                                                      Assert$BsMocha.deep_equal(undefined, fromOffset(toOffset(0, 3)), /* tuple */[
                                                            0,
                                                            3
                                                          ]);
                                                      Assert$BsMocha.deep_equal(undefined, fromOffset(toOffset(0, 4)), /* tuple */[
                                                            0,
                                                            5
                                                          ]);
                                                      Assert$BsMocha.deep_equal(undefined, fromOffset(toOffset(0, 5)), /* tuple */[
                                                            0,
                                                            5
                                                          ]);
                                                      Assert$BsMocha.deep_equal(undefined, fromOffset(toOffset(0, 6)), /* tuple */[
                                                            0,
                                                            6
                                                          ]);
                                                      Assert$BsMocha.deep_equal(undefined, fromOffset(toOffset(0, 7)), /* tuple */[
                                                            0,
                                                            7
                                                          ]);
                                                      Assert$BsMocha.deep_equal(undefined, fromOffset(toOffset(0, 8)), /* tuple */[
                                                            0,
                                                            9
                                                          ]);
                                                      return Assert$BsMocha.deep_equal(undefined, fromOffset(toOffset(0, 9)), /* tuple */[
                                                                  0,
                                                                  9
                                                                ]);
                                                    })));
                                  }));
                    }));
      }));

var Assert;

var P;

exports.Assert = Assert;
exports.P = P;
exports.openTextEditor = openTextEditor;
exports.getTextToOffsetAt = getTextToOffsetAt;
/*  Not a pure module */
