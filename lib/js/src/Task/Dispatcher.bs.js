// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Task$AgdaModeVscode = require("./Task.bs.js");
var Util$AgdaModeVscode = require("../Util/Util.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Runner$AgdaModeVscode = require("./Runner.bs.js");
var Response$AgdaModeVscode = require("../Response.bs.js");
var Handle__Goal$AgdaModeVscode = require("./Handle__Goal.bs.js");
var Handle__Error$AgdaModeVscode = require("./Handle__Error.bs.js");
var Handle__Command$AgdaModeVscode = require("./Handle__Command.bs.js");
var Handle__Response$AgdaModeVscode = require("./Handle__Response.bs.js");

function Impl(Editor) {
  var ErrorHandler = Handle__Error$AgdaModeVscode.Impl(Editor);
  var GoalHandler = Handle__Goal$AgdaModeVscode.Impl(Editor);
  var CommandHandler = Handle__Command$AgdaModeVscode.Impl(Editor);
  var ResponseHandler = Handle__Response$AgdaModeVscode.Impl(Editor);
  var Task = Task$AgdaModeVscode.Impl(Editor);
  var sendAgdaRequest = function (runTasks, state, req) {
    var match = $$Promise.pending(undefined);
    var resolve = match[1];
    var promise = match[0];
    var handle = {
      contents: undefined
    };
    var handler = function (error) {
      if (error.tag) {
        return Curry._1(runTasks, Curry._1(ErrorHandler.handle, /* Connection */Caml_chrome_debugger.variant("Connection", 0, [error[0]])));
      }
      var match = error[0];
      if (match) {
        var error$1 = match[0];
        if (error$1.tag) {
          return Curry._1(runTasks, Curry._1(ErrorHandler.handle, /* Parser */Caml_chrome_debugger.variant("Parser", 1, [error$1[0]])));
        }
        var response = error$1[0];
        console.log(">>> " + Response$AgdaModeVscode.toString(response));
        return Curry._1(runTasks, Curry._1(ResponseHandler.handle, response));
      }
      console.log(">>| ");
      return Curry._1(resolve, undefined);
    };
    return $$Promise.tap($$Promise.flatMap(Curry._2(Task.State.sendRequestToAgda, state, req), (function (connection) {
                      if (connection.tag) {
                        var tasks = Curry._1(ErrorHandler.handle, connection[0]);
                        Curry._1(runTasks, tasks);
                        return promise;
                      }
                      handle.contents = Curry._1(connection[0].emitter.on, handler);
                      return promise;
                    })), (function (param) {
                  return Belt_Option.forEach(handle.contents, (function (f) {
                                return Curry._1(f, undefined);
                              }));
                }));
  };
  var acquire = function (self, resource) {
    var queue = Runner$AgdaModeVscode.empty(self.runner);
    self.blockedQueues = /* :: */Caml_chrome_debugger.simpleVariant("::", [
        /* tuple */[
          resource,
          queue
        ],
        self.blockedQueues
      ]);
    
  };
  var addTasksBy = function (self, resource, tasks) {
    var go = function (param) {
      if (!param) {
        return /* tuple */[
                false,
                /* [] */0
              ];
      }
      var queues = param[1];
      var match = param[0];
      var queue0 = match[1];
      var kind0 = match[0];
      if (!queues) {
        if (kind0 === resource) {
          return /* tuple */[
                  true,
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        kind0,
                        queue0
                      ],
                      /* [] */0
                    ])
                ];
        } else {
          return /* tuple */[
                  false,
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        kind0,
                        queue0
                      ],
                      /* [] */0
                    ])
                ];
        }
      }
      if (kind0 === resource) {
        return /* tuple */[
                true,
                /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* tuple */[
                      kind0,
                      queue0
                    ],
                    queues
                  ])
              ];
      }
      var match$1 = go(queues);
      var queues$1 = match$1[1];
      if (match$1[0]) {
        return /* tuple */[
                false,
                /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* tuple */[
                      kind0,
                      Belt_List.concat(queue0, tasks)
                    ],
                    queues$1
                  ])
              ];
      } else {
        return /* tuple */[
                false,
                /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* tuple */[
                      kind0,
                      queue0
                    ],
                    queues$1
                  ])
              ];
      }
    };
    var match = go(self.blockedQueues);
    if (match[0]) {
      return Runner$AgdaModeVscode.pushAndRun(self.runner, tasks);
    } else {
      self.blockedQueues = match[1];
      return ;
    }
  };
  var addTasks = function (self, tasks) {
    var go = function (param) {
      if (!param) {
        return /* tuple */[
                true,
                /* [] */0
              ];
      }
      var queues = param[1];
      var match = param[0];
      var queue = match[1];
      var kind = match[0];
      if (!queues) {
        return /* tuple */[
                false,
                /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* tuple */[
                      kind,
                      Belt_List.concat(queue, tasks)
                    ],
                    /* [] */0
                  ])
              ];
      }
      var match$1 = go(queues);
      return /* tuple */[
              false,
              /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    kind,
                    queue
                  ],
                  match$1[1]
                ])
            ];
    };
    var match = go(self.blockedQueues);
    if (match[0]) {
      return Runner$AgdaModeVscode.pushAndRun(self.runner, tasks);
    } else {
      self.blockedQueues = match[1];
      return ;
    }
  };
  var release = function (self, resource) {
    var unblock = function (kind, param) {
      if (!param) {
        return /* tuple */[
                undefined,
                /* [] */0
              ];
      }
      var xs = param[1];
      var match = param[0];
      var x = match[1];
      var kind$prime = match[0];
      if (Caml_obj.caml_equal(kind, kind$prime)) {
        return /* tuple */[
                x,
                xs
              ];
      }
      var match$1 = unblock(kind, xs);
      var others = match$1[1];
      var queue = match$1[0];
      if (queue !== undefined) {
        return /* tuple */[
                undefined,
                /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* tuple */[
                      kind$prime,
                      Belt_List.concat(x, queue)
                    ],
                    others
                  ])
              ];
      } else {
        return /* tuple */[
                undefined,
                /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* tuple */[
                      kind$prime,
                      x
                    ],
                    others
                  ])
              ];
      }
    };
    var match = unblock(resource, self.blockedQueues);
    var queue = match[0];
    self.blockedQueues = match[1];
    if (queue !== undefined) {
      return Runner$AgdaModeVscode.pushAndRun(self.runner, queue);
    } else {
      return Runner$AgdaModeVscode.run(self.runner);
    }
  };
  var logStatus = function (self, task) {
    if (task !== undefined) {
      console.log("\nTask: " + (Curry._1(Task.toString, task) + ("\nRunner: " + (Util$AgdaModeVscode.Pretty.list(Belt_List.map(self.runner.queue, Task.toString)) + "\n==============================="))));
    } else {
      console.log("\nRunner: " + (Util$AgdaModeVscode.Pretty.list(Belt_List.map(self.runner.queue, Task.toString)) + "\n==============================="));
    }
    return Belt_List.forEach(self.blockedQueues, (function (param) {
                  if (param[0]) {
                    console.log("View " + Util$AgdaModeVscode.Pretty.list(Belt_List.map(param[1], Task.toString)));
                    return ;
                  } else {
                    console.log("Agda " + Util$AgdaModeVscode.Pretty.list(Belt_List.map(param[1], Task.toString)));
                    return ;
                  }
                }));
  };
  var blockedBy = function (self, resource) {
    if (Belt_List.length(self.blockedQueues) !== 0) {
      return Belt_List.some(self.blockedQueues, (function (param) {
                    return resource === param[0];
                  }));
    } else {
      return false;
    }
  };
  var make = function (state) {
    var self = {
      runner: Runner$AgdaModeVscode.make(undefined),
      blockedQueues: /* [] */0
    };
    var classifyTask = function (task) {
      logStatus(self, task);
      if (typeof task === "number") {
        return $$Promise.map(Curry._1(Task.State.destroy, state), (function (param) {
                      return false;
                    }));
      }
      switch (task.tag | 0) {
        case /* SendRequest */0 :
            if (blockedBy(self, /* Agda */0)) {
              return $$Promise.resolved(false);
            } else {
              acquire(self, /* Agda */0);
              $$Promise.get(sendAgdaRequest((function (tasks) {
                          logStatus(self, task);
                          return addTasksBy(self, /* Agda */0, tasks);
                        }), state, task[0]), (function (param) {
                      return release(self, /* Agda */0);
                    }));
              return $$Promise.resolved(true);
            }
        case /* ViewReq */1 :
            var callback = task[1];
            if (blockedBy(self, /* View */1)) {
              console.log("BLOCKED BY VIEW");
              return $$Promise.resolved(false);
            } else {
              acquire(self, /* View */1);
              return $$Promise.map(Curry._2(Task.State.sendRequestToView, state, task[0]), (function (response) {
                            addTasksBy(self, /* View */1, Curry._1(callback, response));
                            release(self, /* View */1);
                            return true;
                          }));
            }
        case /* ViewEvent */2 :
            var tasks = task[0] ? /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* Terminate */0,
                  /* [] */0
                ]) : /* [] */0;
            Runner$AgdaModeVscode.pushAndRun(self.runner, tasks);
            return $$Promise.resolved(true);
        case /* Error */3 :
            var tasks$1 = Curry._1(ErrorHandler.handle, task[0]);
            Runner$AgdaModeVscode.pushAndRun(self.runner, tasks$1);
            return $$Promise.resolved(true);
        case /* Goal */4 :
            var tasks$2 = Curry._1(GoalHandler.handle, task[0]);
            Runner$AgdaModeVscode.pushAndRun(self.runner, tasks$2);
            return $$Promise.resolved(true);
        case /* WithState */5 :
            return $$Promise.map(Curry._1(task[0], state), (function (tasks) {
                          Runner$AgdaModeVscode.pushAndRun(self.runner, tasks);
                          return true;
                        }));
        case /* Debug */6 :
            var tasks_000 = Curry._2(Task.displayWarning, "Debug", task[0]);
            var tasks$3 = /* :: */Caml_chrome_debugger.simpleVariant("::", [
                tasks_000,
                /* [] */0
              ]);
            Runner$AgdaModeVscode.pushAndRun(self.runner, tasks$3);
            return $$Promise.resolved(true);
        
      }
    };
    Runner$AgdaModeVscode.setup(self.runner, classifyTask);
    return self;
  };
  var dispatchCommand = function (self, state, command) {
    logStatus(self, undefined);
    var CommandHandler = Handle__Command$AgdaModeVscode.Impl(Editor);
    if (typeof command === "number" && command >= 8) {
      if (!state.inputMethod.activated) {
        return $$Promise.get(Curry._2(Task.State.sendRequestToView, state, /* InterruptQuery */2), (function (param) {
                      
                    }));
      }
      var tasks = Curry._1(CommandHandler.handle, /* InputSymbol */Caml_chrome_debugger.variant("InputSymbol", 4, [/* Deactivate */1]));
      return addTasks(self, tasks);
    }
    var tasks$1 = Curry._1(CommandHandler.handle, command);
    return addTasks(self, tasks$1);
  };
  var destroy = function (self) {
    return Runner$AgdaModeVscode.terminate(self.runner);
  };
  return {
          ErrorHandler: ErrorHandler,
          GoalHandler: GoalHandler,
          CommandHandler: CommandHandler,
          ResponseHandler: ResponseHandler,
          Task: Task,
          sendAgdaRequest: sendAgdaRequest,
          acquire: acquire,
          addTasksBy: addTasksBy,
          addTasks: addTasks,
          release: release,
          logStatus: logStatus,
          blockedBy: blockedBy,
          make: make,
          dispatchCommand: dispatchCommand,
          destroy: destroy
        };
}

exports.Impl = Impl;
/* Promise Not a pure module */
