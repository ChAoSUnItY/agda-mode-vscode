// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var VSCode = require("bs-vscode/lib/js/src/VSCode.bs.js");
var Vscode = require("vscode");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Chan$AgdaModeVscode = require("../../Util/Chan.bs.js");
var VscodeLanguageclient = require("vscode-languageclient");
var Connection__LSP__Binding$AgdaModeVscode = require("./Connection__LSP__Binding.bs.js");

var errorChan = Chan$AgdaModeVscode.make(undefined);

var dataChan = Chan$AgdaModeVscode.make(undefined);

function onError(callback) {
  return new Vscode.Disposable(Chan$AgdaModeVscode.on(errorChan, (function (e) {
                    return Curry._1(callback, {
                                TAG: 2,
                                _0: e,
                                [Symbol.for("name")]: "Connection"
                              });
                  })));
}

function onResponse(callback) {
  return new Vscode.Disposable(Chan$AgdaModeVscode.on(dataChan, callback));
}

function sendRequest(self, data) {
  return $$Promise.mapError($$Promise.flatMapOk($$Promise.Js.toResult(self.client.onReady()), (function (param) {
                    return $$Promise.Js.toResult(self.client.sendRequest("agda", data));
                  })), (function (exn) {
                return {
                        TAG: 2,
                        _0: exn,
                        [Symbol.for("name")]: "Connection"
                      };
              }));
}

function destroy(self) {
  self.subscription.dispose();
  return $$Promise.map($$Promise.Js.toResult(self.client.stop()), (function (param) {
                
              }));
}

function make(method) {
  var serverOptions;
  serverOptions = method.TAG === /* ViaStdIO */0 ? Connection__LSP__Binding$AgdaModeVscode.ServerOptions.makeWithCommand(method._0) : Connection__LSP__Binding$AgdaModeVscode.ServerOptions.makeWithStreamInfo(method._0);
  var documentSelector = [VSCode.StringOr.others({
          language: "agda",
          pattern: undefined,
          scheme: "file"
        })];
  var synchronize = Vscode.workspace.createFileSystemWatcher('**/.clientrc', false, false, false);
  var errorHandler = Connection__LSP__Binding$AgdaModeVscode.ErrorHandler.make((function (exn, _msg, _count) {
          Chan$AgdaModeVscode.emit(errorChan, exn);
          return /* Shutdown */1;
        }), (function (param) {
          return /* DoNotRestart */0;
        }));
  var clientOptions = Connection__LSP__Binding$AgdaModeVscode.LanguageClientOptions.make(documentSelector, synchronize, errorHandler);
  var languageClient = new VscodeLanguageclient.LanguageClient("agdaLanguageServer", "Agda Language Server", serverOptions, clientOptions);
  var self_subscription = languageClient.start();
  var self = {
    client: languageClient,
    subscription: self_subscription,
    method: method
  };
  return $$Promise.map($$Promise.race({
                  hd: $$Promise.Js.toResult(languageClient.onReady()),
                  tl: {
                    hd: $$Promise.map(Chan$AgdaModeVscode.once(errorChan), (function (err) {
                            return {
                                    TAG: 1,
                                    _0: err,
                                    [Symbol.for("name")]: "Error"
                                  };
                          })),
                    tl: /* [] */0
                  }
                }), (function (result) {
                if (result.TAG !== /* Ok */0) {
                  return {
                          TAG: 1,
                          _0: {
                            TAG: 2,
                            _0: result._0,
                            [Symbol.for("name")]: "Connection"
                          },
                          [Symbol.for("name")]: "Error"
                        };
                }
                languageClient.onRequest("agda", (function (json) {
                        Chan$AgdaModeVscode.emit(dataChan, json);
                        return $$Promise.resolved(undefined);
                      }));
                return {
                        TAG: 0,
                        _0: self,
                        [Symbol.for("name")]: "Ok"
                      };
              }));
}

function getMethod(conn) {
  return conn.method;
}

var Module = {
  make: make,
  destroy: destroy,
  sendRequest: sendRequest,
  onResponse: onResponse,
  onError: onError,
  getMethod: getMethod
};

var Scheduler;

var $$Error;

var Binding;

exports.Scheduler = Scheduler;
exports.$$Error = $$Error;
exports.Binding = Binding;
exports.Module = Module;
exports.make = make;
exports.destroy = destroy;
exports.sendRequest = sendRequest;
exports.onResponse = onResponse;
exports.onError = onError;
exports.getMethod = getMethod;
/* errorChan Not a pure module */
