// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Glob = require("glob");
var Path = require("path");
var Curry = require("bs-platform/lib/js/curry.js");
var Mocha = require("mocha");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

var dirname = typeof __dirname === "undefined" ? undefined : __dirname;

var dirname$1 = dirname === undefined ? undefined : Caml_option.some(dirname);

var Mocha$1 = { };

var Glob$1 = { };

function run(param) {
  var mocha = new Mocha({
        ui: "bdd",
        color: true
      });
  var testsRoot = Belt_Option.mapWithDefault(dirname$1, "./", (function (dirname) {
          return Path.resolve(dirname, "tests");
        }));
  var match = $$Promise.pending(undefined);
  var resolve = match[1];
  Glob("**/*.js", {
        cwd: testsRoot
      }, (function (err, files) {
          if (!(err == null)) {
            return Curry._1(resolve, /* Error */Caml_chrome_debugger.variant("Error", 1, [err]));
          }
          Belt_Array.forEach(files, (function (file) {
                  mocha.addFile(Path.resolve(testsRoot, file));
                  
                }));
          try {
            mocha.run((function (failures) {
                    if (failures > 0) {
                      return Curry._1(resolve, /* Error */Caml_chrome_debugger.variant("Error", 1, [Js_exn.raiseError(String(failures) + " tests failed.")]));
                    } else {
                      return Curry._1(resolve, /* Ok */Caml_chrome_debugger.variant("Ok", 0, [undefined]));
                    }
                  }));
            return ;
          }
          catch (raw_exn){
            var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
            console.log(exn);
            return Curry._1(resolve, /* Error */Caml_chrome_debugger.variant("Error", 1, [exn]));
          }
        }));
  return match[0];
}

exports.dirname = dirname$1;
exports.Mocha = Mocha$1;
exports.Glob = Glob$1;
exports.run = run;
/* dirname Not a pure module */
