// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Js_array = require("rescript/lib/js/js_array.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Js_promise = require("rescript/lib/js/js_promise.js");
var Mocha$BsMocha = require("bs-mocha/lib/js/src/Mocha.bs.js");
var Assert$BsMocha = require("bs-mocha/lib/js/src/Assert.bs.js");
var Promise$BsMocha = require("bs-mocha/lib/js/src/Promise.bs.js");
var Parser$AgdaModeVscode = require("../../../src/Parser/Parser.bs.js");
var Test__Util$AgdaModeVscode = require("../Test__Util.bs.js");

function parseSExpression(breakpoints, input) {
  var output = {
    contents: []
  };
  var parser = Parser$AgdaModeVscode.SExpression.makeIncr(function (x) {
        if (!x) {
          return ;
        }
        var a = x._0;
        if (a.TAG === /* Ok */0) {
          Js_array.push(a._0, output.contents);
          return ;
        }
        var match = a._0;
        Assert$BsMocha.fail("Failed when parsing S-expression: " + Parser$AgdaModeVscode.$$Error.toString({
                  TAG: 0,
                  _0: match[0],
                  _1: match[1],
                  [Symbol.for("name")]: "SExpression"
                }));
      });
  Belt_Array.forEach(Belt_Array.concatMany(Belt_Array.map(Test__Util$AgdaModeVscode.Strings.breakInput(input.trim(), breakpoints), Parser$AgdaModeVscode.splitToLines)), (function (param) {
          return Parser$AgdaModeVscode.Incr.feed(parser, param);
        }));
  return output.contents;
}

Mocha$BsMocha.describe("when parsing S-expressions as a whole")(undefined, undefined, undefined, (function (param) {
        Belt_Array.forEach(Test__Util$AgdaModeVscode.Golden.getGoldenFilepathsSync("../../../../test/tests/Parser/SExpression"), (function (filepath) {
                Promise$BsMocha.it("should golden test " + filepath)(undefined, undefined, undefined, (function (param) {
                        return Js_promise.then_((function (raw) {
                                      var partial_arg = [];
                                      return Test__Util$AgdaModeVscode.Golden.compare(Test__Util$AgdaModeVscode.Golden.map(Test__Util$AgdaModeVscode.Golden.map(raw, (function (param) {
                                                            return parseSExpression(partial_arg, param);
                                                          })), (function (param) {
                                                        return Test__Util$AgdaModeVscode.Strings.unlinesWith(Parser$AgdaModeVscode.SExpression.toString, param);
                                                      })));
                                    }), Test__Util$AgdaModeVscode.Golden.readFile(filepath));
                      }));
              }));
      }));

Mocha$BsMocha.describe("when parsing S-expressions incrementally")(undefined, undefined, undefined, (function (param) {
        Belt_Array.forEach(Test__Util$AgdaModeVscode.Golden.getGoldenFilepathsSync("../../../../test/tests/Parser/SExpression"), (function (filepath) {
                Promise$BsMocha.it("should golden test " + filepath)(undefined, undefined, undefined, (function (param) {
                        return Js_promise.then_((function (raw) {
                                      var partial_arg = [
                                        3,
                                        23,
                                        171,
                                        217,
                                        1234,
                                        2342,
                                        3453
                                      ];
                                      return Test__Util$AgdaModeVscode.Golden.compare(Test__Util$AgdaModeVscode.Golden.map(Test__Util$AgdaModeVscode.Golden.map(raw, (function (param) {
                                                            return parseSExpression(partial_arg, param);
                                                          })), (function (param) {
                                                        return Test__Util$AgdaModeVscode.Strings.unlinesWith(Parser$AgdaModeVscode.SExpression.toString, param);
                                                      })));
                                    }), Test__Util$AgdaModeVscode.Golden.readFile(filepath));
                      }));
              }));
      }));

exports.parseSExpression = parseSExpression;
/*  Not a pure module */
