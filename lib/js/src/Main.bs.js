// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Vscode = require("vscode");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var IM$AgdaModeVscode = require("./InputMethod/IM.bs.js");
var Chan$AgdaModeVscode = require("./Util/Chan.bs.js");
var State$AgdaModeVscode = require("./State.bs.js");
var Config$AgdaModeVscode = require("./Config.bs.js");
var Editor$AgdaModeVscode = require("./Editor.bs.js");
var Parser$AgdaModeVscode = require("./Parser.bs.js");
var Command$AgdaModeVscode = require("./Command.bs.js");
var Registry$AgdaModeVscode = require("./Registry.bs.js");
var Decoration$AgdaModeVscode = require("./Decoration.bs.js");
var Highlighting$AgdaModeVscode = require("./Highlighting.bs.js");
var State__Command$AgdaModeVscode = require("./State/State__Command.bs.js");
var ViewController$AgdaModeVscode = require("./ViewController.bs.js");
var State__InputMethod$AgdaModeVscode = require("./State/State__InputMethod.bs.js");

function isAgda(filepath) {
  var filepath$1 = Parser$AgdaModeVscode.filepath(filepath);
  return /\.agda$|\.lagda/i.test(filepath$1);
}

function activateWithoutContext(disposables, extensionPath) {
  console.log("[ extention ] activate");
  var chan = Chan$AgdaModeVscode.make(undefined);
  disposables.push(Vscode.workspace.onDidCloseTextDocument(function (textDoc) {
            Registry$AgdaModeVscode.destroy(textDoc.fileName);
            
          }));
  disposables.push(Vscode.workspace.onDidRenameFiles(function ($$event) {
            return Belt_Array.forEach($$event.files, (function (file) {
                          var oldName = file.oldUri.path;
                          var newName = file.newUri.path;
                          if (Registry$AgdaModeVscode.contains(oldName)) {
                            if (isAgda(newName)) {
                              return Registry$AgdaModeVscode.rename(oldName, newName);
                            } else {
                              Registry$AgdaModeVscode.destroy(oldName);
                              return ;
                            }
                          }
                          
                        }));
          }));
  var onDidChangeActivation = function (callback) {
    var previous = {
      contents: Vscode.window.activeTextEditor
    };
    return Vscode.window.onDidChangeActiveTextEditor(function (next) {
                if (Caml_obj.caml_notequal(Belt_Option.map(Belt_Option.map(next, (function (prim) {
                                  return prim.document;
                                })), (function ($$document) {
                              return Parser$AgdaModeVscode.filepath($$document.fileName);
                            })), Belt_Option.map(Belt_Option.map(previous.contents, (function (prim) {
                                  return prim.document;
                                })), (function ($$document) {
                              return Parser$AgdaModeVscode.filepath($$document.fileName);
                            })))) {
                  Curry._2(callback, previous.contents, next);
                  previous.contents = next;
                  return ;
                }
                
              });
  };
  disposables.push(onDidChangeActivation(function (_prev, next) {
            return Belt_Option.forEach(Belt_Option.flatMap(next, Registry$AgdaModeVscode.getByEditor), (function (state) {
                          Belt_Option.forEach(next, (function (editor) {
                                  state.editor = editor;
                                  State$AgdaModeVscode.View.reveal(undefined);
                                  State__Command$AgdaModeVscode.dispatchCommand(state, /* Refresh */3);
                                  
                                }));
                          
                        }));
          }));
  var makeAndAddToRegistry = function (editor, fileName) {
    var state = State$AgdaModeVscode.make(extensionPath, chan, editor);
    var subscribe = function (disposable) {
      state.subscriptions.push(disposable);
      
    };
    subscribe(ViewController$AgdaModeVscode.onEvent(function ($$event) {
              State__Command$AgdaModeVscode.dispatchCommand(state, {
                    TAG: 8,
                    _0: $$event,
                    [Symbol.for("name")]: "EventFromView"
                  });
              
            }));
    subscribe(Vscode.window.onDidChangeTextEditorSelection(function ($$event) {
              var $$document = editor.document;
              var intervals = Belt_Array.map($$event.selections, (function (selection) {
                      return [
                              Editor$AgdaModeVscode.Position.toOffset($$document, selection.start),
                              Editor$AgdaModeVscode.Position.toOffset($$document, selection.end)
                            ];
                    }));
              State__InputMethod$AgdaModeVscode.select(state, intervals);
              
            }));
    subscribe(Vscode.workspace.onDidChangeTextDocument(function ($$event) {
              var changes = IM$AgdaModeVscode.Input.fromTextDocumentChangeEvent(editor, $$event);
              State__InputMethod$AgdaModeVscode.keyUpdateEditorIM(state, changes);
              
            }));
    $$Promise.flatMap(Chan$AgdaModeVscode.once(state.onRemoveFromRegistry), (function (param) {
            return Registry$AgdaModeVscode.destroy(fileName);
          }));
    subscribe(Editor$AgdaModeVscode.Provider.registerDefinitionProvider(function (fileName, position) {
              var currentFileName = Parser$AgdaModeVscode.filepath(state.document.fileName);
              if (fileName === currentFileName) {
                return Decoration$AgdaModeVscode.lookupSrcLoc(state.decoration, position);
              }
              
            }));
    subscribe(Editor$AgdaModeVscode.Provider.registerHoverProvider(function (fileName, point) {
              var currentFileName = Parser$AgdaModeVscode.filepath(state.document.fileName);
              if (fileName !== currentFileName) {
                return ;
              }
              var range = new Vscode.Range(point, point);
              return Caml_option.some($$Promise.resolved([
                              [""],
                              range
                            ]));
            }));
    var tokenTypes = Highlighting$AgdaModeVscode.Aspect.TokenType.enumurate;
    var tokenModifiers = Highlighting$AgdaModeVscode.Aspect.TokenModifier.enumurate;
    subscribe(Editor$AgdaModeVscode.Provider.registerSemnaticTokenProvider((function (fileName, pushToken) {
                var useSemanticHighlighting = Config$AgdaModeVscode.getSemanticHighlighting(undefined);
                var $$document = editor.document;
                var currentFileName = Parser$AgdaModeVscode.filepath($$document.fileName);
                if (useSemanticHighlighting && fileName === currentFileName) {
                  return Caml_option.some(Decoration$AgdaModeVscode.generateSemanticTokens(state.decoration, state.editor, pushToken));
                }
                
              }), [
              tokenTypes,
              tokenModifiers
            ]));
    return Registry$AgdaModeVscode.add(fileName, state);
  };
  var registerCommand = function (name, callback) {
    return Vscode.commands.registerCommand("agda-mode." + name, (function (param) {
                  return Belt_Option.map(Vscode.window.activeTextEditor, (function (editor) {
                                var fileName = Parser$AgdaModeVscode.filepath(editor.document.fileName);
                                return Curry._2(callback, editor, fileName);
                              }));
                }));
  };
  Belt_Array.forEach(Command$AgdaModeVscode.names, (function (param) {
          var name = param[1];
          var command = param[0];
          disposables.push(registerCommand(name, (function (editor, fileName) {
                      if (!isAgda(fileName)) {
                        return $$Promise.resolved(undefined);
                      }
                      console.log("[ command ] " + name);
                      var tmp;
                      var exit = 0;
                      if (typeof command === "number") {
                        switch (command) {
                          case /* Load */0 :
                              exit = 1;
                              break;
                          case /* Quit */1 :
                              tmp = Registry$AgdaModeVscode.destroy(fileName);
                              break;
                          case /* Restart */2 :
                              tmp = $$Promise.map(Registry$AgdaModeVscode.destroy(fileName), (function (param) {
                                      return makeAndAddToRegistry(editor, fileName);
                                    }));
                              break;
                          default:
                            tmp = $$Promise.resolved(undefined);
                        }
                      } else if (command.TAG === /* InputMethod */13) {
                        var match = command._0;
                        if (typeof match === "number" && match === 0) {
                          exit = 1;
                        } else {
                          tmp = $$Promise.resolved(undefined);
                        }
                      } else {
                        tmp = $$Promise.resolved(undefined);
                      }
                      if (exit === 1) {
                        var match$1 = Registry$AgdaModeVscode.get(fileName);
                        if (match$1 !== undefined) {
                          
                        } else {
                          makeAndAddToRegistry(editor, fileName);
                        }
                        tmp = $$Promise.resolved(undefined);
                      }
                      return $$Promise.flatMap(tmp, (function (param) {
                                    var state = Registry$AgdaModeVscode.get(fileName);
                                    if (state !== undefined) {
                                      return State__Command$AgdaModeVscode.dispatchCommand(state, command);
                                    } else {
                                      return $$Promise.resolved(undefined);
                                    }
                                  }));
                    })));
          
        }));
  return chan;
}

function activate(context) {
  var disposables = context.subscriptions;
  var extensionPath = context.extensionPath;
  return activateWithoutContext(disposables, extensionPath);
}

exports.isAgda = isAgda;
exports.activateWithoutContext = activateWithoutContext;
exports.activate = activate;
/* vscode Not a pure module */
