// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Vscode = require("vscode");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var IM$AgdaModeVscode = require("./InputMethod/IM.bs.js");
var Chan$AgdaModeVscode = require("./Util/Chan.bs.js");
var Goal$AgdaModeVscode = require("./Goal.bs.js");
var View$AgdaModeVscode = require("./View.bs.js");
var Config$AgdaModeVscode = require("./Config.bs.js");
var Editor$AgdaModeVscode = require("./Editor.bs.js");
var Parser$AgdaModeVscode = require("./Parser.bs.js");
var Request$AgdaModeVscode = require("./Request.bs.js");
var Connection$AgdaModeVscode = require("./Connection.bs.js");
var Decoration$AgdaModeVscode = require("./Decoration.bs.js");
var ViewController$AgdaModeVscode = require("./ViewController.bs.js");

function make(param) {
  return {
          queue: [],
          busy: false
        };
}

function kickStart(self) {
  if (self.busy) {
    return ;
  }
  var thunk = self.queue.shift();
  if (thunk !== undefined) {
    self.busy = true;
    return $$Promise.get(Curry._1(thunk, undefined), (function (param) {
                  self.busy = false;
                  return kickStart(self);
                }));
  }
  
}

function push(self, sendRequestAndHandleResponses, request) {
  var match = $$Promise.pending(undefined);
  var resolve = match[1];
  var thunk = function (param) {
    return $$Promise.tap(Curry._1(sendRequestAndHandleResponses, request), resolve);
  };
  self.queue.push(thunk);
  kickStart(self);
  return match[0];
}

var RequestQueue = {
  make: make,
  push: push
};

function setPrompt(value) {
  Vscode.commands.executeCommand("setContext", "agdaModePrompting", value);
  
}

function setIM(value) {
  Vscode.commands.executeCommand("setContext", "agdaModeTyping", value);
  
}

var Context = {
  setPrompt: setPrompt,
  setIM: setIM
};

function sendEvent(state, $$event) {
  state.viewCache = {
    TAG: 0,
    _0: $$event,
    [Symbol.for("name")]: "Event"
  };
  return ViewController$AgdaModeVscode.sendEvent(state.view, $$event);
}

function activate(state) {
  return Belt_Option.forEach(state.viewCache, (function (content) {
                if (content.TAG === /* Event */0) {
                  ViewController$AgdaModeVscode.sendEvent(state.view, content._0);
                  return ;
                }
                ViewController$AgdaModeVscode.sendRequest(state.view, content._0, content._1);
                
              }));
}

function reveal(state) {
  return ViewController$AgdaModeVscode.reveal(state.view);
}

function display(state, header, body) {
  return sendEvent(state, {
              TAG: 0,
              _0: header,
              _1: body,
              [Symbol.for("name")]: "Display"
            });
}

function displayEmacs(state, kind, header, body) {
  return sendEvent(state, {
              TAG: 0,
              _0: header,
              _1: {
                TAG: 1,
                _0: kind,
                _1: View$AgdaModeVscode.Header.toString(header),
                _2: body,
                [Symbol.for("name")]: "Emacs"
              },
              [Symbol.for("name")]: "Display"
            });
}

function displayOutOfGoalError(state) {
  return display(state, {
              TAG: 3,
              _0: "Out of goal",
              [Symbol.for("name")]: "Error"
            }, {
              TAG: 0,
              _0: "Please place the cursor in a goal",
              [Symbol.for("name")]: "Plain"
            });
}

function displayConnectionError(state, error) {
  var match = Connection$AgdaModeVscode.$$Error.toString(error);
  return display(state, {
              TAG: 3,
              _0: "Connection Error: " + match[0],
              [Symbol.for("name")]: "Error"
            }, {
              TAG: 0,
              _0: match[1],
              [Symbol.for("name")]: "Plain"
            });
}

function updateIM(state, $$event) {
  return sendEvent(state, {
              TAG: 2,
              _0: $$event,
              [Symbol.for("name")]: "InputMethod"
            });
}

function updatePromptIM(state, content) {
  return sendEvent(state, {
              TAG: 1,
              _0: content,
              [Symbol.for("name")]: "PromptIMUpdate"
            });
}

function prompt(state, header, prompt$1, callbackOnPromptSuccess) {
  Vscode.commands.executeCommand("setContext", "agdaModePrompting", true);
  ViewController$AgdaModeVscode.focus(state.view);
  var request = {
    _0: header,
    _1: prompt$1,
    [Symbol.for("name")]: "Prompt"
  };
  var callback = function (response) {
    if (response) {
      return $$Promise.map(Curry._1(callbackOnPromptSuccess, response._0), (function (param) {
                    Vscode.commands.executeCommand("setContext", "agdaModePrompting", false);
                    return Editor$AgdaModeVscode.focus(state.document);
                  }));
    } else {
      return $$Promise.resolved(undefined);
    }
  };
  state.viewCache = {
    TAG: 1,
    _0: request,
    _1: callback,
    [Symbol.for("name")]: "Request"
  };
  return ViewController$AgdaModeVscode.sendRequest(state.view, request, callback);
}

function interruptPrompt(state) {
  return sendEvent(state, /* PromptInterrupt */0);
}

var View = {
  activate: activate,
  reveal: reveal,
  display: display,
  displayEmacs: displayEmacs,
  displayOutOfGoalError: displayOutOfGoalError,
  displayConnectionError: displayConnectionError,
  updateIM: updateIM,
  updatePromptIM: updatePromptIM,
  prompt: prompt,
  interruptPrompt: interruptPrompt
};

function reconnect(state) {
  var conn = state.connection;
  switch (conn.TAG | 0) {
    case /* Emacs */0 :
        return $$Promise.tapOk($$Promise.flatMap(Connection$AgdaModeVscode.Emacs.destroy(conn._0), Connection$AgdaModeVscode.Emacs.make), (function (conn) {
                      state.connection = {
                        TAG: 0,
                        _0: conn,
                        [Symbol.for("name")]: "Emacs"
                      };
                      
                    }));
    case /* LSP */1 :
    case /* Nothing */2 :
        return $$Promise.resolved({
                    TAG: 1,
                    _0: /* NotConnectedYet */1,
                    [Symbol.for("name")]: "Error"
                  });
    
  }
}

function destroy(state) {
  var conn = state.connection;
  switch (conn.TAG | 0) {
    case /* Emacs */0 :
        return Connection$AgdaModeVscode.Emacs.destroy(conn._0);
    case /* LSP */1 :
    case /* Nothing */2 :
        return $$Promise.resolved(undefined);
    
  }
}

function sendRequest(state, handleResponse, request) {
  return push(state.agdaRequestQueue, (function (param) {
                var handle = {
                  contents: undefined
                };
                var handleResult = function (result) {
                  if (result.TAG === /* Ok */0) {
                    return Curry._1(handleResponse, result._0);
                  }
                  var match = Connection$AgdaModeVscode.$$Error.toString(result._0);
                  return display(state, {
                              TAG: 3,
                              _0: match[0],
                              [Symbol.for("name")]: "Error"
                            }, {
                              TAG: 0,
                              _0: match[1],
                              [Symbol.for("name")]: "Plain"
                            });
                };
                var conn = state.connection;
                switch (conn.TAG | 0) {
                  case /* Emacs */0 :
                      var conn$1 = conn._0;
                      var promise = Connection$AgdaModeVscode.Emacs.onResponse(conn$1, handleResult);
                      Connection$AgdaModeVscode.Emacs.sendRequest(conn$1, state.document, param);
                      return $$Promise.tap(promise, (function (param) {
                                    return Belt_Option.forEach(handle.contents, (function (destroyListener) {
                                                  return Curry._1(destroyListener, undefined);
                                                }));
                                  }));
                  case /* LSP */1 :
                      var filepath = Parser$AgdaModeVscode.filepath(state.document.fileName);
                      var libraryPath = Config$AgdaModeVscode.getLibraryPath(undefined);
                      var highlightingMethod = Config$AgdaModeVscode.getHighlightingMethod(undefined);
                      var backend = Config$AgdaModeVscode.getBackend(undefined);
                      var encoded = Request$AgdaModeVscode.encode(state.document, conn._0, filepath, backend, libraryPath, highlightingMethod, param);
                      return $$Promise.flatMap(Connection$AgdaModeVscode.LSP.sendRequest(encoded), (function (result) {
                                    if (result.TAG !== /* Ok */0) {
                                      return displayConnectionError(state, result._0);
                                    }
                                    console.log("Response: " + result._0);
                                    return $$Promise.resolved(undefined);
                                  }));
                  case /* Nothing */2 :
                      return $$Promise.resolved(undefined);
                  
                }
              }), request);
}

var Connection = {
  reconnect: reconnect,
  destroy: destroy,
  sendRequest: sendRequest
};

function destroy$1(state, alsoRemoveFromRegistry) {
  if (alsoRemoveFromRegistry) {
    Chan$AgdaModeVscode.emit(state.onRemoveFromRegistry, undefined);
  }
  Chan$AgdaModeVscode.destroy(state.onRemoveFromRegistry);
  Belt_Array.forEach(state.goals, Goal$AgdaModeVscode.destroy);
  Decoration$AgdaModeVscode.destroy(state.decoration);
  Belt_Array.forEach(state.subscriptions, (function (prim) {
          return prim.dispose();
        }));
  return destroy(state);
}

function make$1(chan, editor, view, connection) {
  return {
          editor: editor,
          document: editor.document,
          view: view,
          connection: connection,
          viewCache: undefined,
          goals: [],
          decoration: Decoration$AgdaModeVscode.make(undefined),
          cursor: undefined,
          editorIM: IM$AgdaModeVscode.make(chan),
          promptIM: IM$AgdaModeVscode.make(chan),
          subscriptions: [],
          onRemoveFromRegistry: Chan$AgdaModeVscode.make(undefined),
          agdaRequestQueue: {
            queue: [],
            busy: false
          }
        };
}

exports.RequestQueue = RequestQueue;
exports.Context = Context;
exports.View = View;
exports.Connection = Connection;
exports.destroy = destroy$1;
exports.make = make$1;
/* vscode Not a pure module */
