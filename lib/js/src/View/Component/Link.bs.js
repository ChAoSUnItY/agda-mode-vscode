// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var React = require("react");
var $$String = require("rescript/lib/js/string.js");
var Belt_List = require("rescript/lib/js/belt_List.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/lib/js/src/Json_encode.bs.js");
var Chan$AgdaModeVscode = require("../../Util/Chan.bs.js");
var Util$AgdaModeVscode = require("../../Util/Util.bs.js");
var Common$AgdaModeVscode = require("../Common.bs.js");

function toString(x) {
  if (x.TAG === /* SrcLoc */0) {
    return Common$AgdaModeVscode.AgdaRange.toString(x._0);
  } else {
    return "?" + String(x._0);
  }
}

var decode = Util$AgdaModeVscode.Decode.sum(function (x) {
      switch (x) {
        case "LinkHole" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (index) {
                                      return {
                                              TAG: 1,
                                              _0: index,
                                              [Symbol.for("name")]: "Hole"
                                            };
                                    }), Json_decode.$$int, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "LinkRange" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (range) {
                                      return {
                                              TAG: 0,
                                              _0: range,
                                              [Symbol.for("name")]: "SrcLoc"
                                            };
                                    }), Common$AgdaModeVscode.AgdaRange.decode, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        default:
          throw {
                RE_EXN_ID: Json_decode.DecodeError,
                _1: "[View.Link] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

function encode(x) {
  if (x.TAG === /* SrcLoc */0) {
    return Json_encode.object_({
                hd: [
                  "tag",
                  "LinkRange"
                ],
                tl: {
                  hd: [
                    "contents",
                    Common$AgdaModeVscode.AgdaRange.encode(x._0)
                  ],
                  tl: /* [] */0
                }
              });
  } else {
    return Json_encode.object_({
                hd: [
                  "tag",
                  "LinkHole"
                ],
                tl: {
                  hd: [
                    "contents",
                    x._0
                  ],
                  tl: /* [] */0
                }
              });
  }
}

var chan = Chan$AgdaModeVscode.make(undefined);

var eventContext = React.createContext(chan);

function makeProps(value, children, param) {
  return {
          value: value,
          children: children
        };
}

var make = eventContext.Provider;

var Provider = {
  makeProps: makeProps,
  make: make
};

var decode$1 = Util$AgdaModeVscode.Decode.sum(function (x) {
      switch (x) {
        case "JumpToTarget" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (link) {
                                      return {
                                              TAG: 0,
                                              _0: link,
                                              [Symbol.for("name")]: "JumpToTarget"
                                            };
                                    }), decode, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "MouseOut" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (link) {
                                      return {
                                              TAG: 2,
                                              _0: link,
                                              [Symbol.for("name")]: "MouseOut"
                                            };
                                    }), decode, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "MouseOver" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (link) {
                                      return {
                                              TAG: 1,
                                              _0: link,
                                              [Symbol.for("name")]: "MouseOver"
                                            };
                                    }), decode, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        default:
          throw {
                RE_EXN_ID: Json_decode.DecodeError,
                _1: "[Response.EventFromView] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

function encode$1(x) {
  switch (x.TAG | 0) {
    case /* JumpToTarget */0 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "JumpToTarget"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        encode(x._0)
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* MouseOver */1 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "MouseOver"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        encode(x._0)
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* MouseOut */2 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "MouseOut"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        encode(x._0)
                      ],
                      tl: /* [] */0
                    }
                  });
    
  }
}

var $$Event = {
  chan: chan,
  eventContext: eventContext,
  Provider: Provider,
  decode: decode$1,
  encode: encode$1
};

function Link(Props) {
  var targetOpt = Props.target;
  var jumpOpt = Props.jump;
  var hoverOpt = Props.hover;
  var classNameOpt = Props.className;
  var children = Props.children;
  var target = targetOpt !== undefined ? targetOpt : ({
        TAG: 0,
        _0: /* NoRange */0,
        [Symbol.for("name")]: "SrcLoc"
      });
  var jump = jumpOpt !== undefined ? jumpOpt : false;
  var hover = hoverOpt !== undefined ? hoverOpt : false;
  var className = classNameOpt !== undefined ? classNameOpt : [];
  var sanitizedTarget;
  if (target.TAG === /* SrcLoc */0) {
    var range = target._0;
    sanitizedTarget = range && range._1.length !== 0 ? ({
          TAG: 0,
          _0: range,
          [Symbol.for("name")]: "SrcLoc"
        }) : undefined;
  } else {
    sanitizedTarget = {
      TAG: 1,
      _0: target._0,
      [Symbol.for("name")]: "Hole"
    };
  }
  var link = React.useContext(eventContext);
  var className$1 = Belt_List.fromArray(className);
  if (sanitizedTarget !== undefined) {
    return React.createElement("span", {
                className: $$String.concat(" ", {
                      hd: "component-link",
                      tl: className$1
                    }),
                onClick: (function (param) {
                    if (jump) {
                      return Chan$AgdaModeVscode.emit(link, {
                                  TAG: 0,
                                  _0: sanitizedTarget,
                                  [Symbol.for("name")]: "JumpToTarget"
                                });
                    }
                    
                  }),
                onMouseOut: (function (param) {
                    if (hover) {
                      return Chan$AgdaModeVscode.emit(link, {
                                  TAG: 2,
                                  _0: sanitizedTarget,
                                  [Symbol.for("name")]: "MouseOut"
                                });
                    }
                    
                  }),
                onMouseOver: (function (param) {
                    if (hover) {
                      return Chan$AgdaModeVscode.emit(link, {
                                  TAG: 1,
                                  _0: sanitizedTarget,
                                  [Symbol.for("name")]: "MouseOver"
                                });
                    }
                    
                  })
              }, children);
  } else {
    return React.createElement("span", {
                className: $$String.concat(" ", className$1)
              }, children);
  }
}

var make$1 = Link;

exports.toString = toString;
exports.decode = decode;
exports.encode = encode;
exports.$$Event = $$Event;
exports.make = make$1;
/* decode Not a pure module */
