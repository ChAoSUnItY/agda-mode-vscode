// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Vscode = require("vscode");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");
var Chan$AgdaModeVscode = require("../Util/Chan.bs.js");
var Task$AgdaModeVscode = require("./Task.bs.js");
var State$AgdaModeVscode = require("../State.bs.js");
var Config$AgdaModeVscode = require("../Config.bs.js");
var Editor$AgdaModeVscode = require("../Editor.bs.js");
var Parser$AgdaModeVscode = require("../Parser.bs.js");
var Request$AgdaModeVscode = require("../Request.bs.js");
var EditorIM$AgdaModeVscode = require("../InputMethod/EditorIM.bs.js");
var Response$AgdaModeVscode = require("../Response.bs.js");
var TaskQueue$AgdaModeVscode = require("./TaskQueue.bs.js");
var Connection$AgdaModeVscode = require("../Connection.bs.js");
var Decoration$AgdaModeVscode = require("../Decoration.bs.js");
var Handle__Goal$AgdaModeVscode = require("./Handle__Goal.bs.js");
var Highlighting$AgdaModeVscode = require("../Highlighting.bs.js");
var Handle__Error$AgdaModeVscode = require("./Handle__Error.bs.js");
var Handle__Command$AgdaModeVscode = require("./Handle__Command.bs.js");
var Handle__Response$AgdaModeVscode = require("./Handle__Response.bs.js");
var View__Controller$AgdaModeVscode = require("../View__Controller.bs.js");
var Handle__Decoration$AgdaModeVscode = require("./Handle__Decoration.bs.js");
var Handle__InputMethod$AgdaModeVscode = require("./Handle__InputMethod.bs.js");

function sendAgdaRequest(addToAgdaQueue, addToDeferredQueue, state, request) {
  var match_0 = function (param) {
    
  };
  var match_1 = function (param, param$1) {
    
  };
  var log2 = match_1;
  var log = match_0;
  var match = $$Promise.pending(undefined);
  var resolve = match[1];
  var promise = match[0];
  var handle = {
    contents: undefined
  };
  var handler = function (x) {
    if (x.TAG) {
      return Curry._1(addToAgdaQueue, Handle__Error$AgdaModeVscode.handle({
                      TAG: 0,
                      _0: x._0,
                      [Symbol.for("name")]: "Connection"
                    }));
    }
    var match = x._0;
    if (match) {
      var error = match._0;
      if (error.TAG) {
        return Curry._1(addToAgdaQueue, Handle__Error$AgdaModeVscode.handle({
                        TAG: 1,
                        _0: error._0,
                        [Symbol.for("name")]: "Parser"
                      }));
      }
      var response = error._0;
      if (!response.TAG) {
        return Curry._1(addToAgdaQueue, Handle__Response$AgdaModeVscode.handle(response._0));
      }
      var response$1 = response._1;
      var priority = response._0;
      Curry._1(log, ">>> " + (String(priority) + (" " + Response$AgdaModeVscode.toString(response$1))));
      var tasks = Handle__Response$AgdaModeVscode.handle(response$1);
      return Curry._2(addToDeferredQueue, priority, tasks);
    }
    Curry._1(log, ">>| ");
    return Curry._1(resolve, undefined);
  };
  return $$Promise.tap($$Promise.flatMap($$Promise.mapOk(State$AgdaModeVscode.connect(state), (function (connection) {
                        var $$document = state.editor.document;
                        var version = connection.metadata.version;
                        var filepath = Parser$AgdaModeVscode.filepath($$document.fileName);
                        var libraryPath = Config$AgdaModeVscode.getLibraryPath(undefined);
                        var highlightingMethod = Config$AgdaModeVscode.getHighlightingMethod(undefined);
                        var backend = Config$AgdaModeVscode.getBackend(undefined);
                        var encoded = Request$AgdaModeVscode.encode($$document, version, filepath, backend, libraryPath, highlightingMethod, request);
                        Curry._2(log2, "<<<", encoded);
                        Connection$AgdaModeVscode.send(encoded, connection);
                        return connection;
                      })), (function (x) {
                    if (x.TAG) {
                      var tasks = Handle__Error$AgdaModeVscode.handle(x._0);
                      Curry._1(addToAgdaQueue, tasks);
                      return promise;
                    }
                    handle.contents = Chan$AgdaModeVscode.on(x._0.chan, handler);
                    return promise;
                  })), (function (param) {
                return Belt_Option.forEach(handle.contents, (function (f) {
                              return Curry._1(f, undefined);
                            }));
              }));
}

function executeTask(state, queue, task) {
  var keepRunning;
  if (typeof task === "number") {
    State$AgdaModeVscode.emitRemoveFromRegistry(state);
    keepRunning = $$Promise.resolved(false);
  } else {
    switch (task.TAG | 0) {
      case /* DispatchCommand */0 :
          var tasks = Handle__Command$AgdaModeVscode.handle(task._0);
          TaskQueue$AgdaModeVscode.addToTheFront(queue, tasks);
          keepRunning = $$Promise.resolved(true);
          break;
      case /* AgdaRequest */1 :
          if (TaskQueue$AgdaModeVscode.Agda.isOccupied(queue)) {
            console.log("[ panic ] There can only be 1 Agda request at a time!");
            console.log(TaskQueue$AgdaModeVscode.toString(Task$AgdaModeVscode.toString, queue));
            keepRunning = $$Promise.resolved(false);
          } else {
            var deferredTasks = [];
            console.time("$$$ Agda Request/Response");
            keepRunning = $$Promise.map($$Promise.flatMap(sendAgdaRequest((function (tasks) {
                            return TaskQueue$AgdaModeVscode.Agda.addToTheBack(queue, tasks);
                          }), (function (priority, tasks) {
                            deferredTasks.push([
                                  priority,
                                  tasks
                                ]);
                            
                          }), state, task._0), (function (param) {
                        return TaskQueue$AgdaModeVscode.Agda.close(queue);
                      })), (function (param) {
                    console.timeEnd("$$$ Agda Request/Response");
                    var deferredTasks$1 = Belt_List.concatMany(Belt_Array.map(deferredTasks.sort(function (x, y) {
                                  return Caml_primitive.caml_int_compare(x[0], y[0]);
                                }), (function (prim) {
                                return prim[1];
                              })));
                    var deferredTasks$2 = Config$AgdaModeVscode.getSemanticHighlighting(undefined) ? deferredTasks$1 : ({
                          hd: {
                            TAG: 4,
                            _0: /* Apply */1,
                            [Symbol.for("name")]: "Decoration"
                          },
                          tl: deferredTasks$1
                        });
                    TaskQueue$AgdaModeVscode.addToTheFront(queue, deferredTasks$2);
                    return true;
                  }));
          }
          break;
      case /* ViewEvent */2 :
          keepRunning = $$Promise.map(State$AgdaModeVscode.sendEventToView(state, task._0), (function (param) {
                  return true;
                }));
          break;
      case /* ViewRequest */3 :
          var callback = task._1;
          if (TaskQueue$AgdaModeVscode.View.isOccupied(queue)) {
            keepRunning = $$Promise.resolved(false);
          } else {
            $$Promise.map($$Promise.flatMap(State$AgdaModeVscode.sendRequestToView(state, task._0), (function (x) {
                        if (x !== undefined) {
                          TaskQueue$AgdaModeVscode.View.addToTheBack(queue, Curry._1(callback, x));
                          return TaskQueue$AgdaModeVscode.View.close(queue);
                        } else {
                          return $$Promise.resolved(undefined);
                        }
                      })), (function (param) {
                    return true;
                  }));
            keepRunning = $$Promise.resolved(true);
          }
          break;
      case /* Decoration */4 :
          var tasks$1 = Handle__Decoration$AgdaModeVscode.handle(task._0);
          TaskQueue$AgdaModeVscode.addToTheFront(queue, tasks$1);
          keepRunning = $$Promise.resolved(true);
          break;
      case /* Error */5 :
          var tasks$2 = Handle__Error$AgdaModeVscode.handle(task._0);
          TaskQueue$AgdaModeVscode.addToTheFront(queue, tasks$2);
          keepRunning = $$Promise.resolved(true);
          break;
      case /* Goal */6 :
          var tasks$3 = Handle__Goal$AgdaModeVscode.handle(task._0);
          TaskQueue$AgdaModeVscode.addToTheFront(queue, tasks$3);
          keepRunning = $$Promise.resolved(true);
          break;
      case /* WithState */7 :
          Curry._1(task._0, state);
          keepRunning = $$Promise.resolved(true);
          break;
      case /* WithStateP */8 :
          keepRunning = $$Promise.map($$Promise.map(Curry._1(task._0, state), (function (param) {
                      return TaskQueue$AgdaModeVscode.addToTheFront(queue, param);
                    })), (function (param) {
                  return true;
                }));
          break;
      case /* BenchStart */9 :
          console.time(task._0);
          keepRunning = $$Promise.resolved(true);
          break;
      case /* BenchEnd */10 :
          console.timeEnd(task._0);
          keepRunning = $$Promise.resolved(true);
          break;
      case /* Debug */11 :
          console.log("DEBUG " + task._0);
          keepRunning = $$Promise.resolved(true);
          break;
      
    }
  }
  return keepRunning;
}

function addToTheBackCritical(self, tasks) {
  TaskQueue$AgdaModeVscode.addToTheBack(self.critical, tasks);
  return TaskQueue$AgdaModeVscode.onEmptied(self.critical);
}

function addToTheBackBlocking(self, tasks) {
  TaskQueue$AgdaModeVscode.addToTheBack(self.blocking, tasks);
  return TaskQueue$AgdaModeVscode.onEmptied(self.blocking);
}

function dispatchCommand(self, command) {
  var nonBlocking = function (x) {
    if (typeof x === "number") {
      switch (x) {
        case /* NextGoal */8 :
        case /* PreviousGoal */9 :
        case /* Escape */15 :
            return true;
        default:
          return false;
      }
    } else {
      switch (x.TAG | 0) {
        case /* EventFromView */8 :
        case /* InputMethod */13 :
            return true;
        default:
          return false;
      }
    }
  };
  if (nonBlocking(command)) {
    return addToTheBackCritical(self, {
                hd: {
                  TAG: 0,
                  _0: command,
                  [Symbol.for("name")]: "DispatchCommand"
                },
                tl: /* [] */0
              });
  } else {
    return addToTheBackBlocking(self, {
                hd: {
                  TAG: 6,
                  _0: /* SaveCursor */3,
                  [Symbol.for("name")]: "Goal"
                },
                tl: {
                  hd: {
                    TAG: 0,
                    _0: command,
                    [Symbol.for("name")]: "DispatchCommand"
                  },
                  tl: {
                    hd: {
                      TAG: 6,
                      _0: /* RestoreCursor */4,
                      [Symbol.for("name")]: "Goal"
                    },
                    tl: /* [] */0
                  }
                }
              });
  }
}

function make(extentionPath, editor, removeFromRegistry, chan) {
  var state = State$AgdaModeVscode.make(extentionPath, chan, editor);
  var dispatcher_blocking = TaskQueue$AgdaModeVscode.make(function (param, param$1) {
        return executeTask(state, param, param$1);
      });
  var dispatcher_critical = TaskQueue$AgdaModeVscode.make(function (param, param$1) {
        return executeTask(state, param, param$1);
      });
  var dispatcher = {
    state: state,
    blocking: dispatcher_blocking,
    critical: dispatcher_critical
  };
  var subscribe = function (disposable) {
    state.subscriptions.push(disposable);
    
  };
  state.subscriptions.push(View__Controller$AgdaModeVscode.onEvent(state.view, (function ($$event) {
              dispatchCommand(dispatcher, {
                    TAG: 8,
                    _0: $$event,
                    [Symbol.for("name")]: "EventFromView"
                  });
              
            })));
  subscribe(Vscode.window.onDidChangeTextEditorSelection(function ($$event) {
            var input = EditorIM$AgdaModeVscode.Input.fromTextEditorSelectionChangeEvent($$event);
            $$Promise.flatMap($$Promise.map(EditorIM$AgdaModeVscode.run(state.editorIM, Caml_option.some(editor), input), Handle__InputMethod$AgdaModeVscode.handleEditorIMOutput), (function (param) {
                    return addToTheBackCritical(dispatcher, param);
                  }));
            
          }));
  subscribe(Vscode.workspace.onDidChangeTextDocument(function ($$event) {
            var input = EditorIM$AgdaModeVscode.Input.fromTextDocumentChangeEvent(editor, $$event);
            $$Promise.flatMap($$Promise.map(EditorIM$AgdaModeVscode.run(state.editorIM, Caml_option.some(editor), input), Handle__InputMethod$AgdaModeVscode.handleEditorIMOutput), (function (param) {
                    return addToTheBackCritical(dispatcher, param);
                  }));
            
          }));
  $$Promise.get(State$AgdaModeVscode.onRemoveFromRegistry(state), removeFromRegistry);
  var definitionProvider = function (fileName, point) {
    var currentFileName = Parser$AgdaModeVscode.filepath(state.editor.document.fileName);
    if (fileName === currentFileName) {
      return Decoration$AgdaModeVscode.lookupSrcLoc(state.decorations, point);
    }
    
  };
  var hoverProvider = function (fileName, point) {
    var currentFileName = Parser$AgdaModeVscode.filepath(state.editor.document.fileName);
    if (fileName !== currentFileName) {
      return ;
    }
    var range = new Vscode.Range(point, point);
    return Caml_option.some($$Promise.resolved([
                    [""],
                    range
                  ]));
  };
  var disposables = Editor$AgdaModeVscode.Provider.registerProvider(definitionProvider, hoverProvider);
  state.subscriptions = disposables.concat(state.subscriptions);
  var tokenTypes = Highlighting$AgdaModeVscode.Aspect.TokenType.enumurate;
  var tokenModifiers = Highlighting$AgdaModeVscode.Aspect.TokenModifier.enumurate;
  var documentSemanticTokensProvider = function (fileName, push) {
    var useSemanticHighlighting = Config$AgdaModeVscode.getSemanticHighlighting(undefined);
    console.log("useSemanticHighlighting");
    var $$document = editor.document;
    var currentFileName = Parser$AgdaModeVscode.filepath($$document.fileName);
    if (useSemanticHighlighting && fileName === currentFileName) {
      return Caml_option.some(Decoration$AgdaModeVscode.generateSemanticTokens(editor, state.decorations.highlightings, push));
    }
    
  };
  var disposables$1 = Editor$AgdaModeVscode.Provider.registerTestingProvider(documentSemanticTokensProvider, [
        tokenTypes,
        tokenModifiers
      ]);
  state.subscriptions = disposables$1.concat(state.subscriptions);
  return dispatcher;
}

function destroy(self) {
  return $$Promise.flatMap($$Promise.flatMap(TaskQueue$AgdaModeVscode.onEmptied(self.critical), (function (param) {
                    return TaskQueue$AgdaModeVscode.onEmptied(self.blocking);
                  })), (function (param) {
                return State$AgdaModeVscode.destroy(self.state);
              }));
}

function forceDestroy(self) {
  return $$Promise.flatMap($$Promise.flatMap(TaskQueue$AgdaModeVscode.forceDestroy(self.critical), (function (param) {
                    return TaskQueue$AgdaModeVscode.forceDestroy(self.blocking);
                  })), (function (param) {
                return State$AgdaModeVscode.destroy(self.state);
              }));
}

exports.sendAgdaRequest = sendAgdaRequest;
exports.executeTask = executeTask;
exports.addToTheBackCritical = addToTheBackCritical;
exports.addToTheBackBlocking = addToTheBackBlocking;
exports.dispatchCommand = dispatchCommand;
exports.make = make;
exports.destroy = destroy;
exports.forceDestroy = forceDestroy;
/* vscode Not a pure module */
