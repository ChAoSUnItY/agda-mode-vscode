// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function make(param) {
  return {
          queue: [],
          status: /* Idle */1,
          execute: undefined
        };
}

function setup(self, execute) {
  self.execute = execute;
  
}

function run(self) {
  while(true) {
    var match = self.status;
    if (!match) {
      return ;
    }
    var nextPackets = self.queue.shift();
    if (nextPackets === undefined) {
      return ;
    }
    self.status = /* Busy */0;
    var execute = self.execute;
    if (execute !== undefined) {
      if (!nextPackets.tag) {
        return $$Promise.get(Curry._1(execute, nextPackets[0]), (function (param) {
                      return run(self);
                    }));
      }
      Curry._1(nextPackets[0], undefined);
      continue ;
    }
    self.status = /* Idle */1;
    continue ;
  };
}

function pushToBackAndRun(self, xs) {
  var xs$1 = Belt_List.toArray(Belt_List.map(xs, (function (x) {
              return /* Wrapped */Caml_chrome_debugger.variant("Wrapped", 0, [x]);
            })));
  var match = $$Promise.pending(undefined);
  xs$1.push(/* Pending */Caml_chrome_debugger.variant("Pending", 1, [match[1]]));
  self.queue = xs$1.concat(self.queue);
  run(self);
  return match[0];
}

function pushToFrontAndRun(self, xs) {
  var xs$1 = Belt_List.toArray(Belt_List.map(xs, (function (x) {
              return /* Wrapped */Caml_chrome_debugger.variant("Wrapped", 0, [x]);
            })));
  var match = $$Promise.pending(undefined);
  xs$1.push(/* Pending */Caml_chrome_debugger.variant("Pending", 1, [match[1]]));
  self.queue = self.queue.concat(xs$1);
  run(self);
  return match[0];
}

exports.make = make;
exports.setup = setup;
exports.run = run;
exports.pushToBackAndRun = pushToBackAndRun;
exports.pushToFrontAndRun = pushToFrontAndRun;
/* Promise Not a pure module */
