// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Task$AgdaModeVscode = require("./Task.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var State$AgdaModeVscode = require("../State.bs.js");
var Decoration$AgdaModeVscode = require("../Decoration.bs.js");

function Impl(Editor) {
  var State = State$AgdaModeVscode.Impl(Editor);
  var Task = Task$AgdaModeVscode.Impl(Editor);
  var Decoration = Decoration$AgdaModeVscode.Impl(Editor);
  var handle = function (highlightings) {
    if (typeof highlightings === "number") {
      switch (highlightings) {
        case /* Clear */0 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* WithState */Caml_chrome_debugger.variant("WithState", 7, [(function (state) {
                              return Curry._1(Task.Decoration.removeAppliedDecorations, state.decorations);
                            })]),
                      /* [] */0
                    ]);
        case /* Apply */1 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* BenchStart */Caml_chrome_debugger.variant("BenchStart", 9, ["$$$ Decoration"]),
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* WithStateP */Caml_chrome_debugger.variant("WithStateP", 8, [(function (state) {
                                  return $$Promise.map(Curry._1(Task.Decoration.readTempFiles, state.decorations), (function (param) {
                                                Curry._2(Task.Decoration.applyHighlightings, state.decorations, state.editor);
                                                return /* [] */0;
                                              }));
                                })]),
                          /* :: */Caml_chrome_debugger.simpleVariant("::", [
                              /* BenchEnd */Caml_chrome_debugger.variant("BenchEnd", 10, ["$$$ Decoration"]),
                              /* [] */0
                            ])
                        ])
                    ]);
        case /* Refresh */2 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* BenchStart */Caml_chrome_debugger.variant("BenchStart", 9, ["$$$ Refreshing decorations"]),
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* WithState */Caml_chrome_debugger.variant("WithState", 7, [(function (state) {
                                  Curry._2(Task.Decoration.refresh, state.editor, state.decorations);
                                  return Belt_Array.forEach(state.goals, (function (goal) {
                                                return Curry._2(Task.Goal.refreshDecoration, goal, state.editor);
                                              }));
                                })]),
                          /* :: */Caml_chrome_debugger.simpleVariant("::", [
                              /* BenchEnd */Caml_chrome_debugger.variant("BenchEnd", 10, ["$$$ Refreshing decorations"]),
                              /* [] */0
                            ])
                        ])
                    ]);
        
      }
    } else {
      if (highlightings.tag) {
        var filepath = highlightings[0];
        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* WithState */Caml_chrome_debugger.variant("WithState", 7, [(function (state) {
                          return Curry._2(Task.Decoration.addIndirectly, state.decorations, filepath);
                        })]),
                  /* [] */0
                ]);
      }
      var highlightings$1 = highlightings[0];
      return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                /* WithState */Caml_chrome_debugger.variant("WithState", 7, [(function (state) {
                        return Curry._2(Task.Decoration.addDirectly, state.decorations, highlightings$1);
                      })]),
                /* [] */0
              ]);
    }
  };
  return {
          State: State,
          Task: Task,
          Decoration: Decoration,
          handle: handle
        };
}

exports.Impl = Impl;
/* Promise Not a pure module */
