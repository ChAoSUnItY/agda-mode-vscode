// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Vscode = require("vscode");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Task$AgdaModeVscode = require("./Task.bs.js");
var Parser$AgdaModeVscode = require("../Parser.bs.js");

function handle(x) {
  if (typeof x === "number") {
    return {
            hd: Task$AgdaModeVscode.display({
                  TAG: 1,
                  _0: "Compilation Done!",
                  [Symbol.for("name")]: "Success"
                }, /* Nothing */0),
            tl: /* [] */0
          };
  }
  switch (x.TAG | 0) {
    case /* Constraints */0 :
        var body = x._0;
        if (body !== undefined) {
          return {
                  hd: Task$AgdaModeVscode.displayEmacs(/* Outputs */0, {
                        TAG: 0,
                        _0: "Constraints",
                        [Symbol.for("name")]: "Plain"
                      }, body),
                  tl: /* [] */0
                };
        } else {
          return {
                  hd: Task$AgdaModeVscode.display({
                        TAG: 0,
                        _0: "No Constraints",
                        [Symbol.for("name")]: "Plain"
                      }, /* Nothing */0),
                  tl: /* [] */0
                };
        }
    case /* AllGoalsWarnings */1 :
        var body$1 = x._1;
        var header = x._0;
        if (body$1 === "nil") {
          return {
                  hd: Task$AgdaModeVscode.display({
                        TAG: 1,
                        _0: header,
                        [Symbol.for("name")]: "Success"
                      }, /* Nothing */0),
                  tl: /* [] */0
                };
        } else {
          return {
                  hd: Task$AgdaModeVscode.displayEmacs(/* AllGoalsWarnings */1, {
                        TAG: 0,
                        _0: header,
                        [Symbol.for("name")]: "Plain"
                      }, body$1),
                  tl: /* [] */0
                };
        }
    case /* Time */2 :
        return {
                hd: Task$AgdaModeVscode.displayEmacs(/* Text */5, {
                      TAG: 0,
                      _0: "Time",
                      [Symbol.for("name")]: "Plain"
                    }, x._0),
                tl: /* [] */0
              };
    case /* Error */3 :
        return {
                hd: Task$AgdaModeVscode.displayEmacs(/* Error */4, {
                      TAG: 3,
                      _0: "Error!",
                      [Symbol.for("name")]: "Error"
                    }, x._0),
                tl: /* [] */0
              };
    case /* Intro */4 :
        return {
                hd: Task$AgdaModeVscode.displayEmacs(/* Text */5, {
                      TAG: 0,
                      _0: "Intro",
                      [Symbol.for("name")]: "Plain"
                    }, x._0),
                tl: /* [] */0
              };
    case /* Auto */5 :
        return {
                hd: Task$AgdaModeVscode.displayEmacs(/* Text */5, {
                      TAG: 0,
                      _0: "Auto",
                      [Symbol.for("name")]: "Plain"
                    }, x._0),
                tl: /* [] */0
              };
    case /* ModuleContents */6 :
        return {
                hd: Task$AgdaModeVscode.displayEmacs(/* Text */5, {
                      TAG: 0,
                      _0: "Module Contents",
                      [Symbol.for("name")]: "Plain"
                    }, x._0),
                tl: /* [] */0
              };
    case /* SearchAbout */7 :
        return {
                hd: Task$AgdaModeVscode.displayEmacs(/* SearchAbout */3, {
                      TAG: 0,
                      _0: "Search About",
                      [Symbol.for("name")]: "Plain"
                    }, x._0),
                tl: /* [] */0
              };
    case /* WhyInScope */8 :
        return {
                hd: Task$AgdaModeVscode.displayEmacs(/* Text */5, {
                      TAG: 0,
                      _0: "Scope info",
                      [Symbol.for("name")]: "Plain"
                    }, x._0),
                tl: /* [] */0
              };
    case /* NormalForm */9 :
        return {
                hd: Task$AgdaModeVscode.displayEmacs(/* Text */5, {
                      TAG: 0,
                      _0: "Normal form",
                      [Symbol.for("name")]: "Plain"
                    }, x._0),
                tl: /* [] */0
              };
    case /* GoalType */10 :
        return {
                hd: Task$AgdaModeVscode.displayEmacs(/* GoalType */2, {
                      TAG: 0,
                      _0: "Goal and Context",
                      [Symbol.for("name")]: "Plain"
                    }, x._0),
                tl: /* [] */0
              };
    case /* CurrentGoal */11 :
        return {
                hd: Task$AgdaModeVscode.display({
                      TAG: 0,
                      _0: "Current goal",
                      [Symbol.for("name")]: "Plain"
                    }, {
                      TAG: 0,
                      _0: x._0,
                      [Symbol.for("name")]: "Plain"
                    }),
                tl: /* [] */0
              };
    case /* InferredType */12 :
        return {
                hd: Task$AgdaModeVscode.display({
                      TAG: 0,
                      _0: "Inferred type",
                      [Symbol.for("name")]: "Plain"
                    }, {
                      TAG: 0,
                      _0: x._0,
                      [Symbol.for("name")]: "Plain"
                    }),
                tl: /* [] */0
              };
    case /* Context */13 :
        return {
                hd: Task$AgdaModeVscode.displayEmacs(/* Outputs */0, {
                      TAG: 0,
                      _0: "Context",
                      [Symbol.for("name")]: "Plain"
                    }, x._0),
                tl: /* [] */0
              };
    case /* HelperFunction */14 :
        var payload = x._0;
        return {
                hd: {
                  TAG: 8,
                  _0: (function (param) {
                      return $$Promise.map(Vscode.env.clipboard.writeText(payload), (function (param) {
                                    return /* [] */0;
                                  }));
                    }),
                  [Symbol.for("name")]: "WithStateP"
                },
                tl: {
                  hd: Task$AgdaModeVscode.display({
                        TAG: 0,
                        _0: "Helper function (copied to clipboard)",
                        [Symbol.for("name")]: "Plain"
                      }, {
                        TAG: 0,
                        _0: payload,
                        [Symbol.for("name")]: "Plain"
                      }),
                  tl: /* [] */0
                }
              };
    case /* Version */15 :
        return {
                hd: Task$AgdaModeVscode.display({
                      TAG: 0,
                      _0: "Version",
                      [Symbol.for("name")]: "Plain"
                    }, {
                      TAG: 0,
                      _0: x._0,
                      [Symbol.for("name")]: "Plain"
                    }),
                tl: /* [] */0
              };
    
  }
}

var DisplayInfo = {
  handle: handle
};

function handle$1(response) {
  if (typeof response === "number") {
    if (response === /* ClearHighlighting */1) {
      return {
              hd: {
                TAG: 4,
                _0: /* Clear */0,
                [Symbol.for("name")]: "Decoration"
              },
              tl: /* [] */0
            };
    } else {
      return /* [] */0;
    }
  }
  switch (response.TAG | 0) {
    case /* HighlightingInfoDirect */0 :
        return {
                hd: {
                  TAG: 4,
                  _0: {
                    TAG: 0,
                    _0: response._1,
                    [Symbol.for("name")]: "AddViaPipe"
                  },
                  [Symbol.for("name")]: "Decoration"
                },
                tl: /* [] */0
              };
    case /* HighlightingInfoIndirect */1 :
        return {
                hd: {
                  TAG: 4,
                  _0: {
                    TAG: 1,
                    _0: response._0,
                    [Symbol.for("name")]: "AddViaFile"
                  },
                  [Symbol.for("name")]: "Decoration"
                },
                tl: /* [] */0
              };
    case /* Status */2 :
        return /* [] */0;
    case /* JumpToError */3 :
        var offset = response._1;
        var filepath = response._0;
        return {
                hd: {
                  TAG: 8,
                  _0: (function (state) {
                      var path = Parser$AgdaModeVscode.filepath(state.editor.document.fileName);
                      if (path === filepath) {
                        return $$Promise.resolved({
                                    hd: {
                                      TAG: 6,
                                      _0: {
                                        TAG: 2,
                                        _0: offset - 1 | 0,
                                        [Symbol.for("name")]: "SetCursor"
                                      },
                                      [Symbol.for("name")]: "Goal"
                                    },
                                    tl: /* [] */0
                                  });
                      } else {
                        return $$Promise.resolved(/* [] */0);
                      }
                    }),
                  [Symbol.for("name")]: "WithStateP"
                },
                tl: /* [] */0
              };
    case /* InteractionPoints */4 :
        return {
                hd: {
                  TAG: 9,
                  _0: "$$$ Instantiating goals",
                  [Symbol.for("name")]: "BenchStart"
                },
                tl: {
                  hd: {
                    TAG: 6,
                    _0: {
                      TAG: 0,
                      _0: response._0,
                      [Symbol.for("name")]: "Instantiate"
                    },
                    [Symbol.for("name")]: "Goal"
                  },
                  tl: {
                    hd: {
                      TAG: 10,
                      _0: "$$$ Instantiating goals",
                      [Symbol.for("name")]: "BenchEnd"
                    },
                    tl: /* [] */0
                  }
                }
              };
    case /* GiveAction */5 :
        var give = response._1;
        var index = response._0;
        return {
                hd: {
                  TAG: 8,
                  _0: (function (state) {
                      var found = Belt_Array.keep(state.goals, (function (goal) {
                              return goal.index === index;
                            }));
                      var goal = Belt_Array.get(found, 0);
                      if (goal === undefined) {
                        return $$Promise.resolved({
                                    hd: Task$AgdaModeVscode.display({
                                          TAG: 3,
                                          _0: "Error: Give failed",
                                          [Symbol.for("name")]: "Error"
                                        }, {
                                          TAG: 0,
                                          _0: "Cannot find goal #" + String(index),
                                          [Symbol.for("name")]: "Plain"
                                        }),
                                    tl: /* [] */0
                                  });
                      }
                      var tmp;
                      if (typeof give === "number") {
                        tmp = give !== 0 ? ({
                              hd: {
                                TAG: 6,
                                _0: {
                                  TAG: 4,
                                  _0: goal,
                                  [Symbol.for("name")]: "RemoveBoundaryAndDestroy"
                                },
                                [Symbol.for("name")]: "Goal"
                              },
                              tl: /* [] */0
                            }) : ({
                              hd: {
                                TAG: 6,
                                _0: {
                                  TAG: 1,
                                  _0: goal,
                                  _1: (function (content) {
                                      return "(" + (content + ")");
                                    }),
                                  [Symbol.for("name")]: "Modify"
                                },
                                [Symbol.for("name")]: "Goal"
                              },
                              tl: {
                                hd: {
                                  TAG: 6,
                                  _0: {
                                    TAG: 4,
                                    _0: goal,
                                    [Symbol.for("name")]: "RemoveBoundaryAndDestroy"
                                  },
                                  [Symbol.for("name")]: "Goal"
                                },
                                tl: /* [] */0
                              }
                            });
                      } else {
                        var content = give._0;
                        tmp = {
                          hd: {
                            TAG: 6,
                            _0: {
                              TAG: 1,
                              _0: goal,
                              _1: (function (param) {
                                  return content.replace(/\\n/g, "\n");
                                }),
                              [Symbol.for("name")]: "Modify"
                            },
                            [Symbol.for("name")]: "Goal"
                          },
                          tl: {
                            hd: {
                              TAG: 6,
                              _0: {
                                TAG: 4,
                                _0: goal,
                                [Symbol.for("name")]: "RemoveBoundaryAndDestroy"
                              },
                              [Symbol.for("name")]: "Goal"
                            },
                            tl: /* [] */0
                          }
                        };
                      }
                      return $$Promise.resolved(tmp);
                    }),
                  [Symbol.for("name")]: "WithStateP"
                },
                tl: /* [] */0
              };
    case /* MakeCase */6 :
        var lines = response._1;
        var makeCaseType = response._0;
        return {
                hd: {
                  TAG: 6,
                  _0: {
                    TAG: 7,
                    _0: (function (goal) {
                        if (makeCaseType) {
                          return {
                                  hd: {
                                    TAG: 6,
                                    _0: {
                                      TAG: 6,
                                      _0: goal,
                                      _1: lines,
                                      [Symbol.for("name")]: "ReplaceWithLambda"
                                    },
                                    [Symbol.for("name")]: "Goal"
                                  },
                                  tl: {
                                    hd: {
                                      TAG: 0,
                                      _0: /* Load */0,
                                      [Symbol.for("name")]: "DispatchCommand"
                                    },
                                    tl: /* [] */0
                                  }
                                };
                        } else {
                          return {
                                  hd: {
                                    TAG: 6,
                                    _0: {
                                      TAG: 5,
                                      _0: goal,
                                      _1: lines,
                                      [Symbol.for("name")]: "ReplaceWithLines"
                                    },
                                    [Symbol.for("name")]: "Goal"
                                  },
                                  tl: {
                                    hd: {
                                      TAG: 0,
                                      _0: /* Load */0,
                                      [Symbol.for("name")]: "DispatchCommand"
                                    },
                                    tl: /* [] */0
                                  }
                                };
                        }
                      }),
                    _1: {
                      hd: {
                        TAG: 5,
                        _0: /* OutOfGoal */0,
                        [Symbol.for("name")]: "Error"
                      },
                      tl: /* [] */0
                    },
                    [Symbol.for("name")]: "LocalOrGlobal"
                  },
                  [Symbol.for("name")]: "Goal"
                },
                tl: /* [] */0
              };
    case /* SolveAll */7 :
        var solutions = response._0;
        return {
                hd: {
                  TAG: 8,
                  _0: (function (state) {
                      var solveOne = function (param) {
                        var solution = param[1];
                        var index = param[0];
                        var goals = Belt_Array.keep(state.goals, (function (goal) {
                                return goal.index === index;
                              }));
                        var goal = Belt_Array.get(goals, 0);
                        if (goal !== undefined) {
                          return {
                                  hd: {
                                    TAG: 6,
                                    _0: {
                                      TAG: 1,
                                      _0: goal,
                                      _1: (function (param) {
                                          return solution;
                                        }),
                                      [Symbol.for("name")]: "Modify"
                                    },
                                    [Symbol.for("name")]: "Goal"
                                  },
                                  tl: {
                                    hd: {
                                      TAG: 1,
                                      _0: {
                                        TAG: 3,
                                        _0: goal,
                                        [Symbol.for("name")]: "Give"
                                      },
                                      [Symbol.for("name")]: "AgdaRequest"
                                    },
                                    tl: /* [] */0
                                  }
                                };
                        } else {
                          return /* [] */0;
                        }
                      };
                      var tasks = Belt_List.concatMany(Belt_Array.map(solutions, solveOne));
                      var size = solutions.length;
                      var after = size === 0 ? ({
                            hd: Task$AgdaModeVscode.display({
                                  TAG: 3,
                                  _0: "No solutions found",
                                  [Symbol.for("name")]: "Error"
                                }, /* Nothing */0),
                            tl: /* [] */0
                          }) : ({
                            hd: Task$AgdaModeVscode.display({
                                  TAG: 1,
                                  _0: String(size) + " goals solved",
                                  [Symbol.for("name")]: "Success"
                                }, /* Nothing */0),
                            tl: /* [] */0
                          });
                      return $$Promise.resolved(Belt_List.concat(tasks, after));
                    }),
                  [Symbol.for("name")]: "WithStateP"
                },
                tl: /* [] */0
              };
    case /* DisplayInfo */8 :
        return handle(response._0);
    case /* RunningInfo */9 :
        return {
                hd: Task$AgdaModeVscode.display({
                      TAG: 0,
                      _0: "Type-checking",
                      [Symbol.for("name")]: "Plain"
                    }, {
                      TAG: 0,
                      _0: response._1,
                      [Symbol.for("name")]: "Plain"
                    }),
                tl: /* [] */0
              };
    
  }
}

exports.DisplayInfo = DisplayInfo;
exports.handle = handle$1;
/* vscode Not a pure module */
