// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_splice_call = require("bs-platform/lib/js/caml_splice_call.js");
var Common$AgdaModeVscode = require("../../Common.bs.js");
var Component$AgdaModeVscode = require("../Component/Component.bs.js");
var Emacs__Parser$AgdaModeVscode = require("./Emacs__Parser.bs.js");

function partiteMetas(xs) {
  return Emacs__Parser$AgdaModeVscode.Dict.split(xs, "metas", (function (rawMetas) {
                var metas = Emacs__Parser$AgdaModeVscode.unindent(rawMetas);
                var indexOfHiddenMetas = Belt_Array.getIndexBy(metas, (function (s) {
                        return Belt_Option.isSome(Curry._1(Component$AgdaModeVscode.Output.parseOutputWithLocation, s));
                      }));
                return Emacs__Parser$AgdaModeVscode.Dict.partite(metas, (function (param) {
                              var i = param[1];
                              if (indexOfHiddenMetas !== undefined) {
                                if (i === indexOfHiddenMetas) {
                                  return "hiddenMetas";
                                } else if (i === 0) {
                                  return "interactionMetas";
                                } else {
                                  return ;
                                }
                              } else if (i === 0) {
                                return "interactionMetas";
                              } else {
                                return ;
                              }
                            }));
              }));
}

function partiteWarningsOrErrors(xs, key) {
  return Emacs__Parser$AgdaModeVscode.Dict.update(xs, key, (function (raw) {
                var partial_arg = /^\u2014{4}/;
                var hasDelimeter = Belt_Option.isSome(Belt_Option.flatMap(Belt_Array.get(raw, 0), (function (param) {
                            return Caml_option.null_to_opt(param.match(partial_arg));
                          })));
                var lines = hasDelimeter ? raw.slice(1) : raw;
                var markWarningStart = function (line) {
                  return Belt_Option.isSome(Curry._1(Common$AgdaModeVscode.Agda.$$Location.parse, line));
                };
                var glueBack = function (xs) {
                  var partial_arg = /at$/;
                  return Belt_Option.isSome(Belt_Option.flatMap(Belt_Array.get(xs, xs.length - 1 | 0), (function (param) {
                                    return Caml_option.null_to_opt(param.match(partial_arg));
                                  })));
                };
                return Belt_Array.map(Emacs__Parser$AgdaModeVscode.Array_.mergeWithNext(Emacs__Parser$AgdaModeVscode.Array_.partite(lines, markWarningStart), glueBack), (function (param) {
                              return param.join("\n");
                            }));
              }));
}

function parseError(raw) {
  var lines = raw.split("\n");
  return Belt_Option.mapWithDefault(Js_dict.get(partiteWarningsOrErrors(Emacs__Parser$AgdaModeVscode.Dict.partite(lines, (function (param) {
                            if (param[1] === 0) {
                              return "errors";
                            }
                            
                          })), "errors"), "errors"), [], (function (entries) {
                return Belt_Array.map(entries, (function (entry) {
                              return {
                                      TAG: 0,
                                      _0: "Error",
                                      _1: "error",
                                      _2: Component$AgdaModeVscode.$$Text.parse(entry),
                                      [Symbol.for("name")]: "Labeled"
                                    };
                            }));
              }));
}

function parseGoalType(raw) {
  var markGoal = function (param) {
    return Belt_Option.map(Caml_option.null_to_opt(param[0].match(/^Goal:/)), (function (param) {
                  return "goal";
                }));
  };
  var markHave = function (param) {
    return Belt_Option.map(Caml_option.null_to_opt(param[0].match(/^Have:/)), (function (param) {
                  return "have";
                }));
  };
  var markMetas = function (param) {
    return Belt_Option.map(Caml_option.null_to_opt(param[0].match(/\u2014{60}/g)), (function (param) {
                  return "metas";
                }));
  };
  var partiteGoalTypeContext = function (xs) {
    return Emacs__Parser$AgdaModeVscode.Dict.partite(xs, (function (line) {
                  var v = markGoal(line);
                  if (v !== undefined) {
                    return v;
                  }
                  var v$1 = markHave(line);
                  if (v$1 !== undefined) {
                    return v$1;
                  }
                  var v$2 = markMetas(line);
                  if (v$2 !== undefined) {
                    return v$2;
                  }
                  
                }));
  };
  var removeDelimeter = function (xs) {
    return Emacs__Parser$AgdaModeVscode.Dict.update(xs, "metas", (function (param) {
                  return param.slice(1);
                }));
  };
  var lines = raw.split("\n");
  var dictionary = partiteMetas(removeDelimeter(partiteGoalTypeContext(lines)));
  return Caml_splice_call.spliceObjApply([], "concat", [Belt_Array.map(Js_dict.entries(dictionary), (function (param) {
                      var lines = param[1];
                      switch (param[0]) {
                        case "goal" :
                            return Belt_Option.mapWithDefault(Component$AgdaModeVscode.Expr.parse(lines.join("\n").slice(5)), [], (function (expr) {
                                          return [{
                                                    TAG: 0,
                                                    _0: "Goal",
                                                    _1: "special",
                                                    _2: Component$AgdaModeVscode.Expr.toText(expr),
                                                    [Symbol.for("name")]: "Labeled"
                                                  }];
                                        }));
                        case "have" :
                            return Belt_Option.mapWithDefault(Component$AgdaModeVscode.Expr.parse(lines.join("\n").slice(5)), [], (function (expr) {
                                          return [{
                                                    TAG: 0,
                                                    _0: "Have",
                                                    _1: "special",
                                                    _2: Component$AgdaModeVscode.Expr.toText(expr),
                                                    [Symbol.for("name")]: "Labeled"
                                                  }];
                                        }));
                        case "hiddenMetas" :
                            return Belt_Array.map(Belt_Array.keepMap(Belt_Array.map(lines, Component$AgdaModeVscode.Output.parseOutputWithLocation), (function (x) {
                                              return x;
                                            })), (function (output) {
                                          return {
                                                  TAG: 1,
                                                  _0: Component$AgdaModeVscode.Output.toText(output),
                                                  [Symbol.for("name")]: "Unlabeled"
                                                };
                                        }));
                        case "interactionMetas" :
                            return Belt_Array.map(Belt_Array.keepMap(Belt_Array.map(lines, Component$AgdaModeVscode.Output.parseOutputWithoutLocation), (function (x) {
                                              return x;
                                            })), (function (output) {
                                          return {
                                                  TAG: 1,
                                                  _0: Component$AgdaModeVscode.Output.toText(output),
                                                  [Symbol.for("name")]: "Unlabeled"
                                                };
                                        }));
                        default:
                          return [];
                      }
                    }))]);
}

function parseAllGoalsWarnings(title, body) {
  var partiteAllGoalsWarnings = function (title, body) {
    var lines = body.split("\n");
    var hasMetas = Belt_Option.isSome(Caml_option.null_to_opt(title.match(/Goals/)));
    var hasWarnings = Belt_Option.isSome(Caml_option.null_to_opt(title.match(/Warnings/)));
    var hasErrors = Belt_Option.isSome(Caml_option.null_to_opt(title.match(/Errors/)));
    var markMetas = function (param) {
      if (hasMetas && param[1] === 0) {
        return "metas";
      }
      
    };
    var markWarnings = function (param) {
      if (!hasWarnings) {
        return ;
      }
      if (!hasMetas) {
        if (param[1] === 0) {
          return "warnings";
        } else {
          return ;
        }
      }
      var __x = param[0].slice(5, 13);
      return Belt_Option.map(Caml_option.null_to_opt(__x.match(/Warnings/)), (function (param) {
                    return "warnings";
                  }));
    };
    var markErrors = function (param) {
      if (!hasErrors) {
        return ;
      }
      if (!(hasMetas || hasWarnings)) {
        if (param[1] === 0) {
          return "errors";
        } else {
          return ;
        }
      }
      var __x = param[0].slice(5, 11);
      return Belt_Option.map(Caml_option.null_to_opt(__x.match(/Errors/)), (function (param) {
                    return "errors";
                  }));
    };
    return Emacs__Parser$AgdaModeVscode.Dict.partite(lines, (function (line) {
                  var value = markMetas(line);
                  if (value !== undefined) {
                    return value;
                  }
                  var value$1 = markWarnings(line);
                  if (value$1 !== undefined) {
                    return value$1;
                  }
                  var value$2 = markErrors(line);
                  if (value$2 !== undefined) {
                    return value$2;
                  }
                  
                }));
  };
  var dictionary = partiteWarningsOrErrors(partiteWarningsOrErrors(partiteMetas(partiteAllGoalsWarnings(title, body)), "warnings"), "errors");
  return Caml_splice_call.spliceObjApply([], "concat", [Belt_Array.map(Js_dict.entries(dictionary), (function (param) {
                      var lines = param[1];
                      switch (param[0]) {
                        case "errors" :
                            return Belt_Array.map(lines, (function (line) {
                                          return {
                                                  TAG: 0,
                                                  _0: "Error",
                                                  _1: "error",
                                                  _2: Component$AgdaModeVscode.$$Text.parse(line),
                                                  [Symbol.for("name")]: "Labeled"
                                                };
                                        }));
                        case "hiddenMetas" :
                            return Belt_Array.map(Belt_Array.keepMap(Belt_Array.map(lines, Component$AgdaModeVscode.Output.parseOutputWithLocation), (function (x) {
                                              return x;
                                            })), (function (output) {
                                          return {
                                                  TAG: 1,
                                                  _0: Component$AgdaModeVscode.Output.toText(output),
                                                  [Symbol.for("name")]: "Unlabeled"
                                                };
                                        }));
                        case "interactionMetas" :
                            return Belt_Array.map(Belt_Array.keepMap(Belt_Array.map(lines, Component$AgdaModeVscode.Output.parseOutputWithoutLocation), (function (x) {
                                              return x;
                                            })), (function (output) {
                                          return {
                                                  TAG: 1,
                                                  _0: Component$AgdaModeVscode.Output.toText(output),
                                                  [Symbol.for("name")]: "Unlabeled"
                                                };
                                        }));
                        case "warnings" :
                            return Belt_Array.map(lines, (function (line) {
                                          return {
                                                  TAG: 0,
                                                  _0: "Warning",
                                                  _1: "warning",
                                                  _2: Component$AgdaModeVscode.$$Text.parse(line),
                                                  [Symbol.for("name")]: "Labeled"
                                                };
                                        }));
                        default:
                          return [];
                      }
                    }))]);
}

function parseOutputs(raw) {
  var lines = Emacs__Parser$AgdaModeVscode.unindent(raw.split("\n"));
  return Belt_Array.map(Belt_Array.keepMap(Belt_Array.map(lines, Component$AgdaModeVscode.Output.parse), (function (x) {
                    return x;
                  })), (function (output) {
                return {
                        TAG: 1,
                        _0: Component$AgdaModeVscode.Output.toText(output),
                        [Symbol.for("name")]: "Unlabeled"
                      };
              }));
}

function parseTextWithLocation(raw) {
  return [{
            TAG: 1,
            _0: Component$AgdaModeVscode.$$Text.parse(raw),
            [Symbol.for("name")]: "Unlabeled"
          }];
}

function parseSearchAbout(raw) {
  var lines = raw.split("\n");
  var outputs = Belt_Array.map(Belt_Array.keepMap(Belt_Array.map(Emacs__Parser$AgdaModeVscode.unindent(Belt_Array.map(lines.slice(1), (function (param) {
                          return param.slice(2);
                        }))), Component$AgdaModeVscode.Output.parse), (function (x) {
              return x;
            })), (function (output) {
          return {
                  TAG: 1,
                  _0: Component$AgdaModeVscode.Output.toText(output),
                  [Symbol.for("name")]: "Unlabeled"
                };
        }));
  var target = Belt_Option.map(Belt_Array.get(lines, 0), (function (param) {
          return param.slice(18);
        }));
  if (target !== undefined) {
    if (outputs.length === 0) {
      return [{
                TAG: 1,
                _0: Component$AgdaModeVscode.$$Text.parse("There are no definitions about " + target),
                [Symbol.for("name")]: "Unlabeled"
              }];
    } else {
      return Belt_Array.concatMany([
                  [{
                      TAG: 1,
                      _0: Component$AgdaModeVscode.$$Text.parse("Definitions about " + (target + ":")),
                      [Symbol.for("name")]: "Unlabeled"
                    }],
                  outputs
                ]);
    }
  } else {
    return [{
              TAG: 1,
              _0: Component$AgdaModeVscode.$$Text.parse("Don't know what to search about"),
              [Symbol.for("name")]: "Unlabeled"
            }];
  }
}

exports.partiteMetas = partiteMetas;
exports.partiteWarningsOrErrors = partiteWarningsOrErrors;
exports.parseError = parseError;
exports.parseGoalType = parseGoalType;
exports.parseAllGoalsWarnings = parseAllGoalsWarnings;
exports.parseOutputs = parseOutputs;
exports.parseTextWithLocation = parseTextWithLocation;
exports.parseSearchAbout = parseSearchAbout;
/* Common-AgdaModeVscode Not a pure module */
