// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Webapi__Dom__Element = require("bs-webapi/lib/js/src/Webapi/Dom/Webapi__Dom__Element.bs.js");

function Prompt(Props) {
  var inputMethodActivated = Props.inputMethodActivated;
  var prompt = Props.prompt;
  var onSubmit = Props.onSubmit;
  var onChange = Props.onChange;
  if (prompt === undefined) {
    return React.createElement(React.Fragment, undefined);
  }
  var body = prompt[0];
  var placeholder = Belt_Option.getWithDefault(prompt[1], "");
  var value = Belt_Option.getWithDefault(prompt[2], "");
  var onKeyDown = function ($$event) {
    var match = $$event.keyCode;
    var arrowKey;
    switch (match) {
      case 37 :
          arrowKey = /* BrowseLeft */2;
          break;
      case 38 :
          arrowKey = /* BrowseUp */0;
          break;
      case 39 :
          arrowKey = /* BrowseRight */3;
          break;
      case 40 :
          arrowKey = /* BrowseDown */1;
          break;
      default:
        arrowKey = undefined;
    }
    if (inputMethodActivated) {
      return Belt_Option.forEach(arrowKey, (function (action) {
                    Curry._1(onChange, action);
                    $$event.preventDefault();
                    
                  }));
    }
    
  };
  var onMouseUp = function ($$event) {
    if (!inputMethodActivated) {
      return ;
    }
    var start = $$event.target.selectionStart;
    var end_ = $$event.target.selectionEnd;
    return Curry._1(onChange, {
                TAG: 0,
                _0: [
                  start,
                  end_
                ],
                [Symbol.for("name")]: "Select"
              });
  };
  var onChange$1 = function ($$event) {
    var value = $$event.target.value;
    return Curry._1(onChange, {
                TAG: 1,
                _0: value,
                [Symbol.for("name")]: "Change"
              });
  };
  var onSubmit$1 = function (_event) {
    return Curry._1(onSubmit, value);
  };
  return React.createElement("div", {
              className: "agda-mode-prompt"
            }, React.createElement("form", {
                  onSubmit: onSubmit$1
                }, body !== undefined ? React.createElement("p", undefined, body) : React.createElement(React.Fragment, undefined), React.createElement("input", {
                      ref: (function (ref) {
                          setTimeout((function (param) {
                                  Belt_Option.forEach(Belt_Option.flatMap((ref == null) ? undefined : Caml_option.some(ref), Webapi__Dom__Element.asHtmlElement), (function (prim) {
                                          prim.focus();
                                          
                                        }));
                                  
                                }), 100);
                          
                        }),
                      placeholder: placeholder,
                      type: "text",
                      value: value,
                      onKeyDown: onKeyDown,
                      onChange: onChange$1,
                      onMouseUp: onMouseUp
                    })));
}

var make = Prompt;

exports.make = make;
/* react Not a pure module */
