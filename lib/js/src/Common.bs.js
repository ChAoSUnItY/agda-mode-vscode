// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/lib/js/src/Json_encode.bs.js");
var Util$AgdaModeVscode = require("./Util/Util.bs.js");
var Emacs__Parser$AgdaModeVscode = require("./View/Emacs/Emacs__Parser.bs.js");

var decode = Util$AgdaModeVscode.Decode.sum(function (x) {
      if (x === "Position") {
        return {
                TAG: 0,
                _0: (function (param) {
                    return Json_decode.map((function (param) {
                                  return {
                                          pos: param[0],
                                          line: param[1],
                                          col: param[2]
                                        };
                                }), (function (param) {
                                  return Json_decode.tuple3((function (param) {
                                                return Json_decode.optional(Json_decode.$$int, param);
                                              }), Json_decode.$$int, Json_decode.$$int, param);
                                }), param);
                  }),
                [Symbol.for("name")]: "Contents"
              };
      }
      throw {
            RE_EXN_ID: Json_decode.DecodeError,
            _1: "[Agda.Position] Unknown constructor: " + x,
            Error: new Error()
          };
    });

function encode(x) {
  return Json_encode.object_({
              hd: [
                "tag",
                "Position"
              ],
              tl: {
                hd: [
                  "contents",
                  Json_encode.tuple3((function (param) {
                          return Json_encode.nullable((function (prim) {
                                        return prim;
                                      }), param);
                        }), (function (prim) {
                          return prim;
                        }), (function (prim) {
                          return prim;
                        }), [
                        x.pos,
                        x.line,
                        x.col
                      ])
                ],
                tl: /* [] */0
              }
            });
}

var Position = {
  decode: decode,
  encode: encode
};

function fuse(a, b) {
  var start = Caml_obj.caml_greaterthan(a.start.pos, b.start.pos) ? b.start : a.start;
  var end_ = Caml_obj.caml_greaterthan(a.end_.pos, b.end_.pos) ? a.end_ : b.end_;
  return {
          start: start,
          end_: end_
        };
}

function toString(self) {
  if (self.start.line === self.end_.line) {
    return String(self.start.line) + ("," + (String(self.start.col) + ("-" + String(self.end_.col))));
  } else {
    return String(self.start.line) + ("," + (String(self.start.col) + ("-" + (String(self.end_.line) + ("," + String(self.end_.col))))));
  }
}

var decode$1 = Util$AgdaModeVscode.Decode.sum(function (x) {
      if (x === "Range") {
        return {
                TAG: 0,
                _0: (function (param) {
                    return Json_decode.map((function (param) {
                                  return {
                                          start: param[0],
                                          end_: param[1]
                                        };
                                }), (function (param) {
                                  return Json_decode.pair(decode, decode, param);
                                }), param);
                  }),
                [Symbol.for("name")]: "Contents"
              };
      }
      throw {
            RE_EXN_ID: Json_decode.DecodeError,
            _1: "[Agda.Range] Unknown constructor: " + x,
            Error: new Error()
          };
    });

function encode$1(x) {
  return Json_encode.object_({
              hd: [
                "tag",
                "Range"
              ],
              tl: {
                hd: [
                  "contents",
                  Json_encode.pair(encode, encode, [
                        x.start,
                        x.end_
                      ])
                ],
                tl: /* [] */0
              }
            });
}

var $$Range = {
  fuse: fuse,
  toString: toString,
  decode: decode$1,
  encode: encode$1
};

var partial_arg = /^(\S+)\:(?:(\d+)\,(\d+)\-(\d+)\,(\d+)|(\d+)\,(\d+)\-(\d+))$/;

function parse(param) {
  return Emacs__Parser$AgdaModeVscode.captures(partial_arg, (function (captured) {
                var xs = Belt_Array.get(captured, 1);
                var srcFile = Belt_Option.flatMap(xs, (function (x) {
                        return x;
                      }));
                var xs$1 = Belt_Array.get(captured, 6);
                var sameRow = Belt_Option.isSome(Belt_Option.flatMap(xs$1, (function (x) {
                            return x;
                          })));
                if (sameRow) {
                  var xs$2 = Belt_Array.get(captured, 6);
                  return Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.flatMap(xs$2, (function (x) {
                                        return x;
                                      })), Pervasives.int_of_string_opt), (function (row) {
                                var xs = Belt_Array.get(captured, 7);
                                return Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.flatMap(xs, (function (x) {
                                                      return x;
                                                    })), Pervasives.int_of_string_opt), (function (colStart) {
                                              var xs = Belt_Array.get(captured, 8);
                                              return Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.flatMap(xs, (function (x) {
                                                                    return x;
                                                                  })), Pervasives.int_of_string_opt), (function (colEnd) {
                                                            return {
                                                                    _0: srcFile,
                                                                    _1: [{
                                                                        start: {
                                                                          pos: undefined,
                                                                          line: row,
                                                                          col: colStart
                                                                        },
                                                                        end_: {
                                                                          pos: undefined,
                                                                          line: row,
                                                                          col: colEnd
                                                                        }
                                                                      }],
                                                                    [Symbol.for("name")]: "Location"
                                                                  };
                                                          }));
                                            }));
                              }));
                }
                var xs$3 = Belt_Array.get(captured, 2);
                return Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.flatMap(xs$3, (function (x) {
                                      return x;
                                    })), Pervasives.int_of_string_opt), (function (rowStart) {
                              var xs = Belt_Array.get(captured, 3);
                              return Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.flatMap(xs, (function (x) {
                                                    return x;
                                                  })), Pervasives.int_of_string_opt), (function (colStart) {
                                            var xs = Belt_Array.get(captured, 4);
                                            return Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.flatMap(xs, (function (x) {
                                                                  return x;
                                                                })), Pervasives.int_of_string_opt), (function (rowEnd) {
                                                          var xs = Belt_Array.get(captured, 5);
                                                          return Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.flatMap(xs, (function (x) {
                                                                                return x;
                                                                              })), Pervasives.int_of_string_opt), (function (colEnd) {
                                                                        return {
                                                                                _0: srcFile,
                                                                                _1: [{
                                                                                    start: {
                                                                                      pos: undefined,
                                                                                      line: rowStart,
                                                                                      col: colStart
                                                                                    },
                                                                                    end_: {
                                                                                      pos: undefined,
                                                                                      line: rowEnd,
                                                                                      col: colEnd
                                                                                    }
                                                                                  }],
                                                                                [Symbol.for("name")]: "Location"
                                                                              };
                                                                      }));
                                                        }));
                                          }));
                            }));
              }), param);
}

function fuse$1(a, b) {
  var mergeTouching = function (l, e, s, r) {
    return Belt_List.concat(Belt_List.concat(l, {
                    hd: {
                      start: e.start,
                      end_: s.end_
                    },
                    tl: /* [] */0
                  }), r);
  };
  var fuseSome = function (s1, r1, s2, r2) {
    var r1$prime = Util$AgdaModeVscode.List.dropWhile((function (x) {
            return Caml_obj.caml_lessequal(x.end_.pos, s2.end_.pos);
          }), r1);
    return helpFuse(r1$prime, {
                hd: fuse(s1, s2),
                tl: r2
              });
  };
  var outputLeftPrefix = function (s1, r1, s2, is2) {
    var match = Util$AgdaModeVscode.List.span((function (s) {
            return Caml_obj.caml_lessthan(s.end_.pos, s2.start.pos);
          }), r1);
    return Belt_List.concat(Belt_List.concat({
                    hd: s1,
                    tl: /* [] */0
                  }, match[0]), helpFuse(match[1], is2));
  };
  var helpFuse = function (a, b) {
    var match = Belt_List.reverse(a);
    var match$1 = Belt_List.reverse(b);
    if (!a) {
      return a;
    }
    if (!match) {
      if (b) {
        return Pervasives.failwith("something wrong with Location::fuse");
      } else {
        return b;
      }
    }
    if (!b) {
      if (b) {
        return Pervasives.failwith("something wrong with Location::fuse");
      } else {
        return b;
      }
    }
    if (!match$1) {
      return Pervasives.failwith("something wrong with Location::fuse");
    }
    var e2 = match$1.hd;
    var r2 = b.tl;
    var s2 = b.hd;
    var e1 = match.hd;
    var r1 = a.tl;
    var s1 = a.hd;
    if (Caml_obj.caml_lessthan(e1.end_.pos, s2.start.pos)) {
      return Belt_List.concat(a, b);
    } else if (Caml_obj.caml_lessthan(e2.end_.pos, s1.start.pos)) {
      return Belt_List.concat(b, a);
    } else if (e1.end_.pos === s2.start.pos) {
      return mergeTouching(match.tl, e1, s2, r2);
    } else if (e2.end_.pos === s1.start.pos) {
      return mergeTouching(match$1.tl, e2, s1, r1);
    } else if (Caml_obj.caml_lessthan(s1.end_.pos, s2.start.pos)) {
      return outputLeftPrefix(s1, r1, s2, b);
    } else if (Caml_obj.caml_lessthan(s2.end_.pos, s1.start.pos)) {
      return outputLeftPrefix(s2, r2, s1, a);
    } else if (Caml_obj.caml_lessthan(s1.end_.pos, s2.end_.pos)) {
      return fuseSome(s1, r1, s2, r2);
    } else {
      return fuseSome(s2, r2, s1, r1);
    }
  };
  if (a) {
    if (b) {
      return {
              _0: a._0,
              _1: Belt_List.toArray(helpFuse(Belt_List.fromArray(a._1), Belt_List.fromArray(b._1))),
              [Symbol.for("name")]: "Location"
            };
    } else {
      return a;
    }
  } else {
    return b;
  }
}

function toString$1(self) {
  if (!self) {
    return "";
  }
  var filepath = self._0;
  if (filepath !== undefined) {
    var xs = self._1;
    if (xs.length === 0) {
      return filepath;
    }
    var match = Belt_Array.get(xs, 0);
    var match$1 = Belt_Array.get(xs, xs.length - 1 | 0);
    return filepath + (":" + (
              match !== undefined && match$1 !== undefined ? toString({
                      start: match.start,
                      end_: match$1.end_
                    }) : ""
            ));
  }
  var xs$1 = self._1;
  var match$2 = Belt_Array.get(xs$1, 0);
  var match$3 = Belt_Array.get(xs$1, xs$1.length - 1 | 0);
  if (match$2 !== undefined && match$3 !== undefined) {
    return toString({
                start: match$2.start,
                end_: match$3.end_
              });
  } else {
    return "";
  }
}

var decode$2 = Util$AgdaModeVscode.Decode.sum(function (x) {
      switch (x) {
        case "Location" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (param) {
                                      return {
                                              _0: param[0],
                                              _1: param[1],
                                              [Symbol.for("name")]: "Location"
                                            };
                                    }), (function (param) {
                                      return Json_decode.pair((function (param) {
                                                    return Json_decode.optional(Json_decode.string, param);
                                                  }), (function (param) {
                                                    return Json_decode.array(decode$1, param);
                                                  }), param);
                                    }), param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "NoLocation" :
            return {
                    TAG: 1,
                    _0: /* NoLocation */0,
                    [Symbol.for("name")]: "TagOnly"
                  };
        default:
          throw {
                RE_EXN_ID: Json_decode.DecodeError,
                _1: "[Agda.Location] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

function encode$2(x) {
  if (x) {
    return Json_encode.object_({
                hd: [
                  "tag",
                  "Location"
                ],
                tl: {
                  hd: [
                    "contents",
                    Json_encode.pair((function (param) {
                            return Json_encode.nullable((function (prim) {
                                          return prim;
                                        }), param);
                          }), (function (param) {
                            return Json_encode.array(encode$1, param);
                          }), [
                          x._0,
                          x._1
                        ])
                  ],
                  tl: /* [] */0
                }
              });
  } else {
    return Json_encode.object_({
                hd: [
                  "tag",
                  "NoLocation"
                ],
                tl: /* [] */0
              });
  }
}

var $$Location = {
  parse: parse,
  fuse: fuse$1,
  Range$prime: undefined,
  BeltRange: undefined,
  $$Range: undefined,
  toString: toString$1,
  decode: decode$2,
  encode: encode$2
};

function make(indicesUTF16) {
  var indicesUTF8 = Belt_Array.mapWithIndex(indicesUTF16, (function (i, x) {
          return x - i | 0;
        }));
  var intervals = Belt_Array.mapWithIndex(indicesUTF8, (function (i, rightEndpoint) {
          var x = Belt_Array.get(indicesUTF8, i - 1 | 0);
          var leftEndpoint = x !== undefined ? x + 1 | 0 : 0;
          return [
                  leftEndpoint,
                  rightEndpoint
                ];
        }));
  var lastInterval = Belt_Option.mapWithDefault(Belt_Array.get(intervals, intervals.length - 1 | 0), 0, (function (param) {
          return param[1] + 1 | 0;
        }));
  return {
          intervals: intervals,
          lastInterval: lastInterval,
          cursor: 0
        };
}

function convert(self, index) {
  while(true) {
    var match = Belt_Array.get(self.intervals, self.cursor);
    if (match !== undefined) {
      if (index < match[0]) {
        self.cursor = 0;
        continue ;
      }
      if (index <= match[1]) {
        return index + self.cursor | 0;
      }
      self.cursor = self.cursor + 1 | 0;
      continue ;
    }
    if (index >= self.lastInterval) {
      return index + self.cursor | 0;
    }
    self.cursor = 0;
    continue ;
  };
}

function expose(self) {
  return [
          self.intervals,
          self.cursor
        ];
}

var Indices = {
  make: make,
  convert: convert,
  expose: expose
};

var characterWidth = (function (string) {return [...string].length});

function computeUTF16SurrogatePairIndices(text) {
  var surrogatePairs = [];
  var lengthInCodeUnits = text.length;
  var i = 0;
  while(i < lengthInCodeUnits) {
    var charCode = text.charCodeAt(i) | 0;
    var notFinal = (i + 1 | 0) < lengthInCodeUnits;
    if (charCode >= 55296 && charCode <= 56319 && notFinal) {
      var nextCharCode = text.charCodeAt(i + 1 | 0) | 0;
      if (nextCharCode >= 56320 && charCode <= 57343) {
        surrogatePairs.push(i);
      }
      i = i + 2 | 0;
    } else {
      i = i + 1 | 0;
    }
  };
  return surrogatePairs;
}

function computeCRLFIndices(text) {
  var regexp = /\r\n/g;
  var matchAll = (function (regexp, string) {
          let match;
          let result = [];
          while ((match = regexp.exec(string)) !== null) {
            result.push(match.index);
          }
          return result;
        });
  return matchAll(regexp, text);
}

function make$1(text) {
  return {
          utf16indices: make(computeUTF16SurrogatePairIndices(text)),
          eolIndices: make(computeCRLFIndices(text))
        };
}

function convert$1(self, offset) {
  var offset$1 = convert(self.utf16indices, offset);
  return convert(self.eolIndices, offset$1);
}

var OffsetConverter = {
  make: make$1,
  convert: convert$1,
  characterWidth: characterWidth,
  computeUTF16SurrogatePairIndices: computeUTF16SurrogatePairIndices,
  computeCRLFIndices: computeCRLFIndices
};

var Agda = {
  Position: Position,
  $$Range: $$Range,
  $$Location: $$Location,
  Indices: Indices,
  OffsetConverter: OffsetConverter
};

var decode$3 = Util$AgdaModeVscode.Decode.sum(function (x) {
      switch (x) {
        case "ToHole" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (index) {
                                      return {
                                              TAG: 1,
                                              _0: index,
                                              [Symbol.for("name")]: "ToHole"
                                            };
                                    }), Json_decode.$$int, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "ToLocation" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (range) {
                                      return {
                                              TAG: 0,
                                              _0: range,
                                              [Symbol.for("name")]: "ToLocation"
                                            };
                                    }), decode$2, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        default:
          throw {
                RE_EXN_ID: Json_decode.DecodeError,
                _1: "[View.Link] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

function encode$3(x) {
  if (x.TAG === /* ToLocation */0) {
    return Json_encode.object_({
                hd: [
                  "tag",
                  "ToLocation"
                ],
                tl: {
                  hd: [
                    "contents",
                    encode$2(x._0)
                  ],
                  tl: /* [] */0
                }
              });
  } else {
    return Json_encode.object_({
                hd: [
                  "tag",
                  "ToHole"
                ],
                tl: {
                  hd: [
                    "contents",
                    x._0
                  ],
                  tl: /* [] */0
                }
              });
  }
}

var Link = {
  decode: decode$3,
  encode: encode$3
};

function contains(interval, offset) {
  if (Caml_obj.caml_lessequal(interval[0], offset)) {
    return Caml_obj.caml_lessequal(offset, interval[1]);
  } else {
    return false;
  }
}

function decode$4(param) {
  return Json_decode.pair(Json_decode.$$int, Json_decode.$$int, param);
}

function encode$4(param) {
  return Json_encode.pair((function (prim) {
                return prim;
              }), (function (prim) {
                return prim;
              }), param);
}

var Interval = {
  contains: contains,
  decode: decode$4,
  encode: encode$4
};

var decode$5 = Util$AgdaModeVscode.Decode.sum(function (x) {
      switch (x) {
        case "ChooseSymbol" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function ($$char) {
                                      return {
                                              TAG: 1,
                                              _0: $$char,
                                              [Symbol.for("name")]: "ChooseSymbol"
                                            };
                                    }), Json_decode.string, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "InsertChar" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function ($$char) {
                                      return {
                                              TAG: 0,
                                              _0: $$char,
                                              [Symbol.for("name")]: "InsertChar"
                                            };
                                    }), Json_decode.string, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        default:
          throw {
                RE_EXN_ID: Json_decode.DecodeError,
                _1: "[EventFromView.InputMethod] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

function encode$5(x) {
  if (x.TAG === /* InsertChar */0) {
    return Json_encode.object_({
                hd: [
                  "tag",
                  "InsertChar"
                ],
                tl: {
                  hd: [
                    "contents",
                    x._0
                  ],
                  tl: /* [] */0
                }
              });
  } else {
    return Json_encode.object_({
                hd: [
                  "tag",
                  "ChooseSymbol"
                ],
                tl: {
                  hd: [
                    "contents",
                    x._0
                  ],
                  tl: /* [] */0
                }
              });
  }
}

var InputMethod = {
  decode: decode$5,
  encode: encode$5
};

var decode$6 = Util$AgdaModeVscode.Decode.sum(function (x) {
      switch (x) {
        case "BrowseDown" :
            return {
                    TAG: 1,
                    _0: /* BrowseDown */1,
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "BrowseLeft" :
            return {
                    TAG: 1,
                    _0: /* BrowseLeft */2,
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "BrowseRight" :
            return {
                    TAG: 1,
                    _0: /* BrowseRight */3,
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "BrowseUp" :
            return {
                    TAG: 1,
                    _0: /* BrowseUp */0,
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "Escape" :
            return {
                    TAG: 1,
                    _0: /* Escape */4,
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "KeyUpdate" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function ($$char) {
                                      return {
                                              TAG: 1,
                                              _0: $$char,
                                              [Symbol.for("name")]: "KeyUpdate"
                                            };
                                    }), Json_decode.string, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "MouseSelect" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (interval) {
                                      return {
                                              TAG: 0,
                                              _0: interval,
                                              [Symbol.for("name")]: "MouseSelect"
                                            };
                                    }), decode$4, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        default:
          throw {
                RE_EXN_ID: Json_decode.DecodeError,
                _1: "[EventFromView.Prompt] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

function encode$6(x) {
  if (typeof x !== "number") {
    if (x.TAG === /* MouseSelect */0) {
      return Json_encode.object_({
                  hd: [
                    "tag",
                    "MouseSelect"
                  ],
                  tl: {
                    hd: [
                      "contents",
                      Json_encode.pair((function (prim) {
                              return prim;
                            }), (function (prim) {
                              return prim;
                            }), x._0)
                    ],
                    tl: /* [] */0
                  }
                });
    } else {
      return Json_encode.object_({
                  hd: [
                    "tag",
                    "KeyUpdate"
                  ],
                  tl: {
                    hd: [
                      "contents",
                      x._0
                    ],
                    tl: /* [] */0
                  }
                });
    }
  }
  switch (x) {
    case /* BrowseUp */0 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "BrowseUp"
                    ],
                    tl: /* [] */0
                  });
    case /* BrowseDown */1 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "BrowseDown"
                    ],
                    tl: /* [] */0
                  });
    case /* BrowseLeft */2 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "BrowseLeft"
                    ],
                    tl: /* [] */0
                  });
    case /* BrowseRight */3 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "BrowseRight"
                    ],
                    tl: /* [] */0
                  });
    case /* Escape */4 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "Escape"
                    ],
                    tl: /* [] */0
                  });
    
  }
}

var PromptIMUpdate = {
  decode: decode$6,
  encode: encode$6
};

var decode$7 = Util$AgdaModeVscode.Decode.sum(function (x) {
      switch (x) {
        case "Destroyed" :
            return {
                    TAG: 1,
                    _0: /* Destroyed */1,
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "Initialized" :
            return {
                    TAG: 1,
                    _0: /* Initialized */0,
                    [Symbol.for("name")]: "TagOnly"
                  };
        case "InputMethod" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (action) {
                                      return {
                                              TAG: 0,
                                              _0: action,
                                              [Symbol.for("name")]: "InputMethod"
                                            };
                                    }), decode$5, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "JumpToTarget" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (link) {
                                      return {
                                              TAG: 2,
                                              _0: link,
                                              [Symbol.for("name")]: "JumpToTarget"
                                            };
                                    }), decode$3, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "MouseOut" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (link) {
                                      return {
                                              TAG: 4,
                                              _0: link,
                                              [Symbol.for("name")]: "MouseOut"
                                            };
                                    }), decode$3, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "MouseOver" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (link) {
                                      return {
                                              TAG: 3,
                                              _0: link,
                                              [Symbol.for("name")]: "MouseOver"
                                            };
                                    }), decode$3, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        case "PromptIMUpdate" :
            return {
                    TAG: 0,
                    _0: (function (param) {
                        return Json_decode.map((function (action) {
                                      return {
                                              TAG: 1,
                                              _0: action,
                                              [Symbol.for("name")]: "PromptIMUpdate"
                                            };
                                    }), decode$6, param);
                      }),
                    [Symbol.for("name")]: "Contents"
                  };
        default:
          throw {
                RE_EXN_ID: Json_decode.DecodeError,
                _1: "[Response.EventFromView] Unknown constructor: " + x,
                Error: new Error()
              };
      }
    });

function encode$7(x) {
  if (typeof x === "number") {
    if (x === /* Initialized */0) {
      return Json_encode.object_({
                  hd: [
                    "tag",
                    "Initialized"
                  ],
                  tl: /* [] */0
                });
    } else {
      return Json_encode.object_({
                  hd: [
                    "tag",
                    "Destroyed"
                  ],
                  tl: /* [] */0
                });
    }
  }
  switch (x.TAG | 0) {
    case /* InputMethod */0 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "InputMethod"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        encode$5(x._0)
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* PromptIMUpdate */1 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "PromptIMUpdate"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        encode$6(x._0)
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* JumpToTarget */2 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "JumpToTarget"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        encode$3(x._0)
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* MouseOver */3 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "MouseOver"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        encode$3(x._0)
                      ],
                      tl: /* [] */0
                    }
                  });
    case /* MouseOut */4 :
        return Json_encode.object_({
                    hd: [
                      "tag",
                      "MouseOut"
                    ],
                    tl: {
                      hd: [
                        "contents",
                        encode$3(x._0)
                      ],
                      tl: /* [] */0
                    }
                  });
    
  }
}

var EventFromView = {
  InputMethod: InputMethod,
  PromptIMUpdate: PromptIMUpdate,
  decode: decode$7,
  encode: encode$7
};

exports.Agda = Agda;
exports.Link = Link;
exports.Interval = Interval;
exports.EventFromView = EventFromView;
/* decode Not a pure module */
