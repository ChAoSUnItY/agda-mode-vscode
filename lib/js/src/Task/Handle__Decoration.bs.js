// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Util = require("util");
var Curry = require("bs-platform/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Task$AgdaModeVscode = require("./Task.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var State$AgdaModeVscode = require("../State.bs.js");
var Parser$AgdaModeVscode = require("../Parser.bs.js");
var Decoration$AgdaModeVscode = require("../Decoration.bs.js");
var Highlighting$AgdaModeVscode = require("../Highlighting.bs.js");

function Impl(Editor) {
  var State = State$AgdaModeVscode.Impl(Editor);
  var Task = Task$AgdaModeVscode.Impl(Editor);
  var Decoration = Decoration$AgdaModeVscode.Impl(Editor);
  var readFile = Util.promisify((function (prim, prim$1) {
          Fs.readFile(prim, prim$1);
          
        }));
  var readAndParse = function (filepath) {
    return $$Promise.map($$Promise.Js.toResult($$Promise.Js.fromBsPromise(readFile(filepath))), (function (content) {
                  if (content.tag) {
                    return [];
                  }
                  var expressions = Parser$AgdaModeVscode.SExpression.parse(content[0].toString());
                  Belt_Array.keepMap(expressions, (function (error) {
                          if (error.tag) {
                            return error[0];
                          }
                          
                        }));
                  return Belt_Array.concatMany(Belt_Array.keepMap(expressions, (function (param) {
                                    if (param.tag) {
                                      return ;
                                    }
                                    var xs = param[0];
                                    if (xs.tag) {
                                      return Highlighting$AgdaModeVscode.parseIndirectHighlightings(xs[0]);
                                    } else {
                                      return [];
                                    }
                                  })));
                }));
  };
  var handle = function (highlightings) {
    if (typeof highlightings === "number") {
      switch (highlightings) {
        case /* Apply */0 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* WithState */Caml_chrome_debugger.variant("WithState", 7, [(function (state) {
                              $$Promise.map($$Promise.allArray(Belt_Array.map(state.indirectHighlightingFileNames, readAndParse)), (function (highlightings) {
                                      var decorations = Belt_Array.concatMany(Belt_Array.map(Belt_Array.concatMany(highlightings), (function (highlighting) {
                                                  return Curry._2(Task.Decoration.decorateHighlighting, state.editor, highlighting);
                                                })));
                                      state.decorations = Belt_Array.concat(state.decorations, decorations);
                                      state.indirectHighlightingFileNames = [];
                                      return /* [] */0;
                                    }));
                              
                            })]),
                      /* [] */0
                    ]);
        case /* RemoveAll */1 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* WithState */Caml_chrome_debugger.variant("WithState", 7, [(function (state) {
                              Belt_Array.forEach(Belt_Array.map(state.decorations, (function (prim) {
                                          return prim[0];
                                        })), Editor.Decoration.destroy);
                              state.decorations = [];
                              
                            })]),
                      /* [] */0
                    ]);
        case /* Refresh */2 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* WithState */Caml_chrome_debugger.variant("WithState", 7, [(function (state) {
                              Belt_Array.forEach(state.decorations, (function (param) {
                                      return Curry._3(Editor.Decoration.decorate, state.editor, param[0], [param[1]]);
                                    }));
                              return Belt_Array.forEach(state.goals, (function (goal) {
                                            return Curry._2(Task.Goal.refreshDecoration, goal, state.editor);
                                          }));
                            })]),
                      /* [] */0
                    ]);
        
      }
    } else {
      if (highlightings.tag) {
        var filepath = highlightings[0];
        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* WithState */Caml_chrome_debugger.variant("WithState", 7, [(function (state) {
                          state.indirectHighlightingFileNames.push(filepath);
                          
                        })]),
                  /* [] */0
                ]);
      }
      var highlightings$1 = highlightings[0];
      return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                /* WithState */Caml_chrome_debugger.variant("WithState", 7, [(function (state) {
                        var decorations = Belt_Array.concatMany(Belt_Array.map(highlightings$1, (function (highlighting) {
                                    return Curry._2(Task.Decoration.decorateHighlighting, state.editor, highlighting);
                                  })));
                        state.decorations = Belt_Array.concat(state.decorations, decorations);
                        
                      })]),
                /* [] */0
              ]);
    }
  };
  return {
          State: State,
          Task: Task,
          Decoration: Decoration,
          readFile: readFile,
          readAndParse: readAndParse,
          handle: handle
        };
}

exports.Impl = Impl;
/* fs Not a pure module */
