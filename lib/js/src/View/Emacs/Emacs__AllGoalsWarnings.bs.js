// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var React = require("react");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Util$AgdaModeVscode = require("../../Util/Util.bs.js");
var Component$AgdaModeVscode = require("../Component/Component.bs.js");
var Emacs__Parser$AgdaModeVscode = require("./Emacs__Parser.bs.js");
var Emacs__Parser2$AgdaModeVscode = require("./Emacs__Parser2.bs.js");

function toString(self) {
  return "Metas " + (self.title + ("\n" + (Util$AgdaModeVscode.Pretty.array(Belt_Array.map(self.interactionMetas, Component$AgdaModeVscode.Output.toString)) + ("\n" + (Util$AgdaModeVscode.Pretty.array(Belt_Array.map(self.hiddenMetas, Component$AgdaModeVscode.Output.toString)) + ("\n" + (Util$AgdaModeVscode.Pretty.array(Belt_Array.map(self.warnings, Component$AgdaModeVscode.WarningError.toString)) + ("\n" + Util$AgdaModeVscode.Pretty.array(Belt_Array.map(self.errors, Component$AgdaModeVscode.WarningError.toString))))))))));
}

function parse(title, body) {
  var partiteAllGoalsWarnings = function (title, body) {
    var lines = body.split("\n");
    var hasMetas = Belt_Option.isSome(Caml_option.null_to_opt(title.match(/Goals/)));
    var hasWarnings = Belt_Option.isSome(Caml_option.null_to_opt(title.match(/Warnings/)));
    var hasErrors = Belt_Option.isSome(Caml_option.null_to_opt(title.match(/Errors/)));
    var markMetas = function (param) {
      if (hasMetas && param[1] === 0) {
        return "metas";
      }
      
    };
    var markWarnings = function (param) {
      if (!hasWarnings) {
        return ;
      }
      if (!hasMetas) {
        if (param[1] === 0) {
          return "warnings";
        } else {
          return ;
        }
      }
      var __x = param[0].slice(5, 13);
      return Belt_Option.map(Caml_option.null_to_opt(__x.match(/Warnings/)), (function (param) {
                    return "warnings";
                  }));
    };
    var markErrors = function (param) {
      if (!hasErrors) {
        return ;
      }
      if (!(hasMetas || hasWarnings)) {
        if (param[1] === 0) {
          return "errors";
        } else {
          return ;
        }
      }
      var __x = param[0].slice(5, 11);
      return Belt_Option.map(Caml_option.null_to_opt(__x.match(/Errors/)), (function (param) {
                    return "errors";
                  }));
    };
    return Emacs__Parser$AgdaModeVscode.Dict.partite(lines, (function (line) {
                  var value = markMetas(line);
                  if (value !== undefined) {
                    return value;
                  }
                  var value$1 = markWarnings(line);
                  if (value$1 !== undefined) {
                    return value$1;
                  }
                  var value$2 = markErrors(line);
                  if (value$2 !== undefined) {
                    return value$2;
                  }
                  
                }));
  };
  var dictionary = Emacs__Parser2$AgdaModeVscode.partiteWarningsOrErrors(Emacs__Parser2$AgdaModeVscode.partiteWarningsOrErrors(Emacs__Parser2$AgdaModeVscode.partiteMetas(partiteAllGoalsWarnings(title, body)), "warnings"), "errors");
  var interactionMetas = Belt_Option.mapWithDefault(Js_dict.get(dictionary, "interactionMetas"), [], (function (metas) {
          return Belt_Array.keepMap(Belt_Array.map(metas, Component$AgdaModeVscode.Output.parseOutputWithoutRange), (function (x) {
                        return x;
                      }));
        }));
  var hiddenMetas = Belt_Option.mapWithDefault(Js_dict.get(dictionary, "hiddenMetas"), [], (function (metas) {
          return Belt_Array.keepMap(Belt_Array.map(metas, Component$AgdaModeVscode.Output.parseOutputWithRange), (function (x) {
                        return x;
                      }));
        }));
  var warnings = Belt_Option.mapWithDefault(Js_dict.get(dictionary, "warnings"), [], (function (entries) {
          return Belt_Array.map(entries, Component$AgdaModeVscode.WarningError.parseWarning);
        }));
  var errors = Belt_Option.mapWithDefault(Js_dict.get(dictionary, "errors"), [], (function (entries) {
          return Belt_Array.map(entries, Component$AgdaModeVscode.WarningError.parseError);
        }));
  return {
          title: title,
          interactionMetas: interactionMetas,
          hiddenMetas: hiddenMetas,
          warnings: warnings,
          errors: errors
        };
}

function Emacs__AllGoalsWarnings(Props) {
  var header = Props.header;
  var body = Props.body;
  var match = parse(header, body);
  return React.createElement(React.Fragment, undefined, React.createElement("ul", undefined, Belt_Array.mapWithIndex(match.interactionMetas, (function (i, value) {
                        return React.createElement(Component$AgdaModeVscode.Output.make, {
                                    value: value,
                                    key: String(i)
                                  });
                      }))), React.createElement("ul", undefined, Belt_Array.mapWithIndex(match.hiddenMetas, (function (i, value) {
                        return React.createElement(Component$AgdaModeVscode.Output.make, {
                                    value: value,
                                    key: String(i)
                                  });
                      }))), React.createElement("ul", undefined, Belt_Array.mapWithIndex(match.warnings, (function (i, value) {
                        return React.createElement(Component$AgdaModeVscode.WarningError.make, {
                                    value: value,
                                    key: String(i)
                                  });
                      }))), React.createElement("ul", undefined, Belt_Array.mapWithIndex(match.errors, (function (i, value) {
                        return React.createElement(Component$AgdaModeVscode.WarningError.make, {
                                    value: value,
                                    key: String(i)
                                  });
                      }))));
}

var make = Emacs__AllGoalsWarnings;

exports.toString = toString;
exports.parse = parse;
exports.make = make;
/* react Not a pure module */
