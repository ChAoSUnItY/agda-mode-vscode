// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Task$AgdaModeVscode = require("./Task.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var InputMethod$AgdaModeVscode = require("../InputMethod/InputMethod.bs.js");

function Impl(Editor) {
  var Task = Task$AgdaModeVscode.Impl(Editor);
  var InputMethod = InputMethod$AgdaModeVscode.Impl(Editor);
  var handle = function ($$char) {
    if (typeof $$char === "number") {
      switch ($$char) {
        case /* Activate */0 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* WithState */Caml_chrome_debugger.variant("WithState", 6, [(function (state) {
                              if (state.inputMethod.activated) {
                                Curry._1(InputMethod.insertBackslash, state.editor);
                                Curry._1(InputMethod.deactivate, state.inputMethod);
                                return $$Promise.resolved(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                              /* ViewReq */Caml_chrome_debugger.variant("ViewReq", 2, [
                                                  /* InputMethod */Caml_chrome_debugger.variant("InputMethod", 1, [/* Deactivate */1]),
                                                  (function (param) {
                                                      return /* [] */0;
                                                    })
                                                ]),
                                              /* [] */0
                                            ]));
                              }
                              Curry._2(Editor.setContext, "agdaModeTyping", true);
                              state.inputMethod.activated = true;
                              var startingOffsets = Belt_Array.map(Curry._1(Editor.getCursorPositions, state.editor), Curry._1(Editor.offsetAtPoint, state.editor));
                              Curry._3(InputMethod.activate, state.inputMethod, state.editor, startingOffsets);
                              return $$Promise.resolved(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                            /* ViewReq */Caml_chrome_debugger.variant("ViewReq", 2, [
                                                /* InputMethod */Caml_chrome_debugger.variant("InputMethod", 1, [/* Activate */0]),
                                                (function (param) {
                                                    return /* [] */0;
                                                  })
                                              ]),
                                            /* [] */0
                                          ]));
                            })]),
                      /* [] */0
                    ]);
        case /* Deactivate */1 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* WithState */Caml_chrome_debugger.variant("WithState", 6, [(function (state) {
                              Curry._2(Editor.setContext, "agdaModeTyping", false);
                              state.inputMethod.activated = false;
                              Curry._1(InputMethod.deactivate, state.inputMethod);
                              return $$Promise.resolved(/* [] */0);
                            })]),
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* ViewReq */Caml_chrome_debugger.variant("ViewReq", 2, [
                              /* InputMethod */Caml_chrome_debugger.variant("InputMethod", 1, [/* Deactivate */1]),
                              (function (param) {
                                  return /* [] */0;
                                })
                            ]),
                          /* [] */0
                        ])
                    ]);
        case /* MoveUp */2 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* ViewReq */Caml_chrome_debugger.variant("ViewReq", 2, [
                          /* InputMethod */Caml_chrome_debugger.variant("InputMethod", 1, [/* MoveUp */2]),
                          (function (param) {
                              return /* [] */0;
                            })
                        ]),
                      /* [] */0
                    ]);
        case /* MoveRight */3 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* ViewReq */Caml_chrome_debugger.variant("ViewReq", 2, [
                          /* InputMethod */Caml_chrome_debugger.variant("InputMethod", 1, [/* MoveRight */3]),
                          (function (param) {
                              return /* [] */0;
                            })
                        ]),
                      /* [] */0
                    ]);
        case /* MoveDown */4 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* ViewReq */Caml_chrome_debugger.variant("ViewReq", 2, [
                          /* InputMethod */Caml_chrome_debugger.variant("InputMethod", 1, [/* MoveDown */4]),
                          (function (param) {
                              return /* [] */0;
                            })
                        ]),
                      /* [] */0
                    ]);
        case /* MoveLeft */5 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* ViewReq */Caml_chrome_debugger.variant("ViewReq", 2, [
                          /* InputMethod */Caml_chrome_debugger.variant("InputMethod", 1, [/* MoveLeft */5]),
                          (function (param) {
                              return /* [] */0;
                            })
                        ]),
                      /* [] */0
                    ]);
        
      }
    } else {
      switch ($$char.tag | 0) {
        case /* Update */0 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* ViewReq */Caml_chrome_debugger.variant("ViewReq", 2, [
                          /* InputMethod */Caml_chrome_debugger.variant("InputMethod", 1, [/* Update */Caml_chrome_debugger.simpleVariant("Update", [
                                  $$char[0],
                                  $$char[1]
                                ])]),
                          (function (param) {
                              return /* [] */0;
                            })
                        ]),
                      /* [] */0
                    ]);
        case /* InsertChar */1 :
            var $$char$1 = $$char[0];
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* WithState */Caml_chrome_debugger.variant("WithState", 6, [(function (state) {
                              Curry._2(InputMethod.insertChar, state.editor, $$char$1);
                              return $$Promise.resolved(/* [] */0);
                            })]),
                      /* [] */0
                    ]);
        case /* ChooseSymbol */2 :
            var symbol = $$char[0];
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* WithState */Caml_chrome_debugger.variant("WithState", 6, [(function (state) {
                              Curry._3(InputMethod.chooseSymbol, state.inputMethod, state.editor, symbol);
                              return $$Promise.resolved(/* [] */0);
                            })]),
                      /* [] */0
                    ]);
        
      }
    }
  };
  return {
          Task: Task,
          InputMethod: InputMethod,
          handle: handle
        };
}

exports.Impl = Impl;
/* Promise Not a pure module */
