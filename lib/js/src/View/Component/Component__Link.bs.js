// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Event$AgdaModeVscode = require("../../Util/Event.bs.js");

var emitter = Event$AgdaModeVscode.make(undefined);

var eventContext = React.createContext(emitter);

function makeProps(value, children, param) {
  return {
          value: value,
          children: children
        };
}

var make = eventContext.Provider;

var Provider = {
  makeProps: makeProps,
  make: make
};

function Component__Link(Props) {
  var targetOpt = Props.target;
  var jumpOpt = Props.jump;
  var hoverOpt = Props.hover;
  var classNameOpt = Props.className;
  var children = Props.children;
  var target = targetOpt !== undefined ? targetOpt : /* ToRange */Caml_chrome_debugger.variant("ToRange", 0, [/* NoRange */0]);
  var jump = jumpOpt !== undefined ? jumpOpt : false;
  var hover = hoverOpt !== undefined ? hoverOpt : false;
  var className = classNameOpt !== undefined ? classNameOpt : /* [] */0;
  var sanitizedTarget;
  if (target.tag) {
    sanitizedTarget = /* ToHole */Caml_chrome_debugger.variant("ToHole", 1, [target[0]]);
  } else {
    var range = target[0];
    sanitizedTarget = range && range[1].length !== 0 ? /* ToRange */Caml_chrome_debugger.variant("ToRange", 0, [range]) : undefined;
  }
  var link = React.useContext(eventContext);
  if (sanitizedTarget !== undefined) {
    return React.createElement("span", {
                className: $$String.concat(" ", /* :: */Caml_chrome_debugger.simpleVariant("::", [
                        "component-link",
                        className
                      ])),
                onClick: (function (param) {
                    if (jump) {
                      return Curry._1(link.emit, /* JumpToTarget */Caml_chrome_debugger.variant("JumpToTarget", 2, [sanitizedTarget]));
                    }
                    
                  }),
                onMouseOut: (function (param) {
                    if (hover) {
                      return Curry._1(link.emit, /* MouseOut */Caml_chrome_debugger.variant("MouseOut", 4, [sanitizedTarget]));
                    }
                    
                  }),
                onMouseOver: (function (param) {
                    if (hover) {
                      return Curry._1(link.emit, /* MouseOver */Caml_chrome_debugger.variant("MouseOver", 3, [sanitizedTarget]));
                    }
                    
                  })
              }, children);
  } else {
    return React.createElement("span", {
                className: $$String.concat(" ", /* :: */Caml_chrome_debugger.simpleVariant("::", [
                        "component-link",
                        className
                      ]))
              }, children);
  }
}

var make$1 = Component__Link;

exports.emitter = emitter;
exports.eventContext = eventContext;
exports.Provider = Provider;
exports.make = make$1;
/* emitter Not a pure module */
