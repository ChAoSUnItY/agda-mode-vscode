// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Path = require("path");
var Getos = require("getos");
var Js_dict = require("rescript/lib/js/js_dict.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.bs.js");
var Process = require("process");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Util$AgdaModeVscode = require("../Util/Util.bs.js");
var Config$AgdaModeVscode = require("../Config.bs.js");
var Source$LanguageServerMule = require("language-server-mule/lib/js/src/Source.bs.js");
var Source__GitHub$LanguageServerMule = require("language-server-mule/lib/js/src/Source/Source__GitHub.bs.js");
var Client__LSP__Binding$LanguageServerMule = require("language-server-mule/lib/js/src/Client/Client__LSP__Binding.bs.js");

function runAsPromise(param) {
  var match = $$Promise.pending(undefined);
  Getos(match[1]);
  return match[0];
}

var GetOs = {
  runAsPromise: runAsPromise
};

function determine(param) {
  var _others = Process.platform;
  switch (_others) {
    case "darwin" :
        return $$Promise.resolved(/* MacOS */1);
    case "linux" :
        return $$Promise.map(runAsPromise(undefined), (function (result) {
                      var match = result.dist;
                      if (match === "Ubuntu") {
                        return /* Ubuntu */2;
                      } else {
                        return /* Others */3;
                      }
                    }));
    case "win32" :
        return $$Promise.resolved(/* Windows */0);
    default:
      return $$Promise.resolved(/* Others */3);
  }
}

var Platform = {
  GetOs: GetOs,
  determine: determine
};

function chooseFromReleases(platform, releases) {
  var chooseRelease = function (releases) {
    var matched = Belt_Array.keep(releases, (function (release) {
            var x = release.tagName;
            var lower = Util$AgdaModeVscode.Version.compare(x, "v0.1.0.0");
            var upper = Util$AgdaModeVscode.Version.compare(x, "v0.2.0.0");
            if (lower === /* EQ */1 || lower === /* GT */2) {
              return upper === /* LT */0;
            } else {
              return false;
            }
          }));
    var compare = function (x, y) {
      var match = Util$AgdaModeVscode.Version.compare(x.tagName, y.tagName);
      switch (match) {
        case /* LT */0 :
            return 1;
        case /* EQ */1 :
            return 0;
        case /* GT */2 :
            return -1;
        
      }
    };
    var sorted = matched.sort(compare);
    return Belt_Array.get(sorted, 0);
  };
  var chooseAsset = function (release) {
    var expectedSuffix;
    switch (platform) {
      case /* Windows */0 :
          expectedSuffix = "windows.zip";
          break;
      case /* MacOS */1 :
          expectedSuffix = "macos.zip";
          break;
      case /* Ubuntu */2 :
          expectedSuffix = "ubuntu.zip";
          break;
      case /* Others */3 :
          expectedSuffix = undefined;
          break;
      
    }
    return Belt_Option.map(Belt_Option.flatMap(expectedSuffix, (function (suffix) {
                      var matched = Belt_Array.keep(release.assets, (function (asset) {
                              return asset.name.endsWith(suffix);
                            }));
                      return Belt_Array.get(matched, 0);
                    })), (function (asset) {
                  return {
                          release: release,
                          asset: asset,
                          srcUrl: asset.url,
                          fileName: release.tagName + "-" + Process.platform
                        };
                }));
  };
  return Belt_Option.flatMap(chooseRelease(releases), chooseAsset);
}

function recoverFromDownload(param) {
  var target = param[1];
  var path = param[0];
  var execPath = Path.join(path, "als");
  var assetPath = Path.join(path, "data");
  var env = Js_dict.fromArray([[
          "Agda_datadir",
          assetPath
        ]]);
  var options = Client__LSP__Binding$LanguageServerMule.ExecutableOptions.make(undefined, Caml_option.some(env), undefined, undefined, undefined);
  var _others = Process.platform;
  if (_others === "win32") {
    return $$Promise.resolved({
                TAG: 0,
                _0: [
                  execPath,
                  [],
                  options,
                  target
                ],
                [Symbol.for("name")]: "Ok"
              });
  } else {
    return $$Promise.mapOk(Source__GitHub$LanguageServerMule.chmodExecutable(execPath), (function (param) {
                  return [
                          execPath,
                          [],
                          options,
                          target
                        ];
                }));
  }
}

function probeLSP(globalStoragePath, onDownload) {
  var port = Config$AgdaModeVscode.Connection.getAgdaLanguageServerPort(undefined);
  return $$Promise.flatMap(determine(undefined), (function (platform) {
                return Source$LanguageServerMule.Module.searchUntilSuccess([
                            {
                              TAG: 2,
                              _0: port,
                              _1: "localhost",
                              [Symbol.for("name")]: "FromTCP"
                            },
                            {
                              TAG: 1,
                              _0: "als",
                              [Symbol.for("name")]: "FromCommand"
                            },
                            {
                              TAG: 3,
                              _0: {
                                username: "banacorn",
                                repository: "agda-language-server",
                                userAgent: "agda-mode-vscode",
                                globalStoragePath: globalStoragePath,
                                chooseFromReleases: (function (param) {
                                    return chooseFromReleases(platform, param);
                                  }),
                                onDownload: onDownload,
                                recoverFromDownload: recoverFromDownload,
                                cacheInvalidateExpirationSecs: 86400,
                                log: (function (prim) {
                                    console.log(prim);
                                    
                                  })
                              },
                              [Symbol.for("name")]: "FromGitHub"
                            }
                          ]);
              }));
}

function probeEmacs(param) {
  var storedPath = Config$AgdaModeVscode.Connection.getAgdaPath(undefined);
  var storedName = Config$AgdaModeVscode.Connection.getAgdaVersion(undefined);
  return Source$LanguageServerMule.Module.searchUntilSuccess([
              {
                TAG: 0,
                _0: storedPath,
                [Symbol.for("name")]: "FromFile"
              },
              {
                TAG: 1,
                _0: storedName,
                [Symbol.for("name")]: "FromCommand"
              }
            ]);
}

var Version;

exports.Version = Version;
exports.Platform = Platform;
exports.chooseFromReleases = chooseFromReleases;
exports.recoverFromDownload = recoverFromDownload;
exports.probeLSP = probeLSP;
exports.probeEmacs = probeEmacs;
/* path Not a pure module */
